<?xml version='1.0' encoding='UTF-8'?>
<pdfx xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://pdfx.cs.man.ac.uk/static/article-schema.xsd">
  <meta>
    <job>d14a67b2d55bb81c6295e2950cbd8305b485d681ac3f40c37bdaf65fec9b6554</job>
    <base_name>62g9</base_name>
    <doi>http://dx.doi.org/10.1145/225434.225444</doi>
    <warning>Original PDF was found to be an image-based/possible OCR document. Output quality may be degraded.</warning>
  </meta>
  <article>
    <front class="DoCO:FrontMatter">
      <title-group>
        <article-title class="DoCO:Title" id="1">Applying Design Methodology to Software Development</article-title>
      </title-group>
      <abstract class="DoCO:Abstract" id="2">Professional software development. and specifically the external design of interactive systems, suffers from a tension between the normative development models being prescribed and the actual design work being performed. This tension manifests itself in, e.g.. recurring problems with tluctuating requirements. I argue that this tension can be understood as the clash of two views on external design work: the engineering design and the creative design perspectives. To explain the tension and to lay a foundation for new ways to structure software development. I seek to apply critical insights and concepts from design methodology -the theoretical framework for creative design. The result is a development process in which external design is separated from internal design and construction. The external design work consists of conceptual, constitutive and consolidatory steps. The process shares some characteristics with participatory design, but the designer’s expertise is recognized and identified. KEYWORDS: design methodology. professional development, external design, creative design. 1. INTRODUCTION: TWO PERSPECTIVES ON DESIGN The motivation for this paper is my increasing awareness, from research and professional experience in usability-oriented software design, that something is wrong with the common view of what software development is and ought to be. My research group is focusing on usability-oriented systems development. Our goals are to improve professional practice in the direction of usability, and to contribute to the scientific body of knowledge by studying tools, techniques and methods in professional contexts using research methods from the social sciences.As a result ofour studies, I have been fortunate to interact with a large number of professional software developers and to closely observe software development processes. 1 have also worked as a usability-oriented software designer in two consultancies. Many times, I have retlected on the remarkably bad fit between how the process</abstract>
      <outsider class="DoCO:TextBox" type="sidenote" id="3">Permission pcrsonol are not right g&amp;n to pcrfnhion DIS 95</outsider>
      <region class="unknown" id="4">to m:tkc digitnlhrd topics of all or part of this malcrial for or classroon~ USC is grnnled without lix provided that the topics made or dislrhutcd Ihr prolit or commcrcinl advantage, lhc copy- notice, the lillc of lhc puhlicalion and its chic :Lppcar. and notice is that copyright is by p&amp;mission of lhc ACM, Ini. To copy olhcrwisc republish. lo post on scrvcrs or lo redislribulc Lo lists. rcquircs specific and/or fee. Ann Arhr MI USA “’ 1995 ACM O-89791-673-5/95/08.,$3.50</region>
      <region class="DoCO:FigureBox" id="Fx5">
        <image class="DoCO:Figure" src="62g9.page_001.image_01.png" thmb="62g9.page_001.image_01-thumb.png"/>
      </region>
      <region class="unknown" id="7">Joruts LBwgret1 Department of Computer and Information Science Linkijping University, 581 83 Linkping, Sweden Tel +46 13 281482 l Fax +46 13 142231 l Email <email id="6">jlo@?‘ida.liu.se</email></region>
      <region class="DoCO:TextChunk" id="8" confidence="possible">is described in normativeproccss models and methodologies, and how it is performed in practice. As this paper tries to show, I attribute the misfit to different views of the external design work, i.e., design of the behavior and appearance of the system, the services it offers its users and its place in the organization. Briefly, I will argue that the normative models are typically based on an engineering design perspective whereas external design in many respects is better described from a creative design perspective.</region>
      <region class="unknown" id="9">software</region>
      <region class="DoCO:TextChunk" id="10" confidence="possible">1 .l Overview Thepaperisstructuredin the following way:Istartbypainting a broad picture ofthe two perspectives of engineering design and creative design in order to highlight their differences. Section 2 argues that existing models of software development are based on the engineering design perspective, and introduces the research topic of design methodology which can be seen as descriptive and normative theoretical frameworks based on a creative design perspective. In section 3, I illustrate that software development in practice is better described in some respects as creative design. A conceivable conclusion of this observation is that it could be useful to apply design methodology theories to software development. In section 4. I draw on recent and central insights from design methodology to demonstrate how software development projects can be structured in a way that respects the creative nature of the external design work involved.</region>
      <region class="DoCO:TextChunk" id="11" confidence="possible">1.2 Engineering design and creative design The purpose of the following descriptions is to paint a rather broad and over-generalized picture and to highlight the differences. I will use the terms eqitweritzg desigtt and creative desigtl to refer to perspectives or views rather than narrow and well-defined methodologies. Clearly, the picture I present is a caricature of professional practice and normative theory. Nevertheless, I find it quite useful as a vehicle for understanding and, hopefully, improve practice. The relations between the perspectives and more precise models will be addressed below. Engineering design assumes that the “problem” to be solved is comprehensively and precisely described, prefer- ably in the form of a requirement specification. The mission of engineering design is to find a solution to the problem. The solution must satisfice the requirements and other constraints, such as cost or performance. Engineering design work is amenable to structured descriptions and seen as a chain of transformations from the abstract (requirements) to the con-</region>
      <outsider class="DoCO:TextBox" type="page_nr" id="12">87</outsider>
      <region class="DoCO:TableBox" id="Tx13">
        <content>
          <h1 class="table"> - --</h1>
          <table class="DoCO:Table" number="1" page="2">
            <thead class="table"/>
            <tbody>
              <tr class="table">
                <td class="table"></td>
                <td class="table"> Engineering design</td>
                <td class="table"> Creative design</td>
              </tr>
              <tr class="table">
                <td class="table"> process as a whole</td>
                <td class="table"> entirely convergent</td>
                <td class="table"> has divergent aspects</td>
              </tr>
              <tr class="table">
                <td class="table"> key question</td>
                <td class="table"> how: determining how to solve problem</td>
                <td class="table"> why: is this the right problem to solve?</td>
              </tr>
              <tr class="table">
                <td class="table"> stages in the solution</td>
                <td class="table"> sequential: one candidate solution is refined</td>
                <td class="table"> parallel: many alternatives are explored</td>
              </tr>
              <tr class="table">
                <td class="table"> nature of process</td>
                <td class="table"> analytical: can be described as structured</td>
                <td class="table"> creative: inherently unpredictable</td>
              </tr>
              <tr class="table">
                <td class="table"> purpose</td>
                <td class="table"> one satisficing solution</td>
                <td class="table"> explore possibilities before committing</td>
              </tr>
              <tr class="table">
                <td class="table"> ownership</td>
                <td class="table"> impersonal: designer is an objective instrument</td>
                <td class="table"> personal: the designer is “present” in the design; assumes responsibility for social action</td>
              </tr>
            </tbody>
          </table>
        </content>
        <region class="TableInfo" id="14" confidence="possible">-</region>
        <region class="TableInfo" id="15" confidence="possible">--</region>
        <region class="TableInfo" id="16" confidence="possible">Engineering design</region>
        <region class="TableInfo" id="17" confidence="possible">Creative design</region>
        <region class="TableInfo" id="18" confidence="possible">process as a whole entirely convergent</region>
        <region class="TableInfo" id="19" confidence="possible">has divergent aspects</region>
        <region class="TableInfo" id="20" confidence="possible">key question how: determining how to solve problem</region>
        <region class="TableInfo" id="21" confidence="possible">why: is this the right problem to solve?</region>
        <region class="TableInfo" id="22" confidence="possible">parallel: many alternatives are explored</region>
        <region class="TableInfo" id="23" confidence="possible">stages in the solution sequential: one candidate solution is refined</region>
        <region class="TableInfo" id="24" confidence="possible">nature of process analytical: can be described as structured</region>
        <region class="TableInfo" id="25" confidence="possible">creative: inherently unpredictable</region>
        <region class="TableInfo" id="26" confidence="possible">purpose one satisficing solution</region>
        <region class="TableInfo" id="27" confidence="possible">explore possibilities before committing</region>
        <region class="TableInfo" id="28" confidence="possible">ownership impersonal: designer is an objective instrument</region>
        <region class="TableInfo" id="29" confidence="possible">personal: the designer is “present” in the design; assumes responsibility for social action</region>
        <caption class="deo:Caption" id="30">Table 1: A summary</caption>
      </region>
      <region class="DoCO:TextChunk" id="31" confidence="possible">of generalized differences</region>
      <region class="DoCO:TextChunk" id="35">Crete (resulting artifact). Moreover, this structurability makes engineering design impersonal. In contrast, creative design is about understanding the problem as much as the resulting artifact. Creative design work is seen as a tight interplay between problem setting and problem solving. In this interplay, thedesign space is explored through the creation of many parallel ideas and concepts. The given assumptions regarding the problem are questioned on all levels. Cre.ative design work is inherently unpredictable. Hence, the designer plays a personal role in the process. <xref ref-type="table" rid="TI" id="32" class="deo:Reference">Table I</xref> summarizes my view of the differences between the two perspectives on design work, organized around a number of key dimensions. It must be pointed out that the differences are overgeneralized in the table; again, the purpose is to illustrate two idealized perspectives.<marker type="block"/> 2. THE TENSION BETWEEN MODELS AND PRACTICE In this section, I argue that normative models of software development in professional practice in general are based on an engineering perspective. My claim is that there is a tension between such models and the working practice. I give an overview of the research area of design methodology, which can be seen as the theory of creative design, as a foundation for the propos,ed perspective shift in subsequent sections.<marker type="block"/> 2.1 Models in professional software development In the large development companies that we have been in contact with, company-wide normative models for software development are the rule rather than the exception. These modelsare.typically basedonsoftwareengineeringapproaches; regarding design, they typically emphasize the following. l The separation of analysis and design. l Design as a way to fulfil the requirement specification. l Hierarchical decomposition of the design work. The following quote, taken from a highly influential text on software e.ngineering, is also illustrative: “The design process appears to be a process of adding formality a.sa design progresses with constant backtrack-</region>
      <region class="DoCO:FigureBox" id="Fx36">
        <image class="DoCO:Figure" src="62g9.page_002.image_02.png" thmb="62g9.page_002.image_02-thumb.png"/>
      </region>
      <region class="DoCO:TextChunk" id="37" confidence="possible">between the two perspectives.</region>
      <region class="DoCO:TextChunk" id="96">ing to correct earlier, less formal, designs. Thus, the designer starts with a very informal picture of the design and refines that by adding information and making the design more formal.” ( <xref ref-type="bibr" rid="R33" id="38" class="deo:Reference">Sommerville, 1989</xref>, p. 178). In short, professional software development models in general are based on an engineering design perspective. In one sense, this is perfectly appropriate given that they were intended to govern the intenul design, i.e., the construction of the software. There is no doubt that they contribute to the verifiability, maintainability and other properties that are crucial tothequalityoftheproductfromaconstructionall?oint of view. The problem arises when they are interpreted as models forexternaldesign, i.e., design ofthe external behavior and appearance of the product, the services it offers its users and its place in the organization. My claim is that there are tensions between the normative engineering design models and the actual work that is carried out in association with the external design. In section 3 below, I present a number of illustrations from various sources, highlighting the tensions. The remainder of the paper dis- cusses opportunities for applying a creative design perspective to the external design work and what the implications of such a perspective shift would be. But first, it will be necessary tointroduceatheoreticalframeworkofcreativedesignand the design disciplines: the field of research known as d&amp;n<marker type="block"/> 2.2 Design methodology Design methodology is an interdisciplinary topic, attracting researchers from miscellaneous design disciplines such as architecture, engineering and industrial design. Rough.ly, it was consolidated as a scientific topic between 1962 and 1982. This period is conventionally divided into three generations (the following account is largely based on <xref ref-type="bibr" rid="R11" id="41" class="deo:Reference">Cross, 1984; Lundequist, 1992</xref>). Thejirst generation was characterized by an engineering approach to design, in which the designer was pictured as an objective expert. Design work was described as an iterative problem-solving process with three broad phases: analysis, synthesis and evaluation. Design methods were described in a rationalistic manner; a famous example is Design Methods<marker type="page" number="3"/><marker type="column" number="1"/><marker type="block"/> by Jones (197011992) in which 35 methods are described and an input-output table is provided to aid the selection of method for a particular purpose. The second gerzeratiorz represented a reaction against the simplified view of the design process, and particularly the notion of unbiased information gathering and structuring. User participation in design, and the consequent shift of the designer’s role from expert to liberator of the users’ needs and requirements, was explored. The view of design problems as ill-defined and the intertwining of problem setting and problem solving were given theoretical formulations. Design was seen as an interplay of basic concepts and modifying factors. The thirdgeneration focused on the specific competence of the designer; design was seen as a distinctive kind ofthinking, as fundamental to man’s intellectual ability as, e.g., language. Philosophical and psychological concepts, such astacit knowledge, pre-structuring and abduction, were employed in order to approach an appropriate epistemology for design methodology. In design practice, and specifically in architecture, the remark has been made that due to the emerging ideology of post-modernism, the architect has moved out of the design process to concentrate strictly on form and expression. The question has been put whether this represents aesthetic libera- tion of the architect or merely an escape from reality (<xref ref-type="bibr" rid="R22" id="44" class="deo:Reference">Lund, 1990</xref>).<marker type="block"/>  <xref ref-type="bibr" rid="R23" id="46" class="deo:Reference">Lundequist (1992)</xref> summarizes the emerging topic of design methodology in four research themes: Normative attempts to formulate models for the design process and how it should be supported by tools and methods. Attempts to analyze what design problems consist of, how they should be solved and what makes them different from other types of problems. Descriptive attempts to document, analyze and report the nature of design work in practice. Philosophical reflections on design work and research, including the formulation of central concepts of design.<marker type="block"/> 2.3 Analogies with HCI To support the perspective shift that I will suggest below, it is interesting to compare the development of thedesign methodology field with the main directions in human-computer interaction (HCI) research, and specifically the parts of HCI that are oriented towards external design and the development of usable systems. The first generation of design methodology, characterized by engineering approaches to design, corresponds well with the great interest in usability engineering methodologies in the mid and late 80s. The focus in HCI at that time was on operational definitions of usability (see, e.g., Carroll and Rosson. 1985; <xref ref-type="bibr" rid="R31" id="48" class="deo:Reference">Shackel, 1986</xref>; <xref ref-type="bibr" rid="R34" id="49" class="deo:Reference">Whiteside et al., 1988</xref>, first part). Good et al. (1986. p. 241) summarize the objectives of usability engineering very distinctly: “Usability engineering is a process, grounded in classical engineering, which amounts to specifying, quantitatively and in advance, what characteristics and in what amounts the final product to be engineered is to have. The process is<marker type="column" number="2"/><marker type="block"/> followed by actually building the product, and demonstrat- ing that it does indeed have the planned-for characteristics. Engineering is not the process of building a perfect system with infinite resources. Rather, engineering is the process of economically building a working system that fulfills a need. Without measurable usability specifications, there is no way to determine the usability needs of a product, or to measure whether or not the finished product fulfills those needs. If we cannot measure usability, we cannot have a usability engineering.” In later years, the engineering approach to usability has been increasingly questioned in the HCIcommunity.An illustrative example is the discussion by <xref ref-type="bibr" rid="R35" id="52" class="deo:Reference">Whiteside and Wixon (1987)</xref> on the”dialectic nature” of the term usability engineering. They redefine usability as a purely subjective concept, determined by the extent to which software supports and enriches the ongoing experience of people who use it. This view clearly rules out all attempts to objectively quantify usability before building the system, and in fact the authors moved on to formulate an alternative development approach known as contextual design (see, e.g., <xref ref-type="bibr" rid="R34" id="53" class="deo:Reference">Whiteside et al., 1988</xref>, second part, or Wixon et al., 1990). Another aspect of the engineering approach that has been subjected to criticism is the tendency to assume that the use situations and needs can be known and specified before the system is built. Adler and Winograd (I 992) state that design for usability must include design for coping with novelty, design for improvisation and design for adaptation. Moreover, they strongly emphasize the need to position design for usability in relation to organizational contexts, work design and equipment design. <xref ref-type="bibr" rid="R1" id="54" class="deo:Reference">Adler and Winograd (1992)</xref> also criticize the oversimpli- tied view of the user as a psychological automaton without social context, which leads further on to another interesting trend in recent HCI: The move towards participatory design. In the last years, the HCI community has been embracing work on participatory design techniques originating in Scandinavian systems development research in the late 70s and early 80s (e.g., <xref ref-type="bibr" rid="R27" id="55" class="deo:Reference">Muller, 1992</xref>; <xref ref-type="bibr" rid="R21" id="56" class="deo:Reference">Kyng, 1994</xref>). The literature on the topic is growing rapidly and a special conference (PDC) has been held since 1990.<marker type="block"/> To conclude the analogy, it would appear that the part of HCI concerned with the development of usable systems has closely replicated the patterns of the first and second generation in design methodology.<marker type="block"/> 3. ILLUSTRATING THE TENSION BETWEEN MODELS AND PRACTICE This section contains a number of “vignettes” from different sources. Some are proper research data, gathered using scientific inquiry methods. Others aremy personal impressions and recollections. The purpose of the illustrations is not to provide an axiomatic basis for deductive conclusions, but rather to paint a picture of external design work as it appears in professional software development practice.<marker type="block"/> 3.1 The Delta project <xref ref-type="bibr" rid="R28" id="60" class="deo:Reference">The Delta project The Delta project was initiated in 1992</xref> as a collaboration between our research group and a large Swedish consultancy<marker type="page" number="4"/><marker type="column" number="1"/><marker type="block"/> in the sector of technical systems. Our main goals were to study the uptake and adaptation of usability-oriented methods in professional contexts, and to investigate the effects of collaboration between system developers and technical communicators. The officially approved development model of the consultancy tits the above characterization ofan engineering model. It comprises study and analysis phases, followed by top-down specification, design and implementation. The testing starts with modules and proceeds up to function tests of the joint system relative to the function specification. Our joint work started with the development of a method extension, comprising usability engineering techniques and procedures for the collaboration between system developers and technical communicators. To assessthe results, they were used in a.customer project in the consultnncy. We studied the project using participant-observation techniques. Data were collected in the form of field notes, project documents, design sketches and complementary interviews. <xref ref-type="bibr" rid="R6" id="64" class="deo:Reference">Carlshamre (1994)</xref> provides a thorough presentation of the project, the data and conclusions regarding the research goals mentioned above.<marker type="block"/> The reason for bringing the Delta project up here is that the dataprovide numerous examples ofexternal design work that was inconsistent with the“official”engineeringdesign model. The design group faced the task of clesigning one subsys- tem within a larger system, intended to support the maintenance of certain technical equipment. The specification that was give:n to the design group was brief and superficial. Consequentially, <xref ref-type="bibr" rid="R6" id="66" class="deo:Reference">Carlshamre (1994)</xref> characterizes the early stages of the design work as “figuring out what to build.” Studies of users and their work and discussions with theclient were interspersed with attempts at designing the domain objects and services of the system. This behavior is clearly inconsistent with the engineering design perspective demanding separation between specification and design. The intertwining of problem setting and problem solving characteristic of creative design, on the other hand, fits the data well. On numerous occasions, the designers found themselves generating multiple design alternatives 011 different levels of abstraction. This initially caused high-tempered and emo- tional debates, oriented towards determining the “best” alternative. <xref ref-type="bibr" rid="R6" id="67" class="deo:Reference">Carlshamre (1994)</xref> describes the discussions as characterized by guesswork and a strong sense of individual ownership of the respective design ideas. The solution to the dilemma was found when a member of the design team proposed that tough decisions should be postponed until the usability tests, where thedifferent alternativescould be tested. This resolvement is described as a relief in that no stakeholder would have to “surrender”. A reasonable interpretation of the data is that the designers, trained in the engineering tradition, sought engineering design “solutions” to what is really a creative design phenomenon (parallel approach, personal ownership). An approach grounded in a creative design pcr- spective would instead accept and thrive on the divergence of the design problems, encourage massively parallel design work and the generation of numerous alternatives in order to better understand the design problem at hand.<marker type="column" number="2"/><marker type="block"/> 3.2 A story from personal experience In the first half on 1994, I was employed as usability designer in a medium-sized consulting company. I was assigned to a large development project, involving some 25 system developers in two different cities. The system to be developed had been planned, specified and discussed with the customer for a year. A project plan had been prepared and it had been decided that the system would be strongly modularized. It would consist of a number of independent tools, working on a shared relational database. The project plan was extremely tight-everything would have to run exceptionally smoothly for us to meet the delivery deadline. As I started identifying the work 1 was supposed to be doing, I found out that the user interface development activities mentioned in the project plan were expected to exclu- sively comprise programming of the user interface to the different modules. Neither user or context studies nor design or usability testing were planned. High-level usability coordi- nation of the different modules was to be accomplished through the production of a project style guide. I was explicitly forbidden to access the intended users, for political reasons that I was unable to penetrate. On the other hand, I had accessto colleagues in the company who had spent many hours with the customers and the intended <email id="70">user:;</email>.<marker type="block"/> The interesting aspect of this project, for the purpose of the current paper, is what happened as I started designing the user interface to one of the modules. I produced a first concept in the form of sketches on paper and a simple storyboard illus- trating what I saw as core tasks. When I submitted it to the project manager (who had to underwrite all design decisions in the project, internal as well as external), he immcdiatcly approved of it and told me to start implementing it. To me, it was nothing but a first cut at articulating some design ideas and 1did not feel that1 was done. Instead of implementing the first concept, I produced three or four alternative designs, again using sketches and storyboards. At a meeting with the project manager and some of the other developers of the module, I presented the different concepts. The reactions were most interesting: It was obvious to me that they had been very focused on finding one adequate “solution to the design problem.” My first concept was origi- nally seen as the answer they expected me to provide; more- over, they were not experienced and knowledgeable enough in user interface design to be able to assess it critically. Once I presented fundamentally different alternatives without indi- cating my preferences, they realized that there were many possible “solutions”, and understood that the differences between the concepts reflected differences in ideas abo:Jt the users’ future work. A very lively and fruitful discussion followed, which resulted in (1)design being recognized by the project manager as an explorative activity, and (2) the articu- lation of a strategy for the product from the users’ perspective. A notable long-term effect in the project was that the developers who had participated in the meeting started communicat- ing about user-interface design by means of sketches. and storyboards instead of written specifications.<marker type="block"/> To summarize this experience, the simple examples of lcrea- tive design practice that I introduced were very well received<marker type="page" number="5"/><marker type="column" number="1"/><marker type="block"/> and understood. This caused the professional developers to reassess their own view of their work. My feeling was that I had provided something they wanted and needed.<marker type="block"/> 3.3 Other empirical studies of software development The research literature provides a few empirical studies of professional software development. On a broad level, four themes of relevance for my claim emerge from these studies. These themes are: models of the design process, early visions, the interweaving of problem setting and problem solving, and the role of the designer.<marker type="block"/> Rosson et al. (1988) describe professional software design as a three-stage process: information gathering, information processing and solution evaluation. Similarly, <xref ref-type="bibr" rid="R26" id="77" class="deo:Reference">Malhotra et al. (1980)</xref> describe software design as three interdependent processes: goal elaboration, design generation and design evaluation. Nielsen and Aboulafia (I 993) characterize the user interfacedesignprocessasoneofgraduallyevolvingcommit- ment, where intuition, imagination and unstructured analysis based in experience are the essential cognitive qualifications and the driving forces at design work. These descriptions are all consistent with similar empirical results in design methodology.<marker type="block"/> An important finding by Stolterman (1991) is that the first vision of the artifact to be designed “presents itself’ to the system developers very early in the project. The analysis of users and their work, which according to the engineering design methods is intended to be an objective problem specification without prejudice, is instead seen as a way to verify or modify the first vision. Harker (I 99 l)presents results indicat- ing the danger of “design drift”, by which she refers to the danger of losing the original understanding of the vision and goals if the process is prolonged or involves a large number of people. The “early vision” phenomenon has been long recognized in design methodology and given various theoretical formulations.<marker type="block"/> Numerous empirical studies (e.g.. <xref ref-type="bibr" rid="R16" id="80" class="deo:Reference">Hammond et al., 1983</xref>; Curtis et al., 1988; <xref ref-type="bibr" rid="R12" id="81" class="deo:Reference">Due and Jorgensen, 1991</xref>; Harker. 1991; <xref ref-type="bibr" rid="R2" id="82" class="deo:Reference">Bansler and Bgdker, 1993</xref>; Walz et al., 1993) point to the emerging nature of the requirements and the understanding of the problem to be addressed by the design work. The phenomenon is sometimes framed as problems with formally specifying ail requirements before designing the solution, and sometimes observed in the frequent iteration of prototypes and revisions. The design-methodological notion of problem setting interwoven with problem solving appears to cover all the data.<marker type="block"/>  <xref ref-type="bibr" rid="R13" id="84" class="deo:Reference">Frese and Hesse (1993)</xref> studied system developers’ percep- tion of user participation and found that the efficiency of the development process, the changeability of the product, the quality of the product, time efticiency, etc were all reduced in projects with high user participation. High user participation generated more change requests and the innovativeness of the projects were seen as lower by the developers. <xref ref-type="bibr" rid="R29" id="85" class="deo:Reference">Poltrock (1989)</xref> showed that one feasible strategy to facilitate innovation was<marker type="column" number="2"/><marker type="block"/> to acquire a “super designer with authority, knowledge about users’ needs, vision and talent”. I interpret the data as reflect- ing a need to consider the proper roles of the designer and the users in the development process. Again, design methodology can provide suitable starting points.<marker type="block"/> 4. APPLYING DESIGN METHODOLOGY TO SOFTWARE PROJECTS Based on the indications I have presented above, it seems that design methodology - the theoretical framework of creative design- may indeed provide useful insights also for software development, and specifically for external design. The research literature offers a few examples, most of which pre- senting design techniques that are applicable on the level of an individual designeror adesign team. Forexample. theconcept of Design Rationale (see HCI, 1991 for a survey) or, more generally, argumentative design can be seen as a reflection of creative design ideas about explorative and parallel design. <xref ref-type="bibr" rid="R32" id="89" class="deo:Reference">Smets et al. (1994)</xref> discuss how the use of form to express concepts in industrial design can be applied also to the design of visual user interfaces. The techniques discussed by <xref ref-type="bibr" rid="R3" id="90" class="deo:Reference">Bennett and Karat (1994)</xref> to facilitate design meetings emphasize, among other things, the development and maintenance of a group vision. <xref ref-type="bibr" rid="R17" id="91" class="deo:Reference">Hooper (1986)</xref> reflects on the design domain of user interfaces rather than specific techniques, comparing it to the domain of architecture.<marker type="block"/> In this paper, I want to address the high-level issue of what design methodology may teach us about the nature of design projects and how they can be organized and managed in a way that respects the nature of the work involved. One of the crucial insights from design methodology, and one that seems to hold equally true in software development, is that design problems and solutions cannot be separated. “First, recognise that the ‘right’ requirements are in princi- ple unknowable by users, customers, or designers at the start. Devise the design process, and the formal agreements between designers and customers and users, to be sensitive to what is learnt by any of the parties as thedesign evolves.” (<xref ref-type="bibr" rid="R19" id="93" class="deo:Reference">Jones, 1984</xref>, p. 213) Current work in design methodology is focusing on how design processes should be shaped to address this inherent problem. The notion of participatory design, which was heav- ily criticized at the end of the second generation on the grounds of disregarding the designer’s competence (see, e.g., <xref ref-type="bibr" rid="R4" id="94" class="deo:Reference">Broadbent, 1979</xref>). is being reconsidered in the new light of concepts such as “knowledge work” and “learning organiza- tions” in the post-industrial society (<xref ref-type="bibr" rid="R8" id="95" class="deo:Reference">Clipson and Kornbluh, 1993</xref>). Participatory design is seen as a natural expression of larger-scale organizational development in the customer organization. The customer no longer buys an object (a building, in the case of architecture) but pays for help to develop his enterprise. The misuse of designer competence is addressed by giving new theoretical formulations to the design process. The following section describes one such conceptualization of the design process; I then discuss the implications of applying design methodology theory to software development.</region>
      <region class="unknown" id="40">methodology.</region>
      <outsider class="DoCO:TextBox" type="page_nr" id="43">88</outsider>
      <region class="DoCO:FigureBox" id="Fx51">
        <image class="DoCO:Figure" src="62g9.page_003.image_03.png" thmb="62g9.page_003.image_03-thumb.png"/>
      </region>
      <outsider class="DoCO:TextBox" type="page_nr" id="62">89</outsider>
      <outsider class="DoCO:TextBox" type="footer" id="63">-</outsider>
      <region class="DoCO:FigureBox" id="Fx69">
        <image class="DoCO:Figure" src="62g9.page_004.image_04.png" thmb="62g9.page_004.image_04-thumb.png"/>
      </region>
      <outsider class="DoCO:TextBox" type="page_nr" id="74">90</outsider>
      <region class="DoCO:FigureBox" id="Fx87">
        <image class="DoCO:Figure" src="62g9.page_005.image_05.png" thmb="62g9.page_005.image_05-thumb.png"/>
      </region>
      <outsider class="DoCO:TextBox" type="page_nr" id="97">91</outsider>
      <region class="DoCO:TextChunk" id="99" confidence="possible"> <xref ref-type="fig" rid="F1" id="98" class="deo:Reference">Figure 1</xref>: The design process according to Lundequist and Ullmark. The designer (white) and the stakeholders (grey) staud in the middle of the three design steps. Note also that the designer is guided by his three ideal goals.</region>
      <region class="DoCO:TextChunk" id="125">4.1 A modern view of design from design methodology The design methodologists and architects <xref ref-type="bibr" rid="R24" id="100" class="deo:Reference">Lundequist and Ullmark (1993)</xref> have formulated a conceptualization of the design process (<xref ref-type="fig" rid="FI" id="101" class="deo:Reference">Figure I</xref>), intended to facilitate the understanding of what happens in design and how designers use different kinds of knowledge. It consists of three qualitative steps: conceptual, constitutive and consolidatory. The three steps are not sequential in time, but rather represent different activities that the designer moves between in a rhythm determined by the design situation and the designer’s individual characteristics. The design process as a whole is guided by three goals or rules, that are ideal in the sense that they are desirable but certainly not always fulfilled in practice. The goals are the following. l The designer’s picture of the design must be consistent and logical, containing no internal contradictions. l It must also cover all the relevant data at hand. l If more than one design is possible, the simplest and most elegant one must be chosen.<marker type="block"/> Theconcepruaf step is always guided by thedesigner’s vision, which is typically not very distinct: It is unclear in parts and structure which makes it very hard to communicate to other people. The way to clarify the vision is to compare it with a numberofknownstructures-whichLundequistandUllmark call formats -- in order to find one that corresponds adequately to the vision. The generation and test of formats is a very demanding task, since the number of possible formats is very large and the requirements in most cases are too complex to allow for systematic checking and analysis. Hence it is a task for the:designer, based on an understanding of the users’ needs and values. The designer searches for cases from his<marker type="column" number="2"/><marker type="block"/> experience which in some way - metaphorically or other- wise - resembles the vision at hand. The generation and test of formats is a physically tangible activity in whichexternalizationssuchasdrawingsandsimple models are used. Different functions are symbolized in a simple way and put into the structure of the chosen format. This yields a set of rules for the next step of the work, which continues until a solution has been found or a contradiction appears. To deal with emerging contradictions, the designer can either modify the original format or abandon it in favor of another one. In the conceptual step, the role of the users is primarily to help the designer get involved in the future use of the artifact. By sharing the same practice to a certain extent - through descriptions, explanations and demonstrations - different values and perspectives are articulated and confronted. As a result, thedifferent stakeholders modify theiroriginal visions. It is important to notice, however, that this social process does not automatically lead to finding an appropriate formal. On the contrary, the skill of the designer is crucial.<marker type="block"/> In the corzstitutive step, the design concept is confronted with typical situations which raises a number of questions about requirements and constraints. Some of these questions may have been known to the designer already in the conceptual step, but disregarded as being less important. Others appear as a result of increasing familiarity with the concept. As the new requirements and constraints emerge, the designer tries to modify or extend the original concept which means that the format becomes harder to distinguish. Hence, the design work loses its direction and the designer doe.5not know how to handle subsequent modifications and extensions. The timecomes when the designer finds it necessary to go back to the conceptual step to rethink the whole concept, but on a higher level of knowledge. This second attempt to find an appropriate format is typically much more efficient and<marker type="page" number="7"/><marker type="column" number="1"/><marker type="block"/> precise than the first, due to the previous identification of a number of central features that can be used to guide the search process. Theuserscanplayamoreactiverolein theconstitutivestep than in the conceptual, now that a design concept is available for analysis and discussion. Of course, there may still be difliculties if the medium used to present the concept is not communicatively adequate, if the available time forparticipa- tion is limited or if the participants are lacking in social skills.<marker type="block"/> Thecoruolidufovstepisconcerned with refining thesolution in terms of (1) simplicity and elegance, and (2) appropriate- ness for long-term use. The first purpose of the consolidatory step has to do with aesthetic judgments, and certainly also with economical. Minimizing theresources necessary forrealizing thedesign is an obvious goal in most practical settings. The second purpose, i.e., the refinement of the design in the direction of long-term use, is focused on generality and flexibility. These issues are typically addressed already when the format is chosen in the conceptual step. Most common formats are based on solutions which have proven useful over a longer period of time in more than one specific functional context. However, it is always necessary to examine and reconstruct the solution as a final consolidation step. Consolidation is a genuinely professional activity, and users who have been actively involved in the constitutive step sometimes feel sidestepped when the result of the consolidation is presented. In effect, “their” solution has been replaced by another one that seemsstrange and unfamiliar even though it is functionally acceptable.<marker type="block"/> 4.2 Implications for software development We have now seen that the external design of software is better described through the perspective of creative design than that of engineering design. We have also examined certain parts of the theory of creative design. In this section, I indicate what the implications are of applying creative design theory to the domain of external software design.<marker type="block"/> First, we must note that the design work in the design disciplines addressed by design methodology is separated from the construction of the designed artifact. The results of design may be prototypes, detailing the appearance and behavior of the final result, and specifications of requirements on the construction. The corresponding approach for software development is to separate external design from internal design and construction. This is also supported by Stolterman (1991), based on his empirical investigations of systems development and on a theoretically derived “ideal-oriented”design theory.<marker type="block"/> Secondly, participatory approaches to design appears to be the most promising way of addressing the inescapable intertwining ofproblem and solution. Lundequist and Ullmark’s theory provides an important refinement to “traditional” participatory design approaches, namely that theconstitutive step is the one where user participation is most crucial. The design concepts developed in the conceptual step serve as the common ground necessary for communication, provided that they are expressed in media that do not discriminate the users.<marker type="column" number="2"/><marker type="block"/> Scandinavian research into participatory design has convinc- ingly demonstrated the importance of equal-access media for prototyping (see, e.g., <xref ref-type="bibr" rid="R5" id="114" class="deo:Reference">Bodker and Grenbaek, 1989</xref>; Ehn and Kyng, 1991; <xref ref-type="bibr" rid="R25" id="115" class="deo:Reference">Madsen and Aiken, 1993</xref>).<marker type="block"/> Thirdly, the role of the designer as a professional, with expertise and judgment, is emphasized. This holds in particular for the conceptual and consolidatory steps. In the conceptual step, it takes a skilled designer to generate and test formats. The consolidatory step calls for aesthetic and eco- nomic judgment as well as experience in the long-term use effects of the situation at hand. Historically, the designer has been seen as everything from thesolitarygeniusoftrulycreativeandinventivedesign(“Our job is to give the client, on time and on cost, not what he wants, but what he never dreamed he wanted; and when he gets it, he recognizes it as something he wanted all the time.” Denys Lasdun, 1972, quoted in <xref ref-type="bibr" rid="R11" id="117" class="deo:Reference">Cross, 1992</xref>) to the subservient facilitator or emancipatory ideologist, perhaps characteristic for some of the second generation design methodology work in the 70s. The role outlined above appears to offer an appealing compromise. What, then, constitutes the expertise of the designer? <xref ref-type="bibr" rid="R11" id="118" class="deo:Reference">Cross (1992)</xref> points to the abilities to deal with ill-defined problems by oscillating between problem setting and problem solving; to use early conjectures as a way to explore and define the design situation; to use strong constraints as generators of early solution concepts; to think by visual externalization; to recognize intuitive reasoning. These abilities were deduced from asurvey of design methodology research and they do not appear incommensurable with our emerging view of external softwaredesignasacreativedesignprocess. <xref ref-type="bibr" rid="R10" id="119" class="deo:Reference">Cahill (1991)</xref> has made a similar argument in favor of a creative design perspec- tiveon softwaredevelopment anddescribes the topical knowledge necessary for the software designer. He or she must have a foundation of design expertise, on which three areas of technical skill is added: information systems development, organizational behavior and ergonomics. For the participatory design work in the constitutive step, <xref ref-type="bibr" rid="R8" id="120" class="deo:Reference">Clipson and Kornbluh (1993)</xref> characterizes the role of the designer as a co-learner and knowledge sharer, an enabler of learning, a resource person who uses his expertise to enhance the developing work and learning competencies of the stakeholders, a convener of appropriate resources.<marker type="block"/> Finally, we must assessthe view outlined above by consider- ing the differences between external software design and other design disciplines. The most crucial difference is, of course, the material. Unlike architecture and other design disciplines, it is technically possible to evolve a software prototype into a final product. This may also help reduce the alienation in the consolidatory step, as the “distance” between the design concept and the final product is shorter than in, say, architecture. However, the principled case in favor of separating design and construction appears quite strong on theoretical and empirical grounds. We must also recognize, in refer- ence to the alienation problem, that the knowledge employed by the designer to make judgments is still not available to the users even if the concept being judged is similar to a final product. Hence, I conclude that we should insist on the<marker type="page" number="8"/><marker type="column" number="1"/><marker type="block"/> separation between design and construction even though it is technically possible to dismiss it. Another difference is the temporal nature of the artifact. Interactive systems are designed to have a certain behavior over time, whereas houses typically are not. The approach taken by Cohi II (199 I) is to reduce the ditierence by casting the designer as an “information architect” who is responsible for discovering information structures that enhance the users’ intellectual capabilities. This is also consistent with recent trends in H,CI (e.g., Olsen, 1992) to shift the focus of development efforts from user tasks to the information (or, to be more precise. the:task domain objects) that the users need to access and manipulate in order to fulfil their goals.<marker type="block"/> 5. SUMhlAHY Software development informed by recent work in design methodology should aim at separating external design from internal design and construction. The externai design work can consist ofconceptual, constitutive and consolidatory steps where the clesigner’s expertise is emphasized in the conceptual and consolidatory steps, and the constitutive step has a</region>
      <region class="DoCO:FigureBox" id="Fx104">
        <image class="DoCO:Figure" src="62g9.page_006.image_06.png" thmb="62g9.page_006.image_06-thumb.png"/>
      </region>
      <outsider class="DoCO:TextBox" type="page_nr" id="107">92</outsider>
      <region class="DoCO:FigureBox" id="Fx113">
        <image class="DoCO:Figure" src="62g9.page_007.image_07.png" thmb="62g9.page_007.image_07-thumb.png"/>
      </region>
      <outsider class="DoCO:TextBox" type="page_nr" id="123">93</outsider>
    </front>
    <body class="DoCO:BodyMatter">
      <section class="DoCO:Bibliography">
        <h1 class="DoCO:SectionTitle" id="126" confidence="possible" page="8" column="1">REFERENCES</h1>
        <ref-list class="DoCO:BiblioGraphicReferenceList">
          <ref rid="R1" class="deo:BibliographicReference" id="127" confidence="possible" page="8" column="1">Adler, I?, \Yinograd, T. (1992). The usability challenge. In Adler, P.,Winograd, T. (eds.) Usability: Turning Technolo- gies into T~tols, pp. 3-14. New York: Oxford University Press.</ref>
          <ref rid="R2" class="deo:BibliographicReference" id="128" confidence="possible" page="8" column="1">Bansler, J., BBdker, K. (1993). A reappraisal of structured analysis: Design in an organizational context. ACM Truns. Irformar’ion Systems 1l(2): 165 193.</ref>
          <ref rid="R3" class="deo:BibliographicReference" id="129" confidence="possible" page="8" column="1">Bennett, J., Karat, J. (1994). Facilitating effective HCI design meetings. In Hutturtr Fuctors in Computing Sysfettzs(CHI ‘94 Proceedings), pp. I98-204. New York: ACM Press.</ref>
          <ref rid="R4" class="deo:BibliographicReference" id="130" confidence="possible" page="8" column="1">Broadbent, G. (1979). The development of design methods. Design Methods and Theories l3( 1):41-45. Reprinted in (Cross, 1984).</ref>
          <ref rid="R5" class="deo:BibliographicReference" id="131" confidence="possible" page="8" column="1">Bodker, S., Grenbaek, K. (1989). Cooperative prototyping experiments -Users and designers envision a dental case record system. Research report DAIMI PB-292, Computer Science IDepartment, Aarhus University, Denmark.</ref>
          <ref rid="R6" class="deo:BibliographicReference" id="132" confidence="possible" page="8" column="1">Carlshamre, P. (1994). Afield study in usability engineering: Bringing in the technical communicators. Research report LiTH-IDA-R-94-44. Dept. of Computer and Information Science, LinkBping University, Sweden.</ref>
          <ref rid="R7" class="deo:BibliographicReference" id="133" confidence="possible" page="8" column="1">Carroll, J., .Rosson, M. (1985). Usability specifications as a tool in iterative development. In Hartson, H. R. (ed.) Advances in Human-Cotnputer Intemction, pp. 1-28. Norwood, NJ: Ablex.</ref>
          <ref rid="R8" class="deo:BibliographicReference" id="134" confidence="possible" page="8" column="1">Clipson, C., Kornbluh, H. (1993). Designing and learning: Towards a redefinition of participatory workplace design. In Tdrnqvist, A., Ullmark, P. (eds.) Appropriate architecture: Workplace design in post-indusrriul society, pp. 35- 44. IACTH 1993: 1, Chalmers University of Technology, Sweden.</ref>
          <ref class="deo:BibliographicReference" id="136" confidence="possible" page="8" column="2">strong flavor ofparticipatory design. This has implications for how we view the designer’s role, as well as for the struc:ture and management of software development projects. A problem which remains to be addressed is how to deal with constructional aspects affecting the use of the final product. Response times. reliability, maintenance, etc., all</ref>
          <ref rid="R9" class="deo:BibliographicReference" id="137" confidence="possible" page="8" column="2">affect the users’ experience of the product (see Gould, 1988,</ref>
          <ref class="deo:BibliographicReference" id="138" confidence="possible" page="8" column="2">for a discussion). Yet they cannot be adequately addressed in the design work since they are determined by the final Icon- struction. A tentative answer is that the designer-much like the architect .- is responsible for coordinating the construction work in such a way that it satisfies the design vision to the greatest extent possible. ACKNOWLEDGMENTS I am deeply grateful to Peter Ullmark of the Royal Institute of Technology, ,Stockholm, for providing me with information on current issues in design methodology. My thanks also go to</ref>
          <ref class="deo:BibliographicReference" id="139" confidence="possible" page="8" column="2">my colleagues I% Carlshamre, Mikael Ericsson and Torbjiirn Ntislund and to the anonymous reviewers for their incisive comments on previous versions.</ref>
          <ref rid="R10" class="deo:BibliographicReference" id="140" confidence="possible" page="8" column="2">Cahill, A. (1991). Information architecture and the design process. In Karat, J. (ed.) Tuking Software Design Seriously, pp. !&gt;5-I 13. Boston: Academic Press.</ref>
          <ref rid="R11" class="deo:BibliographicReference" id="141" confidence="possible" page="8" column="2">Cross, N. ( 198,4). Developments in design medlodology. Chichester: John Wiley. Cross, N. (I 992). Design ability. Nordisk Arkirektutjbrskning 1992:4, pp. 19-25.</ref>
          <ref rid="R12" class="deo:BibliographicReference" id="142" confidence="possible" page="8" column="2">Due, B., Jorgensen, A. (1991). User interface designers in action. In Precedings of Human Jobs and Computer /tiler- faces Conf, pp. 274-282. University o1 T’ampere, Finland.</ref>
          <ref class="deo:BibliographicReference" id="143" confidence="possible" page="8" column="2">Ehn, I?, Kyng, M. (199 I). Cardboard computers: Mocking-it- up or hands-on the future. In Greenbaum, J., Kyng, M. (eds.) Design at Work: Coopemtive design of cornppidcter systems. Hillsdale, NJ: Lawrence Erlbaum.</ref>
          <ref rid="R13" class="deo:BibliographicReference" id="144" confidence="possible" page="8" column="2">Frese, M., Hesse, W. (1993). The work situation in software development - Results of an empirical study. Software Engineering Notes 18(3):65-72.</ref>
          <ref rid="R14" class="deo:BibliographicReference" id="145" confidence="possible" page="8" column="2">Good, M., Spine, T., Whiteside, J., George, P. (1986). User- derived impact analysis as a tool for usability engineering. In Human Fuctors in Computing Systems (CHI ‘86 Proceedings), pp. 24 I- 246. New York: ACM Press.</ref>
          <ref rid="R15" class="deo:BibliographicReference" id="146" confidence="possible" page="8" column="2">Gould, J. (1988). How to design usable systems. In Helander, M. (ed.) Handbook of Humun-Computer Interaction. pp. 757-789. Amsterdam: Elsevier.</ref>
          <ref rid="R16" class="deo:BibliographicReference" id="147" confidence="possible" page="8" column="2">Hammond, N., Jorgensen, A., MacLean. A., Barnard, P., Long, J. (1983). Design practice and interface usability: Evidence from interviews with designers. In Huttuzrz Fuc- tars in Computing Systems (CHI ‘83 Proceedings), pp. 40- 44. New York: ACM Press.</ref>
          <ref rid="R17" class="deo:BibliographicReference" id="149" confidence="possible" page="9" column="1">Harker, S. (199 I). Requirements specification and the role of prototyping in current practice. In Karat, J. (ed.) Takirlg Sofnvare Design Seriously, pp. 339-354. Boston: Academic Press. Hooper, K. (1986). Architectural design: An analogy. In Norman, D., Draper, S. (eds.) User-Centered System De-</ref>
          <ref rid="R18" class="deo:BibliographicReference" id="150" confidence="possible" page="9" column="1">sign, pp. 9-23. Hillsdale, NJ: Lawrence Erlbaum. Human-Computer Interaction (1991). Special issue on Design Rationale. Vol. 6, no. 3-4.</ref>
          <ref rid="R19" class="deo:BibliographicReference" id="151" confidence="possible" page="9" column="1">Jones, J. C. (1984). Continuous design and redesign. In Jones, J. C. Essays in Design. Chichester: John Wiley.</ref>
          <ref rid="R20" class="deo:BibliographicReference" id="152" confidence="possible" page="9" column="1">Jones, J. C. (1992). Design tnefhods. Second edition. New York: Van Nostrand Reinhold. First published in 1970.</ref>
          <ref rid="R21" class="deo:BibliographicReference" id="153" confidence="possible" page="9" column="1">Kyng, M. (1994). Scandinavian design: Users in product development. In Human Factors in Cotnpuring Systems (CHI ‘94 Proceedings), pp. 3-9. New York: ACM Press.</ref>
          <ref rid="R22" class="deo:BibliographicReference" id="154" confidence="possible" page="9" column="1">Lund, N.-O. (1990). Designprocessen - Metoder og teorier. [The design process -Methods and theories]. In Hur bru hus komtnertill: ArkitekturMuseetdlrsbok 1990. pp, 69-77. Stockholm, Sweden. In Danish.</ref>
          <ref rid="R23" class="deo:BibliographicReference" id="155" confidence="possible" page="9" column="1">Lundequist, J. (1992). Om designteorins uppkomst. [On the origins of Design Methodology]. Nordisk Arkirektur- forskning I992:4, pp. 7- 18. In Swedish.</ref>
          <ref rid="R24" class="deo:BibliographicReference" id="156" confidence="possible" page="9" column="1">Lundequist, J., Ullmark, P. (1993). Conceptual, constituent and consolidatory phases - New concepts for the design of industrial buildings. In Tijrnqvist, A.. Ullmark, l? (eds.) Appropriatearchirecrure: Workplacedesign inpost-indus- trial society, pp. 85-90. IACTH 1993: 1. Chalmers University of Technology, Sweden.</ref>
          <ref rid="R25" class="deo:BibliographicReference" id="157" confidence="possible" page="9" column="1">Madsen, K.,Aiken, P. (1993). Experiences using cooperative interactive storyboard prototyping. Cotnmunicutions of rhe ACM 36(4):57-64.</ref>
          <ref rid="R26" class="deo:BibliographicReference" id="158" confidence="possible" page="9" column="1">Malhotra, A., Thomas, J., Carroll, J., Miller, L. (1980). Cog- nitive processes in design. Int. J. Man-Muchine Studies 12:119-140.</ref>
          <ref rid="R27" class="deo:BibliographicReference" id="159" confidence="possible" page="9" column="1">Muller, M. (1992). Retrospective on a year of participatory design using the Pictive technique. In Hutnun Factors in Computing Systems (CHI ‘92 Proceedings), pp. 455-462. New York: ACM Press.</ref>
          <ref rid="R28" class="deo:BibliographicReference" id="160" confidence="possible" page="9" column="1">Nielsen, J.. Aboulafin, A. (I 993). Designing the user interfaces - The role of intuition and imagination (1992). In Human Factors in Cotnpuling Sysretns (INTERCHI ‘93 Adjunct Proceedings), pp. 209-2 IO. New York: ACM Press.</ref>
          <ref class="deo:BibliographicReference" id="162" confidence="possible" page="9" column="2">Olsen, D. (I 992). User interface architectures for an information age. In Monk, A., Diaper, D., Harrison, M. (eds.) People und Cotnpurers V/I, pp. 29-4 I. Cambridge: Cambridge University Press.</ref>
          <ref rid="R29" class="deo:BibliographicReference" id="163" confidence="possible" page="9" column="2">Poltrock, S. (1989). Innovation in user interfacedevelopment: Obstacles and opportunities. In Hutnun Fucrors in Cotn- puting Systems (CHI ‘89 Proceedings), pp. I9 I - 195. New York: ACM Press.</ref>
          <ref rid="R30" class="deo:BibliographicReference" id="164" confidence="possible" page="9" column="2">Rosson. M. B., Manss, S., Kellogg, W. (I 988). The designer as user: Building requirements fordesign tools from design practice. CottlttzNtticnliotzs ofthe ACM 3 l(1 I ): 1288- 1297.</ref>
          <ref rid="R31" class="deo:BibliographicReference" id="165" confidence="possible" page="9" column="2">Shackel, B. (1986). Ergonomics in design for usability. In Harrison, M.. Monk, A. (eds.) People and Computers: Designingfor Usability, pp. 44-64. Cambridge: Cambridge University Press.</ref>
          <ref rid="R32" class="deo:BibliographicReference" id="166" confidence="possible" page="9" column="2">Smets, G., Overbeeke, K., Gaver. W. (1994). Form-giving: Expressing the nonobvious. In Human Factors in Cotnput- ing Systetns (CHI ‘94 Proceedings). pp. 79-84. New York: ACM Press.</ref>
          <ref rid="R33" class="deo:BibliographicReference" id="167" confidence="possible" page="9" column="2">Sommerville, I. (1989). SofLvczre engineering. Wokingham. England: Addison-Wesley, Third edition.</ref>
          <ref class="deo:BibliographicReference" id="168" confidence="possible" page="9" column="2">Stolterman,E. (199l).Designarbetetsdoldarationalitet-En studie av metodik och praktik inom systemutveckling. [The hidden rationality of design work - A study in the methodology and practice of systems development]. Dis- sertationUMADP-RRIPCS 14.9l,UmedUniversity, Sweden. In Swedish.</ref>
          <ref class="deo:BibliographicReference" id="169" confidence="possible" page="9" column="2">Walz, D., Elam, J., Curtis, B. (I 993). Inside a software design team: Knowledge acquisition, sharing and integration. Conmtwticatiot~s of the ACM 36( 10):63-77.</ref>
          <ref rid="R34" class="deo:BibliographicReference" id="170" confidence="possible" page="9" column="2">Whiteside, J., Bennett, J., Holtzblatt, K. (1988). Usability engineering: Our experience and evolution. In Helander, M. (ed.) Handbook of Human-Computer lnterclction, pp. 79 I-8 17. Amsterdam: Elsevier.</ref>
          <ref rid="R35" class="deo:BibliographicReference" id="171" confidence="possible" page="9" column="2">Whiteside, J., Wixon, D. (1987). The dialectics of usability engineering. In Bullinger. H.-J., Shackel, B. (eds.) Hutnan- Computer Internetion - lntemct ‘87, pp. 17-20. Amsterdam: North-Holland.</ref>
          <ref class="deo:BibliographicReference" id="172" confidence="possible" page="9" column="2">Wixon, D., Holzblatt, K., Knox, S. (I 990). Contextual design: An emergent view of system design. In Hutnnn Factors in Cotnpuring Systems (CHI ‘90 Proceedings), pp. 329-336. New York: ACM Press.</ref>
        </ref-list>
        <region class="DoCO:FigureBox" id="Fx135">
          <image class="DoCO:Figure" src="62g9.page_008.image_08.png" thmb="62g9.page_008.image_08-thumb.png"/>
        </region>
        <outsider class="DoCO:TextBox" type="page_nr" id="148" page="8" column="2">94</outsider>
        <region class="DoCO:FigureBox" id="Fx161">
          <image class="DoCO:Figure" src="62g9.page_009.image_09.png" thmb="62g9.page_009.image_09-thumb.png"/>
        </region>
        <outsider class="DoCO:TextBox" type="page_nr" id="173" page="9" column="2">95</outsider>
      </section>
    </body>
  </article>
</pdfx>
