<?xml version='1.0' encoding='UTF-8'?>
<pdfx xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://pdfx.cs.man.ac.uk/static/article-schema.xsd">
  <meta>
    <job>4681edb79fefd8045b01c258d703adb77cf1d6d781bc9c8000fcef21c08918e8</job>
    <base_name>62q9</base_name>
    <doi>http://dx.doi.org/10.1007/978-1-4471-1550-2_6</doi>
  </meta>
  <article>
    <front class="DoCO:FrontMatter">
      <title-group>
        <article-title class="DoCO:Title" id="1">Software Dependency</article-title>
      </title-group>
      <outsider class="DoCO:TextBox" type="header" id="4">Chapter 3</outsider>
      <outsider class="DoCO:TextBox" type="header" id="5">Agile Development Slide Set to accompany</outsider>
    </front>
    <body class="DoCO:BodyMatter">
      <region class="DoCO:TextChunk" id="146" page="1" column="1">PD F -X C h a n ge ! W O N y bu to k ht lic m C tp :// ww w.g uth ca d. co <marker type="column" number="3"/><marker type="block"/> PD F -X C h a n ge ! W 9/25/2011 N O y bu to k ht lic m C tp :// ww w.g uth ca d. co<marker type="page" number="2"/><marker type="column" number="1"/><marker type="block"/> PD F -X C h a n ge ! W O N y bu to k ht lic m C tp :// ww w.g uth ca d. co<marker type="column" number="3"/><marker type="block"/> PD F -X C h a n ge ! W 9/25/2011 N O y bu to k ht lic m C tp :// ww w.g uth ca d. co<marker type="page" number="3"/><marker type="column" number="1"/><marker type="block"/> PD F -X C h a n ge ! W O N y bu to k ht lic m C tp :// ww w.g uth ca d. co<marker type="column" number="3"/><marker type="block"/> PD F -X C h a n ge ! W 9/25/2011 N O y bu to k ht lic m C tp :// ww w.g uth ca d. co<marker type="page" number="4"/><marker type="column" number="1"/><marker type="block"/> PD F -X C h a n ge ! W O N y bu to k ht lic m C tp :// ww w.g uth ca d. co<marker type="column" number="3"/><marker type="block"/> PD F -X C h a n ge ! W 9/25/2011 N O y bu to k ht lic m C tp :// ww w.g uth ca d. co<marker type="page" number="5"/><marker type="column" number="1"/><marker type="block"/> PD F -X C h a n ge ! W O N y bu to k ht lic m C tp :// ww w.g uth ca d. co<marker type="column" number="3"/><marker type="block"/> PD F -X C h a n ge ! W 9/25/2011 N O y bu to k ht lic m C tp :// ww w.g uth ca d. co<marker type="page" number="6"/><marker type="column" number="1"/><marker type="block"/> PD F -X C h a n ge ! W O N y bu to k ht lic m C tp :// ww w.g uth ca d. co<marker type="column" number="3"/><marker type="block"/> PD F -X C h a n ge ! W 9/25/2011 N O y bu to k ht lic m C tp :// ww w.g uth ca d. co<marker type="page" number="7"/><marker type="column" number="1"/><marker type="block"/> PD F -X C h a n ge ! W O N y bu to k ht lic m C tp :// ww w.g uth ca d. co<marker type="column" number="3"/><marker type="block"/> PD F -X C h a n ge ! W 9/25/2011 N O y bu to k ht lic m C tp :// ww w.g uth ca d. co<marker type="page" number="8"/><marker type="column" number="1"/><marker type="block"/> PD F -X C h a n ge ! W O N y bu to k ht lic m C tp :// ww w.g uth ca d. co<marker type="column" number="3"/><marker type="block"/> PD F -X C h a n ge ! W 9/25/2011 N O y bu to k ht lic m C tp :// ww w.g uth ca d. co<marker type="page" number="9"/><marker type="column" number="1"/><marker type="block"/> PD F -X C h a n ge ! W O N y bu to k ht lic m C tp :// ww w.g uth ca d. co<marker type="column" number="3"/><marker type="block"/> PD F -X C h a n ge ! W 9/25/2011 N O y bu to k ht lic m C tp :// ww w.g uth ca d. co<marker type="page" number="10"/><marker type="column" number="1"/><marker type="block"/> PD F -X C h a n ge ! W O N y bu to k ht lic m C tp :// ww w.g uth ca d. co<marker type="column" number="3"/><marker type="block"/> PD F -X C h a n ge ! W 9/25/2011 N O y bu to k ht lic m C tp :// ww w.g uth ca d. co<marker type="page" number="11"/><marker type="column" number="1"/><marker type="block"/> PD F -X C h a n ge ! W O N y bu to k ht lic m C tp :// ww w.g uth ca d. co<marker type="column" number="3"/><marker type="block"/> PD F -X C h a n ge ! W 9/25/2011 N O y bu to k ht lic m C tp :// ww w.g uth ca d. co<marker type="page" number="12"/><marker type="column" number="1"/><marker type="block"/> PD F -X C h a n ge ! W O N y bu to k ht lic m C tp :// ww w.g uth ca d. co<marker type="column" number="3"/><marker type="block"/> PD F -X C h a n ge ! W 9/25/2011 N O y bu to k ht lic m C tp :// ww w.g uth ca d. co<marker type="page" number="13"/><marker type="column" number="1"/><marker type="block"/> PD F -X C h a n ge ! W O N y bu to k ht lic m C tp :// ww w.g uth ca d. co<marker type="column" number="3"/><marker type="block"/> PD F -X C h a n ge ! W 9/25/2011 N O y bu to k ht lic m C tp :// ww w.g uth ca d. co<marker type="page" number="14"/><marker type="column" number="1"/><marker type="block"/> PD F -X C h a n ge ! W O N y bu to k ht lic m C tp :// ww w.g uth ca d. co<marker type="column" number="3"/><marker type="block"/> PD F -X C h a n ge ! W 9/25/2011 N O y bu to k ht lic m C tp :// ww w.g uth ca d. co<marker type="page" number="15"/><marker type="column" number="1"/><marker type="block"/> PD F -X C h a n ge ! W O N y bu to k ht lic m C tp :// ww w.g uth ca d. co<marker type="column" number="3"/><marker type="block"/> PD F -X C h a n ge ! W 9/25/2011 N O y bu to k ht lic m C tp :// ww w.g uth ca d. co<marker type="page" number="16"/><marker type="column" number="1"/><marker type="block"/> PD F -X C h a n ge ! W O N y bu to k ht lic m C tp :// ww w.g uth ca d. co<marker type="column" number="3"/><marker type="block"/> PD F -X C h a n ge ! W 9/25/2011 N O y bu to k ht lic m C tp :// ww w.g uth ca d. co<marker type="page" number="17"/><marker type="column" number="1"/><marker type="block"/> PD F -X C h a n ge ! W O N y bu to k ht lic m C tp :// ww w.g uth ca d. co<marker type="column" number="3"/><marker type="block"/> PD F -X C h a n ge ! W 9/25/2011 N O y bu to k ht lic m C tp :// ww w.g uth ca d. co<marker type="page" number="18"/><marker type="column" number="1"/><marker type="block"/> PD F -X C h a n ge ! W O N y bu to k ht lic m C tp :// ww w.g uth ca d. co<marker type="column" number="3"/><marker type="block"/> PD F -X C h a n ge ! W 9/25/2011 N O y bu to k ht lic m C tp :// ww w.g uth ca d. co<marker type="page" number="19"/><marker type="column" number="1"/><marker type="block"/> PD F -X C h a n ge ! W O N y bu to k ht lic m C tp :// ww w.g uth ca d. co<marker type="column" number="3"/><marker type="block"/> PD F -X C h a n ge ! W 9/25/2011 N O y bu to k ht lic m C tp :// ww w.g uth ca d. co<marker type="page" number="20"/><marker type="column" number="1"/><marker type="block"/> PD F -X C h a n ge ! W O N y bu to k ht lic m C tp :// ww w.g uth ca d. co<marker type="column" number="3"/><marker type="block"/> PD F -X C h a n ge ! W 9/25/2011 N O y bu to k ht lic m C tp :// ww w.g uth ca d. co<marker type="page" number="21"/><marker type="column" number="1"/><marker type="block"/> PD F -X C h a n ge ! W O N y bu to k ht lic m C tp :// ww w.g uth ca d. co<marker type="column" number="3"/><marker type="block"/> PD F -X C h a n ge ! W 9/25/2011 N O y bu to k ht lic m C tp :// ww w.g uth ca d. co</region>
      <outsider class="DoCO:TextBox" type="footer" id="6" page="1" column="3">Software Engineering: A Practitioner’s Approach, 7/e by Roger S. Pressman</outsider>
      <outsider class="DoCO:TextBox" type="footer" id="7" page="1" column="3">Slides copyright © 1996, 2001, 2005, 2009 by Roger S. Pressman</outsider>
      <outsider class="DoCO:TextBox" type="footer" id="8" page="1" column="3">For non-profit educational use only</outsider>
      <outsider class="DoCO:TextBox" type="footer" id="9" page="1" column="3">May be reproduced ONLY for student use at the university level when used in conjunction with Software Engineering: A Practitioner's Approach, 7/e. Any other reproduction or use is prohibited without the express written permission of the author. All copyright information MUST appear if these slides are posted on a website for student use.</outsider>
      <outsider class="DoCO:TextBox" type="footer" id="10" page="1" column="3">These slides are designed to accompany Software Engineering: A Practitioner’s Approach, 7/e (McGraw-Hill, 2009) Slides copyright 2009 by Roger Pressman.</outsider>
      <outsider class="DoCO:TextBox" type="page_nr" id="11" page="1" column="3">1</outsider>
      <outsider class="DoCO:TextBox" type="page_nr" id="12" page="1" column="3">1</outsider>
      <outsider class="DoCO:TextBox" type="footer" id="15" page="2" column="3">The Manifesto for Agile Software Development</outsider>
      <outsider class="DoCO:TextBox" type="footer" id="16" page="2" column="3">“We are uncovering better ways of developing software by doing it and helping others do it. Through this work we have come to value: •Individuals and interactions over processes and tools •Working software over comprehensive documentation •Customer collaboration over contract negotiation •Responding to change over following a plan That is, while there is value in the items on the right, we value the items on the left more.” Kent Beck et al</outsider>
      <outsider class="DoCO:TextBox" type="footer" id="17" page="2" column="3">These slides are designed to accompany Software Engineering: A Practitioner’s Approach, 7/e (McGraw-Hill, 2009) Slides copyright 2009 by Roger Pressman.</outsider>
      <outsider class="DoCO:TextBox" type="page_nr" id="18" page="2" column="3">2</outsider>
      <outsider class="DoCO:TextBox" type="page_nr" id="19" page="2" column="3">2</outsider>
      <outsider class="DoCO:TextBox" type="footer" id="22" page="3" column="3">What is “Agility”?</outsider>
      <outsider class="DoCO:TextBox" type="footer" id="23" page="3" column="3">Effective (rapid and adaptive) response to change Effective communication among all stakeholders Drawing the customer onto the team Organizing a team so that it is in control of the work performed Yielding ... Rapid, incremental delivery of software</outsider>
      <outsider class="DoCO:TextBox" type="footer" id="24" page="3" column="3">These slides are designed to accompany Software Engineering: A Practitioner’s Approach, 7/e (McGraw-Hill, 2009) Slides copyright 2009 by Roger Pressman.</outsider>
      <outsider class="DoCO:TextBox" type="page_nr" id="25" page="3" column="3">3</outsider>
      <outsider class="DoCO:TextBox" type="page_nr" id="26" page="3" column="3">3</outsider>
      <outsider class="DoCO:TextBox" type="footer" id="29" page="4" column="3">Agility and the Cost of Change</outsider>
      <region class="DoCO:FigureBox" id="Fx30">
        <image class="DoCO:Figure" src="62q9.page_004.image_01.png" thmb="62q9.page_004.image_01-thumb.png"/>
      </region>
      <outsider class="DoCO:TextBox" type="footer" id="31" page="4" column="3">These slides are designed to accompany Software Engineering: A Practitioner’s Approach, 7/e (McGraw-Hill, 2009) Slides copyright 2009 by Roger Pressman.</outsider>
      <outsider class="DoCO:TextBox" type="page_nr" id="32" page="4" column="3">4</outsider>
      <outsider class="DoCO:TextBox" type="page_nr" id="33" page="4" column="3">4</outsider>
      <outsider class="DoCO:TextBox" type="footer" id="36" page="5" column="3">An Agile Process</outsider>
      <outsider class="DoCO:TextBox" type="footer" id="37" page="5" column="3">Is driven by customer descriptions of what is required (scenarios) Recognizes that plans are short-lived Develops software iteratively with a heavy emphasis on construction activities Delivers multiple ‘software increments’ Adapts as changes occur</outsider>
      <outsider class="DoCO:TextBox" type="footer" id="38" page="5" column="3">These slides are designed to accompany Software Engineering: A Practitioner’s Approach, 7/e (McGraw-Hill, 2009) Slides copyright 2009 by Roger Pressman.</outsider>
      <outsider class="DoCO:TextBox" type="page_nr" id="39" page="5" column="3">5</outsider>
      <outsider class="DoCO:TextBox" type="page_nr" id="40" page="5" column="3">5</outsider>
      <outsider class="DoCO:TextBox" type="footer" id="43" page="6" column="3">Agility Principles - I</outsider>
      <outsider class="DoCO:TextBox" type="footer" id="44" page="6" column="3">1. Our highest priority is to satisfy the customer through early and continuous delivery of valuable software. 2. Welcome changing requirements, even late in development. Agile processes harness change for the customer's competitive advantage. 3. Deliver working software frequently, from a couple of weeks to a couple of months, with a preference to the shorter timescale. 4. Business people and developers must work together daily throughout the project. 5. Build projects around motivated individuals. Give them the environment and support they need, and trust them to get the job done. 6. The most efficient and effective method of conveying information to and within a development team is face–to–face conversation.</outsider>
      <outsider class="DoCO:TextBox" type="footer" id="45" page="6" column="3">These slides are designed to accompany Software Engineering: A Practitioner’s Approach, 7/e (McGraw-Hill, 2009) Slides copyright 2009 by Roger Pressman.</outsider>
      <outsider class="DoCO:TextBox" type="page_nr" id="46" page="6" column="3">6</outsider>
      <outsider class="DoCO:TextBox" type="page_nr" id="47" page="6" column="3">6</outsider>
      <outsider class="DoCO:TextBox" type="footer" id="50" page="7" column="3">Agility Principles - II 7. Working software is the primary measure of progress. 8. Agile processes promote sustainable development. The sponsors, developers, and users should be able to maintain a constant pace indefinitely. 9. Continuous attention to technical excellence and good design enhances agility. 10. Simplicity – the art of maximizing the amount of work not done – is essential. 11. The best architectures, requirements, and designs emerge from self–organizing teams. 12. At regular intervals, the team reflects on how to become more effective, then tunes and adjusts its behavior accordingly.</outsider>
      <outsider class="DoCO:TextBox" type="footer" id="51" page="7" column="3">These slides are designed to accompany Software Engineering: A Practitioner’s Approach, 7/e (McGraw-Hill, 2009) Slides copyright 2009 by Roger Pressman.</outsider>
      <outsider class="DoCO:TextBox" type="page_nr" id="52" page="7" column="3">7</outsider>
      <outsider class="DoCO:TextBox" type="page_nr" id="53" page="7" column="3">7</outsider>
      <outsider class="DoCO:TextBox" type="footer" id="56" page="8" column="3">Human Factors the process molds to the needs of the people and team, not the other way around key traits must exist among the people on an agile team and the team itself: Competence. Common focus. Collaboration. Decision-making ability. Fuzzy problem-solving ability. Mutual trust and respect. Self-organization.</outsider>
      <outsider class="DoCO:TextBox" type="footer" id="57" page="8" column="3">These slides are designed to accompany Software Engineering: A Practitioner’s Approach, 7/e (McGraw-Hill, 2009) Slides copyright 2009 by Roger Pressman.</outsider>
      <outsider class="DoCO:TextBox" type="page_nr" id="58" page="8" column="3">8</outsider>
      <outsider class="DoCO:TextBox" type="page_nr" id="59" page="8" column="3">8</outsider>
      <outsider class="DoCO:TextBox" type="footer" id="62" page="9" column="3">Extreme Programming (XP) The most widely used agile process, originally proposed by Kent Beck Uses an object-oriented approach as its preferred development paradigm XP Planning Begins with the creation of “user stories” Agile team assesses each story and assigns a cost Stories are grouped to for a deliverable increment A commitment is made on delivery date After the first increment “project velocity” is used to help define subsequent delivery dates for other increments. ‘Project velocity’ is the number of customer ‘stories’, i.e., requirements, implemented during first release These slides are designed to accompany Software Engineering: A Practitioner’s Approach, 7/e (McGraw-Hill, 2009) Slides copyright 2009 by Roger Pressman.</outsider>
      <outsider class="DoCO:TextBox" type="page_nr" id="63" page="9" column="3">9</outsider>
      <outsider class="DoCO:TextBox" type="page_nr" id="64" page="9" column="3">9</outsider>
      <outsider class="DoCO:TextBox" type="footer" id="67" page="10" column="3">Extreme Programming (XP) XP Design Follows the KIS principle Encourage the use of CRC cards (see Chapter 8) – class responsibility collaborator – identify &amp; organize the object oriented classes that are relevant to the current software increment For difficult design problems, suggests the creation of “spike solutions”—a design prototype – intent is to lower risk when true implementation starts &amp; to validate the original estimates for the ‘story’ containing the design problem Encourages “refactoring”—an iterative refinement of the internal program design without altering the external behavior of the code XP Coding Recommends the construction of a unit test for a store before coding commences Encourages “pair programming” – two peopleworking at one workstation – two heads better than one XP Testing All unit tests are executed daily “Acceptance tests” are defined by the customer and excuted to assess customer visible functionality These slides are designed to accompany Software Engineering: A Practitioner’s Approach, 7/e (McGraw-Hill, 2009) Slides copyright 2009 by Roger Pressman.</outsider>
      <outsider class="DoCO:TextBox" type="page_nr" id="68" page="10" column="3">10</outsider>
      <outsider class="DoCO:TextBox" type="page_nr" id="69" page="10" column="3">10</outsider>
      <outsider class="DoCO:TextBox" type="footer" id="72" page="11" column="3">Extreme Programming (XP)</outsider>
      <outsider class="DoCO:TextBox" type="footer" id="73" page="11" column="3">spike solut ions prot ot ypes</outsider>
      <outsider class="DoCO:TextBox" type="footer" id="74" page="11" column="3">simple design CRC cards</outsider>
      <outsider class="DoCO:TextBox" type="footer" id="75" page="11" column="3">user st ories values accept ance t est crit eria it erat ion plan</outsider>
      <outsider class="DoCO:TextBox" type="footer" id="76" page="11" column="3">refact oring</outsider>
      <outsider class="DoCO:TextBox" type="footer" id="77" page="11" column="3">pair programming</outsider>
      <outsider class="DoCO:TextBox" type="footer" id="78" page="11" column="3">Release software increment project velocity computed</outsider>
      <outsider class="DoCO:TextBox" type="footer" id="79" page="11" column="3">unit t est cont inuous int egrat ion</outsider>
      <outsider class="DoCO:TextBox" type="footer" id="80" page="11" column="3">accept ance t est ing These slides are designed to accompany Software Engineering: A Practitioner’s Approach, 7/e (McGraw-Hill, 2009) Slides copyright 2009 by Roger Pressman.</outsider>
      <outsider class="DoCO:TextBox" type="page_nr" id="81" page="11" column="3">11</outsider>
      <outsider class="DoCO:TextBox" type="page_nr" id="82" page="11" column="3">11</outsider>
      <outsider class="DoCO:TextBox" type="footer" id="85" page="12" column="3">Adaptive Software Development – a technique for building complex software and systems. The philosophical underpinnings of ASD focus on human collaboration &amp; team self organization. Originally proposed by Jim Highsmith ASD — distinguishing features Mission-driven planning Component-based focus Uses “time-boxing” (See Chapter 24) Timeboxing is a planning technique common in planning projects (typically for software development), where the schedule is divided into a number of separate time periods (timeboxes, normally two to six weeks long), with each part having its own deliverables, deadline and budget. Explicit consideration of risks Emphasizes collaboration for requirements gathering Emphasizes “learning” throughout the process</outsider>
      <outsider class="DoCO:TextBox" type="footer" id="86" page="12" column="3">These slides are designed to accompany Software Engineering: A Practitioner’s Approach, 7/e (McGraw-Hill, 2009) Slides copyright 2009 by Roger Pressman.</outsider>
      <outsider class="DoCO:TextBox" type="page_nr" id="87" page="12" column="3">12</outsider>
      <outsider class="DoCO:TextBox" type="page_nr" id="88" page="12" column="3">12</outsider>
      <outsider class="DoCO:TextBox" type="footer" id="91" page="13" column="3">Adaptive Software Development ad ap t iv e c y c le p lanning Req uirem ent s g at her ing uses m issio n st at em ent JA D pro jec t c o nst raint s m ini-sp ec s b asic requirem ent s t im e- b o x ed r elease p lan Time-boxing is a planning technology</outsider>
      <outsider class="DoCO:TextBox" type="footer" id="92" page="13" column="3">Release so f t w a r e in cr e m e n t a d j ust m e n t s f o r su b se q u e n t cy cle s</outsider>
      <outsider class="DoCO:TextBox" type="footer" id="93" page="13" column="3">c o m p o nent s im p lem ent ed / t est ed f o cus g r o up s f o r f eed b ac k f o r m al t ec hnic al rev iew s p o st m o rt em s Learning also refers to learning the technology, the process, &amp; the project</outsider>
      <outsider class="DoCO:TextBox" type="footer" id="94" page="13" column="3">These slides are designed to accompany Software Engineering: A Practitioner’s Approach, 7/e (McGraw-Hill, 2009) Slides copyright 2009 by Roger Pressman.</outsider>
      <outsider class="DoCO:TextBox" type="page_nr" id="95" page="13" column="3">13</outsider>
      <outsider class="DoCO:TextBox" type="page_nr" id="96" page="13" column="3">13</outsider>
      <outsider class="DoCO:TextBox" type="footer" id="99" page="14" column="3">Dynamic Systems Development Method Another Agile software development approach. For systems which meet tight time constraints</outsider>
      <outsider class="DoCO:TextBox" type="footer" id="100" page="14" column="3">Promoted by the DSDM Consortium (www.dsdm.org) DSDM—distinguishing features Similar in most respects to XP and/or ASD (Adaptive Software Development) Nine guiding principles • Active user involvement is imperative. • DSDM teams must be empowered to make decisions. • The focus is on frequent delivery of products. • Fitness for business purpose is the essential criterion for acceptance of deliverables. • Iterative and incremental development is necessary to converge on an accurate business solution. • All changes during development are reversible. • Requirements are baselined at a high level • Testing is integrated throughout the life-cycle. • This method believes in the ‘Pareto Principle’ (80-20 rule) – 80% of an application can be delivered in 20% of the time it would take to deliver 100% of the application. Only enough work should be done in each increment to facilitate movement to the next increment.</outsider>
      <outsider class="DoCO:TextBox" type="footer" id="101" page="14" column="3">These slides are designed to accompany Software Engineering: A Practitioner’s Approach, 7/e (McGraw-Hill, 2009) Slides copyright 2009 by Roger Pressman.</outsider>
      <outsider class="DoCO:TextBox" type="page_nr" id="102" page="14" column="3">14</outsider>
      <outsider class="DoCO:TextBox" type="page_nr" id="103" page="14" column="3">14</outsider>
      <outsider class="DoCO:TextBox" type="footer" id="106" page="15" column="3">Dynamic Systems Development Method</outsider>
      <region class="DoCO:FigureBox" id="Fx107">
        <image class="DoCO:Figure" src="62q9.page_015.image_02.png" thmb="62q9.page_015.image_02-thumb.png"/>
      </region>
      <outsider class="DoCO:TextBox" type="footer" id="108" page="15" column="3">DSDM Life Cycle (with permission of the DSDM consortium) These slides are designed to accompany Software Engineering: A Practitioner’s Approach, 7/e (McGraw-Hill, 2009) Slides copyright 2009 by Roger Pressman.</outsider>
      <outsider class="DoCO:TextBox" type="page_nr" id="109" page="15" column="3">15</outsider>
      <outsider class="DoCO:TextBox" type="page_nr" id="110" page="15" column="3">15</outsider>
      <outsider class="DoCO:TextBox" type="footer" id="113" page="16" column="3">Scrum – another Agile method. Good for projects that have tight timelines, changing requirements, and business criticality Originally proposed by Schwaber and Beedle Scrum—distinguishing features Development work is partitioned into “packets” Testing and documentation are on-going as the product is constructed Work occurs in “sprints” and is derived from a “backlog” of existing requirements Meetings are very short and sometimes conducted without chairs “demos” are delivered to the customer with the time- box allocated</outsider>
      <outsider class="DoCO:TextBox" type="footer" id="114" page="16" column="3">These slides are designed to accompany Software Engineering: A Practitioner’s Approach, 7/e (McGraw-Hill, 2009) Slides copyright 2009 by Roger Pressman.</outsider>
      <outsider class="DoCO:TextBox" type="page_nr" id="115" page="16" column="3">16</outsider>
      <outsider class="DoCO:TextBox" type="page_nr" id="116" page="16" column="3">16</outsider>
      <outsider class="DoCO:TextBox" type="footer" id="119" page="17" column="3">Scrum</outsider>
      <region class="DoCO:FigureBox" id="Fx120">
        <image class="DoCO:Figure" src="62q9.page_017.image_03.png" thmb="62q9.page_017.image_03-thumb.png"/>
      </region>
      <outsider class="DoCO:TextBox" type="footer" id="121" page="17" column="3">Scrum Process Flow (used with permission)</outsider>
      <outsider class="DoCO:TextBox" type="footer" id="122" page="17" column="3">These slides are designed to accompany Software Engineering: A Practitioner’s Approach, 7/e (McGraw-Hill, 2009) Slides copyright 2009 by Roger Pressman.</outsider>
      <outsider class="DoCO:TextBox" type="page_nr" id="123" page="17" column="3">17</outsider>
      <outsider class="DoCO:TextBox" type="page_nr" id="124" page="17" column="3">17</outsider>
      <outsider class="DoCO:TextBox" type="footer" id="127" page="18" column="3">Crystal Proposed by Cockburn and Highsmith Crystal—distinguishing features Actually a family of process models that allow “maneuverability” based on problem characteristics Face-to-face communication is emphasized Suggests the use of “reflection workshops” to review the work habits of the team Is actually a set of example agile processes that have been proven effective for different types of projects.The intent is to allow agile teams to select the member of the Crystal family that is most appropriate for their project and environment.</outsider>
      <outsider class="DoCO:TextBox" type="footer" id="128" page="18" column="3">These slides are designed to accompany Software Engineering: A Practitioner’s Approach, 7/e (McGraw-Hill, 2009) Slides copyright 2009 by Roger Pressman.</outsider>
      <outsider class="DoCO:TextBox" type="page_nr" id="129" page="18" column="3">18</outsider>
      <outsider class="DoCO:TextBox" type="page_nr" id="130" page="18" column="3">18</outsider>
      <outsider class="DoCO:TextBox" type="footer" id="133" page="19" column="3">Feature Driven Development practical for object-oriented software engineering Originally proposed by Peter Coad et al FDD—distinguishing features Emphasis is on defining “features” • a feature “is a client-valued function that can be implemented in two weeks or less.” Uses a feature template • &lt;action&gt; the &lt;result&gt; &lt;by | for | of | to&gt; a(n) &lt;object&gt; Where an &lt;object&gt; is a person, place or thing. Examples of features for an e- commerce application might be: • Add the product to shopping cart • Display the technical specs of the product • Store the shipping info for the customer A features list is created and “plan by feature” is conducted Design and construction merge in FDD</outsider>
      <outsider class="DoCO:TextBox" type="footer" id="134" page="19" column="3">These slides are designed to accompany Software Engineering: A Practitioner’s Approach, 7/e (McGraw-Hill, 2009) Slides copyright 2009 by Roger Pressman.</outsider>
      <outsider class="DoCO:TextBox" type="page_nr" id="135" page="19" column="3">19</outsider>
      <outsider class="DoCO:TextBox" type="page_nr" id="136" page="19" column="3">19</outsider>
      <outsider class="DoCO:TextBox" type="footer" id="139" page="20" column="3">Feature Driven Development</outsider>
      <region class="DoCO:FigureBox" id="Fx140">
        <image class="DoCO:Figure" src="62q9.page_020.image_04.png" thmb="62q9.page_020.image_04-thumb.png"/>
      </region>
      <outsider class="DoCO:TextBox" type="footer" id="141" page="20" column="3">Reprinted with permission of Peter Coad</outsider>
      <outsider class="DoCO:TextBox" type="footer" id="142" page="20" column="3">These slides are designed to accompany Software Engineering: A Practitioner’s Approach, 7/e (McGraw-Hill, 2009) Slides copyright 2009 by Roger Pressman.</outsider>
      <outsider class="DoCO:TextBox" type="page_nr" id="143" page="20" column="3">20</outsider>
      <outsider class="DoCO:TextBox" type="page_nr" id="144" page="20" column="3">20</outsider>
      <outsider class="DoCO:TextBox" type="footer" id="147" page="21" column="3">Agile Modeling Originally proposed by Scott Ambler Suggests a set of agile modeling principles Model with a purpose – e.g., to communicate information to the customer, or to better understand some aspect of the software Use multiple models Travel light - as software engineering proceeds, keep only those models that will provide long term value and jettison the rest. Content is more important than Know the models and the tools you use to create them representation – understand the strengths &amp; weaknesses of each model &amp; the tools that are used to create it. Adapt locally – the modeling approach should be adapted to the needs of the agile team. These slides are designed to accompany Software Engineering: A Practitioner’s Approach, 7/e (McGraw-Hill, 2009) Slides copyright 2009 by Roger Pressman. 21</outsider>
      <outsider class="DoCO:TextBox" type="page_nr" id="148" page="21" column="3">21</outsider>
    </body>
  </article>
</pdfx>
