<?xml version='1.0' encoding='UTF-8'?>
<pdfx xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://pdfx.cs.man.ac.uk/static/article-schema.xsd">
  <meta>
    <job>58025d2a29702e27a6606c4fb2fde6017f5bf7e37ede8fb7b460ce9ca52529c0</job>
    <base_name>62k8</base_name>
    <doi>http://dx.doi.org/10.1145/1015864.1015884</doi>
  </meta>
  <article>
    <front class="DoCO:FrontMatter">
      <title-group>
        <article-title class="DoCO:Title" id="1">Meta-Design: A Manifesto for End-User Development</article-title>
      </title-group>
      <contrib-group class="DoCO:ListOfAuthors">
        <contrib contrib-type="author">
          <name id="2">Fischer G.</name>
          <aff id="3">1</aff>
        </contrib>
        <contrib contrib-type="author">
          <name id="4">Giaccardi E.</name>
          <aff id="5">1</aff>
        </contrib>
        <contrib contrib-type="author">
          <name id="6">Ye</name>
        </contrib>
        <contrib contrib-type="author">
          <name id="7">Y.</name>
        </contrib>
        <contrib contrib-type="author">
          <name id="8">Sutcliffe A.G.</name>
        </contrib>
        <contrib contrib-type="author">
          <name id="9">Mehandjiev N.</name>
        </contrib>
      </contrib-group>
      <footnote class="DoCO:Footnote" id="10">1 Dept of Computer Science, University of Colorado at Boulder, Boulder, CO 80309, USA 2 School of Informatics, University of Manchester, Manchester M80 1QD, UK</footnote>
    </front>
    <body class="DoCO:BodyMatter">
      <section class="deo:Introduction">
        <h1 class="DoCO:SectionTitle" id="11" page="1" column="1">Introduction</h1>
      </section>
      <region class="DoCO:TextChunk" id="12" page="1" column="1">End-user development (EUD) activities range from customization to component configuration and programming. Office software, such as the ubiquitous spreadsheet, provide customisation facilities, while the growth of the Web has added impetus to end-user scripting for interactive functions in websites. In scientific and engineering domains end users frequently develop complex systems with standard programming languages such as C++ and JAVA. However only a minority of users adapt COTS (Customer Off The Shelf software) products; furthermore, composing systems from reusable components, such as ERP (Enterprise Resource Plans) systems defeats most end users, who resort to expensive and scarce expert developers for implementation. So EUD is only a partial success story. We argue that the spread of end-user development depends on a fine balance between user motivation, effective tools and management support. In this article we explore that balance and investigate a future approach to EUD – meta-design – that proposes a vision in which design, learning and development become part of everyday working practice.</region>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="13" page="1" column="1">EUD tools and technology</h1>
      </section>
      <region class="DoCO:TextChunk" id="30" page="1" column="1">Design of language for user-computer communication pose a conflict between complexity and power. More complex languages can address a wider range of problems but impose an increasing learning burden on the user. Text-based languages tend to be more complex because the syntax and lexicon (terminology) have to be learned from scratch, as with any human language. Consequently, languages which have been designed specifically for end users represent the programmable world as graphical metaphors containing agents which can be instructed to behave by condition-action rules. The aim is reduce the cognitive burden of learning by shrinking the conceptual distance between actions in the real world and programming. <marker type="block"/> A key trade-off in EUD languages is between their scope of application and learning costs. <xref ref-type="fig" rid="F1" id="15" class="deo:Reference">Figure 1</xref> illustrates this problem. In the high cost, high scope cell are traditional programming languages, JAVA, C++, employed by highly motivated end users particularly in scientific domains. At the convergence of this cell and the high scope, lower cost cell are the majority of current EUD languages which have evolved as simplified versions of full programming languages, e.g. web scripting languages. The low scope, high cost cell is occupied only by a small number of domain specific programming languages which have been developed to address the requirements in complex engineering domains such as device controllers. These languages impose a considerable learning burden but one that is worth it for improved efficiency over a general purpose language. The low cost, low scope cell contains domain-specific EUD languages which lower the learning burden but at the price of addressing only a specific application area. In this cell EUD languages merge with customization of COTS software packages so the act of programming is reduced to<marker type="page" number="2"/><marker type="block"/> entering parameters in a form-filling dialogue. Closer to the higher scope boundary are Macro languages that extend the office style applications, e.g. formulae for Excel spreadsheets, and database query languages. Finally the high scope, low cost cell is the EUD ideal; although as yet it is largely unattained. The current state-of-the-art EUD environments provide graphical worlds to create programmable agents. These still impose a learning burden of instructing agents with condition-action rules, and designing agent models.<marker type="block"/> Active EUD environments attempt to infer programs as instructions from user manipulations of agent worlds. The graphical agent worlds still have to be designed but, once present, programming by example [<xref ref-type="bibr" rid="R5" id="23" class="deo:Reference">Lieberman, 2001</xref>] can infer instructions from the users’ actions, e.g. in a robot game the user demonstrates an agent bumping into a wall followed by reversing two steps and changing direction. The system infers the condition-action rule of detect-a-collision followed by the appropriate reverse-and-change-direction response. This approach reduces learning by semi-automatic rule acquisition but the downside is that the learning system can make mistakes. Learning styles range from more complete inference to direct instruction, where the system learns only when given a command. Directed instruction requires the user to anticipate all the possible rules and learning situations, while the complete inference approach is limited by the system’s domain knowledge. Developing the model is the hard part and therein lies the real challenge for end-user design: abstract conceptual thinking. Complex domains require sophisticated analysis and modelling skills, so programming is only part of an end-user developer’s needs.<marker type="block"/> The goal for EUD tools is to reduce the learning burden while providing powerful facilities to address a wide range of problems. Given that some learning burden will always be present, tools need to motivate their users. We propose a meta-design approach [<xref ref-type="bibr" rid="R4" id="25" class="deo:Reference">Fischer &amp; Giaccardi, 2004</xref>],<marker type="page" number="3"/><marker type="block"/> where users are motivated to learn by examples and demonstrations of working systems to show them what is achievable.</region>
      <outsider class="DoCO:TextBox" type="footer" id="17" page="1" column="1">Fischer/Giaccardi/Ye/Sutcliffe/Mehandjiev</outsider>
      <outsider class="DoCO:TextBox" type="page_nr" id="18" page="1" column="1">1</outsider>
      <outsider class="DoCO:TextBox" type="footer" id="19" page="1" column="1">CACM-EUD</outsider>
      <region class="unknown" id="21" page="2" column="1">Cost of learning High Low EUD JAVA ideal C++ Current EUD envs High Agentsheets Alice JAVA Script VB Script Excel macros Scope Office Applications Report writers Query screen Domain engineering builders languages Low SDL Hardware design Domain-specific languages Customisation Adaptation</region>
      <region class="DoCO:FigureBox" id="F1">
        <caption class="deo:Caption" id="22" page="2" column="1">Figure 1. Cost-scope trade-offs in EUD tools</caption>
      </region>
      <outsider class="DoCO:TextBox" type="footer" id="27" page="2" column="1">Fischer/Giaccardi/Ye/Sutcliffe/Mehandjiev</outsider>
      <outsider class="DoCO:TextBox" type="page_nr" id="28" page="2" column="1">2</outsider>
      <outsider class="DoCO:TextBox" type="footer" id="29" page="2" column="1">CACM-EUD</outsider>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="31" page="3" column="1">Managerial and social perspective</h1>
        <region class="DoCO:TextChunk" id="48" page="3" column="1">End-user development is a long-standing concern within organizations. Managerial issues are illustrated in <xref ref-type="fig" rid="F2" id="32" class="deo:Reference">figure 2</xref>, based on previous surveys of end-user computing [<xref ref-type="bibr" rid="R2" id="33" class="deo:Reference">Brancheau &amp; Brown, 1993</xref>; <xref ref-type="bibr" rid="R9" id="34" class="deo:Reference">Powell &amp; Moore, 2002</xref>] and our more recent investigation into the task-organisational fit of EUD technology [<xref ref-type="bibr" rid="R6" id="35" class="deo:Reference">Mehandjiev, Sutcliffe &amp; Lee, 2004</xref>]. Do-it-yourself development is a balance of benefits and cost. User motivators are empowerment from being able to complete a job more effectively, speed of development, flexibility and local control so programming can be “on demand”. Another benefit is eliminating potential miscommunications of requirements to specialist software engineers, thus avoiding the frustration with perceived poor IS Dept service. Success stories can create motivational capital to help users over the hump of learning until actual benefits arrive in the form of working applications. User motivation should be encouraged during the early stages of adoption by management support, training, and task forces to spread best practice and expertise. This counteracts user costs such as selecting appropriate technology, installing and learning it, programming and debugging.<marker type="block"/> A number of context and management issues influence the balance between costs and benefits. For example, EUD can be dangerous in safety-critical domains where software has to be reliable and accurate. User costs can be significantly impacted by the scale and complexity of the domain, so safer, less complex domains should be selected for EUD. Changeability of the domain can be a motivator for EUD adoption, since end users can respond to rapidly evolving requirements more quickly than traditional development; however, rapid change can lead to throw-away software and lost development effort. Management issues include risks associated with EUD, perceived by IT management to create unreliable and unmaintainable software. Other risks are inaccurate information, security with increased exposure to hacking attacks. The conflict between IT management and end users over power, authority and control of IT systems may be a productive force for change or it may lead to disruption, mistrust and failure. It can be argued that enforcing standards and controlling end users leads to more cost-efficient development and less waste from unreliable software. However, rigid top-down control may only cause resentment among end<marker type="page" number="4"/><marker type="block"/> users. The control-power conflict between users and IT management will not evaporate; but constructive engagement in support and training fosters success, encourages responsibility and inter alia enables management to control by leadership.<marker type="block"/> Critical success factors for EUD depend on the domain. In a culture of high end-user motivation and low managerial influence, a common situation in scientific and engineering domains, educational applications and interactive art, success is simply a matter of users taking development into their own hands, often using standard programming languages. However, in most business domains, training, technical and management support are vital for helping EUD flourish. A culture of cooperation shares the responsibility for developing accurate and effective solutions. Local experts among the end-user community spread expertise and advice, although power users can be prone to migrating to the wrong side of the “us” and “them” (IT department) fence [<xref ref-type="bibr" rid="R7" id="44" class="deo:Reference">Mumford &amp; Henshall, 1979</xref>; National-Research-<xref ref-type="bibr" rid="R8" id="45" class="deo:Reference">Council, 2003</xref>]. Technology should provide easy integration with other information systems and optimized support for EUD tasks. Progress in the technology area is still necessary to unlock the true potential for EUD.<marker type="block"/> The set of EUD critical success factors suggests the need for a socio-technical approach to increase user motivation and decrease cognitive and organizational costs. Such an approach suggests a future technological framework with tools for discovery-led design to balance learning costs with results-driven motivation. We propose meta-design, which is an evolution of Domain Oriented Design Environments (DODEs) [<xref ref-type="bibr" rid="R3" id="47" class="deo:Reference">Fischer, 1994</xref>] as a vision in which design, learning and development become everyday working practice.</region>
        <region class="unknown" id="37" page="3" column="1">Culture power, control reliability Training responsibility Management accuracy Support standards issues security Local experts cost effectiveness risk potential reduce conflict can increase empowerment learning flexibility User User programming Critical success speed of delivery motivations trade-off costs debugging factors local control Poor IS Dept service reduce influence Technology: Context complexity ease of use issues criticality integration changeability task support</region>
        <region class="DoCO:FigureBox" id="F2">
          <caption class="deo:Caption" id="38" page="3" column="1">Figure 2. Relationships between social and managerial issues in EUD.</caption>
        </region>
        <outsider class="DoCO:TextBox" type="footer" id="40" page="3" column="1">Fischer/Giaccardi/Ye/Sutcliffe/Mehandjiev</outsider>
        <outsider class="DoCO:TextBox" type="page_nr" id="41" page="3" column="1">3</outsider>
        <outsider class="DoCO:TextBox" type="footer" id="42" page="3" column="1">CACM-EUD</outsider>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="49" page="4" column="1">Meta-design</h1>
        <region class="DoCO:TextChunk" id="72" page="4" column="1">Meta-design characterizes objectives, techniques, and processes for creating new media and environments that allow “owners of problems” (or end-users) to act as designers. A fundamental objective of meta-design is to create socio-technical environments that empower users to engage actively in the continuous development of systems rather than being restricted to the use of existing systems. <marker type="block"/> Design time and use time In all design processes, two basic stages can be differentiated: design time and use time. At design time, system developers (with or without user involvement) create environments and tools. In conventional design they create complete systems. Because the needs, objectives, and situational contexts of users can only be anticipated at design time, users often find the system unfit for their tasks at use time, thus leading to the needs of modifying existing systems. To accommodate unexpected issues at use time, systems need to be “underdesigned” at design time. Underdesign represents a fundamental shift in the approach to the creation of systems, but it does not mean less work or demands on the design team. Instead of aiming at designing complete solutions for users by designers at design time, underdesign aims at providing social and technical instruments for the owners of problems to create the solutions themselves at use time. Within the overall approach of meta-design, underdesign is a defining activity aimed at creating design spaces for others.<marker type="block"/> From users to co-designers Meta-design extends the traditional notion of system development to include users in an ongoing process as co-designers, not only at design time but throughout the whole existence of the system. A necessary, although not sufficient, condition for meta-design is that software systems include advanced features permitting users to create complex customizations and extensions. Rather than presenting users with closed systems, meta-design provides them with opportunities, tools, and social structures to extend the system to fit their needs. Meta-design shares some important<marker type="page" number="5"/><marker type="block"/> objectives with user-centered and participatory design, but it transcends these objectives by changing the processes by which systems and content are designed. Meta-design shifts control from designers to users and empowers users to create and contribute their own visions and objectives. Meta-design promotes “designing the design process” to a first-class activity, so that creating the technical and social conditions for broad participation in design activities becomes as important as creating the artefact itself. It creates the enabling conditions for collaborative design in which all participants, not just skilled computer professionals, incrementally acquire ownership of problems and contribute actively to their solutions.<marker type="block"/> The seeding, evolutionary growth, and reseeding (SER) process model To support meta-design, we have developed the seeding, evolutionary growth, and reseeding (SER) process model. The SER model, illustrated in <xref ref-type="fig" rid="F3" id="57" class="deo:Reference">figure 3</xref>, is a descriptive and prescriptive model for large evolving systems and information repositories, postulating that systems that evolve over a sustained time span must continually alternate between periods of activity, unplanned evolution and periods of deliberate (re)structuring and enhancement. The SER model encourages designers to conceptualize their activity as meta-design, thereby supporting users as designers in their own right, rather than restricting them to being passive consumers. To demonstrate the broad applicability and power of meta-design, we have applied the framework in a number of different application areas, including the three areas briefly mentioned below.<marker type="block"/> Social Creativity. Complex design problems require more knowledge than any single person can possess, and the knowledge relevant to a problem is often distributed among stakeholders from different perspectives and backgrounds. The solution of complex design problems requires social creativity in which all stakeholders reach a shared understanding by contributing their different points of view and knowledge. We have applied the meta-design approach in the creation of augmented reality environments in urban planning [<xref ref-type="bibr" rid="R1" id="61" class="deo:Reference">Arias, Eden et al., 2000</xref>]. The tools themselves are not solutions to any particular problem, but provide the socio-technical environment for stakeholders to become informed participants. The immediate and visual feedback facilitates the creation of a shared understanding leading to new insights, new ideas, and new artefacts as a result of collaboration.<marker type="block"/> Open Source. Open source development is an activity in which a community of software developers collaboratively construct systems to help solve problems of shared interest and for mutual benefit. The original designers of an open source system do not provide a complete solution that addresses all problems of potential users; they provide a seed that can be evolved by<marker type="page" number="6"/><marker type="block"/> users at use time. The ability to change source code, the technological means of sharing changes over the internet, and the spontaneous social support among community members are the enabling conditions for collaborative construction of software. Software is changed from a fixed entity produced and controlled by a closed group of designers to an open effort that allows a community to design collaboratively following the framework provided by the SER process model. The success of open source systems exemplifies meta-design by: openly embracing users as co-designers by releasing incomplete code, actively soliciting and incorporating user contributions, strategically sharing the control over original designers and users by granting users direct access to source code, aggressively promoting mutual learning among community members through mailing lists, and deliberately fostering a reward and recognition structure that motivates active participation by explicitly acknowledging and promoting contributors [<xref ref-type="bibr" rid="R10" id="67" class="deo:Reference">Ye &amp; Kishida, 2003</xref>]. Open source projects based on meta-design have a lower cost for each user because the development cost is distributed among a large number of participants and individual contributions are shared.<marker type="block"/> Interactive Art. Interactive art [<xref ref-type="bibr" rid="R4" id="69" class="deo:Reference">Fischer &amp; Giaccardi, 2004</xref>], conceptualized as meta-design, focuses on participation and collaboration as forms of co-creation, in which users become “co- developers” of artwork. The original ‘seed’ design establishes a context in which users can creatively produce new content and meaning through a process of mutual interaction and evolutionary growth. By putting the tools rather than the object of design in the hands of users, interactive art seeds collaboration between the participants (both technical and human) and sees this interaction as the real object of creative production. Hence meta design creates interactive systems which define the conditions for interaction. Meta design environments not only allows users to create content, but also modify the behaviour of the system at use time through interaction (see A-Volve, <ext-link ext-link-type="uri" href="http://www.iamas.ac.jp/" id="70">http://www.iamas.ac.jp/</ext-link>~christa/ ). The initial seed is often developed by a community of artists, and can be adjusted and improved according to the “talk-back” deriving from the continuing experience of using the creative environment as in SITO, ( <ext-link ext-link-type="uri" href="http://www.sito.org" id="71">http://www.sito.org</ext-link> ), a virtual community of “artists-participants”. Interaction and evolution occur both at the level of the development of materials and at the level of the creation, elaboration and completion of collective artworks. Interactive art emphasizes different objectives compared to traditional design approaches, including cultural shifts from (i) following guidelines and rules to learning from exceptions and negotiations, (ii) content to context of design, (iii) change focus from design objects to process, and (iv) from working with representation to the act of construction.</region>
        <outsider class="DoCO:TextBox" type="footer" id="53" page="4" column="1">Fischer/Giaccardi/Ye/Sutcliffe/Mehandjiev</outsider>
        <outsider class="DoCO:TextBox" type="page_nr" id="54" page="4" column="1">4</outsider>
        <outsider class="DoCO:TextBox" type="footer" id="55" page="4" column="1">CACM-EUD</outsider>
        <region class="DoCO:FigureBox" id="F3">
          <image class="DoCO:Figure" src="62k8.page_005.image_01.png" thmb="62k8.page_005.image_01-thumb.png"/>
          <caption class="deo:Caption" id="60" page="5" column="1">Figure 3. The seeding, evolutionary growth, and reseeding process model.</caption>
        </region>
        <outsider class="DoCO:TextBox" type="footer" id="64" page="5" column="1">Fischer/Giaccardi/Ye/Sutcliffe/Mehandjiev</outsider>
        <outsider class="DoCO:TextBox" type="page_nr" id="65" page="5" column="1">5</outsider>
        <outsider class="DoCO:TextBox" type="footer" id="66" page="5" column="1">CACM-EUD</outsider>
      </section>
      <section class="deo:Conclusion">
        <h1 class="DoCO:SectionTitle" id="73" page="6" column="1">Conclusions</h1>
        <region class="DoCO:TextChunk" id="75" page="6" column="1">To evolve, end-user development needs technologies that foster collaboration between communities of end-user designers and between users and managers, while increasing motivation and reducing cognitive and organizational costs. Meta-design provides a pathway to transform development as coding – a discrete computing activity – into design of artefacts as part of the users’ work (or leisure) practice. <marker type="block"/> Meta-design puts owners of problems in charge of creating open, evolvable systems that address the limitations associated with closed systems. Open systems allow significant modifications when the need arises and the evolution takes place through modifications by the owners of problems as a major design activity. Meta-design is more than a technical problem; it must address the challenges of creating new mindsets, new sources of creativity, cultural changes, and innovative societies. It has the potential to create a culture in which all participants in collaborative design processes can express themselves and engage in personally meaningful activities.</region>
        <outsider class="DoCO:TextBox" type="footer" id="76" page="6" column="1">Fischer/Giaccardi/Ye/Sutcliffe/Mehandjiev</outsider>
        <outsider class="DoCO:TextBox" type="page_nr" id="77" page="6" column="1">6</outsider>
        <outsider class="DoCO:TextBox" type="footer" id="78" page="6" column="1">CACM-EUD</outsider>
      </section>
      <section class="DoCO:Bibliography">
        <h1 class="DoCO:SectionTitle" id="79" page="7" column="1">References</h1>
        <ref-list class="DoCO:BiblioGraphicReferenceList">
          <ref rid="R1" class="deo:BibliographicReference" id="80" page="7" column="1">Arias, E. G., Eden, H., Fischer, G., Gorman, A., &amp; Scharff, E. (2000). Transcending the individual human mind: Creating shared understanding through collaborative design. ACM Transactions on Computer-Human Interaction, 7(1), 84-113.</ref>
          <ref rid="R2" class="deo:BibliographicReference" id="81" page="7" column="1">Brancheau, J. C., &amp; Brown, C. V. (1993). The management of end user computing: Status and directions. ACM Computing Surveys, 25(4), 437-482.</ref>
          <ref rid="R3" class="deo:BibliographicReference" id="82" page="7" column="1">Fischer, G. (1994). Domain-Oriented Design Environments. Automated Software Engineering, 1(2), 177-203.</ref>
          <ref rid="R4" class="deo:BibliographicReference" id="83" page="7" column="1">Fischer, G., &amp; Giaccardi, E. (2004 [in press]). Meta-design: A framework for the future of end user development. In H. Lieberman, F. Paternò, &amp; V. Wulf (Eds.), End user development: Empowering people to flexibly employ advanced information and communication technology. Dordrecht: Kluwer Academic Publishers.</ref>
          <ref rid="R5" class="deo:BibliographicReference" id="84" page="7" column="1">Lieberman, H. (Ed.) (2001). Your wish is my command: Programming by example. San Francisco: Morgan Kaufmann.</ref>
          <ref rid="R6" class="deo:BibliographicReference" id="85" page="7" column="1">Mehandjiev, N., Sutcliffe, A. G., &amp; Lee, D. (2004 [in press]). Organisational views of end user development. In H. Lieberman, F. Paternò, &amp; V. Wulf (Eds.), End user development: Empowering people to flexibly employ advanced information and communication technology. Dordrecht: Kluwer Academic Publishers.</ref>
          <ref rid="R7" class="deo:BibliographicReference" id="86" page="7" column="1">Mumford, E., &amp; Henshall, D. (1979). A participative approach to computer system design. London: Associated Business Press.</ref>
          <ref rid="R8" class="deo:BibliographicReference" id="87" confidence="possible" page="7" column="1">National Research Council. (2003). Beyond productivity: Information technology, innovation and creativity. Washington DC: National Academy Press.</ref>
          <ref rid="R9" class="deo:BibliographicReference" id="88" page="7" column="1">Powell, A., &amp; Moore, J. E. (2002). The focus of research in end user computing: Where have we come since the 1980ties? Journal of End User Computing, 14(1), 3-22.</ref>
          <ref rid="R10" class="deo:BibliographicReference" id="89" page="7" column="1">Ye, Y., &amp; Kishida, K. (2003). Toward an understanding of the motivation of open source software developers. Proceedings: 25th International Conference on Software Engineering (ICSE 2003), Portland OR, (pp. 419-429). New York: ACM Press.</ref>
        </ref-list>
        <outsider class="DoCO:TextBox" type="footer" id="90" page="7" column="1">Fischer/Giaccardi/Ye/Sutcliffe/Mehandjiev</outsider>
        <outsider class="DoCO:TextBox" type="page_nr" id="91" page="7" column="1">7</outsider>
        <outsider class="DoCO:TextBox" type="footer" id="92" page="7" column="1">CACM-EUD</outsider>
      </section>
    </body>
  </article>
</pdfx>
