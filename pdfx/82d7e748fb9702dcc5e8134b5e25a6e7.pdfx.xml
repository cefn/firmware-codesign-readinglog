<?xml version='1.0' encoding='UTF-8'?>
<pdfx xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://pdfx.cs.man.ac.uk/static/article-schema.xsd">
  <meta>
    <job>512f625c02c6ca2e679b7331ec18c1b804cc1b3ba1975366641c21b7402d815a</job>
    <base_name>62jh</base_name>
    <doi confidence="possible">http://dx.doi.org/10.1007/978-0-387-35080-6_15</doi>
  </meta>
  <article>
    <front class="DoCO:FrontMatter">
      <title-group>
        <article-title class="DoCO:Title" id="1">Method Engineering: Who’s the Customer?</article-title>
      </title-group>
      <region class="unknown" id="2">14 Methods*</region>
      <contrib-group class="DoCO:ListOfAuthors">
        <contrib contrib-type="author">
          <name id="3">Lars Mathiassen Andreas Munk-Madsen Peter A. Nielsen Jan Stage</name>
        </contrib>
      </contrib-group>
    </front>
    <body class="DoCO:BodyMatter">
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="4" confidence="possible" page="1" column="1">Abstract.</h1>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="5" confidence="possible" page="1" column="1">Keywords:</h1>
        <region class="unknown" id="6" page="1" column="1">This paper reports from an effort to engineer an object-oriented method for analysis and design of computer systems. The effort was governed by a paradigm for learning methods rather than a paradigm for working with methods. We discuss this paradigm by exploring three issues involved in method engineering: (1) the relation between learning the method and working with the method; (2) the role of principles, patterns, and guidelines in explaining the method; and (3) the relation between concepts for reflection and modeling and concrete representations used to create texts and diagrams. We suggest that the primary customers of method engineering are those studying methods eager to learn a class of new systems development practices. Those actually working with methods play a secondary role when structuring and presenting a new method—even though they are the ultimate judges of a method’s practical strengths and weaknesses. Method engineering, systems development, object-orientation, learning, working.</region>
      </section>
      <section class="deo:Introduction">
        <h1 class="DoCO:SectionTitle" id="7" page="1" column="1">1. Introduction</h1>
      </section>
      <region class="DoCO:TextChunk" id="34" page="1" column="1">One may take different approaches to method research and engineering: a comparative approach with particular focus on the fea- <marker type="page" number="2"/><marker type="block"/> tures of methods (e.g. <xref ref-type="bibr" rid="R17" id="12" class="deo:Reference">Olle et al. 1982</xref>, 1983, 1986; <xref ref-type="bibr" rid="R15" id="13" class="deo:Reference">Nielsen 1990a</xref>, 1990b), a tool-oriented approach with a particular focus on notation and CASE (e.g. <xref ref-type="bibr" rid="R22" id="14" class="deo:Reference">Steinholtz et al. 1990</xref>; <xref ref-type="bibr" rid="R1" id="15" class="deo:Reference">Andersen et al. 1991</xref>), or a mixed approach (e.g. <xref ref-type="bibr" rid="R23" id="16" class="deo:Reference">Tolvanen et al. 1993</xref>; Verrijn-<xref ref-type="bibr" rid="R24" id="17" class="deo:Reference">Stuart et al. 1994</xref>). We have taken an experience-based approach as outlined in the following. It has been the authors’ privilege to work with systems development and systems development methods for a number of years, teaching methods to computer science and engineering students at the university and to practitioners in companies in the computing industry, experimenting with methods in companies and laborato- ries, and researching into the qualities of methods both in processes of learning them and working with them. This is reflected in our previous work (<xref ref-type="bibr" rid="R11" id="18" class="deo:Reference">Mathiassen 1981</xref>; <xref ref-type="bibr" rid="R21" id="19" class="deo:Reference">Stage 1989</xref>; <xref ref-type="bibr" rid="R15" id="20" class="deo:Reference">Nielsen 1990a</xref>, 1990b, <xref ref-type="bibr" rid="R10" id="21" class="deo:Reference">Kensing et al. 1993</xref>). We have taught both structured and object-oriented methods to computer science and engineering students for several years, and during the last six years we have taught object-oriented methods to a large number of practitioners. In these efforts we have often expe- rienced a gap between the way a specific method is structured and presented and the requirements and needs we experience when trying to convey the underlying new systems development practices to practitioners and students in the field. It is this dissatisfaction with the pedagogical weaknesses of many systems development methods that initiated the research reported in this paper. For more than six years we have been involved with our students, companies in the computing industry, and practitioners of systems development in engineering a new Danish method for object-oriented analysis and design, called OOA&amp;D. The method is documented in two books (<xref ref-type="bibr" rid="R13" id="22" class="deo:Reference">Mathiassen et al. 1993</xref>, 1995). Evolving versions of the method have been taught to students and practitioners in different pedagogical contexts (university courses, open courses for practitioners, and in-house courses for specific companies). From this stems the experience that has driven the method engineering process: our method is based on new ideas on how to explain and learn object-orientation supplemented with well-known ideas of how to work object-oriented in systems development (<xref ref-type="bibr" rid="R8" id="23" class="deo:Reference">Jackson 1983</xref>; Coad et al. 1991; <xref ref-type="bibr" rid="R2" id="24" class="deo:Reference">Booch 1991</xref>; <xref ref-type="bibr" rid="R20" id="25" class="deo:Reference">Rumbaugh et al. 1991</xref>; <xref ref-type="bibr" rid="R9" id="26" class="deo:Reference">Jacobson et al. 1992</xref>).<marker type="page" number="3"/><marker type="block"/> During the development of OOA&amp;D two fundamental questions to method engineering have been addressed: • What are the key elements of the method? • What are the basic principles for structuring and presenting the method? These questions are intrinsically related and answering them in our own method engineering effort required several iterations. Once the questions were answered the rest of the method fell in place more easily. In the engineering of OOA&amp;D we made a fundamental decision which helped us design the engineering process and answer the two questions: • The underpinning paradigm of the method engineering process is that of learning and teaching object-oriented ideas to practitioners and students. • The primary customers of the method engineering process are the practitioners and students that want to learn object- orientation. This learning paradigm negates the conventional implicit assump- tion that systems development methods should be structured and presented to reflect the way in which practitioners work when using the method. The learning paradigm has had considerable implications for the engineering of our method and for the structure and documentation of the method. We suggest that this paradigm can help other method engineers overcome some of the difficulties involved in suc- cessfully engineering new methods. These difficulties include: hard- ship of teaching and learning the essentials of a method, difficulty in distinguishing the important differences between alternative methods, reluctance amongst practitioners and students to adhere to the method, and last but not least a slow adaptation of the method. The structure of our discussion is as follows. The process through which we engineered OOA&amp;D is described in section 2. Our experience is interpreted as an iterative process involving elements of theory, method, and case records as in (<xref ref-type="bibr" rid="R3" id="30" class="deo:Reference">Checkland 1981</xref>). In section 3, three major issues in designing OOA&amp;D are then presented and discussed: learning and working with methods; the role of principles, patterns, and guidelines; and, finally, the relation between concepts for reflection and for modeling and concrete representa-<marker type="page" number="4"/><marker type="block"/> tions used to create texts and diagrams. A summary of the learning paradigm and its implications for method engineering is given in section 4.</region>
      <outsider class="DoCO:TextBox" type="page_nr" id="9" page="1" column="1">349</outsider>
      <outsider class="DoCO:TextBox" type="footer" id="10" page="1" column="1">* Published as: Method Engineering: Who's the Customer? L. Mathiassen, A. Munk-Madsen, P. A. Nielsen &amp; J. Stage. In: Method Engineering. Principles of Method Construction and Tool Support, J. Brinkkemper, K. Lyytinen &amp; R. J. Welke (Eds.), Londen: Chapman &amp;</outsider>
      <outsider class="DoCO:TextBox" type="header" id="11" page="2" column="1">IMPROVING ENVIRONMENTS</outsider>
      <outsider class="DoCO:TextBox" type="page_nr" id="28" page="2" column="1">350</outsider>
      <outsider class="DoCO:TextBox" type="header" id="29" page="3" column="1">METHODS</outsider>
      <outsider class="DoCO:TextBox" type="page_nr" id="32" page="3" column="1">351</outsider>
      <outsider class="DoCO:TextBox" type="header" id="33" page="4" column="1">IMPROVING ENVIRONMENTS</outsider>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="35" page="4" column="1">2. The engineering process 2.1. A Specific case</h1>
        <region class="DoCO:TextChunk" id="47" page="4" column="1">Background: We have taught systems development methods to computer science and engineering students for a couple of decades. First, we taught a selection of state-of-the-art methods; then we used Jackson System Development ( <xref ref-type="bibr" rid="R8" id="36" class="deo:Reference">Jackson 1983</xref>) for a few years; later Modern Structured Analysis (<xref ref-type="bibr" rid="R25" id="37" class="deo:Reference">Yourdon 1989</xref>) was used based on different course books; we have taught OOA and OOD (<xref ref-type="bibr" rid="R4" id="38" class="deo:Reference">Coad et al. 1991a</xref>, 1991b); and for the last three years, we have used different versions of our own method, OOA&amp;D. These methods are taught in a software engineering course introducing the students to software engineering in general and analysis and design of computer systems in particular. It is a one- term course with 20 sessions of lectures and related exercises of which the method covers more than half the sessions. The course runs in parallel to a programming course and a one-term project (half of the students’ time) in which the students in groups of 6–7 use the analysis and design method together with programming concepts and techniques to develop a computer system. Within the same term, students are taught a method and required to use it for practical purposes. During the method engineering process, this educational environment gave constant feed-back from the student projects. In a different environment, we have taught the same systems development methods to practitioners. Some of these activities have been general courses with participants from different companies and others have been in-house courses tailored to the needs of specific projects and companies. In particular, starting in 1991, we have taught OOA and OOD based on Coad and Yourdon’s method (1991a, 1991b). Typically, the analysis part and the design part were taught in two separate 3-day courses with a series of lectures in combination with a mini-project in which the participants used the method on a small, but realistic case. Experiences We have different experiences teaching the various methods. Jack-<marker type="page" number="5"/><marker type="block"/> son System Development (<xref ref-type="bibr" rid="R8" id="42" class="deo:Reference">Jackson 1983</xref>) was fairly easy to explain because of its emphasis on clear concepts, the elaborate examples, and the combination of well-defined activities and fundamental principles (e.g. model before function). The implementation part of the method was too elaborate with many technical details, the no- tion of entity was too simple, and some of the graphical representations of concepts were difficult for the students and practitioners to use. Modern Structured Analysis (<xref ref-type="bibr" rid="R25" id="43" class="deo:Reference">Yourdon 1989</xref>) is based on easy- to-understand concepts and intuitively appealing representations. The concepts and representations are, together with a few heuris- tics, the key elements of the method. There are no, or very few, fundamental principles. We found it easy to organize good lectures based on examples, but it was difficult for students and practitioners to combine the various models into coherent practical cases. OOA and OOD (Coad et al. 1991) attempt to overcome this difficulty by introducing object-orientation. The concepts are easy to understand, but the representations are less intuitive. Moreover, it was difficult for the students and practitioners to see how this method could cover all traditional aspects of systems analysis. The approach is heavily oriented towards data models, it is not obvious how services (or methods) are used during analysis, and many practitioners were missing the traditional function-oriented approach to requirements specification. Approach On the basis of these experiences we decided to develop a new method for object-oriented analysis and design in which we would combine the strengths and if possible avoid the weaknesses of these methods. Our approach to this method engineering effort consisted of a number of elements. First, the process was designed to develop a series of versions of the method, to document each version as a set of transparencies together with a still more elaborate text, to use each version in different pedagogical environments, and to systematically collect feed-back from each of these teaching experiences. This process helped us develop an answer to one of the fundamental method engineering questions (What are the basic principles for structuring and presenting the method?). Second, to answer the other fundamental method engineering question (What are the key elements of the method?) our approach<marker type="page" number="6"/><marker type="block"/> included detailed studies of published methods on object-oriented analysis and design. Selected methods were studied in detail, their elements were critically analyzed, similarities and differences between methods were identified, and based on this analysis, we chose principles, concepts and representations that we found potentially useful in our method. Third, we wanted to make sure that the resulting method emerged as a coherent whole, not as a mere collection of selected elements from other methods. To that end we designed our own con- ceptual framework explicating a specific perspective (or theory, cf. section 2.2) on the processes and key products involved in object-oriented analysis and design: a model of a computer system, a model of the context of a computer system, the fundamental concepts of objects and classes, the key activities involved in analysis and design, and, finally, an outline of the resulting documentation. Finally, we stressed the development of realistic examples (or case records, cf. section 2.2) of both the processes of analysis and design (i.e. chronological accounts and experiences) and of the resulting products (i.e. models, specifications, and documentation). These examples were typically developed through small experiments in which some authors were active while others observed and took notes. The primary test-bed for the method engineering process was the different educational activities with students and practitioners, involving lectures, small exercises, and large-scale student projects. Each time a version was tested, new insights were generated, and these insights were then accumulated as the key input to the development of the next version of the method. Documenting each version of the method on transparencies al- lowed for relatively frequent changes and modifications. The com- plementary text, describing elements of the method in greater detail, was modified more seldom. In the end, the method was documented as two complete text books. The method is presently being used as the standard text on object-oriented analysis and design in a number of Scandinavian universities and colleges. At the same time, the first large-scale in- dustrial experiments have taken place.</region>
        <outsider class="DoCO:TextBox" type="page_nr" id="40" page="4" column="1">352</outsider>
        <outsider class="DoCO:TextBox" type="header" id="41" page="5" column="1">METHODS</outsider>
        <outsider class="DoCO:TextBox" type="page_nr" id="45" page="5" column="1">353</outsider>
        <outsider class="DoCO:TextBox" type="header" id="46" page="6" column="1">IMPROVING ENVIRONMENTS</outsider>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="48" confidence="possible" page="6" column="1">2.2. A general model</h1>
        <region class="DoCO:TextChunk" id="62" page="6" column="1">Stressing in method engineering, as we do, the context of learning <marker type="page" number="7"/><marker type="block"/> the method at the expense of the context of working with the method, we run the risk of ending up with a wrongly balanced pic- ture of the relation between methods and practices. To frame our discussion with a balanced view, we use a general model by Anderton and Checkland (see <xref ref-type="bibr" rid="R3" id="52" class="deo:Reference">Checkland 1981</xref>, p. 7–8). They argue con- vincingly that any development of a subject (in our case an object- oriented method including case records and underlying theories) has to be circular and has to contain the elements depicted in <xref ref-type="fig" rid="F1" id="53" class="deo:Reference">figure 1</xref>. In developing our method, the related area of reality (containing concerns, issues, problems, and aspirations) is object- oriented analysis and design practices. Together with other sources (e.g. experience with other types of analysis and design methods, general theories about design) these practices give rise to ideas about object-oriented analysis and design from which may be for- mulated substantive theories (about object-oriented models and systems) and methodological theories (about development of object-oriented models and systems). Such theories present problems (e.g. on how to understand the behavior of objects) which may be analyzed using models and related techniques. The theories yield methodologies (in the context of this paper: systems development methods) which use the developed models and techniques. The methodologies are then used in action in the related area of reality. These applications of the methodology are documented in case records that support criticism of the theories. This general model of development of a subject, or in this context, method engineering, emphasizes a number of important points: 1. The ultimate source of inspiration and the ultimate test-bed for a systems development method is the related area of reality, i.e. the practices related to the method (including in- dividual learning, organizational adaptation, and practical use in projects). 2. Systems development methods are based on (implicit or ex- plicit) theories about the products and processes involved in working within the related area of reality (in our case object-oriented systems development). 3. Case records (documented practices of working with the method) play an important role in evaluating the underlying theories and the related models and techniques.<marker type="page" number="8"/><marker type="block"/> These three characteristics of the iterative process are expressions of fundamental relations between methods and practices. In the development of our method they all played important roles, cf. section 2.1. The last two points correspond quite directly to the approach taken in developing our method. In the following, we will elaborate<marker type="page" number="9"/><marker type="block"/> on the first point by concentrating on the importance of learning a method (which is also an integral part of the concerns in the related area of reality) as opposed to mainly focusing on working with the method.</region>
        <outsider class="DoCO:TextBox" type="page_nr" id="50" page="6" column="1">354</outsider>
        <outsider class="DoCO:TextBox" type="header" id="51" page="7" column="1">METHODS</outsider>
        <outsider class="DoCO:TextBox" type="page_nr" id="55" page="7" column="1">355</outsider>
        <outsider class="DoCO:TextBox" type="header" id="56" page="8" column="1">IMPROVING ENVIRONMENTS</outsider>
        <region class="DoCO:FigureBox" id="F1">
          <caption class="deo:Caption" id="58" page="8" column="1">Figure 1. Anderton and Checkland’s model of a developing subject (<xref ref-type="bibr" rid="R3" id="57" class="deo:Reference">Checkland 1981</xref>, p. 8).</caption>
        </region>
        <outsider class="DoCO:TextBox" type="page_nr" id="60" page="8" column="1">356</outsider>
        <outsider class="DoCO:TextBox" type="header" id="61" page="9" column="1">METHODS</outsider>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="63" page="9" column="1">3. Design issues</h1>
        <region class="DoCO:TextChunk" id="64" page="9" column="1">Three major issues, all related to the learning paradigm, have played a significant role in the design of the method. This section will discuss these and thus explicate the difference and the relationship between taking a learning and a working paradigm.</region>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="65" confidence="possible" page="9" column="1">3.1. Learning and working</h1>
        <region class="DoCO:TextChunk" id="85" page="9" column="1">Soft Systems Methodology (SSM) is a method employing systems concepts and ideas to change organizations. It is a very general method that has nothing in particular to do with the development of computer-based information systems. SSM was engineered or rather it evolved from the action research by Peter Checkland and his col- leagues at the Systems Department at Lancaster University from 1969 to the present. The evolution can be described as in <xref ref-type="fig" rid="F2" id="66" class="deo:Reference">figure 2</xref>.<marker type="block"/> This cyclic process based on working with the method in projects where students and researchers engage in real problems in organizations has been very successful. SSM has by now been used in hundreds of such projects, but it has also taken 25 years to bring SSM to its present form. Engineering a method in this way makes the eliciting of experience from the practice of working with the method the core activity. The engineering approach is thus characterized by: • Experience is elicited from working with the method.<marker type="page" number="10"/><marker type="block"/> • There is a slow turn-around in the cyclic process as it is the real-world setting that forms the problems and therefore also the time-span. • The usefulness of the method is judged on its strength as a working device in processes of development and change. • It is difficult to evaluate “working with a method” in real- world settings. This model of method engineering is expanded in <xref ref-type="fig" rid="F3" id="74" class="deo:Reference">figure 3</xref> to em- brace the method learning cycle. <xref ref-type="fig" rid="F3" id="75" class="deo:Reference">Figure 3</xref> highlights the cyclic process where the learning of a method forms the practice from which experience is elicited such that the method can be re-created to be- come a better device for learning the method.<marker type="block"/> This expanded engineering approach is characterized by: • Experience is elicited from learning the method. • There is a fast turn-around in the cyclic process as it is the class-room setting that forms the problems and the time- span. • The usefulness of the method is judged on its strengths as a learning device in processes of teaching and acquiring knowledge on the relationship between the method and practice. • It is easier to evaluate “learning a method” in a class-room setting.<marker type="page" number="11"/><marker type="block"/> To elaborate on this distinction between learning and working, we take a method to be an abstract account of possible ways in which activities in systems development may be performed. Viewed from the perspective of learning, a method is a framework for learning a class of systems development practices. Viewed from the perspective of working, a method is a set of guidelines and underlying theories for working within a class of systems development practices. Use of a method will in this sense encompass both the learning perspective and the working perspective. To acquire eloquence in a method one needs to be involved in both. Working with a method enables the learning the method; and learning a method enables working with the method. In both cases, as part of the practical use of a method, it is adapted to the specifics of the use situation and supplemented with other approaches. In our engineering of OOA&amp;D we have chosen a basic structure and presentation primarily suited for learning. This is in part due to the fact that we have to define a structure in which to represent the method while working with the method may well follow various structures depending on the specifics of the situation. A book has a structure, a series of lectures and exercises has a fixed structure and even a single lecture has a sequence attached to it. A pertinent question for us as method engineers was therefore: In which sequence should the story of object-orientation be told? We chose a sequence which we followed in both the transparencies documenting the courses and in the text-book. For example, in our learning perspective one has to start learning about objects and classes and how to take decisions on which classes to include in a model and which to exclude. Then one can learn about object and class structures and how to model such structures. Then one can learn about object dynamics and how to model that in classes. We could, of course, have chosen another sequence based on other pedagogical ideas. In taking these fundamental decisions on sequence, the method engineer has to apply pedagogical arguments rather than arguments of the type “this is how it works in practice”. A presentation of a method is like a story with good explanations of the complexi- ties of its subject (like object-orientation in analysis and design) and with explanations that are understandable by novices with respect to the subject (e.g. students and practitioners not mastering object- orientation). Different pedagogies may be chosen, but it is still a pedagogical decision.<marker type="page" number="12"/><marker type="block"/> In the presentation of OOA&amp;D we have made a particular point of giving such a sequence that is good for learning our method. But we have also explained in more general terms and using examples how that sequence differs from actually working with OOA&amp;D in practice. A method engineer should not forget the working perspective and neglect the experience elicited from the practice of working with the method. Any presentation and good explanation of a method will also have to encompass guidance on how to relate learning and working. The crux of the matter is that the basic structure of a method should primarily be suitable for learning and secondarily for working.</region>
        <region class="unknown" id="68" page="9" column="1">hence Create method Elicit experience from the practice hence hence Work with method</region>
        <region class="DoCO:FigureBox" id="F2">
          <caption class="deo:Caption" id="70" page="9" column="1">Figure 2. The evolution of a method through action research (<xref ref-type="bibr" rid="R3" id="69" class="deo:Reference">Checkland 1981</xref>, p. 254).</caption>
        </region>
        <outsider class="DoCO:TextBox" type="page_nr" id="72" page="9" column="1">357</outsider>
        <outsider class="DoCO:TextBox" type="header" id="73" page="10" column="1">IMPROVING ENVIRONMENTS</outsider>
        <region class="unknown" id="77" page="10" column="1">hence Create method Elicit experience from the practice hence hence Work with method Learn method</region>
        <region class="DoCO:FigureBox" id="F3">
          <caption class="deo:Caption" id="78" page="10" column="1">Figure 3. The learning cycle and its relationship with the working cycle.</caption>
        </region>
        <outsider class="DoCO:TextBox" type="page_nr" id="80" page="10" column="1">358</outsider>
        <outsider class="DoCO:TextBox" type="header" id="81" page="11" column="1">METHODS</outsider>
        <outsider class="DoCO:TextBox" type="page_nr" id="83" page="11" column="1">359</outsider>
        <outsider class="DoCO:TextBox" type="header" id="84" page="12" column="1">IMPROVING ENVIRONMENTS</outsider>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="86" confidence="possible" page="12" column="1">3.2. Principles, patterns, and guidelines</h1>
        <region class="DoCO:TextChunk" id="98" page="12" column="1">A method contains descriptions of processes and products involved in the related class of systems development practices. These descriptions can be given in reasonably abstract forms. Guidelines are rather concrete expressions of ways of doing things. They typically include ways of representing concepts combined with techniques or procedures for how to apply these representations to develop models. Principles and patterns are more abstract descriptions. Principles are understood as abstract accounts of approaches to specific processes. Patterns are abstract descriptions of partial solutions to modeling the products. In the engineering of OOA&amp;D and most prominently in the presentation of OOA&amp;D, guidelines are, of course, used to illustrate and explain. But principles and patterns are at the very center. Each of the core chapters in the text-books and each of the core lectures in the courses explains an activity in the method. <xref ref-type="fig" rid="F4" id="87" class="deo:Reference">Figure 4</xref> shows part of the front-page of chapter 5 in the text-book on analysis. This chapter explains the activity “Dynamics” and it puts strong emphasis on the purpose of the activity, the concepts to be explained in the chapter as well as being used during performing the activity, the principles giving abstract accounts of processes, and the product of the activity. Similarly, patterns are frequently used to explain solutions to modeling problems or product development. The activities on archi- tectural design are mainly explained in terms of different patterns (e.g. layered architecture and client-server architecture). Another chapter gives a pattern (template) for the analysis and design<marker type="page" number="13"/><marker type="block"/> documentation and these are complemented with specific examples of full analysis and design documents. Basically, there are two ways of using patterns in a description of a method: as exemplars and masterpieces to be plagiarized, and as generally applicable solutions that have been shown to solve partial problems. Principles and patterns supplement each other nicely as the principles provide abstract accounts to guide and understand processes and the patterns provide abstract accounts of (partial) products without any of the two over-emphasizing particular ways of performance. Principles and patterns are important means for learning a systems development method. Guidelines are useful, of course, as<marker type="page" number="14"/><marker type="block"/> they provide possible concrete ways to apply principles and patterns. What matters, though, is often what is done, not precisely how it is done. Explanation in terms of principles and patterns fo- cuses on the important and the essential rather than on the many and sometimes obscure details. Moreover, such explanations en- courage the method engineer to explicate the ideas, theories, and problems underlying the method, cf. <xref ref-type="fig" rid="F1" id="97" class="deo:Reference">figure 1</xref>. This insight will help practitioners and students trying to learn the method to understand and appreciate, not only what should be done, but also why it should be done. For practitioners working with the method this level of ap- preciation is useful to understand how the method can be combined with other methods and tailored to different situations, maintaining the essentials and reshaping the specifics.</region>
        <outsider class="DoCO:TextBox" type="page_nr" id="89" page="12" column="1">360</outsider>
        <outsider class="DoCO:TextBox" type="header" id="90" page="13" column="1">METHODS</outsider>
        <region class="unknown" id="91" page="13" column="1">Dynamics Purpose • To describe the dynamics of the object system in terms of behavior of objects. Concepts • Event life-cycle: A concrete sequence of events which an object during a particular time-span is involved in. • Behavioral pattern: An abstract pattern of events that stipulates the possible and desirable event life-cycles for all objects in a class. • Attribute: The name of a data property for a class or an event. Principles • Describe the behavior of objects by a behavioral pattern for their class. • Consider particularly events which are common for several objects. • Deduce the attributes for a class from its behavioral pattern. Results • Behavioral pattern and attributes for each class.</region>
        <region class="DoCO:FigureBox" id="F4">
          <caption class="deo:Caption" id="93" page="13" column="1">Figure 4. Sample of a front-page from chapter 5 in (<xref ref-type="bibr" rid="R13" id="92" class="deo:Reference">Mathiassen et al. 1993</xref>).</caption>
        </region>
        <outsider class="DoCO:TextBox" type="page_nr" id="95" page="13" column="1">361</outsider>
        <outsider class="DoCO:TextBox" type="header" id="96" page="14" column="1">IMPROVING ENVIRONMENTS</outsider>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="99" confidence="possible" page="14" column="1">3.3. Concepts and representations</h1>
        <region class="DoCO:TextChunk" id="107" page="14" column="1">A systems development method supports the modeling of computer- based systems through concepts and means of representation. From a working perspective it is important to provide a full notation and all that comes with a notation, e.g. symbols, semantics, rules for ap- plying the symbols, and ways of manipulating texts or diagrams written with the notation. This embodies both concepts and means of representation, but with a leaning towards the means of representation. From a learning perspective concepts are more important elements of a method than the related means of representation. Means of representation are not neglected, but they play a different role in learning the modeling techniques compared to the concepts. In particular, specific means of representation are needed to explain and illustrate a method. This is done for various reasons: examples of products are given in a representation, ways of modeling and modi- fying models are given in a representation, etc. In presenting a method it is useful to adhere to a few, preferably coherent representations. In the engineering of OOA&amp;D we put more emphasis on which concepts we chose to be part of the method than on the representation of the concepts in models. Our means of representation were taken from ( <xref ref-type="bibr" rid="R4" id="100" class="deo:Reference">Coad et al. 1991a</xref>; <xref ref-type="bibr" rid="R8" id="101" class="deo:Reference">Jackson 1983</xref>; <xref ref-type="bibr" rid="R7" id="102" class="deo:Reference">Harel 1987</xref>; <xref ref-type="bibr" rid="R9" id="103" class="deo:Reference">Jacobson et al. 1992</xref>) and what we didn’t find there we invented our own representations of. Having decided which concepts it should be possible to use in creating a model, it was fairly easy to go through the<marker type="page" number="15"/><marker type="block"/> available notations used by others and find suitable representations. After having written the two text-books we were asked by a company within telecommunications and associated with major for- eign companies all using Rumbaugh et al.’s method (1991) to give a course on object-oriented analysis. They wanted to stick to Rumbaugh et al.’s means of representation but wanted our method in the learning of object-oriented practices. Because the key elements of OOA&amp;D are independent of the chosen means of representation it was fairly easy to change the means of representation in a whole 3- day course to those used by Rumbaugh et al. It took 7 hours to change the transparencies and none of the concepts in OOA&amp;D had to be changed in the process. All in all, concepts are more important elements of a method than the related means of representation.</region>
        <outsider class="DoCO:TextBox" type="page_nr" id="105" page="14" column="1">362</outsider>
        <outsider class="DoCO:TextBox" type="header" id="106" page="15" column="1">METHODS</outsider>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="108" page="15" column="1">4. Summary</h1>
        <region class="DoCO:TextChunk" id="112" page="15" column="1">This paper has reported experiences from a method engineering effort that was governed by a paradigm for learning methods rather than a paradigm for working with methods. We have discussed this paradigm by exploring three issues involved in method engineering: (1) the relation between learning the method and working with the method; (2) the role of principles, patterns, and guidelines in explaining the method; and, finally, (3) the relation between concepts for reflection and modeling and concrete representations used to create texts and diagrams. The main points to consider for other method engineers are: • When experience is elicited from learning the method there is a fast turn-around in the cyclic process of development and it becomes easier to evaluate new versions of the method. • Principles and patterns are important means for learning a systems development method. Guidelines are useful, of course, as they provide possible concrete ways to apply principles and patterns. But what matters is often what is done and why it is done, not precisely how it is done. • From a learning perspective, concepts are more important elements of a method than the related means of representation. In addition, when the key elements of a method are in- <marker type="page" number="16"/><marker type="block"/> dependent of the chosen means of representation it was fairly easy to change the means of representation when adapting the method to new situations. In summary, we suggest that the primary customers of method engineering are those studying methods eager to learn a class of new systems development practices. Those actually working with the method should only play a secondary role in structuring and presenting a new method—even though they, of course, are the ultimate judges of the method’s practical strengths and weaknesses.</region>
        <outsider class="DoCO:TextBox" type="page_nr" id="110" page="15" column="1">363</outsider>
        <outsider class="DoCO:TextBox" type="header" id="111" page="16" column="1">IMPROVING ENVIRONMENTS</outsider>
      </section>
      <section class="DoCO:Bibliography">
        <h1 class="DoCO:SectionTitle" id="113" confidence="possible" page="16" column="1">References</h1>
        <ref-list class="DoCO:BiblioGraphicReferenceList">
          <ref rid="R1" class="deo:BibliographicReference" id="114" page="16" column="1">Andersen, R., J. A. Bubenko Jr. &amp; A. Sølvberg (1991): Advanced Information Systems Engineering. Proceedings from CAiSE ‘91. Berlin: Springer-Verlag.</ref>
          <ref rid="R2" class="deo:BibliographicReference" id="115" page="16" column="1">Booch, G. (1991): Object-Oriented Design with Applications. Redwood City, California: Benjamin/Cummings.</ref>
          <ref rid="R3" class="deo:BibliographicReference" id="116" page="16" column="1">Checkland, P. B. (1981): Systems Thinking, Systems Practice. Chichester: Wiley.</ref>
          <ref rid="R4" class="deo:BibliographicReference" id="117" page="16" column="1">Coad, P. &amp; E. Yourdon (1991a): Object Oriented Analysis, 2nd edition. New York: Prentice-Hall.</ref>
          <ref rid="R5" class="deo:BibliographicReference" id="118" page="16" column="1">Coad, P. &amp; E. Yourdon (1991b): Object Oriented Design. New York: Prentice-Hall.</ref>
          <ref rid="R6" class="deo:BibliographicReference" id="119" page="16" column="1">Fichman, R. G. &amp; C. F. Kemerer (1993): Adoption of Software Engineering Process Innovations: The Case of Object Orientation. Sloan Management Review, Vol. 34, No. 2 (7–22).</ref>
          <ref rid="R7" class="deo:BibliographicReference" id="120" page="16" column="1">Harel, D. (1987): Statecharts: A Visual Formalism for Complex Systems. Science of Computer Programming, Vol. 8 (231–274).</ref>
          <ref rid="R8" class="deo:BibliographicReference" id="121" confidence="possible" page="16" column="1">Jackson, M. (1983). System Development. Englewood Cliffs, New Jersey: Prentice-Hall.</ref>
          <ref rid="R9" class="deo:BibliographicReference" id="122" page="16" column="1">Jacobson, I., M. Christerson, P. Jonsson &amp; G. Övergaard (1992): Object-Oriented Software Engineering. Wokingham: Addison-Wesley.</ref>
          <ref rid="R10" class="deo:BibliographicReference" id="123" page="16" column="1">Kensing, F. &amp; A. Munk-Madsen (1993): Participatory Design: Structure in the Toolbox. Communications of the ACM, Vol. 36, No. 6 (78–85).</ref>
          <ref rid="R11" class="deo:BibliographicReference" id="124" page="16" column="1">Mathiassen, L. (1981). Systems Development and Systems Development Method. Ph.D. thesis, Oslo University. (In Danish)</ref>
          <ref rid="R12" class="deo:BibliographicReference" id="125" page="16" column="1">Mathiassen, L., A. Munk-Madsen, P. A. Nielsen &amp; J. Stage (1991): Soft Systems in Software Design. (311–317) in M. C. Jackson et al. (Eds.): Systems Thinking in Europe. New York: Plenum Press.</ref>
          <ref rid="R13" class="deo:BibliographicReference" id="126" page="16" column="1">Mathiassen, L., A. Munk-Madsen, P. A. Nielsen &amp; J. Stage (1993): Object- Oriented Analysis. Aalborg: Marko. (In Danish)</ref>
          <ref rid="R14" class="deo:BibliographicReference" id="129" page="17" column="1">Mathiassen, L., A. Munk-Madsen, P. A. Nielsen &amp; J. Stage (1995): Object- Oriented Design. Aalborg: Marko. (In Danish)</ref>
          <ref rid="R15" class="deo:BibliographicReference" id="130" page="17" column="1">Nielsen, P. A. (1990a): Approaches for Appreciating Information Systems Methodologies: A Soft Systems Survey. Scandinavian Journal of Information Systems, Vol. 2.</ref>
          <ref rid="R16" class="deo:BibliographicReference" id="131" page="17" column="1">Nielsen, P. A. (1990b): Using and Learning IS Development Methodologies. Ph.D. thesis, Lancaster University.</ref>
          <ref rid="R17" class="deo:BibliographicReference" id="132" page="17" column="1">Olle, T. W., H. G. Sol &amp; A. A. Verrijn-Stuart (Eds.) (1982): Information Systems Design Methodologies: A Comparative Review. Amsterdam: North- Holland.</ref>
          <ref rid="R18" class="deo:BibliographicReference" id="133" page="17" column="1">Olle, T. W., H. G. Sol &amp; C. J. Tully (Eds.) (1983): Information Systems Design Methodologies: A Feature Analysis. Amsterdam: North-Holland.</ref>
          <ref rid="R19" class="deo:BibliographicReference" id="134" page="17" column="1">Olle, T. W., H. G. Sol &amp; A. A. Verrijn-Stuart (Eds.) (1986): Information Systems Design Methodologies: Improving the Practice. Amsterdam: North- Holland.</ref>
          <ref rid="R20" class="deo:BibliographicReference" id="135" page="17" column="1">Rumbaugh, J., M. Blaha, W. Premerlani, S. Eddy &amp; W. Lorensen (1991): Object-Oriented Modelling and Design. Englewood Cliffs, New Jersey: Prentice-Hall.</ref>
          <ref rid="R21" class="deo:BibliographicReference" id="136" confidence="possible" page="17" column="1">Stage, J. (1989). Between Tradition and Transcendence: Analysis and Design in Systems Development. Ph.D. thesis, Oslo University. (In Danish)</ref>
          <ref rid="R22" class="deo:BibliographicReference" id="137" page="17" column="1">Steinholtz, A. Sølvberg &amp; L. Bergman (1990): Advanced Information Systems Engineering. Proceedings from CAiSE ‘90. Berlin: Springer-Verlag.</ref>
          <ref rid="R23" class="deo:BibliographicReference" id="138" page="17" column="1">Tolvanen, J.-P. &amp; K. Lyytinen (1993): Flexible Method Adaptation in CASE: The metamodeling approach. Scandinavian Journal of Information Systems, Vol. 5 (51–78).</ref>
          <ref rid="R24" class="deo:BibliographicReference" id="139" page="17" column="1">Verrijn-Stuart, A. A. &amp; T. W. Olle (Eds.) (1994): Methods and Associated Tools for the Information Systems Life Cycle. Amsterdam: North-Holland.</ref>
          <ref rid="R25" class="deo:BibliographicReference" id="140" page="17" column="1">Yourdon, E. (1989): Modern Structured Analysis. New York: Prentice-Hall .</ref>
        </ref-list>
        <outsider class="DoCO:TextBox" type="page_nr" id="127" page="16" column="1">364</outsider>
        <outsider class="DoCO:TextBox" type="header" id="128" page="17" column="1">METHODS</outsider>
        <outsider class="DoCO:TextBox" type="page_nr" id="141" page="17" column="1">365</outsider>
      </section>
    </body>
  </article>
</pdfx>
