<?xml version='1.0' encoding='UTF-8'?>
<pdfx xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://pdfx.cs.man.ac.uk/static/article-schema.xsd">
  <meta>
    <job>29e11da41b4bc974a86931179fe83f44495fe4d545147201821feb03e87b5fb4</job>
    <base_name>62kb</base_name>
    <doi>10.1057/palgrave.ivs.9500066</doi>
  </meta>
  <article>
    <front class="DoCO:FrontMatter">
      <outsider class="DoCO:TextBox" type="header" id="2">Information Visualization <ext-link ext-link-type="uri" href="http://ivi.sagepub.com/" id="1">http://ivi.sagepub.com/</ext-link></outsider>
      <title-group>
        <article-title class="DoCO:Title" id="3">About Face 2.0: The Essentials of Interaction Design: Alan Cooper and Robert Reimann Published by John Wiley &amp; Sons, 2003, 576 pp, ISBN 0764526413</article-title>
      </title-group>
      <abstract class="DoCO:Abstract" id="5" confidence="possible">Protima Banerjee Information Visualization 2004 3: 223 DOI: 10.1057/palgrave.ivs.9500066 The online version of this article can be found at: <ext-link ext-link-type="uri" href="http://ivi.sagepub.com/content/3/3/223.citation" id="4">http://ivi.sagepub.com/content/3/3/223.citation</ext-link></abstract>
      <region class="DoCO:TextChunk" id="6" confidence="possible">Published by:</region>
      <region class="DoCO:FigureBox" id="Fx7">
        <image class="DoCO:Figure" src="62kb.page_001.image_01.png" thmb="62kb.page_001.image_01-thumb.png"/>
      </region>
      <region class="DoCO:TextChunk" id="13" confidence="possible"> <ext-link ext-link-type="uri" href="http://www.sagepublications.com" id="8">http://www.sagepublications.com</ext-link> Additional services and information for Information Visualization can be found at: Email Alerts: <ext-link ext-link-type="uri" href="http://ivi.sagepub.com/cgi/alerts" id="9">http://ivi.sagepub.com/cgi/alerts</ext-link> Subscriptions: <ext-link ext-link-type="uri" href="http://ivi.sagepub.com/subscriptions" id="10">http://ivi.sagepub.com/subscriptions</ext-link> Reprints: <ext-link ext-link-type="uri" href="http://www.sagepub.com/journalsReprints.nav" id="11">http://www.sagepub.com/journalsReprints.nav</ext-link> Permissions: <ext-link ext-link-type="uri" href="http://www.sagepub.com/journalsPermissions.nav" id="12">http://www.sagepub.com/journalsPermissions.nav</ext-link> &gt;&gt; Version of Record - Sep 1, 2004 What is This?</region>
      <outsider class="DoCO:TextBox" type="footer" id="14">Downloaded from ivi.sagepub.com at Lancaster University Library on October 5, 2013</outsider>
      <outsider class="DoCO:TextBox" type="header" id="15">Information Visualization (2004) 3, 223–225 &amp; 2004 Palgrave Macmillan Ltd. All rights reserved 1473-8716 $30.00 www.palgrave-journals.com/ivs</outsider>
      <region class="DoCO:TextChunk" id="16" confidence="possible">BOOK REVIEW About Face 2.0: The essentials of interaction design Alan Cooper and Robert Reimann Published by John Wiley &amp; Sons, 2003, 576 pp, ISBN 0764526413 Reviewed by: Protima Information Visualization (2004) 3, 223–225. doi:10.1057/palgrave.ivs.9500066 Banerjee College of Information Science and Technology, About Face 2.0 seeks to develop the discipline of interaction design in the Drexel University, Philadelphia, PA 19104, USA context of industry shifts that occurred in the 7 years since the first edition of the book was published in 1996, especially the emergence of web-based design. It builds on Alan Cooper’s highly successful The Inmates are Running the Asylum, which introduced the notion of interaction design; but while that earlier work focused on identifying the user-hostile elements in interfaces, About Face 2.0 looks for remedies. Cooper and Robert Reimann define interaction design as a holistic approach to ‘the design of the behavior of artifacts, environment, and systems, as well as the formal elements that communicate that behavior’. Throughout the book, they step the reader through the terminology and processes of the discipline, and outline the principles that would guide the actions of a successful practitioner. The authors’ central premise, and the one that motivates the cultivation of interaction designers within software development organizations, is that programmers do not make good interaction designers. The skill-set required to become a successful programmer is orthogonal to the skill-set of a successful interaction designer; this is not to say that programmers cannot be good interaction designers and vice versa, but some degree of re- tooling is required for a person to move successfully between the two functions. We found this point to be a valid and important precursor to the remainder of the reading. The strengths of this book are in the high-level interface design concepts it presents; it is not, nor does it aim to be, a style guide or a set of interface standards to be rigorously adhered to. As a whole, it was well-written and persuasive, with much of the power of the authors’ arguments coming directly from the well-chosen examples cited throughout. These examples were taken from a variety of common applications that a broad swath of readers would be familiar with (Adobe Photoshop, Microsoft Word and Excel, Microsoft Paint, Windows, and MacOS X, to name a few) and illustrated both effective and ineffective design constructs. Sometimes the scenarios presented were comical, and sometimes they were disastrous, but they were always situations that the average computer user could relate to. Some of the most innovative concepts are presented early on in the book. Cooper and Reimann advocate the idea of designing for an intermediate user, rather than the novice or the expert. Novices, they say, will soon graduate to an intermediate level and few users, if any, will</region>
      <outsider class="DoCO:TextBox" type="header" id="17">Book Review</outsider>
      <outsider class="DoCO:TextBox" type="header" id="18">Protima Banerjee</outsider>
      <outsider class="DoCO:TextBox" type="page_nr" id="19">224</outsider>
      <region class="DoCO:TextChunk" id="27">have the time or interest to move from the intermediate level to expert competency. The bulk of the users of any program will quickly become intermediates, and stay intermediates for the duration of their software use. Prioritizing the needs of the intermediates prompts the designer to consider removing overly explicit help or introductory screens, while maintaining some avenues for the users to get help if they need it. Another inventive idea central to the book is the notion of goal-directed design. According to the authors, software products designed solely with business goals in mind will fail to meet the needs of its users if personal goals are not considered as well. A goal is defined as being broader-based than a day-to-day task and unlikely to change over time; examples of personal goals are ‘Be the best at what I do’, ‘Feel competent and confident’, and ‘Get on the fast track and win that big promotion.’ These are distinguished from business goals which might include, ‘finalize the press release’ and ‘process the customer’s order.’ A good design, Cooper and Reimann insist, must fit into the context of the goals of a user community. They introduce the construct of a persona, which models a goal-driven user for the purposes of software scenario design. This human-centric approach appealed to us, but would have benefited from a more detailed examination of how a persona should be selected, and then mapped to the personal and business goals of the user community. We found the discussion of software postures and personalities enlightening as well. The authors state that all software can be categorized into four software postures, which are described in detail: sovereign, transient, auxiliary and daemonic. The sovereign posture is most frequently adopted by stand-alone applications that can assume they will be occupying the user’s full attention and screen real estate for the duration of the usage period. The transient posture is adopted by applications that are on the screen for short periods of time, and serve a narrow function, typically complemen- tary to a sovereign application. A print utility is a good example of a transient posture. Programs that adopt the daemonic posture typically have no interaction with users, except for some type of configuration screen. And the auxiliary posture is a cross-breed between the sovereign posture and the transient, adopted in certain special cases. Adjacent to the idea of software postures is the idea of software personality. Cooper and Reimann propose that good software, like a good assistant, should be considerate, and neatly outline the characteristics that make software (and people) considerate and well-liked. Some of the things that make software considerate include that it acts deferentially, is forthcoming, uses common sense, anticipates needs, keeps you informed and fails gracefully. Keeping the software posture and personality in mind during the design process aids the interaction designer in making wise subjective decisions. Sometimes, however, in their effort to promote human- centered design principles, the authors contradict their <marker type="column" number="2"/><marker type="block"/> own wisdom. In one section, they speak of how difficult it was to convey the idea of saving a file to disk to their mothers. ‘Mom’, they say, ‘is representative of the mass market of computer buyers’. Although the discussion of eliminating the process of ‘saving’ a file was well- presented, we found two problems with the basic hypothesis. The vast majority of future computer users and buyers are not our mothers but our children, who are growing up familiar with the concept of files and saving them. Furthermore, the operation of saving a file cannot be changed within the scope of a single application without a more fundamental change at the operating system level; more confusion would be caused by inconsistent interfaces than any benefits the change might produce. Cooper and Reimann here violate their earlier principle of designing for the intermediate user. No one, not even Mom, likes being thought of as a novice computer user; she can and will quickly graduate to the intermediate stage where saving a file becomes second nature. Another potential improvement would have been an extension of the discussion about the goal-directed design process into the latter parts of the book, where specific elements of visual interaction are discussed. The goal-directed design process was introduced in the first section of the book and breaks down into five phases: researching the users and the domain, modeling users and their contexts, requirements definition, framework definition and design of flow, and refinement of system behavior. The argument for pursuing a goal-directed design process would have been made much stronger if references to it were made throughout the book, to tie the elements of the process into the concrete elements of interface design About Face 2.0 is divided into three sections, the first of which stresses the design of complex, user-focused behaviors of interactive systems. We found this to be the most valuable part of the book, and the one that should absolutely be read cover to cover by anyone interested in user interface design. It includes some truly visionary approaches to a human-centered interaction design approach, many of which were mentioned earlier in this review such as goal-directed design, designing for intermediates, understanding and modeling users and personas. The second section is more detail-oriented and pro- vides strategic principles and tools for the interaction designer. It includes the excellent explanation of software postures and personality mentioned earlier, and goes on to elaborate on the postures that are apropos to web- based design. There is also a good discussion on eliminating excise, or unnecessary user input, which puts commonly used error notification processes in a new light. This is followed by an in-depth examination of the pitfalls associated with the ‘undo’ mechanisms, and how to avoid them. The section ends with a tight overview of visual design principles, along with pointers to where readers can go for a more in-depth study of the field.<marker type="page" number="4"/><marker type="column" number="1"/><marker type="block"/> The final section of the book delves deeply into actual design issues and talks of how the principles of interaction design can be applied, in particular, to web design. It was here that the authors took a brief detour from technical issues to present a brief history of the user interface, starting from its early days at PARC, which we personally found very interesting. In addition, the chapters on control mechanisms, in particular the few that focused on proper use of dialogs, were highlights of this section. The final two chapters served as summarization for the rest of the book, and concentrated on applying interaction design concepts to designing for web applications and small devices like handhelds. The book concludes with two appendices, Axioms and Design Tips, which are a compendium of all the key principles presented throughout the book for quick and easy future reference. Overall, we found About Face 2.0 to be an excellent book for those looking to enhance their understanding,<marker type="column" number="2"/><marker type="block"/> competence in, and appreciation for interaction design. It was easy to read and offers a good overview of all the various aspects of interface design – for those topics it does not cover in detail, it refers the reader to more appropriate sources. A future edition of the book, if one is planned, might benefit from an examination of inter- nationalization issues in interaction design; as software is distributed globally through mediums like the internet it would be valuable to have a set of guidelines for designing for a cross-cultural audience. The methodology and approaches advocated in this book would seem to lend themselves naturally to such an extension, and we would especially be interested in seeing how software personalities might be affected by such a context. In conclusion, About Face 2.0 not only explains interaction design but also does a good job of justifying it, both for the current software development environment and for the future.</region>
      <outsider class="DoCO:TextBox" type="footer" id="22">Information Visualization</outsider>
      <outsider class="DoCO:TextBox" type="header" id="23">Book Review</outsider>
      <outsider class="DoCO:TextBox" type="header" id="24">Protima Banerjee</outsider>
      <outsider class="DoCO:TextBox" type="page_nr" id="25">225</outsider>
      <outsider class="DoCO:TextBox" type="footer" id="28">Information Visualization</outsider>
    </front>
    <body class="DoCO:BodyMatter"/>
  </article>
</pdfx>
