<?xml version='1.0' encoding='UTF-8'?>
<pdfx xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://pdfx.cs.man.ac.uk/static/article-schema.xsd">
  <meta>
    <job>0b877e1ee7ed9cf93e34e89d6aac8978b4e85ee988453f64c1ba8c488c56e704</job>
    <base_name>62qx</base_name>
    <doi confidence="possible" alt_doi="http://dx.doi.org/10.3737/ecrystals.chemistry.drexel.edu/1">http://dx.doi.org/10.3737/ecrystals.chemistry.drexel.edu</doi>
  </meta>
  <article>
    <front class="DoCO:FrontMatter">
      <outsider class="DoCO:TextBox" type="header" id="1">Proceedings of DESRIST 2008</outsider>
      <outsider class="DoCO:TextBox" type="header" id="2">Session P12-A: Advancing DS Approaches</outsider>
      <title-group>
        <article-title class="DoCO:Title" id="3">Goal-Framing and Breakdowns in the Design of Boundary-Spanning Information Systems 1</article-title>
      </title-group>
      <contrib-group class="DoCO:ListOfAuthors">
        <contrib contrib-type="author">
          <name id="5">Susan Gasson the iSchool at Drexel</name>
        </contrib>
        <contrib contrib-type="author">
          <name id="6">Drexel University</name>
        </contrib>
        <contrib contrib-type="author">
          <name id="7">Philadelphia</name>
        </contrib>
        <contrib contrib-type="author">
          <name id="8">USA sgasson@ischool.drexel.edu</name>
        </contrib>
      </contrib-group>
      <region class="DoCO:TextChunk" id="9" confidence="possible">Abstract Design groups which span organizational boundaries are becoming increasingly common and present a unique problem for information system design. Such groups attempt to integrate design understanding across many different domains of expertise and knowledge. This means that no one design group participant is likely to understand either the problem domain or the solution domain in full. This paper critiques traditional and emerging process models of design, in terms of their applicability for boundary-spanning design groups. Following the use of the term in other fields such as architecture, “design” is viewed here as the process of conceptualizing, developing, refining, and evaluating a computer-based information systems solution to an organizational problem, rather than as a single stage of an IT systems development lifecycle. Findings from studies of boundary-spanning design groups were synthesized across multiple levels of analysis to present an integrated model of design for such groups. The model builds on the notion of technological frames, to develop a theory of framing at the three levels of project coordination, group consensus-building, and individual learning and dissonance. The model is discussed in terms of how this would operate as a spiral model. Implications for theory and practice are discussed. Keywords: Information systems design, wicked problems, cognitive breakdowns, distributed cognition, boundary-spanning design.</region>
    </front>
    <body class="DoCO:BodyMatter">
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="4" confidence="possible" page="1" column="1">email:</h1>
      </section>
      <section class="deo:Introduction">
        <h1 class="DoCO:SectionTitle" id="10" page="1" column="1">1. Introduction</h1>
      </section>
      <region class="DoCO:TextChunk" id="15" page="1" column="1">Organizations are increasingly focusing on the design of organizational information systems that incorporate both business process and information technology (IT) change, to achieve alignment between business and IT objectives. These information systems (IS) span functional boundaries and business units, requiring many different disciplinary, organizational and political interests to be negotiated and multiple, diverse ways of working to be reconciled. Organizational IS design, especially when this spans functional or business unit boundaries, conceptualizes and implements changes to the organization and practices of work, as well as technological change. IS managers thus need to balance the need for actionable, objective definitions of IT-related change with a need for radical, boundary-spanning inquiry into what needs to change (<xref ref-type="bibr" rid="R24" id="11" class="deo:Reference">Engeström et al., 1995</xref>; <xref ref-type="bibr" rid="R45" id="12" class="deo:Reference">Liu et al., 2002</xref>). In the organizational and MIS literature, we have an increasing awareness of the emergent nature of IT-systems definition and its embeddedness within wider processes of organizational problem-solving and business-process change (<xref ref-type="bibr" rid="R3" id="13" class="deo:Reference">Bergman et al., 2002a</xref>; <xref ref-type="bibr" rid="R49" id="14" class="deo:Reference">Markus et al., 2002</xref>). The term information system is used here to mean an integrated social system of organizational actors, using information to perform purposeful activity, who</region>
      <region class="DoCO:TextChunk" id="16" confidence="possible" page="1" column="1">1 This material is based upon work supported by the National Science Foundation under Grant No. IIS-0347595. Any opinions, findings, and conclusions or recommendations expressed in this material are those of the authors and do not necessarily reflect the views of the National Science Foundation. 1</region>
      <outsider class="DoCO:TextBox" type="header" id="17" page="2" column="1">Proceedings of DESRIST 2008</outsider>
      <outsider class="DoCO:TextBox" type="header" id="18" page="2" column="1">Session P12-A: Advancing DS Approaches</outsider>
      <region class="DoCO:TextChunk" id="24" page="2" column="1">may or may not use computer-based technology to facilitate their work and to provide information (Checkland (<xref ref-type="bibr" rid="R12" id="19" class="deo:Reference">Checkland, 1981</xref>; <xref ref-type="bibr" rid="R36" id="20" class="deo:Reference">Hirschheim, 1986</xref>; <xref ref-type="bibr" rid="R39" id="21" class="deo:Reference">Land, 1992</xref>). Following the use of the term in other fields such as architecture, product design, or graphic design, the term design is viewed here as the complete process of conceptualizing, developing, refining, and evaluating an artifact-related solution to a problem, rather than as a single stage of the IT systems development life-cycle (<xref ref-type="bibr" rid="R42" id="22" class="deo:Reference">Lawson, 2000</xref>). The critical processes of boundary-spanning design take place “upstream” of the typical system development lifecycle, when organizational change and organizational problem-solving provide “early requirements” for an IT system and requirements for business process change. By definition, however, an integrated view of design also includes systems development and business process change, as design in boundary-spanning contexts is emergent and so is not complete until a solution has been evaluated and refined. This form of design involves emergent knowledge processes, for which goals emerge during the process of design (<xref ref-type="bibr" rid="R49" id="23" class="deo:Reference">Markus et al., 2002</xref>). It involves a dialectic between the processes of inquiry and processes of closure, whereas the typical IS design method focuses exclusively on closure.</region>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="25" page="2" column="1">2. Competing Models of The IS Design Process</h1>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="26" page="2" column="1">2.1 Hierarchical Decomposition</h2>
          <region class="DoCO:TextChunk" id="39" page="2" column="1">The dominant process model underlying the design science literatures is Simon's (1973) semi-rational model of ill-structured problem-solving. IS design is associated with a consensus problem definition and a set of goals for its resolution that are defined by structures inherent in the situation (Simon, 1973; Simon, 1996). Because human beings cannot cope sufficiently with complexity, analysts unconsciously bound and select the set of variables, constraints, and goals that they consider, to produce a “satisficing” solution. A set of consensual goals for change is agreed, then the analyst engages in a process of problem structuring and decompositional means- end analysis – a “gap analysis” between the current situation (the problem-space), and the i desired situation (the solution-space ). The solution space (that set of potential solution elements available to the analyst) is explored through hierarchical decomposition of the structures inherent in the problem space. This process is shown in <xref ref-type="fig" rid="F1" id="27" class="deo:Reference">Figure 1</xref>.<marker type="block"/> Simon’s model of design underlies the waterfall model, which is still used to manage the majority of IS design and development projects (<xref ref-type="bibr" rid="R2" id="31" class="deo:Reference">Barry and Lang, 2003</xref>). The most significant problem with this model is that it assumes that the structure of the problem space is given, i.e. inherent in the situation. While designers may simplify and bound the problem-structure, to produce a problem-definition that is capable of analysis, this is viewed as a reduction, rather than a redefinition of the problem (Simon, 1996). The stopping-point for design from this perspective is thus when a set of solution criteria based on this problem structure are satisfied (Simon, 1973; Simon, 1996). The majority of design approaches are fundamentally flawed, as they apply Simon’s goal-directed model to situations where the problem-structure (and hence the goal(s) for 2<marker type="page" number="3"/><marker type="block"/> change) is subject to interpretation and negotiation (<xref ref-type="bibr" rid="R20" id="35" class="deo:Reference">Dorst, 2006</xref>). This approach may be appropriate for the design of a technology artifact, whose role and purpose is well understood. But the human, social, and organizational contingencies of design are easily subverted by activities within the SDLC, as the emphasis is on managing methods (consistency of process) rather than process (fit of design outcomes with context) (<xref ref-type="bibr" rid="R33" id="36" class="deo:Reference">Greenbaum and Kyng, 1992</xref>; <xref ref-type="bibr" rid="R51" id="37" class="deo:Reference">Mumford, 2003</xref>; Scarbrough and Corbett, 1991). The paradigm of means-end analysis grants problems an objective existence, ignoring the need for problem negotiation (Pries-<xref ref-type="bibr" rid="R55" id="38" class="deo:Reference">Heje and Baskerville, 2006</xref>; Winograd and Flores, 1986). But this is only possible because the traditional model of design ignores the emergent nature of organizational goals, focusing instead of artifact design goals.</region>
          <region class="unknown" id="29" page="2" column="1">Problem “space” of Design process : structures inherent in semi-structured bounded perceptions of gap-analysis the situation Solution space: set of Goals for problem resolution alternative solution elements available to analyst</region>
          <region class="DoCO:FigureBox" id="F1">
            <caption class="deo:Caption" id="30" page="2" column="1">Figure 1: A Traditional Model of the IS Design Process (derived from Simon, 1973; Simon, 1996)</caption>
          </region>
          <outsider class="DoCO:TextBox" type="header" id="33" page="3" column="1">Proceedings of DESRIST 2008</outsider>
          <outsider class="DoCO:TextBox" type="header" id="34" page="3" column="1">Session P12-A: Advancing DS Approaches</outsider>
        </section>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="40" page="3" column="1">2.2 Opportunistic Design</h2>
          <region class="DoCO:TextChunk" id="63" page="3" column="1">In contrast, design goals for IS that span organizational boundaries evolve as the group of design participants and stakeholders engage with competing and partial understandings of the design problem. Goals and plans do not tend to provide a guide for the action that follows ( <xref ref-type="bibr" rid="R50" id="41" class="deo:Reference">Mintzberg and Waters, 1985</xref>; Suchman, 1987). A statement of goals most frequently reflects post hoc reasoning about the meanings and problem-structures perceived in the situation after change has been implemented (<xref ref-type="bibr" rid="R40" id="42" class="deo:Reference">Lave, 1988</xref>; <xref ref-type="bibr" rid="R52" id="43" class="deo:Reference">Nardi, 1995</xref>). Actors engaged in boundary-spanning design redefine the problem periodically, based on reflective, experiential learning. This changes both the design goals and the locus of change (<xref ref-type="bibr" rid="R8" id="44" class="deo:Reference">Brown and Duguid, 1992</xref>; Truex et al., 1999; Valkenburg and Dorst, 1998). Design participants and stakeholders face waves of “wicked problems”, that are unique, novel, subjective, only partially understood, highly interrelated, and involve a negotiated, evolving problem-definition. No objective criteria for a solution may be formulated for a wicked problem – it can be resolved only through argumentation, until stakeholder needs are minimally satisfied. Where tame (traditionally-conceived) design problems can be defined, analyzed, and decomposed to arrive at a solution, wicked problems require evolutionary design approaches, based on argumentation, emergent problem representation, and goal-negotiation across stakeholder groups (Buckingham-<xref ref-type="bibr" rid="R9" id="45" class="deo:Reference">Shum et al., 1997</xref>; <xref ref-type="bibr" rid="R15" id="46" class="deo:Reference">Conklin and Weil, 1997</xref>; <xref ref-type="bibr" rid="R26" id="47" class="deo:Reference">Fischer and Ostwald, 2005</xref>; Rittel, 1972; Rittel and Webber, 1973). Organizational problems are situated within a specific social context, culture, and a set of work-practices which require knowledge that is local, often implicit, and certainly emergent at the generic level of design that spans organizational boundaries (<xref ref-type="bibr" rid="R8" id="48" class="deo:Reference">Brown and Duguid, 1992</xref>; <xref ref-type="bibr" rid="R41" id="49" class="deo:Reference">Lave and Wenger, 1991</xref>; Weick, 1995). Goals emerge through reflective interactions with the social context of the problem and through designer-stakeholder dialog (<xref ref-type="bibr" rid="R6" id="50" class="deo:Reference">Boland and Tenkasi, 1995</xref>; <xref ref-type="bibr" rid="R10" id="51" class="deo:Reference">Carlile, 2002</xref>; <xref ref-type="bibr" rid="R49" id="52" class="deo:Reference">Markus et al., 2002</xref>). Designers are “thrown” into a situation where local actors understand and assume problem-elements, solution constraints, and criteria for a solution that are embedded in the experience of the organization and its evolving goals. They must engage with local practices and meanings, to acquire an understanding of the generic subjectivity that is shared by other design participants and stakeholders with whom they interact. It is with this understanding that we seek an alternative model of the design process – one that fits with the reframing of problems and solution-search that appears to underlie emergent knowledge processes. The assumption that problem-structures are taken-as-given is common in technocentric or artifact-focused analyses of design processes, as it fits well with the definition of design objects, behaviors, and functions (e.g. <xref ref-type="bibr" rid="R16" id="53" class="deo:Reference">Cooper and Reimann, 2003</xref>; <xref ref-type="bibr" rid="R30" id="54" class="deo:Reference">Gero et al., 1992</xref>). But empirical evidence from software engineering design suggests that experienced IS designers appear to be “opportunistic” in their use of contextual information to identify problem-structures, based on partial solutions available to them (<xref ref-type="bibr" rid="R1" id="55" class="deo:Reference">Ball and Ormerod, 1995</xref>; <xref ref-type="bibr" rid="R34" id="56" class="deo:Reference">Guindon, 1990</xref>). Analysts extrapolate solutions from problems encountered previously, incorporating implicit knowledge and implied requirements into the 3<marker type="page" number="4"/><marker type="block"/> framing of new solutions. If there are no solutions available for a design problem, as currently defined, the problem may be redefined to fit available solutions (<xref ref-type="bibr" rid="R22" id="60" class="deo:Reference">Dorst and Dijkhuis, 1995</xref>; <xref ref-type="bibr" rid="R48" id="61" class="deo:Reference">Malhotra et al., 1980</xref>; Turner, 1987; Urquhart, 2001). Such findings have led some authors to suggest that design may be a-methodical (Truex et al., 2000). But that does not mean that design in such projects lacks a coherent process. From the evidence presented on opportunistic design, the answer appears to lie in a model that parallels the “garbage can” theory of problem-solving (<xref ref-type="bibr" rid="R14" id="62" class="deo:Reference">Cohen et al., 1972</xref>). Perhaps designers do not analyze the problem space at all, but just identify plausible solution fragments and fit these to an evolving problem-space bricolage?</region>
          <outsider class="DoCO:TextBox" type="header" id="58" page="4" column="1">Proceedings of DESRIST 2008</outsider>
          <outsider class="DoCO:TextBox" type="header" id="59" page="4" column="1">Session P12-A: Advancing DS Approaches</outsider>
        </section>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="64" page="4" column="1">2.3 Convergent Design</h2>
          <region class="DoCO:TextChunk" id="72" page="4" column="1">Halfway between the ordered universe of hierarchical decomposition and the opportunistic anarchy of the garbage can model, lies a third model of design. This model, originating from studies of software program design views design as the co-evolution of a problem-space and a solution space (<xref ref-type="bibr" rid="R46" id="65" class="deo:Reference">Maher and Poon, 1996</xref>; <xref ref-type="bibr" rid="R47" id="66" class="deo:Reference">Maher and Tang, 2003</xref>). A similar process has also been observed in think-aloud protocol studies of creative product design (<xref ref-type="bibr" rid="R21" id="67" class="deo:Reference">Dorst and Cross, 2001</xref>) and is similar to the concept of “grinding” between problem and solution space (<xref ref-type="bibr" rid="R56" id="68" class="deo:Reference">Purao et al., 2003</xref>). But a co-evolution process model derived from studies of individual cognition in software design may be overly-simplistic for group collaboration, especially when this involves stakeholders from multiple backgrounds and functional disciplines. The concept of solution space evolution is developed further by Bergman et al (2002a &amp; 2002b (<xref ref-type="bibr" rid="R3" id="69" class="deo:Reference">Bergman et al., 2002a</xref>), to distinguish between the solution-space as it exists now (i.e. the ecology of functional requirements that solves current perceptions of the problem-structure) and a potential, future solution-structure that results from analyst deliberation. But this perspective treats the problem-space as negotiated rather than evolutionary: it does not deal with the evolution of perceived problem-structures discussed in the previous section. Experienced analysts are subjective in their definition of the problem-space and actively recognize learning outcomes as they proceed with a design. Individuals develop a richer analysis of the problem-space as they proceed with a design; this process is multiplied in group design and so breakdowns in group consensus occur, during which the group must reassess what they know and what they can assemble as a group (<xref ref-type="bibr" rid="R28" id="70" class="deo:Reference">Gasson, 2006</xref>; <xref ref-type="bibr" rid="R29" id="71" class="deo:Reference">Gasson, 2007</xref>).</region>
          <region class="unknown" id="73" page="4" column="1">Initial problem- space: individual Revised definitions of problem- Revised organizational space problem- Revised problems and goals space problem- Revised space for change. problem- space Convergent Convergent problem- problem- space and space and solution- solution- space space Revised Potential solution solution- space: individual Revised space Revised solution- definitions of target Revised solution- space system forms and solution- space feasible organizational space change)</region>
          <region class="DoCO:FigureBox" id="F2">
            <caption class="deo:Caption" id="74" page="4" column="1">Figure 2: Design as Punctuated Co-Evolution Between Problem Space and Solution Space</caption>
          </region>
          <region class="DoCO:TextChunk" id="75" confidence="possible" page="4" column="1">4</region>
          <outsider class="DoCO:TextBox" type="header" id="76" page="5" column="1">Proceedings of DESRIST 2008</outsider>
          <outsider class="DoCO:TextBox" type="header" id="77" page="5" column="1">Session P12-A: Advancing DS Approaches</outsider>
          <region class="DoCO:TextChunk" id="85" page="5" column="1">The process by which groups develop a solution in situated studies of collaborative problem- solving and information system design has been described as “punctuated equilibrium”. In this process, aligned problem-perspectives are punctuated by disruptions that cause the group to completely redefine their problem and as a consequence, rethink their solution (<xref ref-type="bibr" rid="R31" id="78" class="deo:Reference">Gersick, 1988</xref>; <xref ref-type="bibr" rid="R32" id="79" class="deo:Reference">Gersick, 1991</xref>). <xref ref-type="bibr" rid="R32" id="80" class="deo:Reference">Gersick (1991)</xref> hypothesizes that this is driven by group perceptions of time- constraints, observing that there is always a major redefinition of the problem structure midway through the project duration. But other studies have observed more frequent disruptions to group consensus. A similar type of punctuated or interrupted process has been observed in user-analyst system requirements definition (<xref ref-type="bibr" rid="R53" id="81" class="deo:Reference">Newman and Robey, 1992</xref>) and in larger scale studies of heterogeneous IS requirements analysis (<xref ref-type="bibr" rid="R3" id="82" class="deo:Reference">Bergman et al., 2002a</xref>; <xref ref-type="bibr" rid="R4" id="83" class="deo:Reference">Bergman et al., 2002b</xref>). A suggested model, reconciling the co-evolution process with a punctuated equilibrium process, is given in <xref ref-type="fig" rid="F2" id="84" class="deo:Reference">Figure 2</xref>. If we accept this model as a working theory of design, to be explored through empirical research, the question arises of how design operates in a boundary-spanning design group. This requires an analytical lens that explores not only the evolution of problem and solution spaces over time, but also the catalysts that drive an evolving design consensus across design participants and stakeholders from multiple knowledge domains. To investigate these issues, I employ the theoretical lens of distributed cognition in framing design.</region>
        </section>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="86" page="5" column="1">2.4 Distributed Cognition and Breakdowns In Design</h2>
          <region class="DoCO:TextChunk" id="94" page="5" column="1">Most studies of design groups simply assume that individual understanding – how the design problem and solution are framed – simply scale up to group design. Shared understanding and knowledge are reflected in a shared group culture; the absence of a shared culture and shared practices often indicates diversity in how group members understand what needs to be done (<xref ref-type="bibr" rid="R43" id="87" class="deo:Reference">Levine and Moreland, 1999</xref>). But group relations change when conditions and deliverables change. Groups faced with dynamic conditions must develop interdependence mechanisms: coordinating their activities, developing trust, and coming to rely on each other. An IS design problem situation may be perceived as a wicked problem simply because of repeated breakdowns in trust between group members. Negotiating trust relationships may require methods that do not directly challenge individual assumptions and frameworks of interpretation. Applying a theory of distributed cognition allows us to view understanding as stretched across, rather than shared between collaborating individuals from different functional groups (<xref ref-type="bibr" rid="R40" id="88" class="deo:Reference">Lave, 1988</xref>; Star, 1989). To negotiate the Venn diagram of individual understandings that results, shared work-practices are mediated via a web of well-defined functional roles that permit distinct framing perspectives to be reconciled only when this is necessary for mutual task or outcome coordination (<xref ref-type="bibr" rid="R7" id="89" class="deo:Reference">Boland et al., 1994</xref>; <xref ref-type="bibr" rid="R37" id="90" class="deo:Reference">Hollan et al., 2002</xref>; <xref ref-type="bibr" rid="R38" id="91" class="deo:Reference">Hutchins, 1995</xref>; Star, 1989).. This is especially pertinent to IS design projects involving boundary-spanning groups of participants, but its significance is also demonstrated more generally by Faraj and Sproull, who performed a large-scale survey of IS design groups and found that the management of distributed cognition was paramount for IS success. A knowledge of who-knows-what across a distributed set of participants was far more important to success than the use of specific methodologies or techniques (<xref ref-type="bibr" rid="R25" id="92" class="deo:Reference">Faraj and Sproull, 2000</xref>). Homogeneity may be counterproductive in producing an effective design (<xref ref-type="bibr" rid="R27" id="93" class="deo:Reference">Flor and Hutchins, 1991</xref>). Innovation requires a collective requisite variety (Weick, 1987) of design frames:</region>
          <region class="DoCO:TextChunk" id="95" confidence="possible" page="5" column="1">"When technical systems have more variety than a single individual can comprehend, one of the few ways humans can match this variety is by networks and teams of divergent individuals. ... If people look for different things, when their observations are pooled, they collectively see more than any one of them alone would see." (Weick, 1987, page 334). 5</region>
          <outsider class="DoCO:TextBox" type="header" id="96" page="6" column="1">Proceedings of DESRIST 2008</outsider>
          <outsider class="DoCO:TextBox" type="header" id="97" page="6" column="1">Session P12-A: Advancing DS Approaches</outsider>
          <region class="DoCO:TextChunk" id="106" page="6" column="1">But while variety is critical to an effective design, some form of consensus in the adoption of shared frames is critical to design closure. Information system designers, “successful in sharing plans and goals, create an environment in which efficient communication can occur” (<xref ref-type="bibr" rid="R27" id="98" class="deo:Reference">Flor and Hutchins, 1991</xref>). The notion of frame congruence is employed to describe a state of group consensus, where individual framing perspectives are not identical, but are sufficiently shared to form the basis for that efficient communication. Sociological studies of IS have adopted the concept of a technological frame to provide a structure for jointly-internalized beliefs about a situation. A technological frame cannot be viewed as pertaining to an individual or a group, but is seen as “located between actors” (Bijker 1987). It denotes a shared construct to the group, that they call upon to guide their joint actions, but does not indicate a totally shared understanding of the domain to which the frame relates. A technological frame corresponds to a form of implicit consensus, that represents the intersections of individual group members’ frames of reference. The construct is therefore relevant to the analysis of interactions between interest groups, or to understand how members of a specific group define the role and purpose of a technology in respect of their organizational situation (<xref ref-type="bibr" rid="R54" id="99" class="deo:Reference">Orlikowski and Gash 1994</xref>). It is clear that consensus does not imply totally shared beliefs and interpretations (Fiol 1994), but merely accommodates others’ perspectives when these do not entirely conflict with one’s own. Technological frame congruence occurs when frames are related in structure (possessing common categories of frames) and content (with similar values in the common categories) (<xref ref-type="bibr" rid="R54" id="100" class="deo:Reference">Orlikowski and Gash, 1994</xref>). Because each context of analysis brings different, domain-related technological frames to bear on organizational problem-solving or design, there is little guidance on how to analyze technological frames. <xref ref-type="bibr" rid="R54" id="101" class="deo:Reference">Orlikowski and Gash (1994)</xref> suggest that structure and content (defined above) may be considered as elements of frame congruence among members of a group participating in similar tasks with a shared culture, but suggest that frame analysis should be related to the domains of situation at hand. <xref ref-type="bibr" rid="R19" id="102" class="deo:Reference">Davidson (2002; 2006)</xref> echoes this view, arguing that the analysis of technological frames requires researchers to elicit subjects’ deeply-held assumptions and knowledge about a specific IT application in its organizational context. The framing perspectives applied by an individual are communicated through the metaphors and analogies that they employ, which in turn generate technological frames that reflect the shared organizational practices, cultures, and genres in which group members participate (<xref ref-type="bibr" rid="R18" id="103" class="deo:Reference">Davidson, 2002</xref>; <xref ref-type="bibr" rid="R44" id="104" class="deo:Reference">Lin and Silva, 2005</xref>). Frames may be mediated and negotiated across knowledge-domain boundaries by the use of boundary-objects (Star, 1989). These are representations or cognitive artifacts that are sufficiently well-defined to support collaboration across knowledge-domain boundaries, but sufficiently elastic to permit elements of the “shared understanding” that ensues to be interpreted differently by various individuals in the design group. Different types of boundary object support different types of shared understanding. Repositories allow collaborating individuals to agree on the elements necessary for a solution, but to employ different domain-specific categorizations of those elements. Standardized forms, methods, and procedures enforce normative work practices across domains and provide a shared format for solving problems. Models and ideal-type objects provide an abstraction that works for all knowledge domains. Terrain with coincident boundaries (maps) provide common boundaries, or scope of analysis, while permitting different conceptualizations of the elements within that scope. Boundary objects thus allow collaboration around specific tasks without the need for a completely shared understanding (<xref ref-type="bibr" rid="R11" id="105" class="deo:Reference">Carlile, 2004</xref>; Star, 1989).</region>
          <region class="DoCO:TextChunk" id="107" confidence="possible" page="6" column="1">6</region>
          <outsider class="DoCO:TextBox" type="header" id="108" page="7" column="1">Proceedings of DESRIST 2008</outsider>
          <outsider class="DoCO:TextBox" type="header" id="109" page="7" column="1">Session P12-A: Advancing DS Approaches</outsider>
          <region class="DoCO:TextChunk" id="111" page="7" column="1">The use of specific external representations (e.g. diagrammatic models) may indicate a distributed frame alignment (<xref ref-type="bibr" rid="R27" id="110" class="deo:Reference">Flor and Hutchins, 1991</xref>), or alternatively may surface breakdowns around group design consensus (Winograd and Flores, 1986). The centrality of breakdown in design is related to Heidegger's (1962) argument that objects and properties are not inherent in the world, but are simply "ready-to-hand": unreflectively incorporated into automatic routines. A disconnect in the seamlessness of their use produces a breakdown. The artifact becomes visible in use, or "present-at-hand": the subject of reflection and redefinition (Winograd and Flores, 1986). Automaticity in use results from the individual’s experience of incorporating similar artifacts into one’s work-routines. When I am hammering in a nail I do not concern myself with the process of hammering, I just do it. When the hammer is too heavy for the nail or if the hammer breaks, I am forced to reflect not only on how the hammer is constructed, but also on the process of hammering-in-context – how a hammer is used, in what circumstances certain hammer designs work, and why certain hammer designs fit with different types of hammering- process. As a result, I understand both hammer design and the process of hammering much more deeply, permitting me to select the right hammer for the job. So breakdowns may be productive in design. They force a disconnect in the assumptional flow, leading to a reexamination of design rationale and objectives. Extending the concept to group processes, it is possible that collective breakdowns hold the key to achieving requisite variety in boundary-spanning design. An early homogenization of problem perspectives can be harmful, resulting in premature specification – locking in the form and functions of the solution before the requirements for change have been understood. But premature specification occurs even when the method in use should sensitize group members to the multiple perspectives required for effective problem mediation. Groups of IS professionals trained in methods for rapid problem closure are highly homogeneous in their culture and focus. Yet that culture and focus may need to be disrupted if IS professionals are to engage with functional managers and stakeholders in boundary-spanning IS design.</region>
        </section>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="112" page="7" column="1">3. A Socially-Situated Model of Punctuated Emergence In Design</h1>
        <region class="DoCO:TextChunk" id="114" page="7" column="1">This model is synthesized from findings from two studies of distributed groups, responsible for the co-design of business processes and their supporting IT systems. The outputs perceived by both studies were framed in terms of requirements for change and high-level IT system requirements. In that sense, the studies could be likened to early requirements analysis for IT systems, except that each of the groups – both of which included experienced and competent IS professionals – clearly distinguished their process from IT systems development. The membership of both groups had been selected to involve people with extensive experience and success in determining organizational or IS change. Both groups referred to their process as design and clearly produced conceptualizations that gave a new form to the objects of design, whether artifacts or processes. The suggested model is shown in <xref ref-type="fig" rid="F3" id="113" class="deo:Reference">Figure 3</xref>.</region>
        <region class="DoCO:TextChunk" id="115" confidence="possible" page="7" column="1">7</region>
        <outsider class="DoCO:TextBox" type="header" id="116" page="8" column="1">Proceedings of DESRIST 2008</outsider>
        <outsider class="DoCO:TextBox" type="header" id="117" page="8" column="1">Session P12-A: Advancing DS Approaches</outsider>
        <region class="DoCO:FigureBox" id="F3">
          <image class="DoCO:Figure" src="62qx.page_008.image_01.png" thmb="62qx.page_008.image_01-thumb.png"/>
          <caption class="deo:Caption" id="119" page="8" column="1">Figure 3: Multilevel Goals and Spaces In Design</caption>
        </region>
        <region class="DoCO:TextChunk" id="124" page="8" column="1">Figure three contains three levels of design space. The Level 1 design space is a set of abstract goals that is defined through a primary generator concept for the design ( <xref ref-type="bibr" rid="R17" id="120" class="deo:Reference">Darke, 1979</xref>). Darke observed that architectural design groups rapidly generated a suitable solution structure, such as “we thought we would build a traditional ranch house,” that ensured that everyone was on the same page for the design. The primary generator provided an overall structure for the solution-space that, by inference, defined the problem-space as it is originally framed by the design group. For example, in one of the studies, the design group defined the primary generator concept as a six-stage, linear process to respond to customer invitations to bid for a contract. In another, the group defined the primary generator concept as a Financial Information System to register students for courses and evaluate their eligibility for Financial Aid. In both cases, the primary generator concept provided a unifying structure for the design process, rather than a persistent problem-structure. In the first case, the eventual problem-structure reflected in group design documentation, had many more than six stages and many iterations between and within stages. Yet the group still referred to the six-stage process, as this allowed them to divide the intellectual labor of design between group members and to estimate progress against their initially-conceived, abstract design goals of improving IS support for activities at each of the original six stages. In the second case, the design group added many more areas of functionality, integrating support for the introduction of new programs and flexible delivery schedule management into the system. Yet again, they described their overall goals in terms of the original structure, estimating progress in design against this definition. The Level 2 design space is defined by a series of mobilizing visions, each of which developed and built on the previous one. The mobilizing vision reflects a more detailed framework for the solution space, as understood by the group as a whole. In the first study, the design team defined first that they would build an electronic document repository, then a virtual team support-space, and then coordination support for a customer service process that aligned with the strategic planning process, and so on. In the second study, the design team defined that they would redefine their financial planning system, then that they would define a parallel information system to capture “floating” students, then that they would define an integrated enterprise system that registered the two types of student and validated financial aid requirements, and so on. In both projects, as individual understanding of the design progressed, each vision proved inadequate for the purposes of group consensus. There would be a rapid period of dissonance, as individuals disagreed with how to implement the detailed design around the current mobilizing vision. This would result in a collective breakdown, when the group 8<marker type="page" number="9"/><marker type="block"/> decided that the current mobilizing vision was inadequate. It would be replaced rapidly by a substitute, through a brainstorming process that developed ideas and integrated individuals’ perceptions of lacunae into a richer mobilizing vision. The Level 3 design space is that set of individual problem frames, that remains unarticulated but provides constant validation for both the mobilizing vision and the representational models used to achieve consensus in design. I have been surprised, over a series of studies, at how accommodating design group members are, in absorbing obvious differences between their own problem-frames and those of other group members. It appears that learning is seen as an explicit objective of the process at the individual level, and this only results in severe dissonance when an external artifact must be produced, that represents group consensus on the solution-space. For example, the first group had to produce a presentation to senior management, on which a go/no- go decision for the design would be based. The second group had to produce an interim specification for changes to the financial management system. In both cases, the fragile group consensus on what needed to change was disrupted by the cumulative dissonance between individual mental models of the problem-space and the collective target solution model required for this output. The group suffered a collective breakdown, during which the mobilizing vision was rapidly replaced, as described above, to refine the collective problem scope and structure. What is interesting is how the stopping-point was reached. These are boundary-spanning design initiatives. They spanned many different functions of the organization: managers and analysts from many different organizational roles were involved. A consensus design was not possible, as each participant in the process understood the organizational business processes partially and from the perspective of their stakeholder group interests. In each case, the design group appeared to reach a consensus that they could implement the complex changes to IT systems and business processes that they had defined at a high level, by means of a division of labor. Group members who were considered knowledgeable in one or more areas were delegated to oversee the implementation of design changes to business processes or IT systems, in sub- systems of the design. Each group took a jigsaw-puzzle approach, breaking design implementation down into a set of component parts that matched group members’ areas of expertise. In many cases, the implementation also required clarifying a detailed design for that sub-component. In both cases, the stopping point did not appear to be collective understanding: it was clear that none of the design group members understood the design as a whole. Instead, the stopping-point appeared to be reached when the group felt that it had achieved sufficient levels of shared trust around the way in which the primary generator concept was interpreted. This seemed to depend on how others framed the abstract goals of the design, when jointly producing a collective solution model. In both groups, IT system development was inextricably intertwined with business process experimentation, resulting in IT system prototyping on an ongoing basis as new design requirements emerged. The final implementation and roll-out of IT system components tended to be performed under the leadership of a technical member of the design team, but was evaluated on an ongoing basis by other members of the team, in terms of the effectiveness of IT support for the newly-designed business processes.</region>
        <outsider class="DoCO:TextBox" type="header" id="122" page="9" column="1">Proceedings of DESRIST 2008</outsider>
        <outsider class="DoCO:TextBox" type="header" id="123" page="9" column="1">Session P12-A: Advancing DS Approaches</outsider>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="125" page="9" column="1">4. Discussion: Implications of the Model</h1>
        <region class="DoCO:TextChunk" id="128" page="9" column="1">The question remains of how far the punctuated equilibrium model shown in <xref ref-type="fig" rid="F2" id="126" class="deo:Reference">Figure 2</xref> represents the empirically observed model of design for complex, boundary-spanning design contexts. The model shown in <xref ref-type="fig" rid="F3" id="127" class="deo:Reference">Figure 3</xref> combines elements of a co-evolution model with elements of a punctuated equilibrium model of organizational change. But it adds an additional</region>
        <region class="DoCO:TextChunk" id="129" confidence="possible" page="9" column="1">9</region>
        <outsider class="DoCO:TextBox" type="header" id="130" page="10" column="1">Proceedings of DESRIST 2008</outsider>
        <outsider class="DoCO:TextBox" type="header" id="131" page="10" column="1">Session P12-A: Advancing DS Approaches</outsider>
        <region class="DoCO:TextChunk" id="135" page="10" column="1">layer of complexity, distinguishing between the primary generator concept (<xref ref-type="bibr" rid="R17" id="132" class="deo:Reference">Darke, 1979</xref>), that frames the design process and the overarching solution-space, from the high-level system vision and objectives that frame the evolving problem-space and its implications for design objectives and the target solution space. This model may be unique to boundary-spanning design projects and the projects involving the co-design of business processes and IT systems. In these change projects, the problem-space is so complex that no individual can completely comprehend it. This leads to the process of evolving consensus, punctuated by collective breakdowns, that was described above. The eventual designed solution space consists of a bricolage (<xref ref-type="bibr" rid="R13" id="133" class="deo:Reference">Ciborra, 2002</xref>) – an ecology of partial solution-spaces advocated by individual design group members. From these findings, it appears to be an evolving problem-space that drives design and not an evolving solution-space. High-level change goals and visions refer to an emergent realization of the collective problem-structure and not to an understanding of the detailed, technical logic (as is the case for less complex IT design). An organizational IS design proceeds as group members suggest elements that fuse into a collective framing of the organizational problem (the mobilizing vision). It progresses as individual members test this framing against implicitly held partial solutions and fail to find a good fit, triggering a collective breakdown that leads to the shared mobilizing vision being reframed and replaced. Closure ensues when individuals have developed sufficient confidence that other members of the group will carry this problem-frame with them as they implement partial technical and process-change solutions. But new areas of design inquiry may open up as another closes. It appears to be very difficult to estimate design progress in these design projects, simply because no one individual understands the solution-space, or the problem-space in its entirety. Design progress is achieved through explicit learning on the part of individuals, maintenance of a fragile consensus, and acceptance of repeated conflicts as the consensus breaks down. Design completion is achieved through construction of a shared trust, that recognizes that – no matter how different one individual’s solution-space appears to be from another’s – the solution-space advocated by others complements that individual’s solution-space and will enable them collectively to achieve the abstract set of design goals that they all share. This results in a very different form of “spiral” model to the ones that are usually advocated, as shown in <xref ref-type="fig" rid="F4" id="134" class="deo:Reference">Figure 4</xref>. To ensure progress in design, it appears that a series of regular deliverables must be planned, that require the production of a shared rationale for the target design, for an influential senior manage. The latter element is significant because of the cost of consensus. If there is a high cost of change at a later point, as there is when the expectations of an influential senior manager are raised, group members cannot ignore differences in framing the organizational problem, as they need to “get it right.” This produces a collective breakdown, which leads to a refined mobilizing vision, as the group reframes their collective problem- structure. The key deliverable of each major cycle would therefore appear to be a reconceptualized model of the problem-structure, rather than a refined model of the solution- space.</region>
        <region class="DoCO:TextChunk" id="136" confidence="possible" page="10" column="1">10</region>
        <outsider class="DoCO:TextBox" type="header" id="137" page="11" column="1">Proceedings of DESRIST 2008</outsider>
        <outsider class="DoCO:TextBox" type="header" id="138" page="11" column="1">Session P12-A: Advancing DS Approaches</outsider>
        <region class="unknown" id="139" page="11" column="1">AGREE DETAILS INVESTIGATE NEED OF VISION FOR CHANGE Division of labor to Revised Revised implement Mobilizing Mobilizing solution Vision Vision END START Revised Revised Initial Mobilizing Mobilizing Mobilizing Vision Vision Vision DEFINE VISION &amp; MODEL &amp; EVALUATE GOALS FOR CHANGE TARGET SOLUTION</region>
        <region class="DoCO:FigureBox" id="F4">
          <caption class="deo:Caption" id="140" page="11" column="1">Figure 4: Revised Spiral Model To Support Problem-Directed Design</caption>
        </region>
        <region class="DoCO:TextChunk" id="141" page="11" column="1">A collective breakdown is likely to occur as the group defines its target solution for presentation to senior management. This forces the group to agree on a detailed, consensus model of process and system changes, with a high cost attached to failure (i.e. disappointed expectations on the part of senior management). It is at this stage that differences in individual problem-space frames surface, leading to a collective breakdown and a reframing of the shared problem-structure (the mobilizing vision). In IT systems design, problems are reduced to a complexity that can be easily modeled and agreed upon. But in organizational IS-related change projects, the co-design of business process systems and IT support for a set of emergent knowledge processes means that consensus is highly problematic. So the type of conflict considered counter-productive in IT systems design may well be highly productive and a necessary part of boundary-spanning systems design. Because of this, conflict needs to be channeled into revising the mobilizing vision, rather than suppressed or treated as undesirable.</region>
        <region class="DoCO:TextChunk" id="142" confidence="possible" page="11" column="1">11</region>
        <outsider class="DoCO:TextBox" type="header" id="143" page="12" column="1">Proceedings of DESRIST 2008</outsider>
        <outsider class="DoCO:TextBox" type="header" id="144" page="12" column="1">Session P12-A: Advancing DS Approaches</outsider>
        <region class="unknown" id="145" page="12" column="1">AGREE DETAILS OF VISION INVESTIGATE NEED FOR CHANGE Target business process model Cause-effect problem analysis Owner wants to spend as There are no assigned Contact Car Collect and Analyze little money as possible Not enough employees parking spots Manufacturer Business cost/profit data Advertise Manager alters Roles and responsibilities reports to make People do not trust Cars need to be logged in quickly as possible are not clearly defined dealership look better entering personal Research Forecast &amp; Serve Customers Walk-In Internet Leads Monthly reports are information online Cars are logged in When cars are logged we only Cars are brought off truck Everyone needs not accurate incorrectly record date and car details and parked wherever access to car keys No way of verifying Auto Go to Auctions Used Pre-Order New Locate Customers Prospective Owner locate does not sources see need to customer information contact Cars are listed not correct online when No cars way on of the locating lot board Keys with are put public on a access peg Vehicles Buy Vehicles Used Log Vehicles In Vehicle Deliver enough Internet does lead not Manager have sources contact from Receive customers information false cars Get on that leads the are lot for not No for leads cars the sitting generated lot on Time for wasted cars on looking lot has locating to No what what way who car key of Keys get lost Inventory is inaccurate Cannot Internet Manager is not getting enough leads demonstrate cars Complete Sale Sales staff do not know on the lot Receive Vehicles what cars are on the lot Obtain Trade-In Internet manager is not meeting sales quota Money spent on new keys Sell Vehicles to The dealership does not make enough profit Wholesale</region>
        <region class="unknown" id="146" page="12" column="1">Stakeholder/goal Impact of achieving Strategies to achieve goals goals Dealership owner: Can maximize profit Don’t change anything wants to spend $0 (systems out of date) Internet manager: Could lead to more Set up internet-based generate sales leads sales lead monitoring system General manager: Sales staff will Restrict access to maintain inventory know cars on the lot inventory updates Sales staff: More sales &amp; Set up internet lead distribute internet commission monitoring system sales leads fairly Customers: want Can trade-off Internet lead tracking fast, low-cost car dealers against each ensures customers information other handled promptly.</region>
        <region class="DoCO:FigureBox" id="Fx147">
          <image class="DoCO:Figure" src="62qx.page_012.image_02.png" thmb="62qx.page_012.image_02-thumb.png"/>
        </region>
        <region class="unknown" id="148" page="12" column="1">DEFINE VISION &amp; GOALS FOR CHANGE Stakeholder analysis</region>
        <region class="unknown" id="149" page="12" column="1">Workflow analysis or evaluation of process/ IT protypes</region>
        <region class="DoCO:FigureBox" id="F5">
          <caption class="deo:Caption" id="150" page="12" column="1">Figure 5: Implementation of Revised Spiral Model To Support Problem-Directed Design</caption>
        </region>
        <region class="DoCO:TextChunk" id="160" page="12" column="1">This realization has led to experimentation with techniques for each stage of the spiral model. The framework shown in <xref ref-type="fig" rid="F5" id="151" class="deo:Reference">Figure 5</xref> provides a putative method based on the findings reported above. If the design space is seen as a system of distributed cognition (the theoretical lens employed to obtain these findings), individual design spaces may be mediated by various boundary-objects, according to the type of “translation” required across knowledge domains and the degree to which shared understandings are kept intentionally vague (<xref ref-type="bibr" rid="R11" id="152" class="deo:Reference">Carlile, 2004</xref>; Star, 1989). As discussed earlier, boundary objects take the form of representations, artifacts, and processes that are sufficiently well-defined to support collaboration across knowledge-domain boundaries, but sufficiently elastic to permit elements of the “shared understanding” that ensues to be interpreted differently by various individuals. The various stages of the spiral model may be supported with boundary-object representations as follows: Define vision &amp; goals for change – perform a stakeholder analysis. By compiling multiple definitions of goals for change via a stakeholder analysis, this part of the cycle permits the collection of a diverse set of goals, that may be interpreted and categorized differently by various stakeholders, without being reconciled in detail. In the first cycle, this representational method provides the basis for a shared primary generator concept (<xref ref-type="bibr" rid="R17" id="153" class="deo:Reference">Darke, 1979</xref>), that provides a unifying concept which permits team coordination around a richly-visualized, high-level goal. In the first and subsequent cycles, a mobilizing vision is generated, that represents the situated problem-structure faced by the team for that cycle of design. Both the high-level primary 12<marker type="page" number="13"/><marker type="block"/> generator and the mobilizing vision are models that work for any domain, following Star’s (1989) ideal-type boundary object. Because of this, they represent a consensus, while remaining sufficiently vague to permit collaboration while avoiding individual dissonance at this stage. Agree details of vision – produce a target business process model. This part of the cycle combines a high-level business process representation of the mobilizing vision with a definition of process boundaries related to the current problem-structure. It aids the design team in agreeing which elements of the organizational situation are included – or excluded – from the problem- space to be analyzed. The high-level representation produces a map boundary object (Star’s “terrain with coincident boundaries”), that permits design participants from different knowledge domains to populate the problem-space according to their individual understanding, but agree areas of responsibility. It therefore enables collaboration around a vague problem-structure which will not restrict exploration of the design problem and solution-spaces. Investigate need for change – perform a cause-effect problem analysis. This representational method employs a simplified form of cognitive mapping (<xref ref-type="bibr" rid="R23" id="157" class="deo:Reference">Eden et al., 1992</xref>), to explore organizational and technical problem structures in more detail. The problem representation acts as a model boundary object: this permits stakeholders to assemble a composite understanding of their collective problem-structure, while permitting individual interpretation of detailed problem elements. Exploring linked networks of causality in the organizational problem space permits stakeholders to explore elements of the design ecology that would not normally be considered legitimate for more traditional design methods, such as the political and functional ecologies identified <xref ref-type="bibr" rid="R5" id="158" class="deo:Reference">Bergman et al. (2007)</xref>. Stakeholders can categorize various problem-clusters, combining a model boundary object with a map type boundary object (e.g. by using various colored boxes as shown in the upper-right quartile of <xref ref-type="fig" rid="F5" id="159" class="deo:Reference">Figure 5</xref>). This problem-representation also acts as a repository type boundary object, which allows problem elements to be shelved for later resolution while permitting each stakeholder to categorize problem elements as they choose, while negotiating their structure. This allows stakeholders to define a shared problem-structure, then agree not to “go there” for some elements, for reasons that they need not clarify to others.</region>
        <outsider class="DoCO:TextBox" type="header" id="155" page="13" column="1">Proceedings of DESRIST 2008</outsider>
        <outsider class="DoCO:TextBox" type="header" id="156" page="13" column="1">Session P12-A: Advancing DS Approaches</outsider>
        <region class="unknown" id="161" page="13" column="1">Model &amp; evaluate target solution –</region>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="162" confidence="possible" page="13" column="1">perform a workflow analysis, or prototype process</h1>
        <region class="DoCO:TextChunk" id="170" page="13" column="1">changes and systems. The final segment of the cycle permits stakeholders to clarify and design solutions to the problems explored in the previous segment, the problem analysis. This part of the process creates a set of standardized forms, methods, and procedures (Star, 1989), that represent the mechanisms and functions of target processes and systems. In early cycles, a detailed workflow model can be employed, as shown in <xref ref-type="fig" rid="F5" id="163" class="deo:Reference">Figure 5</xref>. For later cycles, business process and IT systems prototypes may be evaluated by design-team members. At this level of detail, the use of shared formats and normative process definitions cause design participants to experience a cognitive breakdown (Winograd and Flores, 1986), when their individual model diverges from the model-in-use by the group. When individual breakdowns reach a critical mass of dissent from the agreed model, a collective breakdown occurs. At this point, the group moves to the next cycle of design, where they redefine the problem-structure (the mobilizing vision) to accommodate differences in perspective. The representational techniques discussed in this section are heavily influenced by systemic inquiry approaches, such as Soft Systems Methodology (<xref ref-type="bibr" rid="R12" id="164" class="deo:Reference">Checkland, 1981</xref>) and cognitive maps (<xref ref-type="bibr" rid="R23" id="165" class="deo:Reference">Eden et al., 1992</xref>). Employing a systemic approach to inquiry enables connections to be explored between elements that may appear unrelated, avoids privileging one voice over others (which typically happens in the unitary design approach employed for IT systems), and enables tacitly-held understandings to be surfaced and explored. This stage of the research therefore builds on the systemic analysis literature, as the most appropriate approach to exploring wicked 13<marker type="page" number="14"/><marker type="block"/> problems. Studies to explore and refine these methods are ongoing. Initial findings support the core role of collective breakdowns in producing a revised mobilizing vision for the next cycle, but this may be limited by normative interpretations of a “relevant” process-model for IT design, that are employed by IS professionals. These issues have been discussed elsewhere (<xref ref-type="bibr" rid="R29" id="169" class="deo:Reference">Gasson, 2007</xref>) and will be explored further.</region>
        <outsider class="DoCO:TextBox" type="header" id="167" page="14" column="1">Proceedings of DESRIST 2008</outsider>
        <outsider class="DoCO:TextBox" type="header" id="168" page="14" column="1">Session P12-A: Advancing DS Approaches</outsider>
      </section>
      <section class="deo:Conclusion">
        <h1 class="DoCO:SectionTitle" id="171" page="14" column="1">5. Conclusions</h1>
        <region class="DoCO:TextChunk" id="177" page="14" column="1">It was argued that design groups which span organizational boundaries are becoming increasingly common and present a unique problem for information system design. Such groups attempt to integrate design understanding across many different domains of expertise and knowledge. This means that no one design group participant is likely to understand either the problem domain or the solution domain in full. This paper critiqued current models of design in these circumstances and suggested that we need an alternative model for boundary-spanning design. Findings from studies of boundary-spanning design groups were synthesized across multiple levels of analysis to present an integrated model of design. This model builds on the notion of technological frames, to develop a theory of framing at the three levels of project coordination, group consensus-building, and individual learning and dissonance. The resulting model presents the interior of design in complex situations, from the perspective of distributed cognition (<xref ref-type="bibr" rid="R7" id="172" class="deo:Reference">Boland et al., 1994</xref>; <xref ref-type="bibr" rid="R37" id="173" class="deo:Reference">Hollan et al., 2002</xref>; <xref ref-type="bibr" rid="R38" id="174" class="deo:Reference">Hutchins, 1995</xref>; Star, 1989). The findings would indicate that the design of boundary-spanning information systems is not goal-driven but problem-driven, necessitating the use of multiple methods to represent problem complexity sufficiently. Cycles of inquiry were balanced by cycles of problem closure, where requirements for process change and IT system support were defined and evaluated in practice. This model would seem to fit with a prototyping approach that combines experimentation with systems of organizational processes and information management, and the supporting system provided by an IT artifact. In practice, this was the approach employed in each of the studies reported here. This could be interpreted as a sign that the design participants were incompetent or did not understand organizational or information management problems. As an ex IT professional, I would argue that this was not the case. Both teams of managers impressed me with their professionalism and their ability to understand highly complex problems outside of their immediate area of expertise or responsibility. Rather, the nature of boundary-spanning organizational problems is that they involve distributed, emergent knowledge processes, which necessitate a different form of design process (<xref ref-type="bibr" rid="R49" id="175" class="deo:Reference">Markus et al., 2002</xref>). This paper has explored the resulting design process from the perspective of distributed cognition. The findings suggest a model of design that is driven by collective breakdowns in shared understanding and routine problem reconceptualization. Suggestions for supporting this design process with a spiral model were explored. It has implications for practice: it is possible that we can bring about more rapid learning and design progress by introducing triggers for breakdowns into the group process of consensus- building – for example, by employing a process that has regular reporting points or that incorporates changes in the form of design deliverables that require group agreement around the solution-space (<xref ref-type="bibr" rid="R29" id="176" class="deo:Reference">Gasson, 2007</xref>). It also has implications for theory. By understanding the multiple levels at which design operates, we can conceptualize design processes for many different contexts and for groups with many different combinations of expertise.</region>
      </section>
      <section class="DoCO:Bibliography">
        <h1 class="DoCO:SectionTitle" id="178" page="14" column="1">References</h1>
        <ref-list class="DoCO:BiblioGraphicReferenceList">
          <ref class="deo:BibliographicReference" id="179" page="14" column="1">14</ref>
          <ref rid="R1" class="deo:BibliographicReference" id="182" page="15" column="1">Ball, L.J. and Ormerod, T.C. (1995) "Structured and opportunistic processing in design: A critical discussion," Int. Journal of Human-Computer Interaction (43:1), pp. 131-151.</ref>
          <ref rid="R2" class="deo:BibliographicReference" id="183" page="15" column="1">Barry, C. and Lang, M. (2003) "A comparison of 'traditional' and multimedia information systems development practices," Information and Software Technology (45:4), pp. 217-227.</ref>
          <ref rid="R3" class="deo:BibliographicReference" id="184" page="15" column="1">Bergman, M., King, J., and Lyytinen, K. (2002a) "Large scale requirements analysis revisited: The need for understanding the political ecology of requirements engineering," Requirements Engineering Journal (7), pp. 152-171.</ref>
          <ref rid="R4" class="deo:BibliographicReference" id="185" page="15" column="1">Bergman, M., King, J., and Lyytinen, K. (2002b) "Large Scale Requirements Analysis As Heterogeneous Engineering," Scandinavian Journal of Information Systems (14), pp. 37-55.</ref>
          <ref rid="R5" class="deo:BibliographicReference" id="186" page="15" column="1">Bergman, M., Lyytinen, K., and Mark, G. (2007) "Boundary Objects in Design: An Ecological View of Design Artifacts," Journal of the Association for Information Systems (JAIS) (8:11), pp. 546-568.</ref>
          <ref rid="R6" class="deo:BibliographicReference" id="187" page="15" column="1">Boland, R.J. and Tenkasi, R.V. (1995) "Perspective Making and Perspective Taking in Communities of Knowing," Organization Science (6:4), pp. 350-372.</ref>
          <ref rid="R7" class="deo:BibliographicReference" id="188" page="15" column="1">Boland, R.J., Tenkasi, R.V., and Te'eni, D. (1994) "Designing Information Technology to Support Distributed Cognition," Organization Science (5:3), pp. 456-475.</ref>
          <ref rid="R8" class="deo:BibliographicReference" id="189" page="15" column="1">Brown, J.S. and Duguid, P. (1992) "Enacting Design for the Workplace," in: Usability: Turning Technologies Into Tools, P.S. Adler and T.A. Winograd (eds.). New York, NY: ACM Press, pp. 164-197.</ref>
          <ref rid="R9" class="deo:BibliographicReference" id="190" page="15" column="1">Buckingham-Shum, S., MacLean, A., Bellotti, V., and Hammond, N. (1997) "Graphical Argumentation and Design Cognition," Human-Computer Interaction (12:3), pp. 267-300.</ref>
          <ref rid="R10" class="deo:BibliographicReference" id="191" page="15" column="1">Carlile, P.R. (2002) "A Pragmatic View of Knowledge and Boundaries: Boundary Objects in New Product Development," in: Organization Science. INFORMS: Institute for Operations Research, p. 442.</ref>
          <ref rid="R11" class="deo:BibliographicReference" id="192" page="15" column="1">Carlile, P.R. (2004) "Transferring, Translating, and Transforming: An Integrative Framework for Managing Knowledge Across Boundaries," Organization Science (15:5), pp. 555-568.</ref>
          <ref rid="R12" class="deo:BibliographicReference" id="193" page="15" column="1">Checkland, P. (1981) Systems Thinking Systems Practice. Chichester UK: John Wiley &amp; Sons.</ref>
          <ref rid="R13" class="deo:BibliographicReference" id="194" page="15" column="1">Ciborra, C.U. (2002) The Labyrinths of Information: Challenging the Wisdom of Systems. Oxford UK: Oxford University Press.</ref>
          <ref rid="R14" class="deo:BibliographicReference" id="195" page="15" column="1">Cohen, M.D., March, J.G., and J.P. Olsen (1972) "A Garbage-Can Model of Organizational Choice," Administrative Science Quarterly (17:1-25).</ref>
          <ref rid="R15" class="deo:BibliographicReference" id="197" page="15" column="1">Conklin, E.J. and Weil, W. (1997) "Wicked problems: Naming the pain in organizations." Retrieved April 5, 2005, from <ext-link ext-link-type="uri" href="http://www.touchstone.com/tr/wp/wicked.html" id="196">http://www.touchstone.com/tr/wp/wicked.html</ext-link></ref>
          <ref rid="R16" class="deo:BibliographicReference" id="198" page="15" column="1">Cooper, A. and Reimann, R. (2003) About Face 2.0: The Essentials of Interaction Design. Hoboken, NJ: Wiley.</ref>
          <ref rid="R17" class="deo:BibliographicReference" id="199" page="15" column="1">Darke, J. (1979) "The Primary Generator And The Design Process," Design Studies (1:1), pp. Reprinted in N. Cross [Ed.] Developments In Design Methodology, 1984, J. Wiley &amp; Sons Chichester, pp. 1175-1188.</ref>
          <ref rid="R18" class="deo:BibliographicReference" id="200" page="15" column="1">Davidson, E.J. (2002) "Technology Frames and Framing: A Socio-Cognitive Investigation of Requirements Determination," MIS Quarterly (26:4), pp. 329-358.</ref>
          <ref rid="R19" class="deo:BibliographicReference" id="201" page="15" column="1">Davidson, E.J. (2006) "A Technological Frames Perspective on Information Technology and Organizational Change," The Journal of Applied Behavioral Science (42:1), pp. 23-29.</ref>
          <ref rid="R20" class="deo:BibliographicReference" id="202" page="15" column="1">Dorst, C.H. (2006) "Design Problems and Design Paradoxes," Design Issues (22:3), pp. 4-17.</ref>
          <ref rid="R21" class="deo:BibliographicReference" id="203" page="15" column="1">Dorst, C.H. and Cross, N.G. (2001) "Creativity in the design process: co-evolution of problem–solution," Design Studies (22:5), pp. 425-437.</ref>
          <ref rid="R22" class="deo:BibliographicReference" id="204" page="15" column="1">Dorst, K. and Dijkhuis, J. (1995) "Comparing paradigms for describing design activity," Design Studies (16:2), p 261.</ref>
          <ref rid="R23" class="deo:BibliographicReference" id="205" page="15" column="1">Eden, C., Ackerman, F., and Cropper, S. (1992) "The analysis of cause maps," Journal of Management Studies (29), pp. 309–323.</ref>
          <ref rid="R24" class="deo:BibliographicReference" id="206" page="15" column="1">Engeström, Y., Engeström, R., and Karkkainen, M. (1995) "Polycontextuality and boundary crossing in expert cognition: Learning and problem solving in complex work activities," Learning and Instruction (5:4), pp. 319- 336.</ref>
          <ref rid="R25" class="deo:BibliographicReference" id="207" page="15" column="1">Faraj, S. and Sproull, L. (2000) "Coordinating Expertise in Software Development Teams," Management Science (46:12), pp. 1554-1568.</ref>
          <ref rid="R26" class="deo:BibliographicReference" id="208" page="15" column="1">Fischer, G. and Ostwald, J. (2005) "Knowledge Communication In Design Communities," in: Barriers and Biases in Computer-Mediated Knowledge Communication, R. Bromme, F. Hesse, and H. Spada (eds.). New York, NY: Springer, pp. 213 - 242.</ref>
          <ref rid="R27" class="deo:BibliographicReference" id="209" page="15" column="1">Flor, N.V. and Hutchins, E.L. (1991) "Analyzing distributed cognition in software teams: a case study of team programming during perfective software maintenance," Empirical Studies of Programmers - Fourth Workshop Norwood NJ: Ablex, J. Koenemann-Belliveau, T. Moher, and S. Robertson (eds.), pp. 36-59.</ref>
          <ref rid="R28" class="deo:BibliographicReference" id="210" page="15" column="1">Gasson, S. (2006) "A Genealogical Study Of Boundary-Spanning IS Design," European Journal of Information Systems (15:1), pp. 26-41. 15</ref>
          <ref rid="R29" class="deo:BibliographicReference" id="213" page="16" column="1">Gasson, S. (2007) "Progress And Breakdowns In Early Requirements Definition For Boundary-Spanning Information Systems," ICIS ’07, Montréal, Québec, Canada.</ref>
          <ref rid="R30" class="deo:BibliographicReference" id="214" page="16" column="1">Gero, J.S., Tham, K.W., and Lee, H.S. (1992) "Behaviour: A Link Between Function and Structure in Design," in: Intelligent Computer Aided Design, B. DC, W. MB, and Y. H (eds.). Amsterdam, NL: Elsevier, pp. 193-225.</ref>
          <ref rid="R31" class="deo:BibliographicReference" id="215" confidence="possible" page="16" column="1">Gersick, C.J.G. (1988) "Time And Transition In Work Teams: Toward A New Model Of Group Development," Academy of Management Journal (31:1), pp. 9-41.</ref>
          <ref rid="R32" class="deo:BibliographicReference" id="216" confidence="possible" page="16" column="1">Gersick, C.J.G. (1991) "Revolutionary Change Theories: A Multilevel Exploration of the Punctuated Equilibrium Paradigm,," Academy of Management Review (16:1), Jan., 1991, pp. 10-36.</ref>
          <ref rid="R33" class="deo:BibliographicReference" id="217" page="16" column="1">Greenbaum, J. and Kyng, M. (1992) "Introduction: situated design," in: Design at work: cooperative design of computer systems, J. Greenbaum and M. Kyng (eds.). pp. 1-24.</ref>
          <ref rid="R34" class="deo:BibliographicReference" id="218" page="16" column="1">Guindon, R. (1990) "Designing the design process: Exploiting opportunistic thoughts," Human-Computer Interaction (5:2/3), pp. 305-344.</ref>
          <ref rid="R35" class="deo:BibliographicReference" id="219" page="16" column="1">Heidegger, M. (1962) Being and Time. New York NY.: Harper &amp; Row New York.</ref>
          <ref rid="R36" class="deo:BibliographicReference" id="220" page="16" column="1">Hirschheim, R.A. (1986) "Participative Systems Design User Experiences Evaluation And Conclusions," The Australian Computer Journal (18:4).</ref>
          <ref rid="R37" class="deo:BibliographicReference" id="221" page="16" column="1">Hollan, J., Hutchins, E., and Kirsh, D. (2002) "Distributed cognition: toward a new foundation for human-computer interaction research," ACM Transactions on Computer-Human Interaction (TOCHI) (7:2), pp. 174 - 196.</ref>
          <ref rid="R38" class="deo:BibliographicReference" id="222" page="16" column="1">Hutchins, E. (1995) Cognition in the Wild. Bradford: MIT Press.</ref>
          <ref rid="R39" class="deo:BibliographicReference" id="223" confidence="possible" page="16" column="1">Land, F. (1992) "The Information Systems Domain," in: Information Systems Research, R. Galliers (ed.). Oxford UK: Blackwell Scientific, pp. 6-13.</ref>
          <ref rid="R40" class="deo:BibliographicReference" id="224" confidence="possible" page="16" column="1">Lave, J. (1988) Cognition In Practice: Mind Mathematics And Culture In Everyday Life. Cambridge UK: Cambridge University Press.</ref>
          <ref rid="R41" class="deo:BibliographicReference" id="225" page="16" column="1">Lave, J. and Wenger, E. (1991) Situated Learning: Legitimate Peripheral Participation. Cambridge UK: Cambridge University Press.</ref>
          <ref rid="R42" class="deo:BibliographicReference" id="226" page="16" column="1">Lawson, B. (2000) How Designers Think: The Design Process Demystified, (3rd. ed.). Oxford UK: The Architectural Press.</ref>
          <ref rid="R43" class="deo:BibliographicReference" id="227" page="16" column="1">Levine, J.M. and Moreland, R.L. (1999) "Knowledge Transmission in Work Groups: Helping Newcomers to Succeed," in: Shared Cognition In Organizations: The Management of Knowledge, L. Thompson, J.M. Levine, and D.M. Messick (eds.). Mahwah, NJ: Lawrence Erlbaum Associates, pp. 267-296.</ref>
          <ref rid="R44" class="deo:BibliographicReference" id="228" page="16" column="1">Lin, A. and Silva, L. (2005) "The social and political construction of technological frames," European Journal of Information Systems (14), pp. 49-59.</ref>
          <ref rid="R45" class="deo:BibliographicReference" id="229" page="16" column="1">Liu, K., Sun, L., and Bennett, K. (2002) "Co-Design of Business and IT Systems—Introduction by Guest Editors," J. of Information Systems Frontiers (4:3), pp. 251-256.</ref>
          <ref rid="R46" class="deo:BibliographicReference" id="230" page="16" column="1">Maher, M.L. and Poon, J. (1996) "Modelling design exploration as co-evolution," Microcomputers in Civil Engineering (11:3), pp. 195-210.</ref>
          <ref rid="R47" class="deo:BibliographicReference" id="231" page="16" column="1">Maher, M.L. and Tang, H.-H. (2003) "Co-evolution as a computational and cognitive model of design " Research in Engineering Design (14:1), pp. 47-64.</ref>
          <ref rid="R48" class="deo:BibliographicReference" id="232" page="16" column="1">Malhotra, A., Thomas, J., Carroll, J., and Miller, L. (1980) "Cognitive Processes In Design," International Journal of Man-Machine Studies (12), pp. 119-140.</ref>
          <ref rid="R49" class="deo:BibliographicReference" id="233" page="16" column="1">Markus, M.L., Majchrzak, A., and Gasser, L. (2002) "A Design Theory For Systems That Support Emergent Knowledge Processes," MIS Quarterly (26:3), pp. 179-212.</ref>
          <ref rid="R50" class="deo:BibliographicReference" id="234" page="16" column="1">Mintzberg, H. and Waters, J.H. (1985) "Of Strategies Deliberate and Emergent," Strategic Management Journal</ref>
          <ref class="deo:BibliographicReference" id="235" confidence="possible" page="16" column="1">(6:3), pp. 257-272.</ref>
          <ref rid="R51" class="deo:BibliographicReference" id="236" page="16" column="1">Mumford, E. (2003) Redesigning Human Systems. Hershey, PA: Idea Group.</ref>
          <ref rid="R52" class="deo:BibliographicReference" id="237" page="16" column="1">Nardi, B. (1995) "Studying context: a comparison of activity theory, situated action models, and distributed cognition," in: Context and consciousness: activity theory and human-computer interaction B. Nardi (ed.). Cambridge MA: MIT Press, pp. 69-102.</ref>
          <ref rid="R53" class="deo:BibliographicReference" id="238" page="16" column="1">Newman, M. and Robey, D. (1992) "A Social Process Model of User-Analyst Relationships," MIS Quarterly (16:2), pp. 249-266.</ref>
          <ref rid="R54" class="deo:BibliographicReference" id="239" page="16" column="1">Orlikowski, W.J. and Gash, D.C. (1994) "Technological Frames: Making Sense of Information Technology in Organizations," ACM Transactions on Information Systems (12:2), April 1994., pp. 174-207.</ref>
          <ref rid="R55" class="deo:BibliographicReference" id="241" page="16" column="1">Pries-Heje, J. and Baskerville, R. (2006) "Designing Organizational Change in IT: A Theory Nexus," Design Science Research in Information Systems and Technology (DESRIST 2006), S. Chatterjee and A.R. Hevner (eds.), Claremont CA: Claremont Graduate School [<ext-link ext-link-type="uri" href="http://ncl.cgu.edu/designconference/" id="240">http://ncl.cgu.edu/designconference/</ext-link>].</ref>
          <ref rid="R56" class="deo:BibliographicReference" id="242" page="16" column="1">Purao, S., Truex, D.P., and Cao, L. (2003) "Now The Twain Shall Meet: Combining Social Sciences And Software Engineering To Support Development Of Emergent Systems," Americas Conference on Information Systems (AMCIS), Tampa FL. 16</ref>
          <ref class="deo:BibliographicReference" id="250" page="17" column="1">17</ref>
        </ref-list>
        <outsider class="DoCO:TextBox" type="header" id="180" page="15" column="1">Proceedings of DESRIST 2008</outsider>
        <outsider class="DoCO:TextBox" type="header" id="181" page="15" column="1">Session P12-A: Advancing DS Approaches</outsider>
        <outsider class="DoCO:TextBox" type="header" id="211" page="16" column="1">Proceedings of DESRIST 2008</outsider>
        <outsider class="DoCO:TextBox" type="header" id="212" page="16" column="1">Session P12-A: Advancing DS Approaches</outsider>
        <outsider class="DoCO:TextBox" type="header" id="243" page="17" column="1">Proceedings of DESRIST 2008</outsider>
        <outsider class="DoCO:TextBox" type="header" id="244" page="17" column="1">Session P12-A: Advancing DS Approaches</outsider>
        <region class="DoCO:TextChunk" id="249" confidence="possible" page="17" column="1">Rittel, H.W.J. (1972) "Second Generation Design Methods," in: Developments in Design Methodology N. Cross (ed.). Chichester UK: J. Wiley &amp; Sons (1984), pp. 317-327. Rittel, H.W.J. and Webber, M.M. (1973) "Dilemmas in a General Theory of Planning," Policy Sciences (4), pp. 155- 169. Scarbrough, H. and Corbett, J.M. (1991) Technology and Organisation: Power Meaning and Design. UK: Routledge. Simon, H.A. (1973) "The Structure of Ill-Structured Problems," Artificial Intelligence (4), pp. 145-180. Simon, H.A. (1996) The Sciences of The Artificial, (3rd. ed.). Cambridge MA: MIT Press Star, S.L. (1989) "The Structure of Ill-Structured Solutions: Boundary Objects and Heterogeneous Distributed Problem Solving," in: Distributed Artificial Intelligence, Vol. II., L. Gasser and M.N. Huhns (eds.). San Mateo CA: Morgan Kaufmann, pp. 37-54. Suchman, L. (1987) Plans And Situated Action. Cambridge MA: Cambridge University Press. Truex, D.P., Baskerville, R., and Klein, H.K. (1999) "Growing systems in emergent organizations " Communications of the ACM (42:8), pp. 117-123. Truex, D.P., Baskerville, R., and Travis, J. (2000) "Amethodical Systems Development: The Deferred Meaning of Systems Development Methods," Accounting Management and Information Technologies (10:1), pp. 53-79. Turner, J.A. (1987) "Understanding The Elements Of Systems Design," in: Critical Issues In Information Systems Research, R.J. Boland and R.A. Hirschheim (eds.). New York, NY: Wiley, pp. 97-111. Urquhart, C. (2001) "Analysts and clients in organisational contexts: a conversational perspective," The Journal of Strategic Information Systems 10 (3:243-262.). Valkenburg, R. and Dorst, K. (1998) "The reflective practice of design teams," Design Studies (19:3), pp. 249-271. Weick, K.E. (1987) "Organizational Culture As A Source Of High Reliability," California Management Review (29:2), pp. 112-127. Weick, K.E. (1995) Sensemaking In Organizations. Thousand Oaks CA: Sage. Winograd, T. and Flores, F. (1986) Understanding Computers And Cognition. Norwood New Jersey: Ablex Corporation. Endnotes 1. The concepts of problem-space and solution-space derive from the psychology of programming and design literature. Initially, the problem-space concept was proposed as part of an algebraic representation of external problem-structures that existed independently of the analyst (Newell &amp; Simon, 1972). More recently, the concepts have been used more fluidly, to denote a mental model, or conceptual “space” of potential design problems or solutions that underlie the selection of specific design attributes (<xref ref-type="bibr" rid="R21" id="245" class="deo:Reference">Dorst &amp; Cross, 2001</xref>, <xref ref-type="bibr" rid="R21" id="246" class="deo:Reference">Dorst &amp; Cross, 2001</xref>). The concept is developed further by <xref ref-type="bibr" rid="R4" id="247" class="deo:Reference">Bergman et al (2002a &amp; 2002b)</xref>, <xref ref-type="bibr" rid="R4" id="248" class="deo:Reference">Bergman et al (2002a &amp; 2002b)</xref>, as discussed in the paper. to distinguish between the solution-space as it exists now (i.e. the ecology of functional requirements that solves current perceptions of the problem-structure) The fitting of solution spaces to problem spaces as indicative of cognitive frames in design is also found in the model underlying Alexander’s (1979) pattern language, that has more recently been applied to object domain theory. Agent theory and HCI design (Alexander, 1999).</region>
      </section>
    </body>
  </article>
</pdfx>
