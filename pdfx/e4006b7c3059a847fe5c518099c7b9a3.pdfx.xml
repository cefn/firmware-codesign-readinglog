<?xml version='1.0' encoding='UTF-8'?>
<pdfx xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://pdfx.cs.man.ac.uk/static/article-schema.xsd">
  <meta>
    <job>39c3ee00bf804b77fc96ce037bf478e1cdd0ed92d325d2412c18fc39f6179f69</job>
    <base_name>62ch</base_name>
    <doi>http://dx.doi.org/10.1109/icse.2012.6227066</doi>
    <warning>Original PDF was found to be an image-based/possible OCR document. Output quality may be degraded.</warning>
  </meta>
  <article>
    <front class="DoCO:FrontMatter">
      <outsider class="DoCO:TextBox" type="outsider" id="1">AI &amp; Soc (2001) 15:359-376 9 2001 Springer-Verlag London Limited</outsider>
      <outsider class="DoCO:TextBox" type="outsider" id="2">A I ~t S O C | E T ~</outsider>
      <contrib-group class="DoCO:ListOfAuthors">
        <contrib contrib-type="author">
          <name id="4">Jan O. Borchers</name>
        </contrib>
      </contrib-group>
      <region class="unknown" id="5">Computer Science Department, Stanford University, Stanford, California, USA</region>
      <abstract class="DoCO:Abstract" id="6">Abstract: To create successful interactive systems, user interface designers need to cooperate with developers and application domain experts in an interdisciplinary team. These groups, however, usually lack a common terminology to exchange ideas, opinions and values. This paper presents an approach that uses pattern languages to capture this knowledge in software development, human-computer interaction (HCI) and the application domain. A formal, domain-independent definition of design patterns allows for computer support without sacrificing readability, and pattern use is integrated into the usability engineering life cycle. As an example, experience from building an award-winning interactive music exhibit was turned into a pattern language, which was then used to inform follow-up projects and support HCI education. Keywords: Design methodologies; Education; Exhibits; Interdisciplinary design; Music; Pattern languages</abstract>
    </front>
    <body class="DoCO:BodyMatter">
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="3" page="1" column="1">A Pattern A p p r o a c h to Interaction Design ~</h1>
      </section>
      <section class="deo:Introduction">
        <h1 class="DoCO:SectionTitle" id="7" page="1" column="1">1. Introduction</h1>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="14" page="2" column="1">1.1 Pattern Languages as</h2>
          <region class="unknown" id="15" page="2" column="1">Lingua Franca</region>
          <region class="DoCO:TextChunk" id="18" page="2" column="1">Simply stated, a pattern is a proven solution to a recurring design problem. It pays special attention to the context in which it is applicable, to the competing 'forces' it needs to balance, and to the positive and negative consequences of its application. It references higher-level patterns describing the context in which it can be applied, and lower-level patterns that could be used after the current one to further refine the solution. This hierarchy structures a comprehensive collection of patterns into a <marker type="block"/> The central idea presented here is that HCI, software engineering and application domain experts in a project team each express their expertise in the form of a pattern language. This makes their knowledge and assumptions more explicit, and easier for the other disciplines to understand and refer to. Such a common vocabulary can greatly improve communication within the team, and also serve as a corporate memory of design expertise. The next section briefly explains the concept and history of pattern languages. A critical component of these languages, however, is the cross-references that help readers find their way through the material. To facilitate creating and navigating through patterns, possibly with computer support, a formal syntactic definition of patterns and their relations is presented that is independent of the domain they address. It is also shown where in the usability engineering life cycle patterns can be applied. A final section shows a pattern language for interactive music exhibits as an example, and summarises some initial empirical studies concerning the usefulness of pattern languages in HCI courses.</region>
          <region class="unknown" id="17" page="2" column="1">pattern language.</region>
        </section>
      </section>
      <region class="DoCO:TextChunk" id="13" page="1" column="1">To design systems that fulfil today' s high expectations concerning usability, h u m a n computer interaction (HCI) experts need to work together very closely with team members from other disciplines. Most notably, they need to cooperate with application domain experts to identify the concepts, tasks and terminology of the product environment, and with the development team to make sure the internal system design supports the interaction techniques required. However, these disciplines lack a c o m m o n language: it is difficult for the user interface designer to explain his guidelines and concerns to the other groups. It is often even more problematic to extract application domain concepts from the user representative in a usable form. And it is hard for HCI people, and for application domain experts even more so, to understand the architectural and technological constraints and rules that guide the systems engineer in the design process. In general, <marker type="block"/> An earlier version of this paper appeared in the Proceedings of the DIS 2000 International Conference on Designing Interactive Systems (16-19 August 2000, New York) and appears by permission of the ACM Press.<marker type="page" number="2"/><marker type="block"/> people within a discipline often have trouble communicating what they know to outsiders, but to work together well disciplines must learn to appreciate each other's language, traditions and values (<xref ref-type="bibr" rid="R22" id="12" class="deo:Reference">Kim, 1990</xref>).</region>
      <outsider class="DoCO:TextBox" type="page_nr" id="10" page="2" column="1">360</outsider>
      <outsider class="DoCO:TextBox" type="header" id="11" page="2" column="1">J.O. Borchers</outsider>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="19" page="2" column="1">2. A Brief History of Pattern Languages</h1>
        <region class="DoCO:TextChunk" id="20" page="2" column="1">This section briefly outlines where the pattern idea comes from, and how it has been adapted to other disciplines.</region>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="21" page="2" column="1">2.1 Patterns in Urban Architecture</h2>
          <region class="DoCO:TextChunk" id="30" page="2" column="1">The original concept of pattern languages was conceived by architect Christopher Alexander in the 1970s. In <xref ref-type="bibr" rid="R1" id="22" class="deo:Reference">Alexander (1979)</xref>, he explains how a hierarchical collection of architectural design patterns can be identified to make future buildings and urban environments more usable and pleasing for their inhabitants. In <xref ref-type="bibr" rid="R2" id="23" class="deo:Reference">Alexander et al. (1977)</xref>, he presents 253 such patterns of 'user-friendly' solutions to recurring problems in urban architecture. They range from large-scale issues ('COMMUNITYOF 7000', 'IDENTIFIABLENEIGHBOURHOOD'), via smaller-scale patterns ('PROMENADE', 'STREETCAFES') down to patterns for the design of single buildings ('CASCADE OF ROOFS', 'INTIMACY GRADIENT). Finally, in <xref ref-type="bibr" rid="R3" id="24" class="deo:Reference">Alexander et al. (1988)</xref>, the architect uses his pattern language to define a new planning process for the University of Oregon as an example.<marker type="page" number="3"/><marker type="block"/> It is less known that Alexander's goal in publishing this pattern language was to allow not architects, but the inhabitants (that is, the users) themselves to design their environments. This is strikingly similar to the ideas of user-centred and participatory design, which aim to involve end users in all stages of the software development cycle. Pattern languages essentially aim to provide laypeople with a vocabulary to express their ideas and designs, and to discuss them with professionals. This idea of creating a vocabulary implements well-known results from psychological research about verbal encoding: 'When there is a story or an argument or an idea that we want to remember .... we make a verbal description of the event and then remember our verbalization' (<xref ref-type="bibr" rid="R23" id="29" class="deo:Reference">Miller, 1956</xref>). The idea can be recalled when its short name is remembered. Each of Alexander's patterns is presented as several pages of illustrated text, using a very uniform structure and layout with the following components (Alexander et aI., 1979: x): A meaningful, concise name identifies the pattern, a ranking indicates the validity of the pattern, a picture gives a 'sensitizing' and easily understood example of the pattern applied, and the context explains which larger patterns it helps to implement. Next, a short problem statement summarises the competing 'forces', or design tradeoffs, and a more extensive problem description gives empirical background information and shows existing solutions. The subsequent solution is the central pattern component. It generalises the examples into a clear, but generic set of instructions that can be applied in v a r y i n g situations. A diagram describes this solution and its constituents graphically, and references point the reader to smaller patterns that can be used to implement this pattern. It must be stressed that Alexandrian patterns are, above all, a didactic medium for human readers, even (and especially) for non-architects. This quality must not be lost in a more formal representation or extension of the idea to other domains.</region>
          <region class="DoCO:FigureBox" id="Fx26">
            <image class="DoCO:Figure" src="62ch.page_002.image_02.png" thmb="62ch.page_002.image_02-thumb.png"/>
          </region>
          <outsider class="DoCO:TextBox" type="header" id="27" page="3" column="1">A Pattern Approach to Interaction Design</outsider>
          <outsider class="DoCO:TextBox" type="page_nr" id="28" page="3" column="1">361</outsider>
        </section>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="31" page="3" column="1">2.2 Patterns in Software Engineering</h2>
          <region class="DoCO:TextChunk" id="34" page="3" column="1">Around 1987, software engineering picked up the pattern idea. At the OOPSLA conference on object orientation, <xref ref-type="bibr" rid="R6" id="32" class="deo:Reference">Beck and Cunningham (1987)</xref> reported on an experiment where application domain experts without prior Smalltalk experience successfully designed their own Smalltalk user interfaces after they had been introduced to basic Smalltalk UI concepts using a pattern language. It is interesting to note that this first software pattern experiment actually dealt with user interface design and user participation. The workshop started a lively exchange about software design patterns. An influential collection of patterns for object-oriented software design was published by G a m m a et al. (1995). The annual Pattern Languages of Programming (PLOP) conferences have established an entirely new forum for exchanging proven generalised solutions to recurring software design problems. The overall format of patterns has not changed very much from Alexander to software engineering examples such as those published by the so-called Gang of Four (<xref ref-type="bibr" rid="R17" id="33" class="deo:Reference">Gamma et al., 1995</xref>): name, context, problem, solution, examples, diagrams and cross-references are still the essential constituents of each pattern.</region>
          <region class="DoCO:FigureBox" id="Fx35">
            <image class="DoCO:Figure" src="62ch.page_003.image_03.png" thmb="62ch.page_003.image_03-thumb.png"/>
          </region>
          <outsider class="DoCO:TextBox" type="page_nr" id="36" page="4" column="1">362</outsider>
          <outsider class="DoCO:TextBox" type="header" id="37" page="4" column="1">J.O. Borchers</outsider>
          <region class="DoCO:TextChunk" id="38" confidence="possible" page="4" column="1">The goals, however, have changed in an important way, without many noticing: software design patterns are considered a useful language for communication among software developers, and a practical vehicle for introducing less experienced developers to the field. The idea of end users designing their own (software) architectures has not been taken over. On the one hand, this makes sense, because people do not live as intensely 'in' their software applications as they live in their environments. On the other hand, though, a good chance to push the concept of participatory design forward by introducing patterns has not been taken advantage of. This was one of the reasons why, at OOPSLA'99, the 'Gang of Four' were put before a mock 'trial' for their work. (See the article by Tidwetl, 1999, for an interesting commentary.)</region>
        </section>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="39" page="4" column="1">2.3 Patterns in HCI</h2>
          <region class="DoCO:TextChunk" id="49" confidence="possible" page="4" column="1">The pattern idea was referenced by HCI research earlier than most people expect. <xref ref-type="bibr" rid="R26" id="40" class="deo:Reference">Norman and Draper (1986)</xref> mention Alexander's work, and in his classic Psychology of Everyday Things (Norman, 1988: 229), Norman states that he was influenced particularly by it. Apple's Human Interface Guidelines (Apple Computer, 1992), quote Alexander's books as seminal in the field of environmental design, and the Utrecht School of Arts uses patterns as a basis for their interaction design curriculum (<xref ref-type="bibr" rid="R4" id="41" class="deo:Reference">Barfield et al., 1994</xref>). But it was only recently that a first workshop dedicated to pattern languages for interaction design took place within the HCI community. It showed that the ideas about adopting the pattern concept for HCI were still very varied, and that 'as yet, there has been little attention given to pattern languages for interaction design' (<xref ref-type="bibr" rid="R5" id="42" class="deo:Reference">Bayle et al., 1998</xref>). The patterns reported by this workshop were necessarily not strictly design patterns, but rather activity patterns describing observed behaviour (at the conference), without judging whether these represented 'good' or 'bad' solutions. Like the Utrecht curriculum designers (<xref ref-type="bibr" rid="R4" id="43" class="deo:Reference">Barfield et al., 1994</xref>), it identified the temporal dimension as making interaction design quite different from architectural design. The workshop also stressed the often underestimated fact that patterns, to a large extent, represent the values of their author, i.e. the qualities that the author considers important in the artefacts he designs. S u b s e q u e n t w o r k s h o p s at U P A ' 9 9 (Granlund and Lafreni~re, 1999a), INTERACT'99 (see <xref ref-type="bibr" rid="R13" id="44" class="deo:Reference">Borchers et al., 2001b</xref>) and at CHI 2000 (<xref ref-type="bibr" rid="R12" id="45" class="deo:Reference">Borchers et al., 2000</xref>) have confirmed the growing interest in pattern languages within the HCI community, and helped to shape more precisely the notion of HCI design patterns and their use. A preliminary definition of HCI design patterns and suggestions for structuring HCI design pattern languages, as well as a sample format for an HCI pattern, were given at the INTERACT workshop. The CHI 2000 workshop refined these findings and definitions, and the pattern idea has also been linked to other related concepts of usability engineering, such as claims (<xref ref-type="bibr" rid="R27" id="46" class="deo:Reference">Sutcliffe and Dimitrova, 1999</xref>). Meanwhile, a number of concrete pattern collections for interaction design have been suggested. The language by <xref ref-type="bibr" rid="R28" id="47" class="deo:Reference">Tidwell (1998)</xref>, for example, covers a substantial field of user interface design issues. Interaction design patterns have found their way into the PLoP conference series, even becoming a 'hot topic' at the ChiliPLoP'99 conference (<xref ref-type="bibr" rid="R8" id="48" class="deo:Reference">Borchers, 2000a</xref>).</region>
          <region class="DoCO:FigureBox" id="Fx50">
            <image class="DoCO:Figure" src="62ch.page_004.image_04.png" thmb="62ch.page_004.image_04-thumb.png"/>
          </region>
          <outsider class="DoCO:TextBox" type="header" id="51" page="5" column="1">A Pattern Approach to InteractionDesign</outsider>
          <outsider class="DoCO:TextBox" type="page_nr" id="52" page="5" column="1">363</outsider>
          <region class="DoCO:TextChunk" id="55" confidence="possible" page="5" column="1">Less research, though, has gone into formalising pattern languages for HCI, to make them more accessible to computer support. Even Alexander (<xref ref-type="bibr" rid="R1" id="53" class="deo:Reference">Alexander et al., 1979</xref>: xviii) admits that, 'since the language is in truth a network, there is no one sequence which perfectly captures it'. The hypertext model of a pattern language presented here makes it possible to create tools for navigating through the language, similar to those for interface design guidelines (Alben et al., 1994; <xref ref-type="bibr" rid="R20" id="54" class="deo:Reference">Iannella, 1994</xref>).</region>
        </section>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="56" page="5" column="1">2.4 Patterns in the Application Domain</h2>
          <region class="DoCO:TextChunk" id="60" confidence="possible" page="5" column="1">Patterns have been a successful tool for modelling design experience in architecture, in software design (with the limitations discussed here) and, as existing collections such as Tidwell's show, also in HCI. Other domains have been addressed by patterns as well. <xref ref-type="bibr" rid="R15" id="57" class="deo:Reference">Denning and Dargan (1996)</xref>, in their theory of action-centred design, suggest a technique called Pattern Mapping as a basis for cross-disciplinary software design. Referring to Alexander's work, they claim that patterns could constitute a design language for communication between software engineers and users, just as Alexander's pattern language does between builder and inhabitant. <xref ref-type="bibr" rid="R19" id="58" class="deo:Reference">Granlund and Lafrenibre (1999b)</xref> use patterns to describe business domains, processes and tasks to aid early system definition and conceptual design. They also note the interdisciplinary value of patterns as a communications medium and the ability of patterns to capture knowledge from previous projects. Indeed, there is no reason why the experience, methods and values of any application domain cannot be expressed in pattern form, as long as activity in that application domai n includes some form of design, creative or problem-solving work. This brought the author to the idea that not only HCI professionals and software engineers, but also application domain experts, could express their respective experience, guidelines and values in the form of pattern languages. The history of pattern languages in architecture, software engineering and especially HCI is described in more detail in <xref ref-type="bibr" rid="R10" id="59" class="deo:Reference">Borchers (2001a)</xref>.</region>
          <region class="unknown" id="61" page="5" column="1">3. U s i n g Pattern L a n g u a g e s in Interdisciplinary Design</region>
          <region class="DoCO:TextChunk" id="62" confidence="possible" page="5" column="1">The following sections give a general model of pattern languages, and show how to integrate those pattern languages into the usability engineering process.</region>
          <region class="unknown" id="63" page="5" column="1">3.1 A Formal Hypertext Model of a Pattern Language</region>
          <region class="DoCO:TextChunk" id="64" confidence="possible" page="5" column="1">A formal description of patterns makes it less ambiguous for the parties involved to decide what a pattern is supposed to look like, in terms of structure and content. It also makes it possible to design computer-based tools that help authors in writing, and readers in understanding patterns. We first give a formal syntactic definition: ~ A pattern language is a directed acyclic graph (DAG) PL=(P,R) with nodes P = {P1 . . . . . Pn} and edges R = {R 1. . . . . Rm}. ~ Each node P ~ P is called apattern. 9 For P, Q ~ P : P references Q ~ 3 R =(P, Q) ~ R.</region>
          <region class="DoCO:FigureBox" id="Fx65">
            <image class="DoCO:Figure" src="62ch.page_005.image_05.png" thmb="62ch.page_005.image_05-thumb.png"/>
          </region>
          <outsider class="DoCO:TextBox" type="page_nr" id="66" page="6" column="1">364</outsider>
          <outsider class="DoCO:TextBox" type="header" id="67" page="6" column="1">J.O. Borchers</outsider>
          <region class="DoCO:TextChunk" id="68" page="6" column="1">9 The set of edges leaving a node P c P is called its r e f e r e n c e s . The set of edges entering it is called its context. 9 Each node P ~ P is itself a set P = {n, r, i, P, f l ... fi, el ... ej, s, d} of a name n, ranking r, illustration i, problem p with forces fl ... J~, examples e I ... ej, the solution s and diagram d.</region>
          <region class="DoCO:TextChunk" id="69" confidence="possible" page="6" column="1">This syntactic definition is augmented with the following semantics:</region>
          <region class="DoCO:TextChunk" id="75" page="6" column="1">9 Each p a t t e r n of a language captures a recurring design problem, and suggests a proven solution to it. The language consists of a set of such patterns for a specific design domain, such as urban architecture. 9 Each pattern has a context represented by edges pointing to it from higher-level patterns. They sketch the design situations in which it can be used. Similarly, its references show what lower-level patterns can be applied after it has been used. This relationship creates a h i e r a r c h y within the pattern language. It leads the designer from patterns addressing large-scale design issues, to patterns about small design details, and helps him locate related patterns quickly. 9 The name of a pattern helps to refer to its central idea quickly, and build a vocabulary for communication within a team or design community. The ranking shows how universally valid the pattern author believes this pattern is. It helps readers to distinguish early pattern ideas from truly timeless patterns that have been confirmed on countless occasions. 9 The opening illustration gives readers a quick idea of a typical example situation for the pattern, even if they are not professionals. Media choice depends on the domain of the language: architecture can be represented by photos of buildings and locations; HCI may prefer screen shots, video sequences of an interaction, audio recordings for a voice-controlled menu, etc. 9 The p r o b l e m states what the major issue is that the pattern addresses. The forces further elaborate the problem statement. They are aspects of the design that need to be optimised. They usually come in pairs contradicting each other. 9 The examples section is the largest of each pattern. It shows existing situations in which the problem at hand can be (or has been) encountered, and how it has been solved in those situations. 9 The solution generalises from the examples a proven way to balance the forces at hand optimally for the given design context. It is not simply prescriptive, but generic so that it can generate a solution when it is applied to concrete problem situations of the form specified by the context. 9 The d i a g r a m supports the solution by summarising its main idea in a graphical way, omitting any unnecessary details. For experts, the diagram is quicker to grasp than the opening illustration. Media choice again depends on the domain: a graphical sketch for architecture, pseudo-code or UML diagram for software engineering, a storyboard sketch for HCI, a score fragment for music, etc. With these definitions, a formal model for pattern languages is in place. However, formalisation must not impede readability and clarity of the material. The process of writing patterns should not be hindered by the formal notation, and the results should still be accessible in a variety of formats, including linear, printed documentation <marker type="page" number="7"/><marker type="block"/> (which most people still prefer for sustained reading for well-known reasons). Each part of a pattern, and its connections to other patterns, are usually presented as several paragraphs in the pattern description (see, for example, <xref ref-type="bibr" rid="R1" id="74" class="deo:Reference">Alexander et al., 1979</xref>). Other media, such as images, animations and audio recordings, are used to augment the pattern description as described above.</region>
          <region class="DoCO:FigureBox" id="Fx71">
            <image class="DoCO:Figure" src="62ch.page_006.image_06.png" thmb="62ch.page_006.image_06-thumb.png"/>
          </region>
          <outsider class="DoCO:TextBox" type="header" id="72" page="7" column="1">A Pattern Approach to Interaction Design</outsider>
          <outsider class="DoCO:TextBox" type="page_nr" id="73" page="7" column="1">365</outsider>
          <region class="DoCO:TextChunk" id="76" confidence="possible" page="7" column="1">3.2 Using Patterns in the Usability Engineering Life Cycle</region>
          <region class="DoCO:TextChunk" id="105" page="7" column="1">It is not necessary to follow a specific design method to use this pattern language approach. As Dix et al. (1998: 6) point out, 'probably 90% of the value of any interface design technique is that it forces the designer to remember that someone (and in particular someone else) will use the system under construction'. Nevertheless, the design process must emphasise usability, and therefore include programmers and user interface (UI) designers as well as end users ( <xref ref-type="bibr" rid="R30" id="77" class="deo:Reference">Tognazzini, 1992</xref>: 57). Also, as with most usability methods (<xref ref-type="bibr" rid="R16" id="78" class="deo:Reference">Dix et al., 1998</xref>: 179), patterns will not be used in just a single design phase, but throughout the entire design process. A suitable process framework for this is Nielsen's usability engineering life cycle model (<xref ref-type="bibr" rid="R25" id="79" class="deo:Reference">Nielsen, 1993</xref>: 72). Patterns fit into each of the 11 activities that this model suggests: 1. Know the user. If the application domain of an interactive software project involves some designing, creative or problem-solving activity, then its concepts and methods can be represented as a pattern language in the sense of the above definition. The development team, after explaining the basic idea of patterns to user representatives, can begin eliciting application domain concepts in the form of patterns from those experts. Those patterns do not need to be perfect in terms of their timeless quality. They just give a uniform format to what needs to be captured anyway, but explicitly state problems, forces, existing solutions and references within these 'work patterns'. Also, patterns for user interface and software design will have the same format, making all the material more accessible to all members of the design team, and helping users to recognise their work patterns in user interface concepts of the end product. 2. Competitive analysis. Here, existing products are examined to gather information and hints for the design of the new system. The internal architecture of competing products is usually not accessible, but user interface design solutions of successful competing systems can be generalised into HCI design patterns for the new product. 3. Setting usability goals. The various aspects of usability, such as memorability and efficiency of use, need to be prioritised. They can, however, be used as forces of abstract HCI design patterns that explain how these forces conflict, and how this conflict is to be solved for the current project. A design for a system used intensively by expert users, for example, will put the balance between the above goals more towards efficiency of use than first-time learnability. 4. Parallel design. Several groups of designers can develop alternative user interface prototypes to broaden the ~design space' explored. HCI design patterns can serve as a common ground, working<marker type="page" number="8"/><marker type="block"/> as design guidelines to be sure that the usability goals from the last phase are fulfilled. These patterns can also come from external sources such as HCI design books. 5. Participatory design. This technique involves user representatives, or application domain experts, in the design process to evaluate prototypes and participate in design discussions. These users will have few problems understanding the pattern language of their application domain (which they have probably helped to create themselves). But knowing this format will also help them understand the HCI patterns that the user interface design team has collected, and which represents their design values, methods and guidelines. Conversely, the UI design team can use the application domain pattern language to talk among themselves and to users about issues of the application domain, in a language that users will find resembles their own terminology. A common vocabulary for users and user interface designers emerges from the combination of other languages. 6. Coordinated design of the total interface. Coordinated design aims to create a consistent interface, documentation, on-line help and tutorials, both within the current product and with previous versions of this and other products within a product family. HCI design patterns, especially those addressing lower-level, concrete design guidelines, can serve as vocabulary among design teams, to help ensure this consistency. Of course, additional methods such as dictionaries of user interface terms are required to support this process. 7. Apply guidelines and heuristic analysis. Style guides and standards are the ways to express HCI design experience that are closest to HCI design patterns. Patterns can improve these forms through their structured format and contents, combinations of concrete existing examples and a general solution, and an insightful explanation not only of the solution, but also of the problem context in which this solution can be used, as well as the structured way in which individual patterns are integrated into the hierarchical network of a pattern language. This coverage of multiple layers of abstraction and expertise is similar to the distinction between general guidelines, category-specific rules which are derived from previous projects and product-specific guidelines that are developed as part of an individual project (<xref ref-type="bibr" rid="R25" id="84" class="deo:Reference">Nielsen, 1993</xref>: 93). 8. Prototyping. Prototyping puts concrete interfaces into the hands of users much earlier than the final product, albeit limited in features, performance and stability. In this more software-oriented area of usability engineering, software design patterns play an important role. If the development group members express their architectural standards and components, as well as specific project ideas, as patterns, the user interface design group can relate to those concepts more easily, and will better understand the concerns of the development team. For example, the HCI design group could change the feature set in a prototype to make it easier to implement without compromising its usefulness for testing. 9. Empirical testing. Prototypes, from initial paper mock-ups to the final system, are tested with potential users to discover design problems. While patterns cannot help the actual evaluation<marker type="page" number="9"/><marker type="block"/> process, the set of HCI patterns can be used to relate problems discovered to the patterns that could be applied to solve those problems, as shown in the next phase.<marker type="block"/> 10. Iterative design. Prototypes are redesigned and improved iteratively based upon feedback from user tests. In this activity, patterns of HCI or software design experience are an important tool to inform the designer about his options. Contrary to general design guidelines, which are mainly descriptive, and merely state desirable general features of a 'good' finished interactive system, patterns are constructive: they suggest how a problem can be solved. Naturally, patterns evolve over the course of a project, reflecting the progress in understanding the problem space and improving the design. Successful solutions serve as examples for existing patterns, o r initiate the formulation of a new pattern. Subsequent projects will relate more easily to patterns with such well- known examples. The result is a post hoc 'structural' design rationale which keeps the lessons learned during a project accessible for the future. Patterns are less suited to documenting good and bad design decisions in the form of a 'process' design rationale, although the concept of anti-patterns of tempting but bad solutions could be used to model discarded design options.<marker type="block"/> 11. Collect feedback from field use. Studies of the finished product in use, help line call analysis and other methods can be used to evaluate the final product after delivery. Here, the application domain pattern language serves as an important tool to talk to users. HCI design patterns point out design alternatives for solutions that need to be improved. Similarly, feedback can strengthen the argument of those patterns that created a successful solution, and suggest rethinking those that led to suboptimal results.<marker type="block"/> As a proof of concept, we used our experience from designing an interactive, computer- based music exhibit, to start building a pattern language about the musical, HCI and software design lessons learned from the project. We will briefly present the original project's goals and its design, and then give some examples of resulting patterns from the various disciplines, and at various levels of abstraction.<marker type="block"/> The Ars Electronica Center in Linz, Austria (<xref ref-type="bibr" rid="R21" id="95" class="deo:Reference">Janko et al., 1996</xref>) is a technology museum 'of the future', an exhibition and venue centre where the arts and new technology merge. Our research group designed one floor within this centre, addressing future computer-supported learning and working environments. Apart from an electronic class/conference room (Mfihlh~user et al., 1996), we designed several exhibits showing the use of computers in specific learning subjects and working situations. WorldBeat was one of these exhibits, designed by the author. Briefly, WorldBeat allows the user to interact with music in various new ways. The entire exhibit is controlled using just a pair of infrared batons. They are used to<marker type="page" number="10"/><marker type="block"/> navigate through the various pages of the system, and to create musical input, from playing virtual instruments like drums or a guitar, to conducting a computer orchestra playing a classical piece, to improvising to a computer blues band - without playing wrong notes. Furthermore, users can try to recognise instruments by their sound alone, and locate tunes by humming their melody. The system is described in more detail in <xref ref-type="bibr" rid="R7" id="100" class="deo:Reference">Borchers (1997)</xref>, and in the video proceedings of that 1997 CHI conference. The goal of WorIdBeat was to show visitors that computers may open up entirely new ways of interacting with musical information, many of which they can expect to see implemented in future consumer products. To design a system for such an environment, we had to take into account a number of factors that do not usually have to be considered in such detail when designing an interactive system. However, instead of listing our findings as a loose set of guidelines, we used the pattern format described above to summarise our experience in all three disciplines. We will show what musical concepts we identified to address in our exhibit, describe our user interface patterns specific to this scenario, and present software design solutions that we found for this system. We will not describe the patterns in full detail; that would typically require several pages per pattern. Instead, we show the network of patterns identified so far, and look in more detail at the main issues of context, problem, solution, examples and references, for a small but representative selection. The actual patterns are written in a more detailed textual form without explicit labels for 'Context', 'Problem' and so on: instead, they use implicit typographical structuring to clearly show the components of each pattern. The complete pattern languages can be found in <xref ref-type="bibr" rid="R10" id="101" class="deo:Reference">Borchers (2001a)</xref>.<marker type="block"/> We will begin by describing the musical concepts and 'guidelines' that musicians use when they compose or improvise music. Our point is that this process can be considered a 'design' activity as well, and that it is feasible to structure the rules and values of this design process into patterns. At the most abstract level we consider useful, a certain style of music is chosen. Our exhibit features various musical styles in different parts of the system, but we will restrict ourselves to the presentation of the BLUESSTYLE.The patterns below are referenced by that top-level style pattern. Downward links are 'references' relations (see <xref ref-type="fig" rid="F1" id="104" class="deo:Reference">Fig. 1</xref>).</region>
          <region class="DoCO:FigureBox" id="Fx81">
            <image class="DoCO:Figure" src="62ch.page_007.image_07.png" thmb="62ch.page_007.image_07-thumb.png"/>
          </region>
          <outsider class="DoCO:TextBox" type="page_nr" id="82" page="8" column="1">366</outsider>
          <outsider class="DoCO:TextBox" type="header" id="83" page="8" column="1">J.O. Botchers</outsider>
          <region class="DoCO:FigureBox" id="Fx86">
            <image class="DoCO:Figure" src="62ch.page_008.image_08.png" thmb="62ch.page_008.image_08-thumb.png"/>
          </region>
          <outsider class="DoCO:TextBox" type="header" id="87" page="9" column="1">A Pattern Approach to Interaction Design</outsider>
          <outsider class="DoCO:TextBox" type="page_nr" id="88" page="9" column="1">367</outsider>
          <region class="unknown" id="92" page="9" column="1">4. Example: Designing Interactive Music Exhibits</region>
          <region class="unknown" id="94" page="9" column="1">4.1 The WorldBeat Project</region>
          <region class="DoCO:FigureBox" id="Fx97">
            <image class="DoCO:Figure" src="62ch.page_009.image_09.png" thmb="62ch.page_009.image_09-thumb.png"/>
          </region>
          <outsider class="DoCO:TextBox" type="page_nr" id="98" page="10" column="1">368</outsider>
          <outsider class="DoCO:TextBox" type="header" id="99" page="10" column="1">J.O. Borchers</outsider>
          <region class="unknown" id="103" page="10" column="1">4.2 Musical Design Patterns</region>
          <region class="unknown" id="106" page="10" column="1">4.2.1 Twelve-Bar Progression</region>
          <region class="DoCO:TextChunk" id="107" confidence="possible" page="10" column="1">Context: Playing a BLUESSTYLEpiece.</region>
          <region class="DoCO:TextChunk" id="108" page="10" column="1">Problem: Players need to agree to a common sequence ('progression') of musical chords to create harmonically coherent music. A progression is useful to avoid a too static, boring impression, but it should be simple enough to be easily remembered while playing. Solution: Use the following blues progression of chords, each lasting one bar (in C major, I = C major, IV = F major, V = G major):</region>
          <region class="DoCO:TextChunk" id="109" confidence="possible" page="10" column="1">I-I-I-I-IV-IV-I-I-V-V-I-I</region>
          <region class="DoCO:FigureBox" id="Fx110">
            <image class="DoCO:Figure" src="62ch.page_010.image_10.png" thmb="62ch.page_010.image_10-thumb.png"/>
          </region>
          <outsider class="DoCO:TextBox" type="header" id="111" page="11" column="1">A Pattern Approach to Interaction Design</outsider>
          <outsider class="DoCO:TextBox" type="page_nr" id="112" page="11" column="1">369</outsider>
          <region class="DoCO:TextChunk" id="113" confidence="possible" page="11" column="1">BLUES STYLE</region>
          <region class="DoCO:TextChunk" id="114" confidence="possible" page="11" column="1">INSTRUMEN- 2-BAR TATION ... PROGRESSION</region>
          <region class="DoCO:TextChunk" id="115" confidence="possible" page="11" column="1">MELODIC PHRASES</region>
          <region class="DoCO:TextChunk" id="116" confidence="possible" page="11" column="1">I [</region>
          <region class="unknown" id="117" page="11" column="1">t</region>
          <region class="DoCO:TextChunk" id="118" confidence="possible" page="11" column="1">S LYRICS</region>
          <region class="unknown" id="119" page="11" column="1">SEVENTH CHORD CHORD [ TRIPLET -SENTENCE</region>
          <region class="DoCO:TextChunk" id="120" confidence="possible" page="11" column="1">CHORDS ALTERATIONS TRANSIT|ONS I GROOVE VERSE</region>
          <region class="DoCO:TextChunk" id="121" confidence="possible" page="11" column="1">MAJOR PENTATONIC BLUE 4/4 BLUES CHORDS SCALE NOTES RHYTHM TEMPO</region>
          <region class="DoCO:FigureBox" id="F1">
            <caption class="deo:Caption" id="122" page="11" column="1">Fig. 1. A pattern Ianguage for blues music.</caption>
          </region>
          <region class="DoCO:TextChunk" id="127" page="11" column="1">E x a m p l e s : The above is the simplest form of any blues piece, and most blues music adheres to it. It is found in countless recordings and sheet music. R e f e r e n c e s : The sequence is built from basic MAJORCHORDS.Many variations of this basic progression are possible that make the music more interesting. A simple one is to use SEVENTH CHORDS instead of the simple major chords. The sequence can be varied further by replacing chords with more complex CHORDTRANSITIONS. <marker type="block"/> C o n t e x t : Playing a piece in the BLUESSTYLE. The concept is also used in other styles like swing, and jazz in general. P r o b l e m : Players need to create a swinging rhythmic feeling. The straight rhythm from other styles does not create this. At the same time, sheet music cannot include all rhythmic variances because it would become too complex and unreadable.<marker type="block"/> Solution: Where the written music contains an evenly spaced pattern of eighth notes, shift every second eighth note in the pattern backwards in time by about one third of its length, shortening it accordingly, and make the preceding eighth note one third longer. Instead of a rhythmic length ratio of 1:1, the resulting pattern is alternating notes with a length ratio of 2/3:1/3. Two straight eighth notes have been changed into 2+1 'triplet' eighth notes. This rhythmic shift creates what musicians call the 'laid- back groove' in a performed piece. <xref ref-type="fig" rid="F2" id="126" class="deo:Reference">Figure 2</xref> shows this concept in traditional notation.</region>
          <region class="unknown" id="124" page="11" column="1">4.2.2 Triplet Groove</region>
          <region class="unknown" id="128" page="11" column="1">3</region>
          <region class="DoCO:FigureBox" id="F2">
            <caption class="deo:Caption" id="129" page="11" column="1">Fig. 2. From straight notation to triplet groove.</caption>
            <image class="DoCO:Figure" src="62ch.page_011.image_11.png" thmb="62ch.page_011.image_11-thumb.png"/>
          </region>
          <outsider class="DoCO:TextBox" type="page_nr" id="130" page="12" column="1">370</outsider>
          <outsider class="DoCO:TextBox" type="header" id="131" page="12" column="1">J.O. Borchers</outsider>
        </section>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="132" page="12" column="1">Examples:</h1>
        <region class="DoCO:TextChunk" id="133" page="12" column="1">Any recorded blues piece will feature this rhythmic shift, although the actual shift percentage varies very widely. Usually, the faster a piece is, the less shifting takes place. References: TRIPLET~ROOVEalways modifies an underlying straight beat, typically a 4/4 rhythm. These examples show what issues musical patterns may address, and how they can be formulated. We will now look at HCI design patterns that could create an interface dealing with such musical concepts.</region>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="134" page="12" column="1">4.3 Interaction Design Patterns</h1>
        <region class="DoCO:TextChunk" id="136" page="12" column="1">This section describes our collection of patterns for HCI design. We have focused on issues particularly important for interactive exhibits, but they are of equal importance to 'kiosk' and similar public-access systems where typical users are first-time and one-time users with short interaction times and no time for a learning curve. The outer graph (see <xref ref-type="fig" rid="F3" id="135" class="deo:Reference">Fig. 3</xref>) shows most of them, with top-down links again representing 'references' relations. We will go into more detail for two of these patterns.</region>
        <region class="DoCO:TextChunk" id="137" confidence="possible" page="12" column="1">INTERACTIVEEXHIBIT</region>
        <region class="DoCO:TextChunk" id="138" confidence="possible" page="12" column="1">ATTRACTVISITOR ENGAGE VISITOR DELIVERMESSAGE</region>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="139" page="12" column="1">ApDO~pAI~Ev</h1>
        <region class="unknown" id="140" page="12" column="1">f</region>
        <region class="DoCO:TextChunk" id="141" confidence="possible" page="12" column="1">SPARSE LAYOUT</region>
        <region class="DoCO:TextChunk" id="142" confidence="possible" page="12" column="1">SCRIPT COARSE-MOTORIC INCREMENTAL CLOSED FONT INPUT REVEALING LOOP</region>
        <region class="unknown" id="143" page="12" column="1">/ / /</region>
        <region class="DoCO:TextChunk" id="144" confidence="possible" page="12" column="1">BATONS</region>
        <region class="DoCO:TextChunk" id="145" confidence="possible" page="12" column="1">DYNAMIC FLAT&amp;NARROW DESCRIPTOR TREE</region>
        <region class="DoCO:FigureBox" id="F3">
          <caption class="deo:Caption" id="146" page="12" column="1">Fig. 3. An HCI pattern language for interactive exhibits.</caption>
          <image class="DoCO:Figure" src="62ch.page_012.image_12.png" thmb="62ch.page_012.image_12-thumb.png"/>
        </region>
        <outsider class="DoCO:TextBox" type="header" id="147" page="13" column="1">A Pattern Approach to Interaction Design</outsider>
        <outsider class="DoCO:TextBox" type="page_nr" id="148" page="13" column="1">371</outsider>
        <region class="unknown" id="149" page="13" column="1">4.3.1 Attract Visitor</region>
        <region class="DoCO:TextChunk" id="156" page="13" column="1">Context: An INTERACTIVEEXHIBITthat should attract and engage its visitors to deliver a message. Problem: In an exhibition centre, many exhibits are 'competing' for the visitor's attention although they should rather 'cooperate' to inform the visitor, without one system becoming too dominating in its appearance. On the other hand, people will never discover the message of an exhibit if they are not drawn towards it in the first place, or if it looks too complicated. After all, there is usually nothing that forces the visitor to use any of the exhibits. Solution: Make the exhibit look interesting by creating an innovative-looking interface that promises an unusual experience, but make it appear simple enough to scare off neither computer or application domain novices. Use an appearance and interaction technique that is adequate for the domain of the exhibit (which is usually not computing). Examples: At the WorldBeat exhibit, there is no mouse, keyboard or computer visible; all that the user sees is a pair of infrared batons, and a monitor with a simple, inviting start-up screen (see <xref ref-type="fig" rid="F4" id="150" class="deo:Reference">Fig. 4</xref>). R e f e r e n c e s : The SIMPLEIMPRESSIONpattern shows how to build a system that does not scare off visitors. INCREMENTAL REVEALINGconveys initial simplicity without limiting the depth of the system. Use DOMAIN-APPROPRIATEDEVICES on the exhibit and its periphery to reflect its subject area.<marker type="page" number="14"/><marker type="block"/> Context: Designing a computer exhibit interface that attracts visitors with its initial SIMPLEIMPRESSION,but that still ENGA6ES VISITORSfor a while with sufficient depth of functionality and content.</region>
        <region class="DoCO:FigureBox" id="F4">
          <caption class="deo:Caption" id="152" page="13" column="1">Fig. 4. A user at the WorldBeat exhibit.</caption>
          <image class="DoCO:Figure" src="62ch.page_013.image_13.png" thmb="62ch.page_013.image_13-thumb.png"/>
        </region>
        <outsider class="DoCO:TextBox" type="page_nr" id="153" page="14" column="1">372</outsider>
        <outsider class="DoCO:TextBox" type="header" id="154" page="14" column="1">J.O. B o t c h e r s</outsider>
        <region class="unknown" id="155" page="14" column="1">4.3.2 Incremental Revealing</region>
        <region class="DoCO:TextChunk" id="157" confidence="possible" page="14" column="1">Problem: A simple appearance, and presenting the system's depth are competing goals.</region>
        <region class="DoCO:TextChunk" id="164" page="14" column="1">Solution: Initially, present only a very concise and simple overview of the system functionality. Only when the user becomes active, showing that he is interested in a certain part of this overview, offer additional information about it, and show what is lying 'behind' this introductory presentation. Examples: WorldBeat is structured into a short introductory screen, followed by a simple main selection screen with only names and icons of the main exhibit components (conducting, improvising, etc.) If the user moves the pointer towards one of the component icons, a short explanation appears (first revealing stage). Then, if he selects it, a separate page opens up that explains the features in more detail (second revealing stage). Referenees: Most information systems reveal their content incrementally through a FLAT AND NARROW TREE structure. The DYNAMIC DESCRIPTOR pattern also implements incremental revealing. It can be found in Apple's Balloon Help, Windows ToolTips, and has also been identified in <xref ref-type="bibr" rid="R28" id="158" class="deo:Reference">Tidwell (1998)</xref>.<marker type="block"/> As G a m m a et al. (1995) suggested, domain-specific software design patterns are important to supplement the general ones. There are many general software patterns that could be identified in our system, but we will concentrate here on those patterns that relate specifically to software design for music exhibits. We will describe one of these patterns below. More details of these patterns can be found in <xref ref-type="bibr" rid="R10" id="161" class="deo:Reference">Borchers (2001a)</xref>.<marker type="block"/> Context: Musical p e r f o r m a n c e adds m a n y subtle variations to the lifeless representation of a written score, in the harmonic, melodic and rhythmic dimensions. To model these variations, a system will follow the TRANSFORMERCHAIN pattern, where a sequence of transformations is applied to an incoming stream of musical data. Owing to its one-dimensional nature, the rhythmic dimension is especially accessible for computer modelling. Problem: An incoming stream of musical events needs to be modified in its timing: some events need to be delayed for a short period. The delay may follow a deterministic algorithm, or a random distribution, Solution: A number of objects need to interact for such a functionality. A Creator supplies the raw, straight musical material, and a Metronome the raw, straight rhythm. A Modulator models the metric transformation, i.e. the deviation from the uniform</region>
        <region class="unknown" id="160" page="14" column="1">4.4 Software Design Patterns</region>
        <region class="unknown" id="163" page="14" column="1">4.4.1 Metric Transformer</region>
        <region class="DoCO:FigureBox" id="Fx165">
          <image class="DoCO:Figure" src="62ch.page_014.image_14.png" thmb="62ch.page_014.image_14-thumb.png"/>
        </region>
        <outsider class="DoCO:TextBox" type="header" id="166" page="15" column="1">A Pattern Approach to InteractionDesign</outsider>
        <outsider class="DoCO:TextBox" type="page_nr" id="167" page="15" column="1">373</outsider>
        <region class="DoCO:TextChunk" id="168" confidence="possible" page="15" column="1">User control input</region>
        <region class="DoCO:TextChunk" id="169" confidence="possible" page="15" column="1">Customiser 1</region>
        <region class="DoCO:TextChunk" id="170" confidence="possible" page="15" column="1">Feedback Parameter settings</region>
        <region class="DoCO:TextChunk" id="171" confidence="possible" page="15" column="1">Metronome I ~ I</region>
        <region class="DoCO:TextChunk" id="172" confidence="possible" page="15" column="1">Modulator J ,~................. Flexibleinput</region>
        <region class="DoCO:TextChunk" id="173" confidence="possible" page="15" column="1">Basic rhythm "x~ 1r/ Rhythm variations</region>
        <region class="DoCO:TextChunk" id="174" confidence="possible" page="15" column="1">I Timer</region>
        <region class="DoCO:TextChunk" id="175" confidence="possible" page="15" column="1">Modulated rhythm r Musicalmaterial</region>
        <region class="DoCO:TextChunk" id="176" confidence="possible" page="15" column="1">Player</region>
        <region class="DoCO:TextChunk" id="177" confidence="possible" page="15" column="1">Modulated material</region>
        <region class="DoCO:FigureBox" id="F5">
          <caption class="deo:Caption" id="178" confidence="possible" page="15" column="1">Fig. 5. The METRIC TRANSFORMER pattern.</caption>
        </region>
        <region class="DoCO:TextChunk" id="180" confidence="possible" page="15" column="1">beat. It captures the musical idea behind the transformation. It may feed overall gradual tempo changes back to the Metronome. A Customiser lets the user change the Modulator parameters in real time. A Timer takes the basic Metronome beat, and modifies it with the Modulator output. A Player component finally outputs the rhythmically transformed musical material as a new sequence of musical events (see <xref ref-type="fig" rid="F5" id="179" class="deo:Reference">Fig. 5</xref>). Examples: The WorldBeat exhibit features a Groove slider that lets the user change the swing feeling of a blues and while playing (see below). Other examples of such variations that the pattern could implement are the random variations of human performance when interpreting a written score, or the conducting process where the conductor makes subtle changes to the existing tempo and dynamic structure of a orchestral piece. References: This pattern works best with a representation of the musical material as MUSICALEVENTS;an example is the widely used Musical Instruments Digital Interface (MIDI) standard.</region>
        <region class="unknown" id="181" page="15" column="1">4.5 Reusing the Pattern Language</region>
        <region class="DoCO:TextChunk" id="182" confidence="possible" page="15" column="1">In a follow-up project, we designed an interactive music exhibit to learn about the concept of the classical fugue. The musical domain here is quite different from jazz, and only a few musical patterns carried over into the new project. However, we identified many HCt and software engineering patterns in our language that carried</region>
        <region class="DoCO:FigureBox" id="Fx183">
          <image class="DoCO:Figure" src="62ch.page_015.image_15.png" thmb="62ch.page_015.image_15-thumb.png"/>
        </region>
        <outsider class="DoCO:TextBox" type="page_nr" id="184" page="16" column="1">374</outsider>
        <outsider class="DoCO:TextBox" type="header" id="185" page="16" column="1">J.O. Borchers</outsider>
        <region class="DoCO:TextChunk" id="193" page="16" column="1">over very well to this new task. In particular, these patterns helped us communicate our previous experience to new members of the design team. Recently, we finished work on two other projects in a similar domain for the r~OUSE OF MUSIC VIENNA, including a system to conduct the Vienna Philharmonic Orchestra ( <xref ref-type="bibr" rid="R10" id="186" class="deo:Reference">Borchers et al., 2001a</xref>), and have been able to again reuse and refine many of the patterns that were identified through WorldBeat and improved in the Interactive Fugue project.<marker type="block"/> HCI patterns were also used by the author to teach user interface design to first-year computer science undergraduate students. Although these students only received a pattern collection to refer to for their first design projects, it was surprising to see how quickly they discovered patterns that were applicable to their current design situation, how they used those proven solutions in their own project context, and how a vocabulary of patterns was used quickly to discuss options and solutions within and between the design groups. In an ad hoc quiz and poll at the end of the term, students were able to recall 1.6 patterns by name on average (although patterns had only been used for a short period of the course), and judged their usefulness with an overall 1.9 (1 = will absolutely reuse them, 5 = will absolutely not reuse them). The findings of this study are described in more detail in <xref ref-type="bibr" rid="R10" id="189" class="deo:Reference">Borchers (2001a)</xref>.<marker type="block"/> Communication in interdisciplinary design teams is a major problem for HCI practitioners. We suggested that all team members - especially HCI people, software engineers, and experts from the application domain - formulate their experience, methods and values in the form of pattern languages, as originally introduced in urban architecture. For a uniform representation and computer support, we proposed a formal representation of patterns and their relations. As an example, we created pattern languages from our experience in creating an interactive music exhibit. Our results are promising, and indicate that such patterns help people from outside the respective disciplines to understand our findings. They have proven useful to create subsequent exhibits with a similar background, and HCI patterns have served well in an HCI course. Currently, we are extending and refining our language by identifying additional patterns and relations. First steps have also been undertaken in designing the Pattern Editing Tool (PET), a system to support creating, reviewing and browsing pattern languages. A complete version of the HCI and other pattern languages for interactive exhibits and similar systems, as well as a description of PET, can be found in <xref ref-type="bibr" rid="R10" id="192" class="deo:Reference">Borchers (2001a)</xref>. Applying the pattern technique to entirely new application domains could further strengthen our argument that structuring them into patterns is a generally valid approach, and a more intensive use of HCI patterns in user interface design courses will hopefully give us more detailed findings about their usefulness in education.</region>
        <region class="unknown" id="188" page="16" column="1">4.6 Pattern Use in Education</region>
        <region class="unknown" id="191" page="16" column="1">5. Conclusions and Further Research</region>
        <region class="DoCO:FigureBox" id="Fx194">
          <image class="DoCO:Figure" src="62ch.page_016.image_16.png" thmb="62ch.page_016.image_16-thumb.png"/>
        </region>
        <outsider class="DoCO:TextBox" type="header" id="195" page="17" column="1">A Pattern Approach to Interaction Design</outsider>
        <outsider class="DoCO:TextBox" type="page_nr" id="196" page="17" column="1">375</outsider>
      </section>
      <section class="deo:Acknowledgements">
        <h1 class="DoCO:SectionTitle" id="197" page="17" column="1">Acknowledgements</h1>
        <region class="DoCO:TextChunk" id="198" confidence="possible" page="17" column="1">T h e a u t h o r w o u l d like to t h a n k his f o r m e r c o l l e a g u e s at the T e l e c o o p e r a t i o n G r o u p at D a r m s t a d t U n i v e r s i t y o f T e c h n o l o g y , the T e l e c o o p e r a t i o n R e s e a r c h G r o u p at the U n i v e r s i t y o f L i n z , and the D i s t r i b u t e d S y s t e m s and M u l t i m e d i a C o m p u t i n g G r o u p s at the U n i v e r s i t y o f U l m , p a r t i c u l a r l y M a x MiJhlh~iuser at D a r m s t a d t , for their h e l p in w o r k i n g on the p r o j e c t s that c r e a t e d the n e c e s s a r y basis o f this work.</region>
      </section>
      <section class="DoCO:Bibliography">
        <h1 class="DoCO:SectionTitle" id="199" page="17" column="1">References</h1>
        <ref-list class="DoCO:BiblioGraphicReferenceList">
          <ref class="deo:BibliographicReference" id="200" page="17" column="1">Alben, L., Fat'is, J. and Sadter, H. (i994). Making it Macintosh: Designing the Message when the Message is Design, b~teractions. 1(1). 10-20.</ref>
          <ref rid="R1" class="deo:BibliographicReference" id="201" page="17" column="1">Alexander, C. (1979). The Timeless Way of Building. Oxford University Press, Oxford.</ref>
          <ref rid="R2" class="deo:BibliographicReference" id="202" page="17" column="1">Alexander, C., Ishikawa, S., Silverstein, M., Jacobson, M., Fiksdahl-King, 1. and Angel, S. (1977). A Pattern Language: Towns, Buildings, Construction. Oxford University Press, Oxford.</ref>
          <ref rid="R3" class="deo:BibliographicReference" id="203" page="17" column="1">Alexander, C., Silverstein, M., Angel, S., Ishikawa, S. and Abrams, D. (1988). The Oregon Experiment. Oxford University Press, Oxford.</ref>
          <ref class="deo:BibliographicReference" id="204" page="17" column="1">Apple Computer (I992). Macintosh Human Interface Guidelines. Addison-Wesley, Reading, MA.</ref>
          <ref rid="R4" class="deo:BibliographicReference" id="205" page="17" column="1">Barfield, L., van Burgsteden, W., Lanfermeijer, R. et al. (1994). Interaction Design at the Utrecht School of the Arts, SIGCHI Bulletin. 26(3). 49-79.</ref>
          <ref rid="R5" class="deo:BibliographicReference" id="206" page="17" column="1">Bayle, E., Bellamy, R., Casaday, G., Erickson, T. et al. (1998). Putting it all Together: Towards a Pattern Language for Interaction Design, SIGCH! Bulletin. 30(1). 17-23.</ref>
          <ref rid="R6" class="deo:BibliographicReference" id="207" page="17" column="1">Beck, K. and Cunningham, W. (I 987). Using Pattern Languages for Object-Oriented Programs. Technical Report CR-87-43, Tektronix, Inc., September 17, 1987. Presented at the OOPSLA'87 workshop on Specification and Design for Object-Oriented Programming.</ref>
          <ref rid="R7" class="deo:BibliographicReference" id="208" page="17" column="1">Borchers, J.O. (1997). WorldBeat: Designing a Baton-Based Interface for a Interactive Music Exhibit. In Proceedings" of the CHI'97 Conference on Human Factors in Computing Systems, Atlanta, GA, 22-27 March 1997. ACM, I31-138.</ref>
          <ref rid="R8" class="deo:BibliographicReference" id="209" page="17" column="1">Borchers, 1.O. (2000a). CHI Meets PLOP: An Interaction Patterns Workshop, SIGCHIBulIetin. 32(i). 9-12 (Workshop at ChiliPLoP'99).</ref>
          <ref rid="R9" class="deo:BibliographicReference" id="210" page="17" column="1">Borchers, J.O. (2000b). Interaction Design Patterns: Twelve Theses. Position Paper for the workshop Pattern Languages for Interaction Design: Building Momentum, CH12000, The Hague, Netherlands, 2-3 April 2000.</ref>
          <ref rid="R10" class="deo:BibliographicReference" id="211" page="17" column="1">Borchers, J.O. (2001a). A Pattern Approach to Interaction Design. Wiley, New York.</ref>
          <ref rid="R11" class="deo:BibliographicReference" id="212" page="17" column="1">Borchers, J.O. and Mtihlh~tuser, M. (1998). Design patterns for interactive musical systems, IEEEMultimedia. 5(3). 3646.</ref>
          <ref rid="R12" class="deo:BibliographicReference" id="213" page="17" column="1">Borchers, J.O., Griffiths, R.N., Pemberton, L. and Stork, A. (2000). Pattern Languages for Interaction Design: Building Momentum. Workshop at CH12000, The Hague, Netherlands, 2-3 April 2000 (Report to be published).</ref>
          <ref rid="R13" class="deo:BibliographicReference" id="214" page="17" column="1">Borchers, J.O., Samminger, W. and Mfihlh~iuser, M. (2001 a). Conducting a Realistic Electronic Orchestra. Proceedings of UIST 2001, Orlando, FL, 11-14 November 2001, 161-162.</ref>
          <ref rid="R14" class="deo:BibliographicReference" id="215" page="17" column="1">B orchers, J.O., Fincher, S., Griffiths, R., Pemberton, L. and Siemon, E. (2001 b). Usability Pattern Language: Creating a Community. Report of workshop at INTERACT' 99, Edinborough, UK, 30-31 August, 1999. (Appendix to this article).</ref>
          <ref rid="R15" class="deo:BibliographicReference" id="216" page="17" column="1">Denning, P. and Dargan, P. (1996). Action-Centered Design. In Winograd, T. (ed.) Bringing Design to Software. Addison-Wesley, Reading, MA, 105-t 19.</ref>
          <ref rid="R16" class="deo:BibliographicReference" id="217" page="17" column="1">Dix, A.J., Finlay, J.E., Abowd, G.D. and Beale, R. (1998). Human-Computer Interaction (2nd edn). Prentice- Hall, London.</ref>
          <ref rid="R17" class="deo:BibliographicReference" id="218" page="17" column="1">Gamma, E., Helm, R., Johnson, R. and Vlissides, J. (1995). Design Patterns: Elements of Reusable Object- Oriented Software. Addison-Wesley, Reading, MA.</ref>
          <ref rid="R18" class="deo:BibliographicReference" id="219" page="17" column="1">Granlund, A. and Lafrenibre, D. (1999a). A Pattern-Supported Approach to the User Interface Design Process. Workshop report, UPA'99 Usability Professionals' Association Conference, Scottsdale, AZ, 29 June-2 July 1999.</ref>
          <ref rid="R19" class="deo:BibliographicReference" id="220" page="17" column="1">Granlund, A. and Lafreni6re, D. (1999b). PSA, A Pattern-Supported Approach to the User Interface Design Process. Position paper for the UPA'99 Usability Professionals' Association Conference, Scottsdale, AZ, 29 June-2 July 1999.</ref>
          <ref rid="R20" class="deo:BibliographicReference" id="221" page="17" column="1">Iannella, R. (1994). Hypersam: A Practical User Interface Guidelines Management System. In Proceedings of QCHI'94 Second Annual CHISIG (Queensland) Symposium, Bond University, Australia.</ref>
          <ref rid="R21" class="deo:BibliographicReference" id="225" page="18" column="1">Janko, S., Leopoldseder, H. and Stocker, G. (1996). Ars Electronica Center: Museum of the Future. Ars Electronica Center, Linz, Austria.</ref>
          <ref rid="R22" class="deo:BibliographicReference" id="226" page="18" column="1">Kim, S. (1990). Interdisciplinary Cooperation. In Laurel B. (ed.) The Art of Human-Computer Interface Design. Addison-Wesley, Reading, MA, 31-44.</ref>
          <ref rid="R23" class="deo:BibliographicReference" id="228" page="18" column="1">Miller, G.A. (1956). The Magical Number Seven, Plus or Minus Two: Some Limits of our Capacity for Processing Information, PsychologicalReview. 63.8 t-97. <ext-link ext-link-type="uri" href="http://www.well.com/user/smali/miller.html" id="227">http://www.well.com/user/smali/miller.html</ext-link></ref>
          <ref rid="R24" class="deo:BibliographicReference" id="229" page="18" column="1">Mtihlh~user, M., Borchers, J.O., Falkowski, C. and Manske, K. (1996). The Conference/Classroom of the Future: An Interdisciplinary Approach. In Proceedings of IF1P Conference "The International Office of the Future: Design Options and Solution Strategies, Tucson, AZ. Chapman &amp; Hall, London, 233-250.</ref>
          <ref rid="R25" class="deo:BibliographicReference" id="230" page="18" column="1">Nielsen, J. (1993). Usability Engineering. Morgan Kaufmann, San Francisco. Norman, D.A. (1988). The Psychology of Everyday Things. Basic Books, New York.</ref>
          <ref rid="R26" class="deo:BibliographicReference" id="231" confidence="possible" page="18" column="1">Norman, D.A. and Draper, S.W. (1986). User-Centered System Design: New Perspectives on Human- Computer Interaction. Erlbaum, Hillsdale, NJ.</ref>
          <ref rid="R27" class="deo:BibliographicReference" id="232" page="18" column="1">Sutcliffe, A. and Dimitrova, M. Patterns, Claims and Multimedia. In Human-Computer Interaction: INTERACT '99, Edinburgh, UK, 30 August-3 September 1999. IOS Press, Amsterdam, 329-335.</ref>
          <ref rid="R28" class="deo:BibliographicReference" id="234" page="18" column="1">Tidwell, J. (1998). Interaction Design Patterns. PLOP'98 Conference on Pattern Languages of Programming, Illinois, extended version at <ext-link ext-link-type="uri" href="http://www.mit.edu/" id="233">http://www.mit.edu/</ext-link>~jtidwell/interaction_patterns.html</ref>
          <ref rid="R29" class="deo:BibliographicReference" id="236" page="18" column="1">Tidwell, J. (1999). The Gang of Four Are Guilty. <ext-link ext-link-type="uri" href="http://www.mit.edu/" id="235">http://www.mit.edu/</ext-link>~jtidwell/gof_are_guilty.html</ref>
          <ref rid="R30" class="deo:BibliographicReference" id="238" page="18" column="1">Tognazzini, B. (1992). TOG on Interface. Addison-Wesley, Reading, MA. <marker type="block"/> Correspondence and offprint requests to: Jan O. Borchers, Computer Science Department, Stanford University, Gates Building, Room 201, 353 Serra Street, Stanford, CA 94305-9020, USA. Email: borchers @cs.stanford.edu</ref>
        </ref-list>
        <region class="DoCO:FigureBox" id="Fx222">
          <image class="DoCO:Figure" src="62ch.page_017.image_17.png" thmb="62ch.page_017.image_17-thumb.png"/>
        </region>
        <outsider class="DoCO:TextBox" type="page_nr" id="223" page="18" column="1">376</outsider>
        <outsider class="DoCO:TextBox" type="header" id="224" page="18" column="1">J.O. Borchers</outsider>
        <region class="DoCO:FigureBox" id="Fx239">
          <image class="DoCO:Figure" src="62ch.page_018.image_18.png" thmb="62ch.page_018.image_18-thumb.png"/>
        </region>
      </section>
    </body>
  </article>
</pdfx>
