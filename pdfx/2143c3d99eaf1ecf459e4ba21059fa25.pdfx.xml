<?xml version='1.0' encoding='UTF-8'?>
<pdfx xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://pdfx.cs.man.ac.uk/static/article-schema.xsd">
  <meta>
    <job>add8e4c5fcd961249cd6631c82a8b37f625471ba2d3f69bf52ffe731ba5db435</job>
    <base_name>62rt</base_name>
    <doi>http://dx.doi.org/10.1145/1985793.1985909</doi>
  </meta>
  <article>
    <front class="DoCO:FrontMatter">
      <title-group>
        <article-title class="DoCO:Title" id="1">Sketching Tools for Ideation (NIER Track)</article-title>
      </title-group>
      <contrib-group class="DoCO:ListOfAuthors">
        <contrib contrib-type="author">
          <name id="2">Rachel Bellamy</name>
        </contrib>
        <contrib contrib-type="author">
          <name id="3">Michael Desmond</name>
        </contrib>
        <contrib contrib-type="author">
          <name id="4">Jacquelyn Martino</name>
        </contrib>
        <contrib contrib-type="author">
          <name id="5">Paul Matchen</name>
        </contrib>
        <contrib contrib-type="author">
          <name id="6">Harold Ossher</name>
        </contrib>
        <contrib contrib-type="author">
          <name id="7">John Richards</name>
        </contrib>
        <contrib contrib-type="author">
          <name id="8">Cal Swart</name>
        </contrib>
      </contrib-group>
      <region class="unknown" id="10">IBM T. J. Watson Research Center 19 Skyline Drive, Hawthorne, NY 10532 {rachel, mdesmond, jmartino, matchen, ossher, ajtr, <email id="9">cals}@us.ibm.com</email></region>
      <abstract class="DoCO:Abstract" id="11">Sketching facilitates design in the exploration of ideas about con- crete objects and abstractions. In fact, throughout the software engineering process when grappling with new ideas, people reach for a pen and start sketching. While pen and paper work well, digital media can provide additional features to benefit the sketcher. Digital support will only be successful, however, if it does not detract from the core sketching experience. Based on research that defines characteristics of sketches and sketching, this paper offers three preliminary tool examples. Each example is intended to enable sketching while maintaining its characteristic experience.</abstract>
      <section class="DoCO:Section">
        <h2 class="DoCO:SectionTitle" id="12" confidence="possible" page="1" column="1">Categories and Subject Descriptors</h2>
      </section>
      <region class="DoCO:TextChunk" id="13" confidence="possible">D.2.2 [Software Engineering]: Design Tools and Techniques – computer-aided software engineering.</region>
      <region class="DoCO:TextChunk" id="14" confidence="possible">Design, Human Factors.</region>
      <section class="DoCO:Section">
        <h2 class="DoCO:SectionTitle" id="15" confidence="possible" page="1" column="1">General Terms Keywords</h2>
      </section>
      <region class="DoCO:TextChunk" id="16" confidence="possible">Sketching, early design, ideation, tools, hand-drawn computing.</region>
    </front>
    <body class="DoCO:BodyMatter">
      <section class="deo:Introduction">
        <h1 class="DoCO:SectionTitle" id="17" page="1" column="1">1. INTRODUCTION</h1>
      </section>
      <region class="DoCO:TextChunk" id="18" page="1" column="1">The creative process of generating, developing and communicating new ideas through sketching is essential throughout software design. This process, known as ideation, has surprisingly little support in existing software engineering tools. To frame and explore their ideas, software designers typically reach for manual tools, sketching with paper and pencil or whiteboard and marker. Such tools seem uniquely suited to the process of sketching during ideation. Mangano et al [11] also noted that designers commonly sketch, and that they want to manipulate sketches in rich ways, requiring digital support. For example, they need versioning of sketches and integration of sketches with other software engineering artifacts. Additionally, digital support allows for innovation in sketches and sketching, going beyond sequenced, static, 2-D images and reducing, where appropriate, the manual labor involved in sketching. For years, designers have taken advantage of computers to sketch</region>
      <region class="DoCO:TextChunk" id="19" confidence="possible" page="1" column="1">Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are Permission not made to or make distributed digital for or profit hard copies or commercial of all or part advantage of this and work that for personal copies bear or classroom this notice use and is granted the full without citation fee on the provided first page. that copies To copy are not otherwise, made or to distributed republish, for to profit post or on commercial servers or to advantage redistribute and to that lists, copies re- bear this notice and the full citation on the first page. To copy otherwise, to republish, quires prior to post specific on servers permission or to and/or redistribute a fee. to lists, requires prior specific permission and/or a fee. ICSE’11, ICSE’11, May May 21–28, 21-28, 2011, 2011, Waikiki, Waikiki, Honolulu, Honolulu, HI, HI, USA USA. Copyright Copyright 2011 © 2011 ACM ACM 978-1-4503-0445-0/11/05 978-1-4503-0445-0/11/05... ...$10.00 $10.00.</region>
      <region class="DoCO:TextChunk" id="20" page="1" column="2">computer chip design and architectural blueprints. However, until recently, the hardware and software needed to support these activ- ities has been very expensive. Today, innovation and increased affordability of tablet devices are making advanced digital sketching commonly and conveniently available. With continued innovation in portability, touch and pen input and high performance software characteristics like shape recognition, software designers will soon trade their traditional sketching tools for digital ones. We have therefore begun to explore tools supporting sketching that aim to provide the freedom and richness of traditional sketching media. We aim to support the process of ideation as people do it, in a way that captures the sketches and enhances, rather than limits, the experience. A key element of this is helping users to “stay in the flow” [3]: supporting their natural flow of ideas and work, rather than interrupting it. So far we have three early results to present. When people are sketching to explore new ideas, it is important that the sketch be at about the same level of detail as their thoughts. In particular, much greater detail in a sketch can be distracting, breaking the flow. When using early sketches to communicate, a finished, de- tailed sketch conveys an inaccurate impression of completion, and tends to inhibit radical changes. Our first result is therefore to provide support for viewing the same sketches at different levels of fidelity and resolution. Software engineers often have to sketch time-sequences, for example, user interface designers sketch storyboards showing the changing appearance of the user interface as a scenario unfolds, and developers working on algorithms or data structure transfor- mations often use sketches to explore and show the changing states expected as computation progresses. Our second result is therefore to provide support for producing sequences of related sketches, where the system does some amount of interpolation, freeing the user from a lot of copying or transparency manipulation and sketching of small variations. Sketching is iterative and exploratory. As sketchers revise and refine during ideation, they sometimes spot something visually that leads to new insights and the desire to use pieces of the sketches in new and different ways. Also, conventions emerge that amount to an evolving visual notation. For example, after a while the sketcher may begin using dashed arrows to denote a particular kind of relationship. To maintain such evolving conventions requires manual attention that ultimately breaks the creative flow. Digital sketching offers the potential to capture notation, allows the sketcher to attribute meaning to its elements, and helps with consistent usage, all in a way that supports the flow. Our third result is an early prototype, in the context of an office- like tool, of an approach to achieving this.</region>
      <outsider class="DoCO:TextBox" type="page_nr" id="21" page="1" column="2">808</outsider>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="22" page="2" column="1">2. IDEATION AND SKETCHING</h1>
        <region class="DoCO:TextChunk" id="23" page="2" column="1">Ideation is the creative process of generating, developing, and communicating new ideas. Design done well focuses on exploring alternatives, discovering possibilities, and realizing constraints. Ideation is an essential part of these learning and discov- ery aspects of design. Uncommon is the case of a designer with a fully-formed idea in mind. More typical is the gradual development from a half-baked thought to a fully-formed idea. Due to cognitive limitations— such as working memory—this development necessarily requires the use of external representations. Sketching is the process of using external representations during ideation.</region>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="24" page="2" column="1">2.1 Why Sketch</h2>
          <region class="DoCO:TextChunk" id="25" page="2" column="1">Designers use imagery to generate new forms that they represent through sketching [5]. They also sketch to do the reverse, to generate images in their minds [6]. Sketching externalizes concepts for examination, which leads an experienced sketcher to perceive new relationships and generate more ideas [1]. As such it increas- es the likelihood of finding mistakes, discovering better ideas and in the end producing a ‘good’ design. Sketching is not just cognitive; it is also experiential and visceral. As they sketch, sketchers experience a continual feedback loop from mark making to conceptualization [14]. By sketching the designer can feel and think about design possibilities. Different sketches help the designer experience and think about different aspects of a design. By externalizing thoughts, sketching permits collaboration. Sketches are useful to communicate thoughts when multiple stakeholders are involved. The sketch grounds the discussion and helps participants establish shared meaning allowing collaborative trial and error [8]. Unfortunately, the digital tools and representations currently available in software engineering do not lend themselves to sketching because they force premature completeness or accuracy, and have interaction models that break the sketcher’s flow. Thus current digital tools get in the way of sketching. This means that in software engineering, sketching mostly happens without the benefits of computer support, with the result that sketches are disconnected artifacts that cannot be stored, shared or versioned easily, nor be linked to other artifacts conveniently.</region>
        </section>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="26" page="2" column="1">2.2 Requirements for Sketching Tools</h2>
          <region class="DoCO:TextChunk" id="28" page="2" column="1">Buxton [2] points out that there are several key characteristics of sketches that make them so well suited to ideation, and which need to be supported in sketching tools. We plan to understand requirements on tools to support all of them, but at present we focus on two: • Sketches use no higher resolution than necessary—avoiding wasting designer’s time and effort in preparation and ensur- ing that the “resolution of rendering does not suggest a degree of refinement of the concept that exceeds its actual state.” [2] • Sketches are quick and timely to make. The first requires support for manipulating the resolution and fidelity of a sketch. This is important for many reasons. As a thinking artifact, a lack of refinement keeps the design space open and free to change as needed. As a prescriptive or communication <marker type="column" number="2"/><marker type="block"/> artifact, the sketcher wants the viewer to know that the design is not yet complete. They don’t want someone to see a sketch and say ‘ship it’. Professionals will purposely lower the fidelity of high fidelity images to maintain the impression of ‘in process’. The second requires allowing users to “stay in the flow” [3]. They must be left free to concentrate on the task without being distract- ed by the tool. Concerning support of flow, here we consider two scenarios where computational support could be a big help. The first scenario concerns a designer exploring a time sequence given a starting point and known transition structure. Traditional sketching tools and media support this flow badly. The designer has to sketch each frame in the time sequence explicitly, a mechanical process that distracts from the flow. Multimedia authoring tools do a little better, but they primarily support finished production work over sketching so the tool interactions get in the way of creative flow. The second scenario concerns what happens when the sketcher forms a new, unintended interpretation of a piece of a sketch. The new interpretation can result during the actual process of sketching or while looking at a sketch in process. The realization of a new interpretation is the notion of “seeing and re-seeing” which assumes the ability to unbind a previously recognized interpretation. To pursue the new interpretation, the tool must allow the designer to unbind the original interpretation while simultaneous- ly leaving the option for the original meaning to stay in place. Ideally, the sketcher should be able to explore and build on the reinterpretation easily. With traditional sketching tools and media, the designer must explicitly save a particular version, and/or copy and paste to create a new starting point for exploration. Supporting “staying in the flow” in both these cases requires let- ting the user focus on their exploration of the domain as they sketch without having to deal explicitly with copying, saving, sketching multiple frames, and other mechanical operations. With digital support we can do better, as we illustrate below.</region>
        </section>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="29" page="2" column="2">3. TOOL SUPPORT</h1>
        <region class="DoCO:TextChunk" id="30" page="2" column="2">The following sub-sections describe our initial exploration of sketch-based software engineering tools. The examples are hand- drawn concept drawings for a prototype storyboard that will be used as scenarios and inspiration for future implementation.</region>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="31" page="2" column="2">3.1 Manipulable Fidelity &amp; Resolution</h2>
          <region class="DoCO:TextChunk" id="35" page="2" column="2">Sketches typically start out as a blank sheet and cannot take advantage of preexisting libraries of components. Where these libraries exist, they are typically rendered in high fidelity. For example, lines are generally of uniform thickness; they join up per- fectly with other lines, etc. Some tools allow a drawn element to be saved and recalled for later use (see for example AdobeTM FlashTM and their use of “symbols”). But no tool allows a user to create an image that incorporates both free-hand elements and reused elements, where the result is stylistically coherent. The resulting image either has some elements sketched and some elements drawn from existing libraries or, in the case of mostly experimental prototypes, all sketched elements recognized and rendered in high fidelity (for example, turning roughly circular closed forms into perfect circles). To better support the design process through sketching, we are developing exploratory prototypes that embody support for ad- justable fidelity, as discussed earlier. At any point during a sketch, the user can change the rendered fidelity of the composition as <marker type="page" number="3"/><marker type="column" number="1"/><marker type="block"/> shown in <xref ref-type="fig" rid="F1" id="34" class="deo:Reference">Figure 1</xref>. Sketched elements can be recognized and up- rendered to match high fidelity elements from a palette [7]. As a novel addition, if operating in a low-fidelity mode, elements dragged from palettes can be automatically down-rendered by making the lines non-uniform and creating random perturbations in the degree to which lines join, and so on. This not only allows for greater stylistic integrity, but also eliminates much of the tedi- um of performing such changes manually. In addition, versions of the sketch can be created with specific parts of the sketch up-, or down-rendered, to highlight certain aspects of the sketch. As a result, the sketcher is able to readily create a sketch that conveys the appropriate degree of refinement of the represented ideas..</region>
          <outsider class="DoCO:TextBox" type="page_nr" id="33" page="2" column="2">809</outsider>
          <region class="DoCO:FigureBox" id="Fx36">
            <image class="DoCO:Figure" src="62rt.page_003.image_02.png" thmb="62rt.page_003.image_02-thumb.png"/>
          </region>
          <region class="unknown" id="38" page="3" column="1"> <xref ref-type="fig" rid="F1" id="37" class="deo:Reference">Figure 1</xref> A calendar widget rendered at each of low (left) me- dium (center) and high (right) fidelity 1 .</region>
        </section>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="39" page="3" column="1">3.2 Enabling Time-sequenced Sketches</h2>
          <region class="DoCO:TextChunk" id="41" page="3" column="1">When designing software, designers must describe user actions and system behavior over time. This means that expressing tem- poral relationships is as important as communicating spatial rela- tionships. We have been exploring ways to support the ability to “stay in the flow” while also reducing design effort in sketching descriptive time-sequences. Typically, designers sketch static storyboards for key states in event sequences. Frame ordering represents temporal order and arrows indicate transitions between key states. Other graphical techniques and annotations indicate speed of transition, intermedi- ate motion or morphing of graphical elements, temporal form (e.g. starts slow and then speeds up), and even type of transition (e.g. fade-in, fade-out). Since the designer must repeatedly sketch re- curring elements, hand-drawn storyboards can be tedious. The common technique of photocopying transparency film eases the burden somewhat, but such a process may be disruptive to crea- tive flow. Digital tools such as AdobeTM FlashTM support layering built on a transparency metaphor, but in this case the software interface controls detract from a flow experience. Building on an animation in-betweening analogy, our proposed system creates intermediate interface widget states and transitions from designer given start and/or end states. The system recogniz- es when a designer sketches a widget as a key-frame and the sys- tem generates the widget’s additional “state frames” to include at the appropriate sequential position in the storyboard. This is dif- ferent from adding interactive widgets in traditional authoring tools. Such tools generate widget states based on form-based inputs. In our approach, the system generates in-between sketches based on a hand-drawn act rather than a form-filing act. Consider a designer using a tablet computer to develop a story- board as per <xref ref-type="fig" rid="F2" id="40" class="deo:Reference">Figure 2</xref>. When the designer sketches a shape, the system attempts to recognize the shape from its ‘widget knowledge base’. If the shape is recognized, the system adds addi- tional state frames to the storyboard as determined by the specifi-</region>
          <region class="DoCO:TextChunk" id="43" confidence="possible" page="3" column="1">1 The calendar image was reproduced from ‘Stencil toolkit’, available via <ext-link ext-link-type="uri" href="http://creativecommons.org/licenses/by/2.5/" id="42">http://creativecommons.org/licenses/by/2.5/</ext-link></region>
          <region class="DoCO:TextChunk" id="44" page="3" column="2">cation of the widget found in the knowledge base. To encourage further exploration and modification state frames display a sketchy version of the recognized widget that can be further edit- ed, and an annotation to indicate interaction state.</region>
          <region class="DoCO:FigureBox" id="F2">
            <image class="DoCO:Figure" src="62rt.page_003.image_01.png" thmb="62rt.page_003.image_01-thumb.png"/>
            <caption class="deo:Caption" id="46" page="3" column="2">Figure 2. As button widget is sketched and recognized, states are generated automatically. The frames can be further sketched upon, annotated and edited. The light bulb was sketched after the button state frames were generated. Software systems are more typically a network of states rather than a linear sequence. In sketching, the designer illustrates condi- tions and dependencies with sketch arrows. We acknowledge this convention as a flowy way of designing, and expect sketch arrows between state frames to signify “generate new state frames and potential alternative transitions between these states.” In the ex- ample above, the state “over” can be different depending on the previous state of the bulb (“on” or “off”), so based on the sketch of the arrow between the “down” and “over” states, an additional “over” state frame would be added to the storyboard. Of course, designers often create new types of widgets. A design- er should be able to tell the system when a set of sketched frames represents a widget in different states, and to indicate which tran- sitions are dependencies between states. With the designer’s guidance, the system could analyze these sketches and add a new widget-type to its knowledge base.</caption>
          </region>
        </section>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="47" page="3" column="2">3.3 Reconfiguring and Reinterpreting</h2>
          <region class="DoCO:TextChunk" id="48" page="3" column="2">In software design, sketches often portray complex designs de- picting abstract elements, their interactions and relationships. These sketches are revised and refined as the author engages in ideation and abstraction processes. Colors and shapes are altered, elements moved, added and erased, annotations introduced etc. Perhaps the most rudimentary facilitator of sketch revi- sion/refinement is the breaking of a sketch into coherent visual entities to be digitally manipulated by the user. However, manual decomposition goes against the fluid and effortless nature of sketching. A digital sketching tool should be capable of recogniz- ing emergent visual patterns within a composition being sketched, thus capturing and surfacing the sketcher’s use of ‘visual nota- tion’. For instance, consider sketching a parallel program as in Figure 3. In two cases, a rectangle points to a circle that wraps some lines (indicating, perhaps, that the data flows represented by the wrapped lines must be synchronized at these points for the reasons described in the rectangles). A sketching tool could identi- fy the repeated use of this construct and make it available on a palette for further use. The user could then change the style of the rectangle in all instances of this construct in a single operation (e.g., using a style mapping as in BITKit [12]), maintaining con- sistency without the need for tedious selection and re-sketching.</region>
          <outsider class="DoCO:TextBox" type="page_nr" id="49" page="3" column="2">810</outsider>
          <region class="DoCO:FigureBox" id="F3">
            <image class="DoCO:Figure" src="62rt.page_004.image_03.png" thmb="62rt.page_004.image_03-thumb.png"/>
            <caption class="deo:Caption" id="51" page="4" column="1">Figure 3. Sketch with repeated use of a construct consisting of a circle wrapping some lines and connected to a rectangle. Low fidelity sketches often provide an abstract basis for more formal representations and implementation constructs later in the design and development cycle. The ability to recognize visual patterns within a composition also opens up the possibility of introducing conceptual knowledge into a sketch - thus transiting to a more formal and structured representation. In the BITKit tool [12], an experimental merging of office and modeling technology, this transition is achieved by capturing the use of visual styles and patterns in a free-form drawing, and mapping them to types and constraints over an inferred information model. If the user maps a style to an existing type, they benefit from the guidance and af- fordances provided by the associated constraints. Recognizing patterns in a hand-drawn composition is also condu- cive to identifying and pointing out potentially new interpretations of a sketch to the user. A system primed with sufficient existing material and conceptual knowledge may be capable of presenting the user with the means of identifying new interpretations and expanding on them in a fluid manner. Achieving real time recognition of arbitrary visual patterns is a challenge, particularly in the fuzzy environment of a sketched composition. A further challenge is how to surface and manipulate such visual patterns in a fluid and unobtrusive manner.</caption>
          </region>
        </section>
      </section>
      <section class="deo:RelatedWork">
        <h1 class="DoCO:SectionTitle" id="52" page="4" column="1">4. RELATED WORK</h1>
        <region class="DoCO:TextChunk" id="53" page="4" column="1">There is a history of attempts to support sketching by hand in software design tooling. Many focus on recognizing sketched elements such as diagrams [7], UI widgets [10], Web elements [9], Multimedia containers [1]. Other systems recognize gestures as temporal relationships such as synchronization and sequencing of elements [1]. Others, such as the scraps feature in Calico [11], can be thought of as supporting reconfiguration of a sketch through manual manipulation of arbitrary shaped pieces. Consideration of the usability of pen input is itself an important aspect of tooling for sketching by hand. Informal usability studies of pen-based tools reveal a range of basic usability problems [13] that will need to be addressed if they are not to impact the flow- like experience required of sketching tools. Dorta [4] suggests that rather than imitate analog processes in the digital medium, aug- menting traditional analog tools with digital capabilities might be a more appropriate approach to supporting sketching. Preliminary studies show that such environments stimulate idea generation in individual and team settings by keeping designers in the flow.</region>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="54" page="4" column="1">5. FUTURE DIRECTIONS</h1>
        <region class="DoCO:TextChunk" id="56" page="4" column="1">The time is right, and the possibilities are many for sketch-based support for ideation in software engineering. We envision non- intrusive mechanisms for versioning of sketches, allowing the sketcher to easily move back and forth along the sketching time- line as they explore their sketches. We envision sophisticated vocabularies of sketched gestures that can be recognized as spe- cialized elements, relationships and transitions. We envision rule- based systems that can recognize meaningful yet unintended <marker type="column" number="2"/><marker type="block"/> graphical elements in a sketch and facilitate designers in “seeing” their sketch anew. It will not be long before a software designer will reach for digital pen and tablet instead of pencil and paper when starting to explore new ideas.</region>
        <region class="DoCO:TextChunk" id="57" confidence="possible" page="4" column="2">We thank Peri Tarr and the anonymous reviewers.</region>
      </section>
      <section class="DoCO:Bibliography">
        <h1 class="DoCO:SectionTitle" id="58" page="4" column="2">7. REFERENCES</h1>
        <region class="DoCO:TextChunk" id="59" page="4" column="2">[1] B. P. Bailey, J. A. Konstan, &amp; J. V. Carlis. 2001. DEMAIS: designing multimedia applications with interactive story- boards. In Proceedings of the ninth international conference on Multimedia. ACM, New York, NY, USA, 241-250. [2] B. Buxton. 2007. Sketching User Experiences: Getting the Design Right and the Right Design (Interactive Technolo- gies). Morgan Kaufmann. [3] M. Csikszentmihalyi. 1990. Flow: The Psychology of Opti- mal Experience, New York: Harper and Row. [4] T. Dorta, E. Pérez &amp; A. Lesage. 2008. The Ideation Gap: Hybrid tools, Design flow &amp; Practice, Design Studies. 29(2), 121-141. [5] E. Ferguson. 1997. The Mind’s Eye: Nonverbal Thought in Technology. Science-New Series, 197,4306, 827-836. [6] G. Goldschmidt. 1992. Serial sketching: visual problem solv- ing in designing Cybernetics and Systems, 23, 191-219. [7] J. Grundy &amp; J. Hosking. 2007. Supporting Generic Sketch- ing-Based Input of Diagrams in a Domain-Specific Visual Language Meta-Tool. In Proceedings of ICSE ’07. IEEE Computer Society, Washington, DC, USA, 282-291. [8] J. Heiser, B. Tversky, &amp; M. Silverman. 2004. Sketches For and From Collaboration. In Visual and spatial reasoning in design III. Key Centre for Design Research, Sydney. [9] J. Lin, M. W. Newman, J. I. Hong, &amp; J.A. Landay. 2000. DENIM: finding a tighter fit between tools and practice for Web site design. In Proceedings of SIGCHI. ACM, New York, NY, USA, 510-517. [10] J. A. Landay. 1996. SILK: sketching interfaces like krazy. In CHI Conference companion. ACM, NY, USA, 398-399. [11] N. Mangano, A. Baker, M. Dempsey, E. Navarro, &amp; A. van der Hoek. 2010. Software Design Sketching with Calico, Twenty-fifth IEEE/ACM International Conference on Auto- mated Software Engineering, 23–32. [12] H. Ossher, R. Bellamy, I. Simmonds, D. Amid, A. Anaby- Tavor, M. Callery, M. Desmond, J. de Vries, Amit Fisher, and S. Krasikov. 2010. Flexible modeling tools for pre- requirements analysis: conceptual architecture and research challenges. In Proceedings of OOPSLA ’10. ACM, New York, USA, 848-864. [13] B. Plimmer. 2008. Experiences with digital pen, keyboard and mouse usability. Journal on Multimodal User Interfaces, 2(1), 13-23. [14] D. Schön, 1983. The reflective practitioner: How profession- als think in action, Basic Books, New York. [15] M. Suwa &amp; B. Tversky. 1997. What do architects and stu- dents perceive in their design sketches? A protocol analysis. Design Studies, 18(4), 385-4.</region>
        <outsider class="DoCO:TextBox" type="page_nr" id="60" page="4" column="2">811</outsider>
      </section>
    </body>
  </article>
</pdfx>
