<?xml version='1.0' encoding='UTF-8'?>
<pdfx xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://pdfx.cs.man.ac.uk/static/article-schema.xsd">
  <meta>
    <job>2a19ffff97cd0fff8ba8affd9a5ad4a051d76201eefed03a003f587bf535921b</job>
    <base_name>62cv</base_name>
    <doi confidence="possible">http://dx.doi.org/10.1186/1476-9255-10-s1-p4</doi>
    <warning>Original PDF was found to be an image-based/possible OCR document. Output quality may be degraded.</warning>
  </meta>
  <article>
    <front class="DoCO:FrontMatter">
      <outsider class="DoCO:TextBox" type="outsider" id="1">CH1'89 PROCEEDINGS</outsider>
      <outsider class="DoCO:TextBox" type="outsider" id="2">MAY 1989</outsider>
      <region class="unknown" id="3">PROGRAMMABLE USER MODELS FOR PREDICTIVE EVALUATION OF INTERFACE DESIGNS</region>
      <contrib-group class="DoCO:ListOfAuthors">
        <contrib contrib-type="author">
          <name id="4">Richard M. Young</name>
        </contrib>
        <contrib contrib-type="author">
          <name id="5">T. R. G. Green</name>
        </contrib>
        <contrib contrib-type="author">
          <name id="6">Tony Simon</name>
        </contrib>
      </contrib-group>
      <region class="DoCO:TextChunk" id="7" confidence="possible">M R C Applied Psychology Unit 15 Chaucer Road Cambridge CB2 2EF, U.K.</region>
      <abstract class="DoCO:Abstract" id="8">A Programmable User M o d e l (PUM) is a psychologically constrained architecture which an interface designer is invited to program to simulate a user performing a range of tasks with a proposed interface. It provides a novel way of conveying psychological considerations to the designer, by involving the designer in the process of making predictions of usability. Development of the idea leads to a complementary perspective, of the PUM as an interpreter for an "instruction language". The methodology used in this research involves the use of concrete HCI scenarios to assess different approaches to cognitive modelling. The research findings include analyses of the cognitive processes involved in the use of interactive computer systems, and a number of issues to be resolved in future cognitive models.</abstract>
    </front>
    <body class="DoCO:BodyMatter">
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="9" confidence="possible" page="1" column="1">KEYWORDS:</h1>
        <region class="DoCO:TextChunk" id="10" confidence="possible" page="1" column="1">evaluation,</region>
        <region class="unknown" id="11" page="1" column="1">User models, predictive interface design.</region>
      </section>
      <section class="deo:Introduction">
        <h1 class="DoCO:SectionTitle" id="12" page="1" column="1">INTRODUCTION</h1>
      </section>
      <region class="DoCO:TextChunk" id="13" page="1" column="1">As potential tools for an interface designer, analytical models of the user appear to have two purposes within HCI, (1) In terms of their outcome, to perform "predictive evaluation", i.e. to tell the designer about the usability of a proposed design before it is actually built; and (2) In terms of the benefit they give the designer through the experience of applying them, to draw the designer's attention to issues of usability and to provide a way of thinking about them. The assumption shared by such models is that better designs will result if questions of usability are considered as early in the design cycle as possible, instead of being left to the necessarily later stage of prototype evaluation. Within that assumption, Permission to copy without fee all or part of this material Is granted provided that the copies are not made or distrib- uted for direct commercial advantage, the ACM copyright notice and the title of the publication and its date appear, and notice Is given that copying is by permission of the As- sociation for Computing Machinery. To copy otherwise, or to republish, requires a fee and/or specific permission.</region>
      <region class="DoCO:TextChunk" id="14" confidence="possible" page="1" column="1">Â© 1989 ACM 0-89791-301-9/89/0004-0015 1.50</region>
      <region class="DoCO:TextChunk" id="22" page="1" column="2">different available models exhibit considerable --and somewhat confusing - - diversity ( <xref ref-type="bibr" rid="R5" id="15" class="deo:Reference">Card &amp; Young, 1984</xref>; <xref ref-type="bibr" rid="R12" id="16" class="deo:Reference">Simon, 1988</xref>).<marker type="block"/> This paper describes the key notions underlying a new class of models known as Programmable User Models, PUMs, which address the two objectives just mentioned. A PUM is a constrained cognitive architecture that can be programmed (e.g. by an interface designer) to simulate an hypothetical user performing some range of tasks with a proposed interface. A PUM thereby acts as an analytical model of a computer user, cast in a form in which the interface designer has to "program" certain aspects of the user's intended behaviour. PUMs explore a novel approach to the problem of how to build predictive models of complex human behaviour which are accessible to professionals (in this case interface designers) who probably do not have a specialised training in human psychology. PUMs are intended as an effective way of conveying psychological considerations to the designer, by virtue of involving him/her in the actual process of building the model and making the predictive evaluations based upon it. The designer is thus in a position to see where the predictions come from and what factors they depend upon.<marker type="block"/> PUMs are an unfamiliar notion, and the best way to describe them seems to be to present one particular view of them, and then say something about the methodology and modelling techniques employed, and some of the lessons leamed. In flavour PUMs are probably closest to the "Cognitive Complexity Theory" of <xref ref-type="bibr" rid="R7" id="19" class="deo:Reference">Kieras &amp; Poison (1985)</xref>, especially in the form in which it emerges from the hands of <xref ref-type="bibr" rid="R3" id="20" class="deo:Reference">Bennett, Lorch, Kieras &amp; Poison (1987)</xref> after having been moulded by considerations of applicability. But PUMs take a different approach to the actual modelling, and focus primarily upon knowledge- intensive rather than heavily proceduralised behaviour.<marker type="block"/> :0 Tony Simon's present address: Department of Psychology, Carnegie-Mellon University, Pittsburgh, PA 15213.</region>
      <outsider class="DoCO:TextBox" type="page_nr" id="23" page="1" column="2">15</outsider>
      <outsider class="DoCO:TextBox" type="header" id="24" page="2" column="1">CH1'89 PROCEEDINGS</outsider>
      <outsider class="DoCO:TextBox" type="header" id="25" page="2" column="1">MAY 1989</outsider>
      <region class="unknown" id="26" page="2" column="1">PUM AS A CONSTRAINED ARCHITECTURE FOR PREDICTIVE EVALUATION</region>
      <region class="DoCO:TextChunk" id="27" confidence="possible" page="2" column="1">Consider a situation that can arise all too easily in the present state of HCI. An interface designer might say to a colleague in Human Factors "Here is a marvellous new interface, which people will find wonderfully easy to use." The Human Factors advisor might reply "It's a confusing design, people won't be able to use it". But, as happens so much when HCI expertise is based primarily upon simple guidelines or empirical evaluation, if there is no explicit scientific basis for the assessment, and if it fails to give the designer specific guidance on what is wrong and what can be done about it, then the designer will reject the judgement (because it is simply the advisor's word against the designer's) and will find it genuinely unhelpful (because of the lack of specific diagnosis and guidance). For example, in the well-known case of the limited human capacity to store dynamic information, guidelines would indicate something like: "Users can retain at most four items of changing information; design the interface so that they never need to store more." Such a guideline gives no indication how to estimate the memory load of a proposed design, nor what any detected overload is due to.</region>
      <region class="DoCO:TextChunk" id="28" confidence="possible" page="2" column="1">Suppose instead that we present the designer with a programmable architecture that has only four slots (say) for dynamic information (even though that is not exactly how it would be handled in a real PUM). Then the designer has to program the PUM respecting the constraint, or else the model will make errors when it runs. Because the whole arrangement is accessible, the designer can tell what the memory load is and what any overload is due to. Furthermore, the designer is then in a position to see what design options are available to overcome the problem, and (equally importantly) what the user's options are to avoid the problem by a change of strategy.</region>
      <region class="DoCO:TextChunk" id="29" confidence="possible" page="2" column="1">PUMs thus propose to give interface designers a constrained, programmable architecture, and to say to them "If you think your design is so great, then program this architecture to behave like a user using your interface to perform some task. If you find that a straightforward and satisfactory thing to do, you may take it as suggestive evidence that the interface will indeed be easy to use. But if you find that some aspect of it gives you trouble, take that as evidence that people will have difficulty with the same aspect." This approach is better, because (1) it asks software designers to do what they are good at, namely to devise programs for strange beasts, and (2) because it shows the designers where the predictions come from and helps them see what their options are.</region>
      <region class="DoCO:TextChunk" id="30" confidence="possible" page="2" column="1">It should be noted that PUMs give useful feedback to the designer at two distinct times: Firstly, when they are engaged in programming the PUM, and secondly</region>
      <region class="DoCO:FigureBox" id="Fx31">
        <image class="DoCO:Figure" src="62cv.page_002.image_02.png" thmb="62cv.page_002.image_02-thumb.png"/>
      </region>
      <region class="DoCO:TextChunk" id="32" confidence="possible" page="2" column="2">when the model is actually run to make its predictions. (Bennett et al [1987] make a similar point.) We suspect that most of the value will come from the first of those times, by providing the designer with a means for considering the proposed design from the user's point of view.</region>
      <region class="unknown" id="33" page="2" column="2">User Programs</region>
      <region class="DoCO:TextChunk" id="35" confidence="possible" page="2" column="2">Another perspective on PUMs derives from the work of <xref ref-type="bibr" rid="R11" id="34" class="deo:Reference">Runciman &amp; Hammond (1986)</xref>, who point out that in any interactive system, t w o processors are involved: the computer and the user. As the software engineer builds and refines the program that runs on the computer, at the same time he or she is also implicitly specifying the "user program". Runciman and Hammond argue that it is better to make this activity explicit - - or indeed, in order to correct the present imbalance, to focus on it as the basis for design. To ensure the usability of the resulting computing system, the designer needs to know that this "user program" is "executable" by the human processor in a satisfactory and bug-free way.</region>
      <region class="DoCO:TextChunk" id="36" confidence="possible" page="2" column="2">In the end, of course, this brings us back to the previous story, since it immediately raises questions about the architecture of the human cognitive processor and its repertoire of instructions. On the way, however, the notion of "user program" that it introduces usefully extends our understanding of PUMs. It provides an altemative view of a PUM, as the executor of a user program.</region>
      <region class="unknown" id="37" page="2" column="2">What PUMs are NOT</region>
      <region class="DoCO:TextChunk" id="38" confidence="possible" page="2" column="2">To help clarify the unfamiliar notion of a PUM, it is useful to counter explicitly some possible miscon- ceptions. A PUM is:</region>
      <region class="DoCO:TextChunk" id="39" confidence="possible" page="2" column="2">not an "artificial user". It is a cognitive architecture that can be regarded as a partial model, for which the designer has to supply the parts that present psychology cannot provide. There are anyway doubts about the acceptability and utility to designers of an "artificial user". Although it is sometimes assumed that the ideal in predictive modelling would be to have a complete model which predicts how real users will behave with a proposed system, we believe that, quite apart from the sheer impossibility of building such a thing, it would also be ineffective at communicating usability considerations to the designer, for the reasons sketched earlier.</region>
      <region class="DoCO:TextChunk" id="40" confidence="possible" page="2" column="2">not a back-of-the-envelope calculational model. It is an approximate model all right, as are all cognitive models, but it is not primarily calculational, and our guess is that its application to a serious project would require a fair commitment of effort. (But perhaps that's also true even of something as simple as the Keystroke Level Model of Card, Moran &amp;Newell [1983]?)</region>
      <outsider class="DoCO:TextBox" type="page_nr" id="41" page="2" column="2">16</outsider>
      <outsider class="DoCO:TextBox" type="header" id="42" page="3" column="1">CH1'89 PROCEEDINGS</outsider>
      <outsider class="DoCO:TextBox" type="header" id="43" page="3" column="1">MAY 1989</outsider>
      <region class="DoCO:TextChunk" id="44" page="3" column="1">â¢ not an interface design kit. Although it should find its place as part of a software development environment (and the way forward clearly depends upon finding means of integrating PUMs into the iterative process of software design), a PUM is a tool for constructing a model of the user, not of the system. This is of course not to deny that the provision of constrained toolkits (of which the best known is perhaps the Apple Macintosh toolbox [Chemicoff, 1985])can be a way to improve the quality of interface design. But PUMs represent a different line of research.</region>
      <region class="unknown" id="45" page="3" column="1">â¢</region>
      <region class="DoCO:TextChunk" id="46" confidence="possible" page="3" column="1">n o t an Expert System "designer's assistant". Again, it is a tool for constructing a model of the user, it is not a simulation of an expert designer. Although it is intended as an aid to the interface designer, it fulfils this role not by actively offering advice, but by serving to draw the designer's attention to the considerations and constraints affecting usability.</region>
      <region class="unknown" id="47" page="3" column="1">TOWARDS A PUM: INSTRUCTION LANGUAGE</region>
      <region class="DoCO:TextChunk" id="66" page="3" column="1">One aspect of our investigation into what would be required to implement a PUM addresses the question of what is involved in "programming" it. Clearly, in order for a PUM to have the desired characteristics, the constraints embodied in its architecture must reflect valid psychological properties. In con- sequence, the PUM's "programming language" will be quite unlike that of conventional procedural languages. For example, there can be no default sequencing, by which one tells the model to do B after doing A simply by writing the two steps in sequence, since people do not have the ability to carry out arbitrary sequences of steps on command. Instead the PUM programmer (i.e. the interface designer) will have to specify explicitly how the user is to know to do B next after having done A. Similarly, the programming language cannot allow access to unrestricted global variables, since people cannot remember arbitrarily tagged pieces of information for unlimited periods of time. Instead, for items of information to be recalled, the PUM programmer will have to specify explicit mnemonic retrieval routes. <marker type="block"/> One way of approaching the question is to consider that we have a PUM which is supplied with relevant background knowledge from a "knowledge library", but knows nothing about the particular device or the task to be done. We therefore have to "instruct" it about both. This kind of instruction takes the form of specifying the relevant conceptual objects and the operations on them, of providing various methods and hints, of indicating what background knowledge is applicable, and so on. Thus giving instructions, in this sense, resembles building a knowledge base more than it does conventional programming. What emerges from this part of the investigation is therefore another perspective on PUMs, namely the<marker type="column" number="2"/><marker type="block"/> view of a PUM as the interpreter of an instruction language. This perspective complements and extends our initial understanding of PUMs. What would such an interpreter look like? It would certainly have a distinct flavour of Artificial Intelligence about it, as it can be regarded as an engine for applying knowledge to situations in order to generate behaviour. For example, it must have the capability to do what we call "mini-planning". Instructions, unlike programs, do not supply all the detailed information needed for their execution. There is therefore a need for a PUM to incorporate a simple planning mechanism to help bridge the gaps between the instructions and the concrete situation, and to fill in the details between one instruction and the next. The ideal is that the PUM should do automatically anything that people find "obvious" in context, and so do not have to be told.<marker type="block"/> Although it is likely still to be several years before we have such a thing as a running PUM, it is worth reporting that even from early in the project the industrial partners found that thinking about interface design problems in terms of "user program" and "instruction language" provides an approach to design that seems to help designers conceptualise the interface from the user's point of view. Our guess as to the reasons behind this (unexpectedly) early piece of technology transfer points again to the contrast between the PUMs approach and the usual kind of HCI advice in the form of guidelines. Interface designers are frequently urged to "consider the interface from the user's viewpoint", or some such recommendation. While that is good advice, and may well be accepted as such by the designer, it falls short of helping the designer know what actually to do. But to pose the question "What 'instructions' must we give in order for someone to know how to use the interface?" provides the designer with a concrete and practical means for mentally stepping into the user's shoes.<marker type="block"/> It is not an aim of PUM research to develop a new cognitive architecture from scratch. Much effort is saved by capitalising on existing work done within Cognitive Science on constrained architectures and frameworks for modelling. The methodology used in the project for critically examining and assessing different approaches to modelling is offered as a research contribution in its own right (<xref ref-type="bibr" rid="R15" id="54" class="deo:Reference">Young &amp; Bamard, 1987</xref>). We make use of a number of "scenarios", each of which is a concrete and detailed instance of a fragment of human-computer usage. The scenarios are selected to sample over a number of bases relevant to HCI, such as different cognitive resources, different kinds of interface, and different sorts of task. Taken together, the set of scenarios is used as a "conceptual filter bank" for exploring the scope and adequacy of the various approaches for modelling in HCI. The scenario-based analysis has<marker type="page" number="4"/><marker type="column" number="1"/><marker type="block"/> revealed the complementary strengths and weaknesses of the different modelling approaches, and also some deep connections between them, for example how a wide class of rule-based architectures all exhibit a tendency to certain kinds of "termination errors" (see <xref ref-type="bibr" rid="R15" id="59" class="deo:Reference">Young &amp; Bamard, 1987</xref>).<marker type="block"/> The modelling approach which is emerging from our work is inspired primarily by SOAR (<xref ref-type="bibr" rid="R9" id="61" class="deo:Reference">Newell, 1989</xref>; <xref ref-type="bibr" rid="R8" id="62" class="deo:Reference">Laird, Newell &amp; Rosenbloom, 1987</xref>), a problem- solving architecture realised as a series of nested problem-spaces. Of the frameworks available, SOAR is the one that most closely approximates the description we gave above of an instruction language interpreter, as "an engine for applying knowledge to situations in order to generate behaviour". It is also the most contraining, and indeed it happens to enforce a good approximation to both the contraints we mentioned above, those of "no default sequencing" and "no global variables". SOAR comes with a built- in mechanism for learning, called learning by chunking, which is tightly entwined with the problem-solving mechanism itself. This has the effect of constraining the architecture still further, as well as allowing us to model at least the initial rapid learning so characteristic of interaction with software systems. But for our purposes SOAR is not quite right as it stands, and our approach also incorporates ideas from others of the modelling frameworks we have examined, such as ACT* (<xref ref-type="bibr" rid="R1" id="63" class="deo:Reference">Anderson, 1983</xref>), Interacting Cognitive Subsystems (Barnard, 1987), and Task-Action Grammars (<xref ref-type="bibr" rid="R10" id="64" class="deo:Reference">Payne &amp; Green, 1986</xref>).<marker type="block"/> Some of the lessons learned from the exercise concern what is involved in taking a general-purpose architecture such as SOAR and seeking to apply it to the particular domain of human-computer interaction. We have identified, and attempted to clarify, a number of issues that arise, of which we mention here just three:</region>
      <region class="DoCO:FigureBox" id="Fx50">
        <image class="DoCO:Figure" src="62cv.page_003.image_03.png" thmb="62cv.page_003.image_03-thumb.png"/>
      </region>
      <region class="unknown" id="53" page="3" column="2">TOWARDS A PUM: ISSUES IN MODELLING</region>
      <outsider class="DoCO:TextBox" type="page_nr" id="56" page="3" column="2">17</outsider>
      <outsider class="DoCO:TextBox" type="header" id="57" page="4" column="1">CH1'89 PROCEEDINGS</outsider>
      <outsider class="DoCO:TextBox" type="header" id="58" page="4" column="1">MAY 1989</outsider>
      <region class="unknown" id="67" page="4" column="1">mini-planning,</region>
      <region class="DoCO:TextChunk" id="70" confidence="possible" page="4" column="1">One is which was described earlier in connection with the interpretation of an instruction language. Mini-planning is one of several ways in which a PUM has to supply a (limited) amount of Artificial Intelligence to the job of user modelling. It has led us to analyse the role of planning in HCI, especially its partial and reactive nature (<xref ref-type="bibr" rid="R15" id="68" class="deo:Reference">Young &amp; Simon, 1987</xref>; <xref ref-type="bibr" rid="R12" id="69" class="deo:Reference">Simon &amp; Young, 1988</xref>).</region>
      <region class="unknown" id="71" page="4" column="1">interactivity. The</region>
      <region class="DoCO:TextChunk" id="72" confidence="possible" page="4" column="1">Another issue is frameworks we are drawing on were developed originally for modelling purely internal cognitive processes. Trying to apply them to model behaviour which includes tight interaction with the outside world, as is often the case in HCI, gives rise to a number of unsolved problems, such as those concerning the representation and control of perception and action, and the relationship between perceived and</region>
      <region class="DoCO:FigureBox" id="Fx73">
        <image class="DoCO:Figure" src="62cv.page_004.image_04.png" thmb="62cv.page_004.image_04-thumb.png"/>
      </region>
      <region class="DoCO:TextChunk" id="75" confidence="possible" page="4" column="2">imagined versions of the same information or operations (<xref ref-type="bibr" rid="R12" id="74" class="deo:Reference">Simon, Polk, Young &amp; Card, 1988</xref>).</region>
      <region class="unknown" id="76" page="4" column="2">converging evidence</region>
      <region class="DoCO:TextChunk" id="78" confidence="possible" page="4" column="2">The role of is ubiquitous in HCI. Users deciding on their next action may need to gather and weigh evidence from a number of different sources and lines of reasoning, such as: previous experience with the system; remembered instructions for performing the current task; analogies from other tasks or everyday behaviour; information on or derivable from the screen; examples in a manual; and so on. Similar issues arise from the multiple intemal forms of procedural knowledge, including both plan-based and method- based representations (<xref ref-type="bibr" rid="R16" id="77" class="deo:Reference">Young, Lewis, Simon &amp; Tang, 1989</xref>). By its nature, SOAR lends itself well to the modelling of evidence gathering, but ways have to be found of making this capability available in a PUM wherever it is needed.</region>
      <region class="unknown" id="79" page="4" column="2">CONCLUSION</region>
      <region class="DoCO:TextChunk" id="80" page="4" column="2">The PUMs project represents a line of research that takes a step beyond simply recognising the desirability of having user models available to the designer. It acknowledges that Psychology is not in a position to provide ready-made user models off the shelf, and that anyway such models are not necessarily suitable for the role intended for them. Nor is it realistic to expect interface designers themselves to engage in user modelling with the tools currently available. PUMs offer the promise of resolving this dilemma by looking to Psychology to provide an appropriately constrained architecture, while devolving responsibility for certain other aspects of the modelling onto the designer. They offer the prospect of a class of aids tailored to the needs of interface designers, which deliver their benefits not so much by the conventional means of the output from the model, but more by virtue of the activities the designers are led to. ACKNOWLEDGEMENTS We are grateful to Rod Rivers for comments, and especially to Philip Bamard for a magnificent job of reconstruction on an earlier version of the paper. The PUMs work is part of an Alvey-funded collaborative research project, MMI/112, between the UK Medical Research Council's Applied Psychology Unit, Logica Cambridge Ltd, and STC Technology Ltd.</region>
      <section class="DoCO:Bibliography">
        <h1 class="DoCO:SectionTitle" id="81" confidence="possible" page="4" column="2">REFERENCES</h1>
        <ref-list class="DoCO:BiblioGraphicReferenceList">
          <ref rid="R1" class="deo:BibliographicReference" id="82" confidence="possible" page="4" column="2">Anderson, J. R. (1983) The Architecture of Cognition. Harvard University Press.</ref>
          <ref rid="R2" class="deo:BibliographicReference" id="83" confidence="possible" page="4" column="2">Bamard, P. J. (1987) Cognitive resources and the leaming of human-computer dialogues. In J. M. Carroll (Ed) Interfacing Thought: Cognitive Aspects of Human-Computer Interaction. Cambridge, MA: MIT Press.</ref>
          <ref rid="R3" class="deo:BibliographicReference" id="87" confidence="possible" page="5" column="1">Bennett, J. L., Lorch, D. J., Kieras, D. E. &amp; Poison, P. G. (1987) Developing a user interface technology for use in industry. In H. J. Bullinger &amp; B. Shackel (Eds) Human-Computer Interaction: INTERACT '87, 21-26. Elsevier North-Holland.</ref>
          <ref rid="R4" class="deo:BibliographicReference" id="88" confidence="possible" page="5" column="1">Card, S. K., Moran, T. P. &amp; Newell, A, (1983) The Psychology of Human Computer Interaction. Erlbaum.</ref>
          <ref rid="R5" class="deo:BibliographicReference" id="89" confidence="possible" page="5" column="1">Card, S. K. &amp; Young, R. M. (1984) Predictive models of the user: A selective review. Paper presented at NATO Advanced Research Workshop on User-Computer Interaction. Loughborough, England.</ref>
          <ref rid="R6" class="deo:BibliographicReference" id="90" confidence="possible" page="5" column="1">Chemicoff, S. (1985) Macintosh Revealed, Vol. 2: Programming with the Toolbox. Hayden Book Co.</ref>
          <ref rid="R7" class="deo:BibliographicReference" id="91" confidence="possible" page="5" column="1">Kieras, D. E. &amp; Polson, P. G. (1985) An approach to the formal analysis of user complexity. International Journal of Man-Machine Studies, 22, 365-394.</ref>
          <ref rid="R8" class="deo:BibliographicReference" id="92" confidence="possible" page="5" column="1">Laird, J. E., Newell, A. &amp; Rosenbloom, P. S. (1987) SOAR: An architecture for general intelligence. Artificial Intelligence, 33, 1-64,</ref>
          <ref rid="R9" class="deo:BibliographicReference" id="93" confidence="possible" page="5" column="1">Newell, A. (1989) Unified Theories of Cognition: The 1987 William James Lectures. Harvard University Press. (In press)</ref>
          <ref rid="R10" class="deo:BibliographicReference" id="94" confidence="possible" page="5" column="1">Payne, S. J. &amp; Green, T. R. G. (1986) Task-action grammars: A model of the mental representation of task languages. Human-Computer Interaction, 2,93-133.</ref>
          <ref rid="R11" class="deo:BibliographicReference" id="95" confidence="possible" page="5" column="1">Runciman, C. &amp; Hammond, N. V. (1986) User programs: A way to match computer systems and</ref>
          <ref class="deo:BibliographicReference" id="97" confidence="possible" page="5" column="2">human cognition. In M. D. Harrison &amp; A. F. Monk (Eds) People and Computers: Designing for Usability, 464-481. Cambridge University Press.</ref>
          <ref rid="R12" class="deo:BibliographicReference" id="98" confidence="possible" page="5" column="2">Simon, T. (1988) Analysing the scope of cognitive models in human-computer interaction: A trade- off approach. In D. M. Jones &amp; R. Winder (Eds) People and Computers IV. Cambridge University Press, 79-93.</ref>
          <ref rid="R13" class="deo:BibliographicReference" id="99" confidence="possible" page="5" column="2">Simon, T., Polk, T., Young, R. M. &amp; Card, S. K. (1988) Extemal/Intemal Soar. Talk presented at Soar-V workshop, Camegie-Mellon University, Pittsburgh PA.</ref>
          <ref rid="R14" class="deo:BibliographicReference" id="100" confidence="possible" page="5" column="2">Simon, T. &amp; Young, R. M. (1988) GOMS meets STRIPS: The integration of planning with skilled procedure execution in human-computer interaction. In D. M. Jones &amp; R. Winder (Eds) People and Computers IV. Cambridge University Press, 581-594.</ref>
          <ref rid="R15" class="deo:BibliographicReference" id="101" confidence="possible" page="5" column="2">Young, R. M. &amp; Bamard, P. J..(1987) The use of scenarios in human-computer interaction research: Turbocharging the tortoise of cumulative science. In J. M. Carroll &amp; P. P. Tanner (Eds) CHI + GI Conference Proceedings: Human Factors in Computing Systems and Graphics Interface, 291- 296. New York: ACM.</ref>
          <ref rid="R16" class="deo:BibliographicReference" id="102" confidence="possible" page="5" column="2">Young, R. M., Lewis, A. E., Simon, T. &amp; Tang, H. (1989) Multiple mutually-supporting representations for procedural knowledge. In Proceedings of AISB-89 Conference. (In press).</ref>
          <ref rid="R17" class="deo:BibliographicReference" id="103" confidence="possible" page="5" column="2">Young, R. M. &amp; Simon, T. (1987) Planning in the context of human-computer interaction. In D. Diaper &amp; R. Winder (Eds) People and Computers IlL Cambridge University Press, 363-370.</ref>
        </ref-list>
        <outsider class="DoCO:TextBox" type="page_nr" id="84" page="4" column="2">18</outsider>
        <outsider class="DoCO:TextBox" type="header" id="85" page="5" column="1">CH1'89 PROCEEDINGS</outsider>
        <outsider class="DoCO:TextBox" type="header" id="86" page="5" column="1">MAY 1989</outsider>
        <region class="DoCO:FigureBox" id="Fx96">
          <image class="DoCO:Figure" src="62cv.page_005.image_05.png" thmb="62cv.page_005.image_05-thumb.png"/>
        </region>
        <outsider class="DoCO:TextBox" type="page_nr" id="104" page="5" column="2">19</outsider>
      </section>
    </body>
  </article>
</pdfx>
