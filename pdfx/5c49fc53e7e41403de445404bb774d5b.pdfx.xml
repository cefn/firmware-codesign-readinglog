<?xml version='1.0' encoding='UTF-8'?>
<pdfx xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://pdfx.cs.man.ac.uk/static/article-schema.xsd">
  <meta>
    <job>d8e7c960ea8a7d0927185333141527e86b2bda35139adccd243543f80a49a4aa</job>
    <base_name>62qf</base_name>
    <doi>http://dx.doi.org/10.1109/vlhcc.2006.44</doi>
  </meta>
  <article>
    <front class="DoCO:FrontMatter">
      <title-group>
        <article-title class="DoCO:Title" id="1">Sketching with Conceptual Metaphors to Explain Computational Processes</article-title>
      </title-group>
      <contrib-group class="DoCO:ListOfAuthors">
        <contrib contrib-type="author">
          <name id="2">David G. Hendry</name>
        </contrib>
      </contrib-group>
      <region class="unknown" id="4">Information School University of Washington, Seattle, WA 98195 <email id="3">dhendry@u.washington.edu</email></region>
      <abstract class="DoCO:Abstract" id="5">To explore how people conceptualize a complex system, 232 university students were asked to sketch how a search engine works. While the sketches reveal a diverse range of visual and conceptual approaches, a subset of the sketches exhibit an underlying regularity for describing algorithmic processes. To explain this regularity, I propose the conceptual metaphor: A SEARCH ENGINE IS A SERIES OF TEXT TRANSFORMATIONS and describe a set of mappings from sketchable graphic markings to abstractions in the search engine domain. I believe that this metaphor can be applied to enable people to more effectively conceptualize, describe, and explore complex systems.</abstract>
    </front>
    <body class="DoCO:BodyMatter">
      <section class="deo:Introduction">
        <h1 class="DoCO:SectionTitle" id="6" page="1" column="1">1. Introduction</h1>
      </section>
      <region class="DoCO:TextChunk" id="32" page="1" column="1">Sketching with pencil and paper can promote various forms of communication with one’s self and others. Sketching can be used to externalize working memory, giving the designer a greater capacity for solving problems [ <xref ref-type="bibr" rid="R18" id="7" class="deo:Reference">18</xref>]. It can promote rapid exploration, allowing the implications of a disciplined approach to solving a problem to be concretely examined for reflection and discussion [<xref ref-type="bibr" rid="R25" id="8" class="deo:Reference">25</xref>]. Sketching can be used to capture one’s evolving understanding of a system or can be used to outline a plan for implementing an algorithm [<xref ref-type="bibr" rid="R2" id="9" class="deo:Reference">2</xref>, <xref ref-type="bibr" rid="R24" id="10" class="deo:Reference">24</xref>]. When informal or provisional in nature, sketches can enlist comments and they can support creative discussion [<xref ref-type="bibr" rid="R11" id="11" class="deo:Reference">11</xref>, <xref ref-type="bibr" rid="R12" id="12" class="deo:Reference">12</xref>, <xref ref-type="bibr" rid="R26" id="13" class="deo:Reference">26</xref>]. When relatively more ‘finished’, sketches can be used to systematically examine the ‘correctness’ of a process or structure under study. A particular style of sketch can become a genre, carrying tacit information that is held by a group [<xref ref-type="bibr" rid="R6" id="14" class="deo:Reference">6</xref>, <xref ref-type="bibr" rid="R7" id="15" class="deo:Reference">7</xref>]. Finally, sketches can be used to communicate with computational systems for improved design processes [<xref ref-type="bibr" rid="R5" id="16" class="deo:Reference">5</xref>, <xref ref-type="bibr" rid="R20" id="17" class="deo:Reference">20</xref>, <xref ref-type="bibr" rid="R23" id="18" class="deo:Reference">23</xref>]. Sketches, in short, can play many roles within design. Nevertheless, all of these examples depend, at least to some degree, on convention. Conventions for sketching and modeling can help establish and maintain the identity of a community of practice [<xref ref-type="bibr" rid="R10" id="19" class="deo:Reference">10</xref>], and it seems that design teams often adapt conventions to their particular needs and<marker type="column" number="2"/><marker type="block"/> proclivities. How do conventions emerge and become established? In balance with cultural and socio-technical factors are people’s “natural” inclinations for how to represent concepts in sketches. Certainly, conventions for sketching and modeling are not arbitrary [<xref ref-type="bibr" rid="R27" id="21" class="deo:Reference">27</xref>]. Consider, for example, this sketch:<marker type="block"/> The circles might represent documents and the rectangle might represent a folder to hold the documents. When a directed line is added, with its source touching a document and its destination lying within a second folder, we might ask: What is to happen to the document? If this is a transformation of some kind, should it happen to all documents in the source folder or to only some of them? If the answer is only some of them, then how are they identified? Once the transformation is complete, what next happens to the document? How is the transformation specified? Do the documents from the source folder remain after the transformation is completed? And so on. In this way, sketches allow us to reason in a relatively concrete fashion so that inferences can be made about a more abstract domain. In this case, the perceptual elements—dots, rectangles and a directed line—provide a conceptual metaphor [<xref ref-type="bibr" rid="R16" id="23" class="deo:Reference">16</xref>, <xref ref-type="bibr" rid="R17" id="24" class="deo:Reference">17</xref>] for the relatively more abstract domain of documents, folders, and transformation. How do people naturally use such externalizations to represent plans or outline computational processes? Rather than introduce a visual notation and study how it was learned and used, as many empirical studies have done [<xref ref-type="bibr" rid="R4" id="25" class="deo:Reference">4</xref>], this study used an open-ended task [<xref ref-type="bibr" rid="R8" id="26" class="deo:Reference">8</xref>, <xref ref-type="bibr" rid="R21" id="27" class="deo:Reference">21</xref>] where participants were prompted to “Draw a sketch that explains how a search engine, such as Google, works.” The original aim of the study was diagnostic: To access students’ understandings for search engines so that instruction for the fundamentals of Information Retrieval systems could be improved. Analysis of the data, however, showed that a significant number of sketches attempted to represent algorithmic processes, and in doing so these sketches seem to reveal interesting, and potentially useful, regularities. In this paper, I report on these regularities and give a cognitive<marker type="page" number="2"/><marker type="column" number="1"/><marker type="block"/> account of their “naturalness”. This analysis leads to a conceptual metaphor that maps graphic markings, which are easily created in sketches, to concepts in a problem domain. This metaphor, in turn, might be used by people to conceptualize computational processes and plan for their implementation.</region>
      <outsider class="DoCO:TextBox" type="footer" id="29" page="1" column="2">(VL-HCC'06)</outsider>
      <outsider class="DoCO:TextBox" type="footer" id="30" page="1" column="2">Visual Languages and 0-7695-2586-5/06</outsider>
      <region class="DoCO:FigureBox" id="Fx31">
        <image class="DoCO:Figure" src="62qf.page_001.image_01.png" thmb="62qf.page_001.image_01-thumb.png"/>
        <image class="DoCO:Figure" src="62qf.page_001.image_02.png" thmb="62qf.page_001.image_02-thumb.png"/>
      </region>
      <section class="deo:Background">
        <h1 class="DoCO:SectionTitle" id="33" page="2" column="1">2. Background</h1>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="34" page="2" column="1">2.1. Conceptual metaphor</h2>
          <region class="DoCO:TextChunk" id="44" page="2" column="1">A conceptual metaphor is a set of mappings from a relatively concrete domain to a more abstract domain [ <xref ref-type="bibr" rid="R16" id="35" class="deo:Reference">16</xref>]. Through these mappings, the more abstract domain becomes more readily understood. For example, here are three metaphors for making things: 1. “I made the database out of the document titles.” (i.e., THE OBJECT [database] COMES OUT OF THE SUBSTANCE [document titles] metaphor). 2. “I put the document titles into the database.” (i.e., THE SUBSTANCE [document titles] GOES INTO THE OBJECT [database] metaphor). 3. “The importance of the documents came out of their linking structure.” (i.e., EMERGENCE metaphor). Conceptual metaphors have been found to be a fundamental cognitive mechanism and their use is unconscious and pervasive [<xref ref-type="bibr" rid="R16" id="36" class="deo:Reference">16</xref>]. More recently, Lakoff and Núnez [<xref ref-type="bibr" rid="R17" id="37" class="deo:Reference">17</xref>] have applied this approach to analyzing the conceptual structure of mathematics, aiming to decompose the layers of conceptual metaphor that enable mathematical reasoning. For example, the metaphor NUMBERS ARE POINTS ON A LINE is central to Euclidian geometry and trigonometry. But, one can also consider NUMBERS TO BE SETS with the empty set being 0, 1 being the set containing the empty set, 2 being the set containing 0 and 1, and so on. By identifying such metaphors and the specific mappings that exist between source and target domains, they claim that mathematics becomes more comprehensible. Ambitiously, their project proposes nothing less than an empirical basis for an embodied-mind theory of mathematics. The analysis that follows relies on two concepts from this theory that are now briefly and informally introduced. The first concept is the Container schema, which consists of three distinctions: An inside, an outside, and a boundary. Conceptually, we can say, for example, “The document is in the database” or “The word is in the document”. If we assume that these two statements are true, then by the spatial relation, in, we know that, all things equal, the word is in the database. The Container schema is a place to hold things. The second concept is the Source-Path-Goal schema, which consists of a source and goal locations, a trajectory that joins the source location with its goal, and a moving entity that is located on the trajectory. With these elements<marker type="column" number="2"/><marker type="block"/> we can conceptualize progress towards a goal, along some path that begins at a source and ends at a goal. Like the word in the words towards, along, begins and ends are spatial relations that allow us to naturally infer information from the conceptual metaphor; for example, we can readily identify the places on the trajectory that have been visited and those that remain to be visited. Importantly, these “Image schemas have a special cognitive function: They are both perceptual and conceptual in nature” [17, p. 31]. Thus, for example, in the following sketch of a Container schema we immediately see that four dots are in a container and one dot is outside of the container.<marker type="block"/> Similarly, with the Source-Path-Goal schema, we can see a source and a goal for a moving object. The dotted line indicates that part of the trajectory has yet to be realized and the arrow indicates the direction of the trajectory. If a moving object is at position x then we can conclude that all points between the Source and x have been visited and the points between x and the Goal have yet to be visited.<marker type="block"/> Lakoff and Núnez [<xref ref-type="bibr" rid="R15" id="41" class="deo:Reference">15</xref>] claim that these cognitive structures are learned early in life in all cultures, and that people use them unconsciously in everyday reasoning and<marker type="block"/> when reasoning about science and technology. It is for this reason that the example given in the introduction was so easily understood: It was a conceptual metaphor that blended the Container and Source-Path-Goal schemas.</region>
          <region class="unknown" id="43" page="2" column="2">Source x Goal</region>
        </section>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="45" page="2" column="2">2.2. Visual grammar</h2>
          <region class="DoCO:TextChunk" id="46" page="2" column="2">Ware [27, p. 214] uses the term visual grammar to characterize the regularities that are found across the majority of node-link diagrams, such as the UML modeling language, Petri nets, and so on. Based on established findings in perceptual psychology, he proposes 13 graphical codes, set in italic below, and corresponding meanings. A (1) closed contour means an entity, object or node and the (2) shape and (3) color of such enclosed regions indicates a type of entity. The (4) size of an enclosed region indicates entity value. Examples:</region>
          <outsider class="DoCO:TextBox" type="footer" id="47" page="2" column="2">(VL-HCC'06)</outsider>
          <outsider class="DoCO:TextBox" type="footer" id="48" page="2" column="2">Visual Languages and 0-7695-2586-5/06</outsider>
          <region class="DoCO:FigureBox" id="Fx49">
            <image class="DoCO:Figure" src="62qf.page_002.image_03.png" thmb="62qf.page_002.image_03-thumb.png"/>
            <image class="DoCO:Figure" src="62qf.page_002.image_04.png" thmb="62qf.page_002.image_04-thumb.png"/>
          </region>
          <region class="DoCO:TextChunk" id="50" confidence="possible" page="3" column="1">By (5) partitioning lines within an enclosed region one can create within-entity structure, (6) attached shapes can indicate part-of relationships and (7) shapes enclosed by a contour indicate contained entities. Examples: A (8) linking line means a relationship between entities exists, the (9) linking-line quality indicates the type of relationship, and the (10) linking-line thickness indicates the strength of the relationship. Examples: Finally, (11) spatially ordered shapes can be used to indicate a sequence, (12) tab connectors can indicate a fit between components and (13) proximity can be used to indicate groups of components:</region>
          <region class="DoCO:TextChunk" id="52" page="3" column="1">Together, these approaches seem to show a correspondence between “deep” linguistic and perceptual structures [<xref ref-type="bibr" rid="R14" id="51" class="deo:Reference">14</xref>]. For example, the Container schema is represented by enclosing the shapes with a contour (7), and nested Container schemas can be represented by partitioning lines within an enclosed region (5). Proximity can be used to suggest containment without using a contour. Similarly, the Source-Path-Goal schema can be represented by a linking line (8). The other graphic codes can be used to enrich the Container and Source-Path-Goal schemas with additional information from the domain, thereby facilitating domain-specific reasoning. These approaches, in short, give us an analytic tool for recognizing and accounting for “naturalness” when people talk about and draw computational processes.</region>
        </section>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="53" page="3" column="1">3. Research study</h1>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="54" page="3" column="1">3.1. Aim and task</h2>
          <region class="DoCO:TextChunk" id="62" page="3" column="1">The original aim of the study was to investigate the technical knowledge that students have for how search engines work [ <xref ref-type="bibr" rid="R9" id="55" class="deo:Reference">9</xref>, <xref ref-type="bibr" rid="R13" id="56" class="deo:Reference">13</xref>]. As an instructor, I wanted to assess students’ technical literacy in this area in order to improve classroom instruction. Students were thus prompted to sketch “how a search engine works” on 8 x 11 paper sheets during regularly scheduled classes. Participation was voluntary and anonymous. These sketches were used to promote classroom discussion and were also collected for more detailed analysis. In the spring and autumn of 2003, a sample of 232 sketches from undergraduate and graduates students in Information Science was collected. The students reflect a<marker type="column" number="2"/><marker type="block"/> great diversity in ages and educational backgrounds, with some students having relatively strong backgrounds in programming and system design and others having no background at all in programming. To analyze the sketches, a normative model was created from textbook accounts of how search engines work [<xref ref-type="bibr" rid="R1" id="58" class="deo:Reference">1</xref>, <xref ref-type="bibr" rid="R19" id="59" class="deo:Reference">19</xref>]. Using this normative model (see Appendix), five raters coded all 232 sketches for the presence or absence of the 14 concepts that make up the model. In summary, the mean number of concepts per sketch was about 4.5 (SD 3.0) with a low of 0 concepts (n = 25) and a high of 13 concepts (n = 2). The four most common concepts were query (72% of sketches), results (65%), content (55%), and match (52%). The full quantitative analysis is reported elsewhere [<xref ref-type="bibr" rid="R9" id="60" class="deo:Reference">9</xref>, <xref ref-type="bibr" rid="R13" id="61" class="deo:Reference">13</xref>].</region>
        </section>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="63" page="3" column="2">3.2. Qualitative analysis</h2>
          <region class="DoCO:TextChunk" id="68" page="3" column="2">The full sample of sketches reveals a tremendous diversity of approaches for explaining how search-engines work. Some of the sketches were largely representational, with little detail. <marker type="block"/> In this sketch, the query is depicted by a horizontal input box akin to Google’s visual design (though the sketch uses the label Yahoo!). The query is sent into the world, somehow yielding Results. One might assume that the image of the world also depicts some large, diffuse matching process and the second display represents the first at a subsequent period of time. (Words excerpted from the sketches are underlined.) A second class of sketches is largely systems-oriented, where box-and-line symbols are employed to depict key entities and processes. In this sketch the entities User, Search Engine, and Database are connected with directed communication pathways that are signaled by arrows and the words Searches for, requests, and returns.<marker type="block"/> In a third class of sketches, making up approximately 20% of the sample, search engines are explained by depicting computational process though more intricate visual structures, although none of these sketches used a formal notation such as UML.</region>
          <region class="DoCO:FigureBox" id="Fx65">
            <image class="DoCO:Figure" src="62qf.page_003.image_05.png" thmb="62qf.page_003.image_05-thumb.png"/>
          </region>
          <region class="DoCO:FigureBox" id="Fx67">
            <image class="DoCO:Figure" src="62qf.page_003.image_06.png" thmb="62qf.page_003.image_06-thumb.png"/>
          </region>
          <outsider class="DoCO:TextBox" type="footer" id="69" page="3" column="2">(VL-HCC'06)</outsider>
          <outsider class="DoCO:TextBox" type="footer" id="70" page="3" column="2">Visual Languages and 0-7695-2586-5/06</outsider>
          <region class="DoCO:FigureBox" id="Fx71">
            <image class="DoCO:Figure" src="62qf.page_003.image_07.png" thmb="62qf.page_003.image_07-thumb.png"/>
            <image class="DoCO:Figure" src="62qf.page_003.image_08.png" thmb="62qf.page_003.image_08-thumb.png"/>
          </region>
          <region class="DoCO:TextChunk" id="72" confidence="possible" page="4" column="1">Consider the following sketch.</region>
          <region class="DoCO:FigureBox" id="Fx73">
            <image class="DoCO:Figure" src="62qf.page_004.image_09.png" thmb="62qf.page_004.image_09-thumb.png"/>
          </region>
          <region class="DoCO:TextChunk" id="79" page="4" column="1">Beginning on the left, the sketch shows that a user submits a Query that flows into the Index contained within the Search Engine and evidently a matching process takes place through the Index. The Results flow back out the smokestack to the user. Associated with the Index are two columns, Term and Location, with the words Dog and <ext-link ext-link-type="uri" href="http://www" id="74">http://www</ext-link>... appearing beneath these headings. The use of such specific examples is often used to explicate the meaning of a sketch. In this case the whitespace beneath Dog is important for signaling that the index contains more entries. In the middle part of the sketch web crawlers are depicted leaving the search engine empty-handed and going into the Internet, returning with little boxes, which are labeled terms. On the right, the Internet is represented as a somewhat undifferentiated cloud containing points with two labeled webpages. Interestingly, but not essential for comprehension, the Search Engine is depicted with wheels, a drive train, and smokestack. This sketch is noteworthy for employing multiple metaphors while maintaining compositional coherence. Inspecting it shows four major layers of information: 1) Conceptual metaphors for containing and connecting entities; 2) Words used to depict and clarify systemic entities (e.g., Term or Dog); 3) Labels for clarifying the meaning of the entities represented; and 4) Literal, and evidently non-essential metaphors (e.g., smoke stack, spiders), for conveying the problem domain. The last two “descriptive layers” are clearly important for comprehending the sketch but are arguably non-essential. Many of the sketches that depict computational process are far less coherent. Consider this sketch:<marker type="block"/> Here, we can recognize a tree structure where a database consists of rectangles, which, in turn, consist of rectangles.<marker type="column" number="2"/><marker type="block"/> The four vertical dots, ‘....’, and the use of a diagonal line appear to be used to indicate more of the same. This figure is imprecise and it raises more questions than it answers. Even so, it enables metaphoric reasoning. For example, if those rectangles are smaller parts [of data], then we can ask “How small are they?”, “How did they get broken up?”, “Is additional information associated with the parts?” “How are the parts ordered vertically?” Thus, even an ambiguous sketch purporting to explain how a search engine works can initiate a questioning process by mapping from the source domain (the sketch’s elements) to the target domain (search engines). Next, we isolate and discuss the mappings between graphic markings and concepts in the problem domain that can be discerned from the sketches.</region>
          <region class="unknown" id="76" page="4" column="1">Data is sub-divided into smaller parts until the data can be easily search through [sic]. Much like a sorting algorithm</region>
          <region class="DoCO:FigureBox" id="Fx77">
            <image class="DoCO:Figure" src="62qf.page_004.image_14.png" thmb="62qf.page_004.image_14-thumb.png"/>
          </region>
        </section>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="80" page="4" column="2">3.3. Example conceptual metaphors</h2>
          <region class="DoCO:TextChunk" id="100" page="4" column="2">3.3.1. Documents are points. The sketches often depict documents as single points or various geometric shapes; often, many instances are shown. Documents are often placed in a container (left) but can also be related by linking them together (right). <marker type="block"/> Captions and labels are often used to help interpretation. The caption on the left reads “All the websites in the world with keywords identified in HTML header.” On the left, note that the label crawling script is used to clearly distinguish one visual element (a box) from the webpages (linked circles), and by virtue of the linked webpages we can infer the crawling is important here.<marker type="block"/> 3.3.2. Containers. Organic shapes are often used to represent the internet. On the other hand, rectangles or other geometric shapes are typically used to contain computed or well-specified data.<marker type="page" number="5"/><marker type="column" number="1"/><marker type="block"/> 3.2.3. Documents are text fragments. Sometimes documents are depicted in greater detail. Often, short wavy lines are used to represent text fragments that are placed within a container.<marker type="block"/> 3.2.4. Transformations. Directed lines are used to depict a transformation of data from one form into another.<marker type="block"/> Interestingly, the meanings of the lines can depend on their sources and destinations. On the right, the set of four directed lines seems to indicate the robot will visit the web and the vertical line seems to indicate the robot will send data onward. In the next example, documents, depicted with wavy lines, are transformed into word lists, depicted with shorter lines. The word lists appear to be merged at the Google database, as signaled by the converging lines.<marker type="block"/> Sometimes lines loop across objects, indicating that a process must go out and come back as with this sketch.<marker type="block"/> 3.2.5. Grouping and abstraction. Sketches often show hierarchical structures for grouping and abstraction. In the following example, notice how the large circle encloses two smaller circles, one labeled Parsing and one labeled Indexing. As well, this diagram does the same with a<marker type="column" number="2"/><marker type="block"/> rectangle, labeled Indexes, which encloses four smaller rectangles.<marker type="block"/> 3.2.6. Iteration and selection. Ellipses (‘...’) are sometimes used to depict repeated operations but more often several examples are shown, leaving it to the reader to infer that additional instances might be involved. Rules for selecting items or conditions for stopping, if given at all, seem to be usually stated in word annotations. The next sketch shows flow, looping, and selection. Directed links and the careful use of whitespace are used to represent flow. A group of three documents wrapped by a curved line seems to indicate some kind of looping process (bottom, towards left). Finally, consider the document represented by a dashed outline (bottom right). It is located between to other documents and it is the source of a line to a crossed out document. This assembly, in sum, suggests that some kind of decision process is eliminating documents.</region>
          <region class="DoCO:FigureBox" id="Fx82">
            <image class="DoCO:Figure" src="62qf.page_004.image_10.png" thmb="62qf.page_004.image_10-thumb.png"/>
            <image class="DoCO:Figure" src="62qf.page_004.image_11.png" thmb="62qf.page_004.image_11-thumb.png"/>
          </region>
          <region class="DoCO:FigureBox" id="Fx85">
            <image class="DoCO:Figure" src="62qf.page_004.image_12.png" thmb="62qf.page_004.image_12-thumb.png"/>
            <image class="DoCO:Figure" src="62qf.page_004.image_13.png" thmb="62qf.page_004.image_13-thumb.png"/>
          </region>
          <outsider class="DoCO:TextBox" type="footer" id="86" page="4" column="2">(VL-HCC'06)</outsider>
          <outsider class="DoCO:TextBox" type="footer" id="87" page="4" column="2">Visual Languages and 0-7695-2586-5/06</outsider>
          <region class="DoCO:FigureBox" id="Fx88">
            <image class="DoCO:Figure" src="62qf.page_004.image_15.png" thmb="62qf.page_004.image_15-thumb.png"/>
            <image class="DoCO:Figure" src="62qf.page_004.image_16.png" thmb="62qf.page_004.image_16-thumb.png"/>
          </region>
          <region class="DoCO:FigureBox" id="Fx90">
            <image class="DoCO:Figure" src="62qf.page_005.image_18.png" thmb="62qf.page_005.image_18-thumb.png"/>
          </region>
          <region class="DoCO:FigureBox" id="Fx92">
            <image class="DoCO:Figure" src="62qf.page_005.image_19.png" thmb="62qf.page_005.image_19-thumb.png"/>
          </region>
          <region class="DoCO:FigureBox" id="Fx94">
            <image class="DoCO:Figure" src="62qf.page_005.image_21.png" thmb="62qf.page_005.image_21-thumb.png"/>
          </region>
          <region class="DoCO:FigureBox" id="Fx96">
            <image class="DoCO:Figure" src="62qf.page_005.image_22.png" thmb="62qf.page_005.image_22-thumb.png"/>
          </region>
          <region class="DoCO:FigureBox" id="Fx99">
            <image class="DoCO:Figure" src="62qf.page_005.image_17.png" thmb="62qf.page_005.image_17-thumb.png"/>
          </region>
          <region class="DoCO:FigureBox" id="Fx101">
            <image class="DoCO:Figure" src="62qf.page_005.image_20.png" thmb="62qf.page_005.image_20-thumb.png"/>
          </region>
        </section>
      </section>
      <section class="deo:Discussion">
        <h1 class="DoCO:SectionTitle" id="102" page="5" column="2">4. Discussion</h1>
        <region class="DoCO:TextChunk" id="128" page="5" column="2">Approximately 20% of the 232 sketches depict the algorithmic operation of a search engine. As illustrated by the above excerpts, these sketches reveal a diverse range of conceptual and visual approaches. In fact, perhaps the most notable feature of the sketches is just how different they are. This can be seen especially in the images of robots, webs, documents, and so on but also in the overall composition of the sketches, how annotations are used to <marker type="page" number="6"/><marker type="column" number="1"/><marker type="block"/> denote or clarify elements of the sketches, and the degree of completeness and correctness of the sketches. Nevertheless, close inspection of the sketches seems to suggest an underlying regularity where search engines are described by showing how units of text are successively transformed into smaller fragments. This transformation process can be summed up by the conceptual metaphor: A SEARCH ENGINE IS A SERIES OF TEXT TRANSFORMATIONS . Under this metaphor, people explain the operation of a search engine by describing: 1) How web pages are broken up into words that, in turn, are stored in some fashion, and 2) How queries are broken up into words and matched against the previously stored word data, yielding identifiers to the original pages. To do this, the sketches, at varying degrees of completeness, show a sequence of transformative phases. Seeking to capture the regularity across the sketches, <xref ref-type="table" rid="T1" id="107" class="deo:Reference">Table 1</xref> proposes a set of mappings from source to target domains. These mappings, from a sketch containing graphic and textual markings to the Search Engine domain, seek to establish a coherent structure for the metaphor, A SEARCH ENGINE IS A SERIES OF TEXT TRANSFORMATIONS . Next, some brief observations are made about this conceptual model.<marker type="column" number="2"/><marker type="block"/> 4.1. Properties of the notation. Quite obviously, this data flow notation is informal and imprecise—it is not executable. Yet, it can be used to conceptualize the design of a system by capturing the distinctions among entities and the rules for transforming one kind of entity into another. It can be used for fine- or course-grain analysis and by nesting containers the notation allows various levels of abstraction to be represented. While it allows people to depict text units, flows, and transformations, the rules for selecting or qualifying items must be described in annotations—a common practice in the sample of sketches analyzed and also seen in other studies of “natural” programming [<xref ref-type="bibr" rid="R8" id="111" class="deo:Reference">8</xref>, <xref ref-type="bibr" rid="R21" id="112" class="deo:Reference">21</xref>].<marker type="block"/> 4.2. Using the conceptual metaphor. When students are given this metaphor and asked to draw a sketch of how a search engine works, it clearly influences their representational work. Consider these three sketches, which were not part of the original sample.<marker type="block"/> Perhaps not surprisingly, the sketches are quite consistent in “surface” style and are also consistent with the underlying regularity of the original set of sketches. (These three sketches were drawn by students after a three week instructional module in Information Retrieval.) While the metaphor may promote consistency in representation, it is not obvious that it actually helps students to reason about the operation of search engines or, more generally, algorithmic processes. The sketches have yet not been used as intermediate representations in design or programming tasks. To learn about the efficacy of the conceptual metaphor, this is a next logical step. One approach is to replace the ground, SEARCH ENGINE , with a more narrow ground in the metaphor A SEARCH ENGINE IS A SERIES OF TEXT TRANSFORMATIONS . Then,<marker type="page" number="7"/><marker type="column" number="1"/><marker type="block"/> prompt learners to sketch solutions. The “natural” elements of students’ problems could be further investigated with established techniques [<xref ref-type="bibr" rid="R21" id="120" class="deo:Reference">21</xref>]. Finally, the conceptual metaphor can be used as a design tool for outlining a plan for implementing a computational process in a formal data flow language [<xref ref-type="bibr" rid="R22" id="121" class="deo:Reference">22</xref>]. When it is used in this fashion, a key question is whether and how the association between the informal and formal representations is maintained. While this has been recognized as an important issue [<xref ref-type="bibr" rid="R20" id="122" class="deo:Reference">20</xref>, <xref ref-type="bibr" rid="R23" id="123" class="deo:Reference">23</xref>], the benefits and costs of maintaining correspondences between a sketch and a computational process or formal model are not well understood.<marker type="block"/> 4.3. Visual language design. How best to use metaphors— particularly explanatory or literal metaphors—in the design of visual languages is unclear [<xref ref-type="bibr" rid="R3" id="125" class="deo:Reference">3</xref>]. Nevertheless, it seems that metaphors can be crucial for overcoming barriers in end-user programming [<xref ref-type="bibr" rid="R15" id="126" class="deo:Reference">15</xref>]. This work shows that students do employ a wide range of literal metaphors in their explanations (spiders, robots, bookshelves, magnifying glasses, etc.) when given an open-ended task. While using metaphors in explanations is quite different from using metaphors in programming tasks, their use in these sketches does suggest that they are important for learners. Nevertheless, the regularity in the sketches is found beneath these literal metaphors—it lies with the use of Container and Source-Path-Goal schemas and the graphic markings that convey them. Could it be that explanatory metaphors are effective to the extent that they represent these more fundamental cognitive structures in an overall coherent model? If mathematical structure is an analog for programming, then the work by Lakoff and Núnez [<xref ref-type="bibr" rid="R17" id="127" class="deo:Reference">17</xref>] supports this possibility and gives a theoretical basis for considering “naturalness”.</region>
        <outsider class="DoCO:TextBox" type="footer" id="104" page="5" column="2">(VL-HCC'06)</outsider>
        <outsider class="DoCO:TextBox" type="footer" id="105" page="5" column="2">Visual Languages and 0-7695-2586-5/06</outsider>
        <region class="DoCO:FigureBox" id="Fx106">
          <image class="DoCO:Figure" src="62qf.page_005.image_23.png" thmb="62qf.page_005.image_23-thumb.png"/>
          <image class="DoCO:Figure" src="62qf.page_005.image_24.png" thmb="62qf.page_005.image_24-thumb.png"/>
        </region>
        <region class="DoCO:TableBox" id="T1">
          <caption class="deo:Caption" id="109" page="6" column="1">Table 1. Conceptual metaphor. Source Domain Target Domain Sketching Search Engine</caption>
        </region>
        <region class="unknown" id="110" page="6" column="1">Point or shape Document Short, wavy line Text fragment Large, undifferentiated Cloud container Whole-part Linked documents assembly Rectangle, circle, Computed or well- triangle, etc. specified container Directed line Transform text fragment Lines diverging Process the contained from container items Line attached to Process the contained container items Accumulate text Converging lines fragments or documents</region>
        <region class="DoCO:FigureBox" id="Fx115">
          <image class="DoCO:Figure" src="62qf.page_006.image_25.png" thmb="62qf.page_006.image_25-thumb.png"/>
          <image class="DoCO:Figure" src="62qf.page_006.image_26.png" thmb="62qf.page_006.image_26-thumb.png"/>
          <image class="DoCO:Figure" src="62qf.page_006.image_27.png" thmb="62qf.page_006.image_27-thumb.png"/>
        </region>
        <outsider class="DoCO:TextBox" type="footer" id="117" page="6" column="2">(VL-HCC'06)</outsider>
        <outsider class="DoCO:TextBox" type="footer" id="118" page="6" column="2">Visual Languages and 0-7695-2586-5/06</outsider>
        <region class="DoCO:FigureBox" id="Fx119">
          <image class="DoCO:Figure" src="62qf.page_006.image_28.png" thmb="62qf.page_006.image_28-thumb.png"/>
          <image class="DoCO:Figure" src="62qf.page_006.image_29.png" thmb="62qf.page_006.image_29-thumb.png"/>
        </region>
      </section>
      <section class="deo:Conclusion">
        <h1 class="DoCO:SectionTitle" id="129" page="7" column="1">5. Conclusion</h1>
        <region class="DoCO:TextChunk" id="131" page="7" column="1">This exploratory study examined a sample of sketches drawn by undergraduate and graduate students in information science. Despite that these students do not come from a common community of practice with strong traditions in sketching, inspection of the sketches revealed an underlying regularity. The conceptual metaphor, A SEARCH ENGINE IS A SERIES OF TEXT TRANSFORMATIONS , was proposed to capture this regularity. This metaphor maps graphic markings that are easily sketched into concepts in the problem domain. The major contribution of this exploratory study is that the combination of visual grammar and conceptual metaphor may provide a theoretical basis for considering the “naturalness” of a notation. Certainly, the underlying regularity seen in the sample of sketches can, at least to some meaningful degree, be understood through the combination of these two modes of analysis. From this, I propose three specific questions: <marker type="column" number="2"/><marker type="block"/> 1) How might the conceptual metaphor, A SEARCH ENGINE IS A SERIES OF TEXT TRANSFORMATIONS , be used to teach people about search engines? 2) How could this informal notation be augmented with computational properties so that it could be ‘run’? 3) How can conceptual metaphor, in general, be used to develop mappings between problem domains and programming notations? More generally, this work suggests that there is much to learn about how sketching can be used to conceptualize the design of information systems. Studying how communities of designers adopt, develop, and appropriate notations and styles of sketching to represent computational process may provide key insights for supporting design and programming processes through notations. In other fields, such as architecture, sketching is an essential competency— it should be so in information system design too.</region>
      </section>
      <section class="deo:Acknowledgements">
        <h1 class="DoCO:SectionTitle" id="132" page="7" column="2">6. Acknowledgements</h1>
        <region class="DoCO:TextChunk" id="133" page="7" column="2">I wish to a thank Efthimis N. Efthimiadis for his collaboration in conceptualizing this work, and Peyina Lin, Kristene Unsworth, and Hui P. Yang for assistance with analyzing the sketches. Karen Fullerton provided valuable comments on an early draft of this paper.</region>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="134" page="7" column="2">7. Appendix – Normative model of search</h1>
        <region class="DoCO:TextChunk" id="137" page="7" column="2">In this normative model, based on textbook accounts of search engines [<xref ref-type="bibr" rid="R1" id="135" class="deo:Reference">1</xref>, <xref ref-type="bibr" rid="R19" id="136" class="deo:Reference">19</xref>], a search-engine is divided into three phases, indexing, searching, and matching, with central concepts within each.</region>
        <region class="DoCO:TextChunk" id="138" confidence="possible" page="7" column="2">A. INDEXING: processing documents so they can be retrieved later. 1. Content: The search engine processes web pages, web sites, and documents 2. Spidering/Crawling: The search engine fetches web pages 3. Parsing: Words from web pages are extracted and analyzed 4. Inverted-index-creation: An index that maps words to web pages is created 5. Link-analysis: The search engine analyzes the linking structure among web pages 6. Storage: Web pages and indexes are stored at the search engine B. SEARCHING: Users formulate a query and inspect results 7. User: A person interacts with the search engine 8. User-need: A ‘need’ triggers a user to perform a search 9. Query: An interface is used to submit a query to a search engine</region>
        <outsider class="DoCO:TextBox" type="footer" id="139" page="7" column="2">(VL-HCC'06)</outsider>
        <outsider class="DoCO:TextBox" type="footer" id="140" page="7" column="2">Visual Languages and 0-7695-2586-5/06</outsider>
        <region class="DoCO:FigureBox" id="Fx141">
          <image class="DoCO:Figure" src="62qf.page_007.image_30.png" thmb="62qf.page_007.image_30-thumb.png"/>
          <image class="DoCO:Figure" src="62qf.page_007.image_31.png" thmb="62qf.page_007.image_31-thumb.png"/>
        </region>
        <region class="DoCO:TextChunk" id="142" confidence="possible" page="8" column="1">10. Results: The output from a search-engine is a list of web pages C. MATCHING: Queries are matched against web pages 11. Query processing: Keywords and operators are extracted from the query 12. Matching: Words from the query are matched against words in web pages 13. Accessing-inverted-file: Keywords are used to access the inverted file 14. Ranking: A ranked ordering of web pages is created</region>
      </section>
      <section class="DoCO:Bibliography">
        <h1 class="DoCO:SectionTitle" id="143" page="8" column="1">8. References</h1>
        <ref-list class="DoCO:BiblioGraphicReferenceList">
          <ref rid="R1" class="deo:BibliographicReference" id="144" page="8" column="1">[1] Belew, R.K., Finding out about--A cognitive perspective on search engine technology and the www. Cambridge University Press, 2000.</ref>
          <ref rid="R2" class="deo:BibliographicReference" id="145" page="8" column="1">[2] Bellamy, R. K. E, “What Does Pseudo-Code Do? A Psychological Analysis of the Use of Pseudo-Code by Experienced Programmers”, Human-Computer Interaction, 9 (2), 1994, pp. 225-246.</ref>
          <ref rid="R3" class="deo:BibliographicReference" id="146" page="8" column="1">[3] Blackwell, A. F. and T. R. G. Green “Does metaphor increase visual language usability”, Proceedings 1999 IEEE Symposium on Visual Languages, 1999, pp. 246-253.</ref>
          <ref rid="R4" class="deo:BibliographicReference" id="147" page="8" column="1">[4] Blackwell, A. F., K. N. Whitley, J. Good and M. Petre, “Cognitive factors in programming with diagrams”, Artificial Intelligence Review, 15, 2001, pp. 95-114.</ref>
          <ref rid="R5" class="deo:BibliographicReference" id="148" page="8" column="1">[5] Chen, Q., J. Grundy, and J. Hosking, “An E-whiteboard application to support early design-stage sketching of UML diagrams”, Proceedings of the 2003 IEEE Conference on Human- Centric Computing, Auckland, New Zealand, IEEE, 2003, 219- 226.</ref>
          <ref rid="R6" class="deo:BibliographicReference" id="149" page="8" column="1">[6] Cook, S. D. N. and J. S. Brown, “Bridging epistemologies: The generative dance between organizational knowledge and organizational knowing”, Organization Science, 10 (4), 1999, pp. 381-400.</ref>
          <ref rid="R7" class="deo:BibliographicReference" id="150" page="8" column="1">[7] Do, E. Y. and M. D. Gross, “Thinking with diagrams in architectural design”, Artificial Intelligence Review, 15, 2001, pp.</ref>
          <ref class="deo:BibliographicReference" id="151" confidence="possible" page="8" column="1">135-149.</ref>
          <ref rid="R8" class="deo:BibliographicReference" id="152" page="8" column="1">[8] Douglas, S., C. Hundhausen, and D. McKeown, “Toward empirically-based software visualization languages”, Proceedings of the 1995 IEEE Symposium on Visual Programming Languages, 1995, pp. 342 – 349.</ref>
          <ref rid="R9" class="deo:BibliographicReference" id="153" page="8" column="1">[9] Efthimiadis, E. N. and D. G. Hendry, “Search engines and how students think they work”, Proceedings of the 28th annual international ACM SIGIR conference on Research and development in information retrieval, 2005, pp. 595-596.</ref>
          <ref rid="R10" class="deo:BibliographicReference" id="155" page="8" column="1">[10] Garrett, J. J., “A visual vocabulary for describing information architecture and interaction design”, Retrieved 03.01.06 from <ext-link ext-link-type="uri" href="http://www.jjg.net/ia/visvocab/" id="154">http://www.jjg.net/ia/visvocab/</ext-link></ref>
          <ref rid="R11" class="deo:BibliographicReference" id="156" page="8" column="1">[11] Gross, M. D., “The electronic napkin: Working with diagrams”, Design Studies, 17(1), 2001, pp. 53-69.</ref>
          <ref rid="R12" class="deo:BibliographicReference" id="157" page="8" column="2">[12] Henderson, K., “Flexible sketches and inflexible data bases: Visual communication, conscription devices, and boundary objects in design engineering”, Science, Technology, &amp; Human Values, Science, Technology, &amp; Human Values, 16(2), 1991, pp. 448-473.</ref>
          <ref rid="R13" class="deo:BibliographicReference" id="158" page="8" column="2">[13] Hendry, D. G. and E. N. Efthimiadis (in press). Conceptual models for search engines.</ref>
          <ref rid="R14" class="deo:BibliographicReference" id="159" page="8" column="2">[14] Irani, P. and C. Ware, “The effect of a perceptual syntax on the learnability of novel concepts”, Proceedings of the Eighth International Conference on Information Visualization, IEEE, London, UK, 2004, pp. 308-314</ref>
          <ref rid="R15" class="deo:BibliographicReference" id="160" page="8" column="2">[15] Ko, A. J., B. A. Myers and H. H. Aung, “Six learning barriers in end-user programming systems”, Proceedings of the 2004 IEEE</ref>
          <ref class="deo:BibliographicReference" id="161" confidence="possible" page="8" column="2">Symposium on Visual Languages and Human Centric Computing, IEEE, 2004.</ref>
          <ref rid="R16" class="deo:BibliographicReference" id="162" page="8" column="2">[16] Lakoff, G. and Johnson, M. Metaphors We Live By. The University of Chicago Press, Chicago, 1980.</ref>
          <ref rid="R17" class="deo:BibliographicReference" id="163" page="8" column="2">[17] Lakoff, G. and Núnez, R. E. Where Mathematics Comes From: How the Embodied Mind Brings Mathematics into Being. Basic Books, New York, 2000.</ref>
          <ref rid="R18" class="deo:BibliographicReference" id="164" page="8" column="2">[18] Larkin, J. &amp; Simon, H., “Why a diagram is (sometimes) worth ten thousand words”, Cognitive Science, 11, 1987, pp. 65-</ref>
          <ref class="deo:BibliographicReference" id="165" confidence="possible" page="8" column="2">99.</ref>
          <ref rid="R19" class="deo:BibliographicReference" id="167" page="8" column="2">[19] Liddy, E., “How a Search Engine Works”, Searcher, 9(5). Retrieved 03.01.06 from <ext-link ext-link-type="uri" href="http://www.infotoday.com/searcher" id="166">http://www.infotoday.com/searcher</ext-link> /may01/liddy.htm</ref>
          <ref rid="R20" class="deo:BibliographicReference" id="168" page="8" column="2">[20] Newman, M. W, J. Lin, J. I. Hong, J. A. Landay, “DENIM: An informal web site design tool inspired by observations of practice”, Human-Computer Interaction, 18, 2003, pp. 259-324.</ref>
          <ref rid="R21" class="deo:BibliographicReference" id="169" page="8" column="2">[21] Pane, J. F., C. A. Ratanamahatana and B. A. Myers, “Studying the language and structure in non-programmers’ solutions to programming problems”, International Journal of. Human-Computer Studies, 54, 2001, pp. 237-264.</ref>
          <ref rid="R22" class="deo:BibliographicReference" id="170" page="8" column="2">[22] Pautasso, C. and G. Alonso, “Visual composition of web services”, Proceedings of the 2003 IEEE Conference on Human- Centric Computing, Auckland, New Zealand, IEEE, 2003, pp. 92 - 99.</ref>
          <ref rid="R23" class="deo:BibliographicReference" id="171" page="8" column="2">[23] Piller, B. and M. Apperley, “Computer-aided sketching to capture preliminary design”, Third Australasian User Interfaces Conference, Australian Computer Society, Inc., 2002, pp. 9-12.</ref>
          <ref rid="R24" class="deo:BibliographicReference" id="172" page="8" column="2">[24] Petre, M. and R. Winder, “Issues governing the suitability of programming languages for programming tasks”, People and Computers IV, Cambridge University Press, 1988, pp. 199-214.</ref>
          <ref rid="R25" class="deo:BibliographicReference" id="173" page="8" column="2">[25] Schön, D. The Reflective Practitioner: How Professionals Think in Action. Basic Books, New York, 1983.</ref>
          <ref rid="R26" class="deo:BibliographicReference" id="174" page="8" column="2">[26] Suchman, L. A., “Representing practice in cognitive science”, Human Studies, 11, 1988, pp. 305-325.</ref>
          <ref rid="R27" class="deo:BibliographicReference" id="175" page="8" column="2">[27] Ware, C., Information Visualization: Perception for Design. Morgan Kaufmann, New York, 2 nd Edition, 2004.</ref>
        </ref-list>
        <outsider class="DoCO:TextBox" type="footer" id="176" page="8" column="2">(VL-HCC'06)</outsider>
        <outsider class="DoCO:TextBox" type="footer" id="177" page="8" column="2">Visual Languages and 0-7695-2586-5/06</outsider>
        <region class="DoCO:FigureBox" id="Fx178">
          <image class="DoCO:Figure" src="62qf.page_008.image_32.png" thmb="62qf.page_008.image_32-thumb.png"/>
          <image class="DoCO:Figure" src="62qf.page_008.image_33.png" thmb="62qf.page_008.image_33-thumb.png"/>
        </region>
      </section>
    </body>
  </article>
</pdfx>
