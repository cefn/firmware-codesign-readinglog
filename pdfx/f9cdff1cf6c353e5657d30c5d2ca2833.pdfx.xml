<?xml version='1.0' encoding='UTF-8'?>
<pdfx xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://pdfx.cs.man.ac.uk/static/article-schema.xsd">
  <meta>
    <job>1f0a0e86716e79ca31cd5ef3aea8b31d96d3014c6b451e8be1ac89bf9c94e8d1</job>
    <base_name>62ni</base_name>
    <doi confidence="possible">http://dx.doi.org/10.1037/ppm0000060</doi>
    <warning>Original PDF was found to be an image-based/possible OCR document. Output quality may be degraded.</warning>
  </meta>
  <article>
    <front class="DoCO:FrontMatter">
      <outsider class="DoCO:TextBox" type="outsider" id="1">MANAGING THE DEVELOPMENT OF LARGE SOFTWARE SYSTEMS</outsider>
      <contrib-group class="DoCO:ListOfAuthors">
        <contrib contrib-type="author">
          <name id="2">Dr. Winston W. Rovce</name>
        </contrib>
      </contrib-group>
    </front>
    <body class="DoCO:BodyMatter">
      <section class="deo:Introduction">
        <h1 class="DoCO:SectionTitle" id="3" page="1" column="1">INTRODUCTION</h1>
        <region class="DoCO:TextChunk" id="4" confidence="possible" page="1" column="1">l am going to describe my pe,-.~onal views about managing large software developments. I have had various assignments during the past nit,.: years, mostly concerned with the development of software packages for spacecraft mission planning, commanding and post-flight analysis. In these assignments I have experienced different degrees of successwith respect to arriving at an operational state, on-time, and within costs. I have become prejudiced by my experiences and I am going to relate some of these prejudices in this presentation.</region>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="5" page="1" column="1">COMPUTER PROGRAM DEVELOPMENT FUNCTIONS</h1>
      </section>
      <region class="DoCO:TextChunk" id="7" page="1" column="1">There are two essential steps common to all computer program developments, regardless of size or complexity. There is first an analysis step, followed second by a coding step as depicted in <xref ref-type="fig" rid="F1" id="6" class="deo:Reference">Figure 1</xref>. This sort of very simple implementation concept is in fact all that is required if the effort is sufficiently small and if the final product is to be operated by those who built it - as is typically done with computer programs for internal use. It is also the kind of development effort for which most customers are happy to pay, since both steps involve genuinely creative work which directly contributes to the usefulness of the final product. An implementation plan to manufacture 13rger software systems, and keyed only to these steps, however, is doomed • tofailure. Many additional development steps are required, none contribute as directly to the final product as analysis and coding, and all drive up the development costs. Customer personnel typically would rather not pay for them, and development personnel would rather not implement them. The prime function of management is to sell these concepts to both groups and then enforce compliance on the part of development personnel.</region>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="8" page="1" column="1">ANALYSIS</h1>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="9" page="1" column="1">CODING</h1>
      </section>
      <region class="DoCO:FigureBox" id="F1">
        <caption class="deo:Caption" id="10" page="1" column="1">Figure 1.</caption>
      </region>
      <region class="DoCO:TextChunk" id="11" confidence="possible" page="1" column="1">Implementation steps to deliver a small computer program for internal operations.</region>
      <region class="DoCO:TextChunk" id="14" page="1" column="1">A more grandiose approach to software development is illustrated in <xref ref-type="fig" rid="F2" id="12" class="deo:Reference">Figure 2</xref>. The analysis and coding steps are still in the picture, but they are preceded by two levels of requirements analysis, are separated by a program design step, and followed by a testing step. These additions are treated separately from analysis and coding because they are distinctly different in the way they are executed. They must be planned and staffed differently for best utilization of program resources. <xref ref-type="fig" rid="F3" id="13" class="deo:Reference">Figure 3</xref> portrays the iterative relationship between successive development phases for this scheme. The ordering of steps is based on the following concept: that as each step progresses and the design is further detailed, there is an iteration with the preceding and succeeding steps but rarely with the more remote steps in the sequence. The virtue of all of this is that as the design proceeds the change process is scoped down to manageable limits. At any point in the design process after the requirements analysis is completed there exists a firm and c~seup~ moving baseline to whi(:h to ~ t u r n in the event of unforeseen design difficulties. What we have is an effective fallback position that tends to maximize the extent of early work that is salvageable and preserved.</region>
      <outsider class="DoCO:TextBox" type="footer" id="15" page="1" column="1">.328</outsider>
      <outsider class="DoCO:TextBox" type="footer" id="16" page="1" column="1">Reprinted from Proceedings, IEEE WESCON, August 1970, pages 1-9. Co_pyright © 1_9_70by The Institute of Electrical and Electronics Et)gineers,, Inc. Originally published by TRW.</outsider>
      <outsider class="DoCO:TextBox" type="header" id="17" page="2" column="1">I SYSTE M</outsider>
      <region class="unknown" id="18" page="2" column="1">I ANALYSIS</region>
      <region class="unknown" id="19" page="2" column="1">PROGRAM DESIGN I coo,.o</region>
      <region class="unknown" id="20" page="2" column="1">TESTING</region>
      <region class="unknown" id="21" page="2" column="1">I OPERATIONS</region>
      <region class="DoCO:FigureBox" id="F2">
        <caption class="deo:Caption" id="22" page="2" column="1">Figure 2.</caption>
      </region>
      <region class="DoCO:TextChunk" id="23" confidence="possible" page="2" column="1">Implementation steps to develop a large computer program for delivery to a customer.</region>
      <region class="DoCO:TextChunk" id="25" confidence="possible" page="2" column="1">I believe in this concept, but the implementation described above is risky and invites failure. The problem is illustrated in <xref ref-type="fig" rid="F4" id="24" class="deo:Reference">Figure 4</xref>. The testing phase which occurs at the end of the development cycle is the first event for which timing, storage, input/output transfers, etc., are experienced as distinguished from analyzed. These phenomena are not precisely analyzable. They are not the solutions to the standard partial differential equations of mathematical physics for instance. Yet if these phenomena fail to satisfy the various external constraints, then invariably a major redesign is required. A simple octal patch or redo of some isolated code will not fix these kinds of difficulties. The required design changes are likely to be so disruptive that the software requirements upon which the design is based and which provides the rationale for everything are violated. Either the requirements must be modified, or a substantial change in the design is required. In effect the development process has returned to the origin and one can expect up to a lO0-percent overrun in schedule and/or costs. One might note that there has been a skipping-over of the analysis and code phases. One cannot, of course, produce software without these steps, but generally these phases are managed with relative ease and have little impact on requirements, design, and testing. In my experience there are whole departments consumed with the analysis of orbit mechanics, spacecraft attitude determination, mathematical optimization of payload activity and so forth, but when these departments have completed their difficult and complex work, the resultant program steps involvea few lines of serial arithmetic code. If in the execution of their difficult and complex work the analysts have made a mistake, the correction is invariably implemented by a minor change in the code with no disruptive feedback into the other development bases. However, I believe the illustrated approach to be fundamentally sound. The remainder of this discussion presents five additional features that must be added to this basic approach to eliminate most of the development risks.</region>
      <outsider class="DoCO:TextBox" type="page_nr" id="26" page="2" column="1">329</outsider>
      <region class="DoCO:FigureBox" id="Fx27">
        <image class="DoCO:Figure" src="62ni.page_002.image_02.png" thmb="62ni.page_002.image_02-thumb.png"/>
      </region>
      <outsider class="DoCO:TextBox" type="header" id="28" page="3" column="1">I SYSTEM !</outsider>
      <region class="unknown" id="29" page="3" column="1">REQUIREMENTSIBI~</region>
      <region class="unknown" id="30" page="3" column="1">~"'i so,w.,~ I</region>
      <region class="DoCO:TextChunk" id="31" confidence="possible" page="3" column="1">ANALYSIS</region>
      <region class="unknown" id="32" page="3" column="1">~1111~ I pR~OGRAM</region>
      <region class="DoCO:TextChunk" id="33" confidence="possible" page="3" column="1">~lll I CODING Ii</region>
      <region class="DoCO:TextChunk" id="34" confidence="possible" page="3" column="1">TESTING</region>
      <region class="DoCO:TextChunk" id="35" confidence="possible" page="3" column="1">OPERATIONS</region>
      <region class="DoCO:TextChunk" id="37" confidence="possible" page="3" column="1"> <xref ref-type="fig" rid="F3" id="36" class="deo:Reference">Figure 3</xref>. Hopefully,the ~terat=veinteract=onbetweenthe variousphasesis confined to successivesteps.</region>
      <region class="DoCO:TextChunk" id="38" confidence="possible" page="3" column="1">I SYSTEM "1</region>
      <region class="unknown" id="39" page="3" column="1">.~oo,.~-,..Sl.,~ I so,w..~ !.</region>
      <region class="unknown" id="40" page="3" column="1">I ANALYSIS</region>
      <region class="DoCO:TextChunk" id="41" confidence="possible" page="3" column="1">TESTING I</region>
      <region class="unknown" id="42" page="3" column="1">PROGRAM DESIGN I coo,.G I,~ !</region>
      <outsider class="DoCO:TextBox" type="sidenote" id="43" page="3" column="1">.ATO.S!</outsider>
      <region class="unknown" id="44" page="3" column="1">I O</region>
      <region class="DoCO:TextChunk" id="45" confidence="possible" page="3" column="1">Figure4. Unfortunately,for the processillustrated,the designiterationsare neverconfined to the successivesteps.</region>
      <outsider class="DoCO:TextBox" type="page_nr" id="46" page="3" column="1">330</outsider>
      <region class="DoCO:FigureBox" id="Fx47">
        <image class="DoCO:Figure" src="62ni.page_003.image_03.png" thmb="62ni.page_003.image_03-thumb.png"/>
      </region>
      <outsider class="DoCO:TextBox" type="header" id="48" page="4" column="1">STEP 1: PROGRAM DESIGN COMES FIRST</outsider>
      <region class="DoCO:TextChunk" id="50" page="4" column="1">The first step towards a fix is illustrated in <xref ref-type="fig" rid="F5" id="49" class="deo:Reference">Figure 5</xref>. A preliminary program design phase has been inserted between the software requirements generation phase and the analysis phase. This procedure can be criticized on the basis that the program designer is forced to design in the relative vacuum of initial software requirements without any existing analysis..As a result, his preliminary design may be substantially in error as compared to his design if he were to wait until the analysis was complete. This criticism is correct but it misses the point. By this technique the program designer assures that the software will not fail because of storage, timing, and data flux reasons. As the analysis proceeds in the succeeding phase the program designer must impose on the analyst the storage, timing, and operational constraints in such a way that he senses the consequences. When he justifiably requires more of this kind of resource in order to implement his equations it must be simultaneously snatched from his analyst compatriots. In this way all the analysts and all the program designers will contribute to a meaningful design process which will culminate in the proper allocation of execution time and storage resources. If the total resources to be applied are insufficient or if the embryo operational design is wrong it will be recognized at this earlier stage and the iteration with requhements and preliminary design can be redone before final design, coding and test commences. How is this procedure implemented? The following steps are required. 1) Begin the design process with program designers, not analysts or programmers. 2) Design, define and allocate the data processing modes even at the risk of being wrong. Allocate processing, functions, design the data base, define data base processing, allocate execution time, define interfaces and processing modes with the operating system, describe input and output processing, and define preliminary operating procedures. 3) Write an overview document that is understandable, informative and current. Each and every worker must have an elemental understanding of the system. At least one person must have a deep understanding of the system which comes partially from having had to write an overview document.</region>
      <region class="unknown" id="51" page="4" column="1">/ ALLOCATE ~ / sO..oOO,,. /</region>
      <region class="unknown" id="52" page="4" column="1">A DESCRIBE c %</region>
      <region class="unknown" id="53" page="4" column="1">I</region>
      <region class="DoCO:FigureBox" id="F5">
        <caption class="deo:Caption" id="54" page="4" column="1">Figure 5.</caption>
      </region>
      <region class="DoCO:TextChunk" id="55" confidence="possible" page="4" column="1">Step 1 : Insure that a preliminary program design is complete before analysis begins.</region>
      <outsider class="DoCO:TextBox" type="page_nr" id="56" page="4" column="1">331</outsider>
      <region class="DoCO:FigureBox" id="Fx57">
        <image class="DoCO:Figure" src="62ni.page_004.image_04.png" thmb="62ni.page_004.image_04-thumb.png"/>
      </region>
      <outsider class="DoCO:TextBox" type="header" id="58" page="5" column="1">STEP2: DOCUMENT THE DESIGN</outsider>
      <region class="DoCO:TextChunk" id="59" page="5" column="1">At this point it is appropriate to raise the issue of - " h o w much documentation?" My own view is "quite a lot;" certainly more than most programmers, analysts, or program designers are willing to do if left to their own devices. The first rule of managing software development is ruthless enforcement of documentation requirements. Occasionally I am called upon to review the progress of other software design efforts. My first step is to investigate the state of the documentation, If the documentation is in serious default my first recommendation is simple. Replace project management. Stop all activities not related to documentation. Bring the documentation up to acceptable standards. Management of software is simply impossible w i t h o u t a very high degree of documentation. As an example, let me offer the following estimates for comparison. In order to procure a 5 million dollar hardware device, I would expect that a 30 page specification would provide adequate detail to control the procurement. In order to procure5 million dollars of software I w o u l d estimate ~ 1[,00 pa~e specification is about right in order to achieve comparable control, Why so much documentation? 1) Each designer must communicate with interfacing designers, with his management and possibly with thecustorner. A verbal record is too intangible to provide an adequate basis for an interface or manage- mentdecision. An acceptable written description forces the designer to take an unequivocal position and provide tangible evidence of completion. It prevents the designer from hiding behind t h e - " l am90-percent finished" - syndrome month after month. 2) During the early phase of software development the documentation i.sthe specification and ._~.s the design. Until coding begins these three nouns (documentation, specification, design) d e n o t e a s i n g t e t h i n g . If the documentation is bad the design is bad. If the documentation does not yet exist there is as yet no design, only people thinking and talking about the design which is of some value, but not much. 3) The real monetary value of good documentation begins downstream in the development process during the testing phase and continues through operations and redesign. The value of documentation can be described in terms of three concrete, tangible situations that every program manager faces. a) During the testing phase, with good documentation the manager can concentrate personnel on the mistakes in the program. Without good documentation every mistake, large or small, is analyzed by one man who probably made the mistake in the first place because he is the only man who understands the program area. b) During the operational phase, with good documentation the manager can use operation-oriented personnel to operate the program and to do a better job, cheaper. Without good documentation the software must be operated by those who built it. Generally these people are relatively disinterested in operations and do not do as effective a job as operations-oriented personnel. It should be pointed out in this connection that in an operational situation, if there is some hangup the software is always blamed first. In order either to absolve the software or to fix the blame, the software documentation must speak clearly. c) Following initial operations, when system improvements are in order, good documentation permits effective redesign, updating, and retrofitting in the field. If documentation does not exist, generally the entire existing framework of operating software must be junked, even for relatively modest changes. Figure 6 shows a documentation plan which is keyed to the steps previously shown. Note that six documents are produced, and at the time of delivery of the final product, Documents No, 1, No. 3, No. 4, No. 5, and No. 6 are updated and current.</region>
      <outsider class="DoCO:TextBox" type="page_nr" id="60" page="5" column="1">332</outsider>
      <region class="DoCO:FigureBox" id="Fx61">
        <image class="DoCO:Figure" src="62ni.page_005.image_05.png" thmb="62ni.page_005.image_05-thumb.png"/>
      </region>
      <region class="unknown" id="62" page="6" column="1">Irl o . . IIII ~,- ,,*,1</region>
      <region class="unknown" id="63" page="6" column="1">i0 . i =</region>
      <region class="unknown" id="64" page="6" column="1">•</region>
      <region class="unknown" id="65" page="6" column="1">.</region>
      <outsider class="DoCO:TextBox" type="sidenote" id="66" page="6" column="1">~</outsider>
      <region class="unknown" id="67" page="6" column="1">illl ~ z ~ $~ _ ~ m</region>
      <outsider class="DoCO:TextBox" type="sidenote" id="68" page="6" column="1">u,</outsider>
      <outsider class="DoCO:TextBox" type="sidenote" id="69" page="6" column="1">E</outsider>
      <outsider class="DoCO:TextBox" type="sidenote" id="70" page="6" column="1">X</outsider>
      <outsider class="DoCO:TextBox" type="sidenote" id="71" page="6" column="1">E 8 "0</outsider>
      <outsider class="DoCO:TextBox" type="sidenote" id="72" page="6" column="1">.~r" .2 "</outsider>
      <outsider class="DoCO:TextBox" type="sidenote" id="73" page="6" column="1">E</outsider>
      <region class="DoCO:TextChunk" id="74" confidence="possible" page="6" column="1">~OLU</region>
      <outsider class="DoCO:TextBox" type="sidenote" id="75" page="6" column="1">.~</outsider>
      <outsider class="DoCO:TextBox" type="sidenote" id="76" page="6" column="1">N</outsider>
      <outsider class="DoCO:TextBox" type="sidenote" id="77" page="6" column="1">t-</outsider>
      <region class="unknown" id="78" page="6" column="1">~, Ill N / z_ ,,,. ~ ~ a. /, wZ g I0: /oo ~ i ,~ N i - , &lt; ~</region>
      <region class="DoCO:TextChunk" id="79" confidence="possible" page="6" column="1">I ~ Z - w</region>
      <outsider class="DoCO:TextBox" type="sidenote" id="80" page="6" column="1">LL</outsider>
      <outsider class="DoCO:TextBox" type="page_nr" id="81" page="6" column="1">333</outsider>
      <region class="DoCO:FigureBox" id="Fx82">
        <image class="DoCO:Figure" src="62ni.page_006.image_06.png" thmb="62ni.page_006.image_06-thumb.png"/>
      </region>
      <outsider class="DoCO:TextBox" type="header" id="83" page="7" column="1">STEP 3: DO IT TWICE</outsider>
      <region class="DoCO:TextChunk" id="84" page="7" column="1">After documentation, the second most important criterion for success revolves around whether the product is totally original. If the computer program in question is being developed for the first time, arrange matters so that the version finally delivered to the customer for operational deployment is actually the second version insofar as critical design/operations areas are concerned. Figure 7 iltustrates how this might be carried out by means of a simulation. Note that it is simply the entire process done in miniature, t o a t i m e scale that is relatively small with respect to the overall effort. The nature of this effort can vary widely depending primarily on the overall time scale and the nature of the critical problem areas to be modeled. If the effort runs 30 months then this early development o f a p i l o t model might be scheduled for 10 months. For this schedule, fairly formal controls, documentation procedures, etc., can be utilized. If, however, the overall effort were reduced to 12 months, then the pilot effort could be compressed to three months perhaps, in order to gain sufficient leverage on the mainline development. In this case a very special kind of broad competence is required on the part of the personnel involved. They must have an intuitive feel for analysis, coding, and program design. They must quickly sense the trouble spots in the design, model them, model their alternatives, forget the straightforward aspects of the design which aren't worth studying at this early point, and finally arrive at an error-free program. In either case the point of all this, as with a simulation, is that questions of timing, storage, etc. which are otherwise matters of judgment, can now be studied with precision. Without this simulation the project manager is at the mercy of human judgment. With the simulation he can at least perform experimental tests of some key hypotheses and scope down what remains for human judgment, which in the area of computer program design (as in the estimation of takeoff gross weight, costs to complete, or the daily double) is invariably and seriously optimistic.</region>
      <region class="unknown" id="85" page="7" column="1">I I,,, PRELIMINARYI% PROGRAM 1 I DESIGN ANALYSIS</region>
      <region class="unknown" id="86" page="7" column="1">i PROGRAM DESIGN</region>
      <region class="unknown" id="87" page="7" column="1">ANALYSIS I ! PROGRAM I I DES,GN I -U coo,.o I LI .,s.,.o USAGE</region>
      <region class="unknown" id="88" page="7" column="1">TESTING</region>
      <region class="unknown" id="89" page="7" column="1">[ OPERATIONS</region>
      <region class="DoCO:FigureBox" id="F7">
        <caption class="deo:Caption" id="90" page="7" column="1">Figure 7.</caption>
      </region>
      <region class="DoCO:TextChunk" id="91" confidence="possible" page="7" column="1">Step 3: A t t e m p t to do the job twice - the first result provides an early simulation of the final product.</region>
      <outsider class="DoCO:TextBox" type="page_nr" id="92" page="7" column="1">334</outsider>
      <region class="DoCO:FigureBox" id="Fx93">
        <image class="DoCO:Figure" src="62ni.page_007.image_07.png" thmb="62ni.page_007.image_07-thumb.png"/>
      </region>
      <region class="unknown" id="94" page="8" column="1">STEP 4: PLAN, CONTROL AND MONITOR TESTING</region>
      <region class="DoCO:TextChunk" id="95" page="8" column="1">Without question the biggest user of project resources, whether it be manpower, computer time, or management judgment, is the test phase. It is the phase of greatest risk in terms of dollars and schedule. It occurs at the latest point in the schedule when backup alternatives are least available, if at all. The previous three recommendations to design the program before beginning analysis and coding, to document it completely, and to build a pilot model are all aimed at uncovering and solving problems before entering the test phase. However, even after doing these things there is s t i l l a t e s t phase and there are still important things to be done. Figure 81ists some additional aspects to testing. In planning for testing, I w o u l d suggest the following for consideration. 1) Many parts of the test process are best handled by test specialists who did not necessarily contribute to the original design. If it is argued that only the designer can perform a thorough test because only he understands the area he built, this is a sure sign of a failure to document properly. With good documentation it is feasible to use specialists in software product assurance who will, in my judgment, do a better job of testing than the designer. 2) Most errors are of an obvious nature that carl be easily spotted by visual inspection. Every bit of an analysis and every bit of code should be subjected to a simple visual scan by a second party who did not do the original analysis or code but who would spot things like dropped minus signs, missing factors of two, jumps to wrong addresses, etc., which are in the nature of proofrea0ing the analysis and code. Do not use the computer to detect this kind of thing - it is too expensive. 3) Test every logic path in the computer program at least once with some kind of numerical check. If I w e r e a c u s t o m e r , I w o u l d not accept delivery until this procedure was completed and certified. This step will uncover the majority of coding errors. While this test procedure sounds simple, for a large, complex computer program it is relatively difficult to plow through every logic path with controlled values of input. In fact there are those who will argue that it is very nearly impossible. In spite of this I w o u l d persist in my recommendation that every logic path be subjected to at least one authentic check. 4) After the simple errors (which are in the majority, and which obscure the big mistakes) are removed, then it is time to turn over the software to the test area for checkout purposes. At the proper time during the course of development and in the hands of the proper person the computer itself is the best device for checkout. Key management decisions are: when is the time and who is the person to do final checkout?</region>
      <region class="unknown" id="96" page="8" column="1">STEP 5: I N V O L V E THE CUSTOMER</region>
      <region class="DoCO:TextChunk" id="97" confidence="possible" page="8" column="1">For some reason what a software design is going to do is subject to wide interpretation even after previous agreement. It is important to involve the customer ina formal way so that he has committed himself at earlier points before final delivery. To give the contractor free rein between requirement definition and operation is inviting trouble. Figure g indicates three points following requirementsdefinition where the insight, judgment, and commitment of the customer carl bolster the development effort.</region>
      <region class="unknown" id="98" page="8" column="1">SUMMARY</region>
      <region class="DoCO:TextChunk" id="99" confidence="possible" page="8" column="1">Figure 10 summarizes the five steps that I feel necessary to transform a risky development process into one that will provide the desired product. I would emphasize that each item costs some additional sum of money. If the relatively simpler process w i t h o u t the five complexities described here would work successfully, then of course the additional money is not well spent. Ii, my experience, however, the simpler method has never worked on large software development efforts and the costs to recover far exceeded those required to finance the five-step process listed.</region>
      <outsider class="DoCO:TextBox" type="page_nr" id="100" page="8" column="1">335</outsider>
      <region class="DoCO:FigureBox" id="Fx101">
        <image class="DoCO:Figure" src="62ni.page_008.image_08.png" thmb="62ni.page_008.image_08-thumb.png"/>
      </region>
      <region class="unknown" id="102" page="9" column="1">l ~</region>
      <region class="unknown" id="103" page="9" column="1">~m~ I T _~ L_ ~.L</region>
      <region class="unknown" id="104" page="9" column="1">_</region>
      <region class="unknown" id="105" page="9" column="1">I wSig I ~o_~E, I " o ~ .~</region>
      <region class="DoCO:TextChunk" id="106" confidence="possible" page="9" column="1">O..va W</region>
      <region class="DoCO:TextChunk" id="107" confidence="possible" page="9" column="1">r-</region>
      <region class="unknown" id="108" page="9" column="1">E 2 o</region>
      <region class="DoCO:TextChunk" id="109" confidence="possible" page="9" column="1">'1</region>
      <region class="unknown" id="110" page="9" column="1">E 8</region>
      <region class="DoCO:TextChunk" id="111" confidence="possible" page="9" column="1">t- O</region>
      <region class="unknown" id="112" page="9" column="1">E</region>
      <region class="DoCO:TextChunk" id="113" confidence="possible" page="9" column="1">"O E</region>
      <region class="unknown" id="114" page="9" column="1">o</region>
      <region class="DoCO:TextChunk" id="115" confidence="possible" page="9" column="1">E</region>
      <region class="unknown" id="116" page="9" column="1">8 t-</region>
      <region class="DoCO:TextChunk" id="117" confidence="possible" page="9" column="1">e,.</region>
      <region class="DoCO:TextChunk" id="118" confidence="possible" page="9" column="1">Q..</region>
      <region class="DoCO:TextChunk" id="119" confidence="possible" page="9" column="1">LL</region>
      <region class="unknown" id="120" page="9" column="1">,m</region>
      <region class="unknown" id="121" page="9" column="1">r</region>
      <region class="unknown" id="122" page="9" column="1">/,</region>
      <outsider class="DoCO:TextBox" type="page_nr" id="123" page="9" column="1">336</outsider>
      <region class="DoCO:FigureBox" id="Fx124">
        <image class="DoCO:Figure" src="62ni.page_009.image_09.png" thmb="62ni.page_009.image_09-thumb.png"/>
      </region>
      <outsider class="DoCO:TextBox" type="header" id="125" page="10" column="1">Z</outsider>
      <region class="unknown" id="126" page="10" column="1">o_ I.- &lt; r,- ill Q. o</region>
      <region class="DoCO:TextChunk" id="127" confidence="possible" page="10" column="1">(.-</region>
      <region class="DoCO:TextChunk" id="128" confidence="possible" page="10" column="1">r-</region>
      <region class="unknown" id="129" page="10" column="1">/'L__J</region>
      <region class="DoCO:TextChunk" id="130" confidence="possible" page="10" column="1">0 (J</region>
      <region class="DoCO:TextChunk" id="131" confidence="possible" page="10" column="1">f-</region>
      <region class="DoCO:TextChunk" id="132" confidence="possible" page="10" column="1">t.-</region>
      <region class="DoCO:TextChunk" id="133" confidence="possible" page="10" column="1">0 .E ~n</region>
      <region class="unknown" id="134" page="10" column="1">E</region>
      <region class="unknown" id="135" page="10" column="1">E E &gt;o</region>
      <region class="DoCO:TextChunk" id="136" confidence="possible" page="10" column="1">+.~</region>
      <region class="unknown" id="137" page="10" column="1">I</region>
      <region class="unknown" id="138" page="10" column="1">,&lt; z &lt;</region>
      <region class="unknown" id="139" page="10" column="1">E o</region>
      <region class="DoCO:TextChunk" id="140" confidence="possible" page="10" column="1">E 4..,</region>
      <region class="unknown" id="141" page="10" column="1">C</region>
      <region class="unknown" id="142" page="10" column="1">o r-</region>
      <region class="DoCO:TextChunk" id="143" confidence="possible" page="10" column="1">Q.</region>
      <region class="unknown" id="144" page="10" column="1">l / Q.</region>
      <region class="DoCO:TextChunk" id="145" confidence="possible" page="10" column="1">c~ ii</region>
      <outsider class="DoCO:TextBox" type="sidenote" id="146" page="10" column="1">(/) I--</outsider>
      <region class="unknown" id="147" page="10" column="1">z~</region>
      <region class="unknown" id="148" page="10" column="1">,~L</region>
      <region class="DoCO:TextChunk" id="149" confidence="possible" page="10" column="1">n</region>
      <region class="DoCO:TextChunk" id="150" confidence="possible" page="10" column="1">.J</region>
      <outsider class="DoCO:TextBox" type="sidenote" id="151" page="10" column="1">i,,. ua r.n r r In ii1</outsider>
      <outsider class="DoCO:TextBox" type="page_nr" id="152" page="10" column="1">337</outsider>
      <region class="DoCO:FigureBox" id="Fx153">
        <image class="DoCO:Figure" src="62ni.page_010.image_10.png" thmb="62ni.page_010.image_10-thumb.png"/>
      </region>
      <outsider class="DoCO:TextBox" type="header" id="154" page="11" column="1">I</outsider>
      <outsider class="DoCO:TextBox" type="header" id="155" page="11" column="1">|</outsider>
      <region class="unknown" id="156" page="11" column="1">I '</region>
      <region class="DoCO:TextChunk" id="157" confidence="possible" page="11" column="1">I I</region>
      <region class="unknown" id="158" page="11" column="1">:i] . l</region>
      <region class="DoCO:TextChunk" id="159" confidence="possible" page="11" column="1">e ~$ ~</region>
      <region class="unknown" id="160" page="11" column="1">~ ' l</region>
      <region class="DoCO:TextChunk" id="161" confidence="possible" page="11" column="1">~ i</region>
      <region class="unknown" id="162" page="11" column="1">~ u</region>
      <region class="unknown" id="163" page="11" column="1">n |~ 8(</region>
      <region class="unknown" id="164" page="11" column="1">I I .. I s""</region>
      <region class="unknown" id="166" page="11" column="1"> <email id="165">O00@'</email></region>
      <region class="unknown" id="167" page="11" column="1">0O°</region>
      <region class="unknown" id="168" page="11" column="1">~ d</region>
      <region class="unknown" id="169" page="11" column="1">p@@@@@@~S.</region>
      <region class="unknown" id="170" page="11" column="1">I.L.</region>
      <region class="unknown" id="171" page="11" column="1">I w</region>
      <region class="unknown" id="172" page="11" column="1">R</region>
      <outsider class="DoCO:TextBox" type="page_nr" id="173" page="11" column="1">338</outsider>
      <region class="DoCO:FigureBox" id="Fx174">
        <image class="DoCO:Figure" src="62ni.page_011.image_11.png" thmb="62ni.page_011.image_11-thumb.png"/>
      </region>
    </body>
  </article>
</pdfx>
