<?xml version='1.0' encoding='UTF-8'?>
<pdfx xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://pdfx.cs.man.ac.uk/static/article-schema.xsd">
  <meta>
    <job>674027b4ddb3ed8bbc767f97ffc69e56cad3fddb50143b8e8e7bdad616d38ffd</job>
    <base_name>62ef</base_name>
    <doi>10.1007/978-1-84996-223-0_5</doi>
  </meta>
  <article>
    <front class="DoCO:FrontMatter">
      <title-group>
        <article-title class="DoCO:Title" id="1">Computer Supported Cooperative Work</article-title>
      </title-group>
      <region class="unknown" id="2">5 A Matter of Digital Materiality</region>
      <contrib-group class="DoCO:ListOfAuthors">
        <contrib contrib-type="author">
          <name id="3">Tone Bratteteig</name>
        </contrib>
      </contrib-group>
    </front>
    <body class="DoCO:BodyMatter">
      <region class="DoCO:TextChunk" id="34" page="1" column="1">Design is about imagining future possibilities and making things that enable us to live some of these possibilities. ‘Maybe the most fascinating thing about design is that it is a process that starts with a thought and ends with the world looking different’ says Stolterman (2007: 13). Design starts with the making of ideas – of possibilities and of problems and solutions ( <xref ref-type="bibr" rid="R50" id="4" class="deo:Reference">Schön 1983</xref>; <xref ref-type="bibr" rid="R37" id="5" class="deo:Reference">Lanzara 1983</xref>). The ideas get clearer as they are formulated and communicated, concretized and tried out in detail (Bjerknes and Bratteteig 1987; <xref ref-type="bibr" rid="R27" id="6" class="deo:Reference">Henderson 1999</xref>). The imagining of the design result drives the process forward. An essential part of design is giving form to some material so that it embodies the idea(s). Designers thus think both abstractly and very concretely about materials, making an effort to choose the right one. Design is ‘thinking with materials’, and designers need deep knowledge about their materials (<xref ref-type="bibr" rid="R54" id="7" class="deo:Reference">Stolterman 2007</xref>: 16). The future possibilities – the ideas – are grounded upon how well the designer understands the materials: the material opens possibilities but also creates limits and conditions for the design. Some even say that the material ‘tells’ the craftsperson what it ‘wants to be’ – a particular piece of wood ‘wants to be’ a particular form in a chair. Similarly, the craftsperson must have a feeling for how a particular idea ‘wants to be’ manifest in a material or be expressed in different materials. Design thinking is thus very closely connected with the physical world, with the material and with the complex reality – with the hand (<xref ref-type="bibr" rid="R54" id="8" class="deo:Reference">Stolterman 2007</xref>: 18). What about digital design? <xref ref-type="bibr" rid="R42" id="9" class="deo:Reference">Löwgren and Stolterman (1998)</xref> claim that the computer is a ‘material without qualities’, referring to Robert Musil’s (1996) novel ‘The man without qualities’. Computers are extremely malleable, and everything that can be described can be represented on a computer. <xref ref-type="bibr" rid="R58" id="10" class="deo:Reference">Vallgårda and Redström (2007)</xref> criticize Löwgren and Stolterman’s view by commenting that a material without qualities or properties can ‘hardly qualify as a material’ (p. 514). The fact that the material is ‘so flexible it almost can take on any form we want’ misleads us to see it as ‘immaterial’. This chapter sets out to discuss whether it makes sense to talk about computers as material in digital design. After a brief introduction to computers and the digital, I move on to talk more generally about materials in design, and discuss how the vocabulary for describing materials can be used to talk about digital material.<marker type="page" number="2"/><marker type="block"/> Because of the ‘immaterial’ nature of digital material, I also consider other ephemeral and less physical (‘immaterial’) creative processes, and how they might help us understand digital design and digital materials. The last section looks at relations between materials and the design process, and points to the work and the knowledges concerned with materials needed in design. The conclusion summarizes my view on whether it makes sense to talk about digital material and whether it matters that it is digital.<marker type="block"/> It is well known that the term digital comes from ‘digit’, which means number – originally ‘finger’ referring to counting on the fingers. ‘Digital’ means represented as digit(s), using calculation by numerical methods that involve the Arabic numbers 1–9 and the symbol 0, or by discrete units. According to this definition, anything represented by numbers is digital: my old thermometer is digital because I measure the temperature according to a scale and read it as a digit. However, we normally use the term ‘digital’ about digital representations imple- mented on, or by means of, a computer: the digital is also electronic. In an electronic digital system – a computer – the digital representation is binary, as zeroes and ones. Everything represented – the system’s ‘content’ or information – is con- verted to binary form. Moreover, an electronic digital system (a ‘digital system’ for short) is a system that uses discrete values represented as binary numbers or non- numerical symbols like letters, signs, icons for input, processing, transmission, storage, or display of information, rather than a continuous spectrum of values as in an analogue system.<marker type="block"/> The basis for digitization is differences in voltages in electric current defined binary as 0 or 1. The data signals in a digital system carry one of two electronic (or optical) pulses: logical 1 when there is a pulse, logical 0 when the pulse is lacking. The binary representation is an abstraction from the fact that current is continuous; the abstraction is a construct, a choice, like all abstractions. The computer is built up by digital logic, by combinations of zeroes and ones into logical gates: AnD if both inputs are high or 1, output is 1; OR if one input is 1, output is 1. The gates are further combined into increasingly complex logical units (see Fig. 5.1). A digital electronic system is one of abstractions, all the way from the voltages to the surfaces that meet the user (<xref ref-type="bibr" rid="R19" id="19" class="deo:Reference">Dourish 2001</xref>). When we click on the printer icon on our computer screen, the computer performs a number of operations at many levels of abstraction in order to connect to the physical device and make it print the signs we want it to print. The services offered at the user interface (such as printing,<marker type="page" number="3"/><marker type="block"/> copying, searching) are abstractions that represent programs that are sets of abstractions themselves (like instruction sets, database architectures, communication protocols) materialized in transistors and electrical pulses. Remember: even the binary signals are abstractions imposed on continuous voltages. The abstraction levels concern types of machine behaviour, and in computing it is common to refer to the physical machine (wires, disks, and integrated circuits); the logical machine (the collection of logical elements made from physical components like and/or gates); and the abstract machine (‘a collection of abstract symbolic processors designed to resemble aspects of the world modelled’ (<xref ref-type="bibr" rid="R64" id="23" class="deo:Reference">Winograd and Flores 1986</xref>)). The abstract machine is described in modelling languages constructed to communicate to the programmer as well as to support the translations from the abstract logic into a physical machine (<xref ref-type="bibr" rid="R63" id="24" class="deo:Reference">Winograd 1979</xref>). It is the idea of an ‘abstract machine’ that makes us think that the computer is immaterial.<marker type="block"/> Abstraction is the most fundamental characteristic of digital system design. The term abstract originates from Latin abstrahere: to pull away. Abstraction means to omit details and represent selected qualities of a phenomenon. <xref ref-type="bibr" rid="R36" id="28" class="deo:Reference">Kramer (2007)</xref> emphasizes two aspects of abstraction: (1) ‘the act of withdrawing or removing something’ (p. 38) which means to leave out selected properties of the object in question, and (2) ‘the process of formulating general concepts by ... extracting<marker type="page" number="4"/><marker type="block"/> common features from specific examples’ (p. 38). Abstraction in this sense is used in other disciplines: in art, where details are omitted in Munch’s painting ‘The Scream’ for example, or in music, with Bach’s use of counterpoint. A famous design example is the map of the London Underground, in which the directions and distances do not match the physical, geographical underground tracks – and in this way makes the map easier to navigate from. In digital design, abstraction allows systems to be considered at different levels of detail, to be broken down into individual components, and to be reassembled. Thus, the activity of systems design is to create and manipulate abstractions. Abstractions help us manage the complexity of a system by allowing us to hide it selectively in logical ‘black boxes’ 1 that we relate to through the characteristics of their interface. The ‘we’ above can be human users or pieces of code (i.e. other black boxes), and all we need to know about the black-boxed abstraction is what input they need and what output they produce (the functionality, procedure call conventions, and return values). The system’s internal mechanisms, which describe and control how it goes about doing the work, are intentionally not avail- able for inspection (<xref ref-type="bibr" rid="R20" id="32" class="deo:Reference">Dourish and Button 1998</xref>: 414). Hiding the (internal) complexity behind simple interfaces enables us to build very complex systems and address them at different and logically appropriate levels of interaction. The fact that we design with abstractions leads us into finding ways to reduce the complexities of the phenomenon we design for (and to), and we make use of systems thinking with its support for modularization and black-boxing of system parts and layers. It is easier to design one part at a time, and to work with layers of emerging properties. The notion of ‘abstract’ also connotes impersonal and detached. The act of abstraction is an act of translation that involves the creation of generalized logical units and categories that are used as building blocks in a system. Abstractions span classes of objects that are concrete: found in the real world, particular and specific, tangible and made of solid mass. Systems thinking 2 helps in making general structures and processes where the particularities of a single instance are represented with variable values in a class of similar phenomena. When applied to the world, systems thinking makes us see the relationships between the whole and its parts. The danger is, however, that systems thinking easily seduces us to think that the world is a system (Bjerknes and Bratteteig 1987; <xref ref-type="bibr" rid="R11" id="33" class="deo:Reference">Bowker and Star 1999</xref>).</region>
      <outsider class="DoCO:TextBox" type="page_nr" id="12" page="1" column="1">147</outsider>
      <outsider class="DoCO:TextBox" type="footer" id="13" page="1" column="1">I. Wagner et al. (eds.), Exploring Digital Design: Multi-Disciplinary Design Practices, Computer Supported Cooperative Work, DOI 10.1007/978-1-84996-223-0_5, © Springer-Verlag London Limited 2010</outsider>
      <outsider class="DoCO:TextBox" type="header" id="14" page="2" column="1">ExpLORIng DIgITAL DESIgn</outsider>
      <region class="unknown" id="16" page="2" column="1">Characteristics of the Digital</region>
      <region class="unknown" id="18" page="2" column="1">Abstractions</region>
      <outsider class="DoCO:TextBox" type="page_nr" id="21" page="2" column="1">148</outsider>
      <outsider class="DoCO:TextBox" type="header" id="22" page="3" column="1">A MATTER OF DIgITAL MATERIALITy</outsider>
      <region class="unknown" id="26" page="3" column="1">AND OR XOR A B output output A B output output A B output output 0 0 0 0 0 0 0 0 0 0 1 0 0 1 1 0 1 1 1 0 0 1 0 1 1 0 1 1 1 1 1 1 1 1 1 0 a full adder</region>
      <region class="DoCO:FigureBox" id="F5.1">
        <caption class="deo:Caption" id="27" page="3" column="1">Fig. 5.1 AnD, OR and xOR gates and a full adder made up of binary logic (glette 2009)</caption>
      </region>
      <outsider class="DoCO:TextBox" type="page_nr" id="30" page="3" column="1">149</outsider>
      <outsider class="DoCO:TextBox" type="header" id="31" page="4" column="1">ExpLORIng DIgITAL DESIgn</outsider>
      <region class="DoCO:TextChunk" id="37" confidence="possible" page="4" column="1">1 nygaard (2002) defines object-oriented systems as composed of interrelated components, where each component has some properties and some action connected to it. The objects are instances of object classes. Classes can be divided into subclasses that inherit the properties of their super- class. The modularization in object-oriented programming is a method of simplification. The black-boxing achieved with modularization is also discussed by <xref ref-type="bibr" rid="R39" id="35" class="deo:Reference">Latour (1999)</xref>. 2 Systems thinking applies a systems perspective on the world (for some time and for a purpose, see (nygaard 2002, 1986)), seeing a part of the world as a whole, built up of interdependent components, where the properties of the system are more than the sum of the properties of its parts; emergent properties appear at different hierarchical levels of the system (<xref ref-type="bibr" rid="R16" id="36" class="deo:Reference">Checkland 1981</xref>): A bike as a whole has different properties than the sum of each of its parts.</region>
      <outsider class="DoCO:TextBox" type="page_nr" id="38" page="4" column="1">150</outsider>
      <outsider class="DoCO:TextBox" type="header" id="39" page="5" column="1">A MATTER OF DIgITAL MATERIALITy</outsider>
      <region class="unknown" id="40" page="5" column="1">Representations</region>
      <region class="DoCO:TextChunk" id="45" page="5" column="1">Abstractions represent concrete objects, structures, and processes that exist in the real world and, as the abstractions are concretized come to exist in the real world themselves. The representations aim to model actual, physical phenomena happen- ing in a real-world context, and represent what are considered to be the important properties of the phenomenon (which means that they embody choices and trade- offs). However, the modeller may over-simplify or mis-represent the phenomenon if that serves the purpose of the modelling. Representations are not uniquely related to digital systems; they are an integrated aspect of how human beings deal with complex phenomena (e.g. medical diagnosis systems, see <xref ref-type="bibr" rid="R11" id="41" class="deo:Reference">Bowker and Star 1999</xref>). In the hospital I am represented as a patient and I ‘become’ my blood test results or heartbeat or dysfunctional body part. Laboratory tests of the enzymes in a blood sample are interpreted as a representation of the size and seriousness of a heart attack. 3 Measurements of the heartbeat on a scope screen need to be interpreted because different monitors display the same rhythm differently (Bjerknes and Bratteteig 1987, 1988). Fortunately, such measurements are interpreted, taking into account the particularities of the individual real patient: the body, the sickness history, the medication, and the physical observations of the phenomena represented. Making and interpreting such representations are part of the professional work that health workers do. The representation is about their work object: the patient, and is a work object itself (<xref ref-type="bibr" rid="R7" id="42" class="deo:Reference">Berg 1997</xref>). The making of representations is a basic craft in system design – at many abstraction levels. Literature on system design indicates many different ways to go about representing the system-in-the-making; focusing on objects, data structures, functions etc. Software engineering methods describe how to plan and build a robust system, where the aims and requirements of the system are given. System development methodologies are often built upon a set of methods and tools for making system representations, supporting a particular view on systems and solutions (<xref ref-type="bibr" rid="R1" id="43" class="deo:Reference">Andersen et al. 1990</xref>; Bjerknes and Bratteteig 1987). At lower levels, the representations detail the system parts, and the representations can be unambigu- ous, as the context of use is a fully specified computer system rather than a more or less unpredictable human use setting. Another essential characteristic of the computer as an abstract machine is that it is ‘symbolic’ (<xref ref-type="bibr" rid="R64" id="44" class="deo:Reference">Winograd and Flores 1986</xref>). It is made up of symbols taken to be tokens or signs that stand in for something else: they represent something else. A focus on symbols suggests that interpretation and meaning-making is necessary for design and use of the symbolic machine, in fact the machine must be given meaning</region>
      <region class="DoCO:TextChunk" id="47" confidence="possible" page="5" column="1">3 The enzymes ALT (alanine transaminase) and AST (aspartate transaminase) leak out of damaged muscles into the blood and can be found after a heart infarct, but can be caused by other muscles as well. The same holds for the enzyme CK (creatine kinase). The combination of these should identify the source of the muscle damage. Blood tests for enzyme values are taken until the level is decreasing, signalling that the damage on the muscle has stopped (<xref ref-type="bibr" rid="R14" id="46" class="deo:Reference">Bratteteig 2004</xref>).</region>
      <outsider class="DoCO:TextBox" type="page_nr" id="48" page="5" column="1">151</outsider>
      <outsider class="DoCO:TextBox" type="header" id="49" page="6" column="1">ExpLORIng DIgITAL DESIgn</outsider>
      <region class="DoCO:TextChunk" id="57" page="6" column="1">by its users. The users in this sense co-construct the symbolic machine by relating to it in accordance with the meaning s/he gives to it by using it. The challenging ambition for designers is thus to communicate their (intentional) interpretation well enough for the users to share their interpretation and utilize the intended potential of the machinery in question. Symbolic machines therefore depend on successful communication between designer and user ( <xref ref-type="bibr" rid="R2" id="50" class="deo:Reference">Andersen 1986</xref>), and, hence, on how the symbols are materialized and given form in the artefact. This adds to the general challenge in design to communicate functionality of an artefact (<xref ref-type="bibr" rid="R13" id="51" class="deo:Reference">Bratteteig 2002</xref>). The communication of the functionality of a symbolic machine can make use of both symbolic and physical forms, but need to speak the language of the contemporary culture. Symbols are culturally and socially defined. Context and genre constitute conventions that shape our interpretations of symbols 4 : the symbol <email id="52">‘@’</email> reads differently after you have opened your first email account. Symbols require interpretation and meaning-making: linguists would say that the ‘reader’ needs to understand the meaning (the signified) that is communicated through the symbol/sign (the signifier). Symbols are concrete forms – matter – that signify meaning. [The] representation is in the mind of the beholder. There is nothing in the design of the machine or the operation of the program that depends in any way on the fact that the symbol structures are viewed as representing anything at all (<xref ref-type="bibr" rid="R64" id="53" class="deo:Reference">Winograd and Flores 1986</xref>: 86). Representation is an act of signification, which includes creating a concrete expres- sion that can be made sense of by the people in its context. All representations influence the way we act and understand the world, and get embedded in our way of living; a classic example is the clock representing time – deeply embedded in Western society, culture and organizations, even our identity (<xref ref-type="bibr" rid="R61" id="54" class="deo:Reference">Weizenbaum 1976</xref>).<marker type="block"/> A basic characteristic of digital electronic systems is that they are program executions: they do things. A program execution is a process characterized by aspects like input (start condition), output (end result), and properties such as speed, dura- tion, rhythm etc. A machine that performs processes automatically is an automaton; the automaton processes input and transforms it to output, it produces responses to stimulus, and it changes its state(s). Simple automatons, like the thermostat, are set to turn the heat on and off for you. More complex automatons, such as the calculator or the bank’s account system, do the mathematical calculation for you.</region>
      <region class="unknown" id="56" page="6" column="1">Process</region>
      <region class="DoCO:TextChunk" id="60" confidence="possible" page="6" column="1">4 cf. <xref ref-type="bibr" rid="R2" id="58" class="deo:Reference">Andersen 1986</xref>; <xref ref-type="bibr" rid="R3" id="59" class="deo:Reference">Andersen &amp; Bratteteig 1989</xref>. In this sense, language is a system of symbols, but the meaning-making in our culture also includes iconic symbols and symbols that speak to other senses: hearing the nokia phone signal three short, one long, three short beeps is easily interpreted as ‘sms’ in Morse code ■ ■ ■ – ■ ■ ■ by telegraphers.</region>
      <outsider class="DoCO:TextBox" type="page_nr" id="61" page="6" column="1">152</outsider>
      <outsider class="DoCO:TextBox" type="header" id="62" page="7" column="1">A MATTER OF DIgITAL MATERIALITy</outsider>
      <region class="DoCO:TextChunk" id="66" page="7" column="1">‘A washer is a washer, whatever clothes you put inside, but when you put a new program in a computer, it becomes a new machine’ (gelernter 1998: 24). A program is a description of a ‘virtual machine’ that becomes real when activated in a computer. The concept of the virtual machine is ‘a way of understanding software that frees us to think of software design as machine design’ (gelernter 1998: 24). The virtual machine combines two aspects of the digital (and electronic) that makes it into a general machine: (1) the fact that the representation is an abstraction and can refer to anything: a number could be a temperature, an amount of money, a time (hour or date), a measurement of length or weight – it depends on the context in which we set the number; and (2) the fact that the representation is an abstraction of a process in a machine that can change its state based on input, and that contains a specification of operations to produce output. 5 It is the second aspect that I shall discuss in this section. The abstract machine includes structures for action, both automatic action and responses on input from internal as well as external sources (like humans). The structure for action is called a procedure: a series of operations in a particular order that, when performed, will transform a particular input to a specified output. A procedure specifies the preconditions and frames for action. A simple thermostat measures the temperature and when a certain condition occurs, a certain action is taken; the temperature is below a preset value and so a heater is turned on. The washing machine washes by moving its interior at a certain speed (presented by labels as ‘careful’ or ‘normal’ washing), at certain temperatures and for a certain time (not independent of the temperature). 6 The ATM does not give me any money if I input a number greater than the number that the bank computer has registered as the deposit in my bank account. In an electronic system, the procedure is called an algorithm; a concept tradition- ally used to denote the solving of mathematical problems. ‘Algorithms are abstract descriptions of the solution to a problem, which may be solved by a machine’ (<xref ref-type="bibr" rid="R35" id="63" class="deo:Reference">Knuth 1973</xref>). Algorithms express structures for processes, and can be characterized by properties that refer to the way they are structured – finiteness, definiteness, input, output, effectiveness (<xref ref-type="bibr" rid="R35" id="64" class="deo:Reference">Knuth 1973</xref>). Algorithms work with symbols that refer to classes of concrete instances and thus represent abstractions from the specific values of the instances. ‘The concept of “a variable” represents an abstraction from its current value’ (<xref ref-type="bibr" rid="R18" id="65" class="deo:Reference">Dijkstra 1976</xref>: 11). The concept of a variable captures the ‘the quintessence of programming’. A well-known example of an algorithm is Quicksort, invented in 1960 by C.A.R. Hoare. Quicksort sorts a set of cards (or whatever needs to be sorted) in an elegant way. It makes use of some basic abstraction mechanisms: recursion (referring to itself), and calling a procedure (a repeated set of operations). It partitions an array into small and big elements, and continues to do the same in each of the two new arrays</region>
      <region class="DoCO:TextChunk" id="69" confidence="possible" page="7" column="1">5 All digital electronic systems are Turing machines: universal devices that manipulate abstract symbols and can simulate the logic of any computer (<xref ref-type="bibr" rid="R46" id="67" class="deo:Reference">Minsky 1967</xref>; <xref ref-type="bibr" rid="R35" id="68" class="deo:Reference">Knuth 1973</xref>). 6 A curious fact is that the temperature scale on the machine fits the categories of the washing instructions attached to the clothes: the making of wool-washing programs is intertwined with developing ways of preparing wool so that it can stand this kind of machine washing.</region>
      <outsider class="DoCO:TextBox" type="page_nr" id="70" page="7" column="1">153</outsider>
      <outsider class="DoCO:TextBox" type="header" id="71" page="8" column="1">ExpLORIng DIgITAL DESIgn</outsider>
      <region class="DoCO:TextChunk" id="84" page="8" column="1">(recursively) until there are no arrays left to be sorted. Here follows a short way of specifying this algorithm, below is a program that does the same: pick one element of the array (the “pivot”). partition the other elements into two groups: “little ones” that are less than the pivot value, and “big ones” that are greater than the pivot value. recursively sort each group. ( <xref ref-type="bibr" rid="R34" id="72" class="deo:Reference">Kernighan and Pike 1999</xref>: 32) The representation of the Quicksort algorithm – and the algorithm itself – illustrates the way that real phenomena can be translated and represented in an electronic system. The skills and knowledges about forming digital (electronic) materials are just like this: forming abstract structures and algorithms into representations that can be read by humans (like the program below) and translated to electronic signals visible in machine behaviour. /* quicksort: sort v[0] .. v[n-1] into increasing order */ void quicksort(int v[], int n) { int i, last; if (n &lt;= 1) /* nothing to do */ return; swap(v, 0, rand() % n); /* move pivotlem to v[0] */ last = 0; for (i = 1; i &lt; n; i++) /* partition */ if (v[i] &lt; v[0]) swap(v, ++last, i); swap(v, 0, last); /* restore pivot */ quicksort(v, last); /* recursive sort */ quicksort(v+last+1, n-last-1); /* each part */ } The swap operation, which interchanges two elements, appears three times in quicksort, so it is best made into a separate function: /* swap: interchange v[i] and v[j] */ void swap(int v[], int i, int j) { int temp; temp = v[i] v[i] = v[j] v[j] = temp } (<xref ref-type="bibr" rid="R34" id="73" class="deo:Reference">Kernighan and Pike 1999</xref>: 32–33) processes controlled by a machine need to be correct, predictable, controllable, reliable etc.; they must behave according to a set of engineering qualities. We need to trust that the calculation is correct or else the calculator is useless. In particular, processes that are non-transparent and incomprehensible processes must be correct. We accept that we cannot make a call if we have no connection to a provider, or if the battery is flat, but if the telephone cannot be used under normal conditions, we throw it away. predictability and human control of automatons is crucial. As the automaton is always right, a certain level of knowledge is required to question its output. This also holds for the automation and digitization of manual processes:<marker type="page" number="9"/><marker type="block"/> it makes us question the value of the knowledge involved in the manual processes. In the 1970s, norwegian dairies were automated and knowledge concerned with tasting, smelling, feeling, looking at the milk as it travelled through the factory became obsolete – and eventually disappeared. Instead came knowledges concerned with the representation of temperature and chemical composition, which constitutes a different set of skills and knowledges (cf. <xref ref-type="bibr" rid="R66" id="77" class="deo:Reference">Zuboff 1989</xref>). The delegation of knowledge work to machinery made it uninteresting to maintain the knowledge about the physical processes. Automatons are machines that process things and perform operations by themselves. An automaton has been delegated a symbolic process, e.g. calculation (<xref ref-type="bibr" rid="R57" id="78" class="deo:Reference">Säljö 2000</xref>) and its calculations may be part of a larger human activity system. We can see the automaton as a ‘prosthesis’ that enhances human capacities (<xref ref-type="bibr" rid="R61" id="79" class="deo:Reference">Weizenbaum 1976</xref>). As a lever enhances the human capacity to lift, a calculator enhances human capacities concerned with calculations. We can say that the calculator is delegated some calculation work – or even intelligence and memory – and that calculation is performed by an assemblage of humans and machinery. 7 The level of abstraction of knowledge in society increases when many physical processes get transformed and translated to representations and measurements. The ubiquity of representations influences how we relate to both signifiers and the signified. Chapters 1 and 2 describe aspects of contemporary ICTs that deeply influence our experiences with computers, both as users and designers: the developments in size- power-price relations, the miniaturization and the distribution of computing on ubiq- uitously present digital networks (be it gsm, gps, or the Internet). nano technologies and extremely small computing devices that act as sensors and actuators can be distributed in the environment and embedded in physical materials (even woven into textiles). Wireless and mobile computing enable us to let go of the desk top as the place where we work or gather information. Ubiquitous computing (<xref ref-type="bibr" rid="R60" id="80" class="deo:Reference">Weiser and Brown 1997</xref>) and ‘everyware’ (greenfield 2006) open up possibilities for processing power in virtually all everyday artefacts. Digital design can range from global communication systems to digital dust. Many digital electronic systems are distributed over several devices and parts, and with increasing convergence to other systems. These developments give new possibilities for the digital material to be mixed with other materials, or take different shapes from previous generations of ICTs.<marker type="block"/> A material is ‘a physical substance that shows specific properties for its kind’ (<xref ref-type="bibr" rid="R58" id="83" class="deo:Reference">Vallgårda and Redström 2007</xref>: 514). Material is the stuff of which things are made. Material – referring to matter – is physical; it has a mass and occupies space, but it does not normally have a specific form and can be shaped. Matter can exist in</region>
      <outsider class="DoCO:TextBox" type="page_nr" id="75" page="8" column="1">154</outsider>
      <outsider class="DoCO:TextBox" type="header" id="76" page="9" column="1">A MATTER OF DIgITAL MATERIALITy</outsider>
      <region class="unknown" id="82" page="9" column="1">Materials in Design</region>
      <region class="DoCO:TextChunk" id="89" confidence="possible" page="9" column="1">7 Like distributed cognition. See <xref ref-type="bibr" rid="R28" id="85" class="deo:Reference">Hutchins 1995</xref>, <xref ref-type="bibr" rid="R57" id="86" class="deo:Reference">Säljö 2000</xref>, <xref ref-type="bibr" rid="R39" id="87" class="deo:Reference">Latour 1999</xref>, and <xref ref-type="bibr" rid="R56" id="88" class="deo:Reference">Suchman 2007</xref> for different accounts of distribution of cognition over humans and artefacts.</region>
      <outsider class="DoCO:TextBox" type="page_nr" id="90" page="9" column="1">155</outsider>
      <outsider class="DoCO:TextBox" type="header" id="91" page="10" column="1">ExpLORIng DIgITAL DESIgn</outsider>
      <region class="DoCO:TextChunk" id="94" page="10" column="1">different phases: solid, liquid, gas or plasma. Material sciences operate with categories of materials referring to their properties or their origin (artificial, natural). We can perceive materials by one or more of our senses. While contemporary architecture and product design use digital tools to construct their expressive forms (see e.g. <xref ref-type="bibr" rid="R51" id="92" class="deo:Reference">Sevaldson 2005</xref>; <xref ref-type="bibr" rid="R45" id="93" class="deo:Reference">McCullough 1998</xref>), the material used is still mainly non-digital: wood, stone, brick, glass, metal, plastic, concrete etc. The close relation to the material is easy to see in the crafts, for example in traditional boat building (like the Viking ships, see Fig. 5.2 left) where the builder tries to find pieces for the arched ribs by looking for trees with ‘knees’, as such naturally grown crooks are more rigid and flexible than wood with fabricated bends (Juul-nielsen 1984).</region>
      <region class="DoCO:FigureBox" id="Fx95">
        <image class="DoCO:Figure" src="62ef.page_010.image_01.png" thmb="62ef.page_010.image_01-thumb.png"/>
      </region>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="96" confidence="possible" page="10" column="1">Fig. 5.2</h1>
        <region class="DoCO:TextChunk" id="97" confidence="possible" page="10" column="1">From left to right: Ribs of Viking boat, and gramazio and Kohler’s computer-designed brick wall and corridor, see www.gramaziokohler.com</region>
        <region class="DoCO:TextChunk" id="209" page="10" column="1">Architects are also close to their materials, and spend much time getting to know, explore and experiment with materials as part of the inspirational phases of their design processes ( <xref ref-type="bibr" rid="R32" id="98" class="deo:Reference">Jacucci and Wagner 2007</xref>). Contemporary architects’ works include experimental use of materials; for example, the architects gramazio and <xref ref-type="bibr" rid="R23" id="99" class="deo:Reference">Kohler (2007)</xref> digitally construct and automatically build brick walls that express their design idea – and challenge our conception of a brick wall (see Fig. 5.2 right and middle). The composition of bricks so that they express shapes (grapes) and allow light into the room while avoiding direct sunlight, is impossible to construct without a computer. The automatic production of the brick walls required the bricks to be glued – which gave the wall elements different properties than bricks put together with mortar; the wall elements, for example, can be lifted and moved (gramazio and <xref ref-type="bibr" rid="R23" id="100" class="deo:Reference">Kohler 2007</xref>). The material properties can be characterized on many levels, from the chemical basis to the use value of (compositions of) materials (e.g. timber shifts its properties when glued in layers (laminate)). <xref ref-type="bibr" rid="R58" id="101" class="deo:Reference">Vallgårda and Redström (2007)</xref> characterize materials according to their: •  Substance The substance is the physical stuff that the material is made of. Definitions of materials refer to the atoms and the chemical and physical properties of the stuff. •  Structure Materials have structures – we can even say that materials at a molecular level are structures. Some material properties have their origin in chemical properties at the molecular scale.<marker type="page" number="11"/><marker type="block"/> •  Surface All materials have surfaces, acting as the interface to the surroundings. Surfaces can be characterized by their texture and colour, but the surface often depends on other characteristics of the material, e.g. temperature, special treatment etc. •  Properties The chemistry of materials is important for understanding their properties at higher levels. However, characterizing the properties of a material depends on the perspective, what the material is evaluated in relation to; wood is, for example, seen differently by a chemist or an architect. <xref ref-type="bibr" rid="R58" id="105" class="deo:Reference">Vallgårda and Redström (2007)</xref> introduce the term ‘composite materials’ that are made in order to create a new property or change the properties of a material by combining it with another. They particularly mention the alloy aluminium, made from naturally-occurring bauxite refined into pig-aluminium – which is light- weight but weak – and then combined with other materials to make it strong and flexible – what we normally refer to as aluminium (p. 516). This leads Vallgårda and Redström to point to the difficulties of distinguishing between materials and products: timber, the product of the sawmill, is a material for the carpenter. The blurring is even more present in composite materials, especially when the composition is fabricated to allow new forms. It comes down to the perspective or purpose of the activity in which the material becomes a part. We can say that it is a material if it is used to create something new that expresses a new idea. A ‘bricoleur’, who uses products and product parts as materials, can illustrate this point (<xref ref-type="bibr" rid="R26" id="106" class="deo:Reference">Harper 1987</xref>).<marker type="block"/> When discussing computers as material in design we can use the same categories as for characterizing other design materials: substance, structure, surface and properties. perceiving computers as a material is ... more than a metaphorical maneuver. It is a question of accepting their similar characteristics as significant enough to hereafter work with the computer in the same manner we work with materials like aluminium or glass (<xref ref-type="bibr" rid="R58" id="109" class="deo:Reference">Vallgårda and Redström 2007</xref>: 516). Substance Computers can be characterized at many abstraction levels, ranging from the ‘immaterial’ information, signs and meaning to the very concrete level of how the electronic mechanisms work: the voltages that ‘do’ the processing of input to output. At this level there is no difference between software and hardware; all levels we make up to handle the complexities of a computer are, in the end, voltages and manipulations of voltages. The size of the computer refers to the number of instructions processed per clock cycle – which also points to the fact that the computer needs to be whole in order to work, and that a smaller computer is not a big computer cut in two. The substance of a computer is thus the physical workings of an electronic artefact. Structure the structural aspects of computers can also be discussed at several abstraction levels. At the level of voltages we deal with binary logic, whereas we<marker type="page" number="12"/><marker type="block"/> deal with components as cpu, 8 memory and input/output devices at the physical composition of machinery for the desk top. Like other materials, the abstraction levels refer to particular levels of granularity that at lower abstraction levels are detailed even more. The structure prescribes particular processes in the computers. It is these processes that characterize the computer as material. ‘This is analogous to how energy in other materials holds the molecules together as a structure and thereby constitutes them as materials.’ (<xref ref-type="bibr" rid="R58" id="113" class="deo:Reference">Vallgårda and Redström 2007</xref>: p. 517). Properties We again need to distinguish between levels of abstraction since the lower levels consist of the processes that handle sequences of voltages that are translated into binary logic, while properties of the higher levels are concerned with the quality of the higher order processes. The many layers with emergent properties make it useful to apply a systems perspective on the computer – just as a bicycle as an assembly has different properties than each of its parts. At some level the computer as material is combined with other materials (silicon, metal, plastic, glass) but the ‘raw’ material of a computer is the processes; the computations. <xref ref-type="bibr" rid="R58" id="114" class="deo:Reference">Vallgårda and Redström (2007)</xref> therefore compare the computer with aluminium: the raw aluminium is useless unless prepared and combined (in an alloy) with other materials. Raw aluminium is interesting because its properties are potentially useful, but it needs to be treated and prepared in particular ways in order to make use of its potential. They conclude with characterizing the computer as a composite material. A view on computers as composite materials emphasises that the properties of the ‘raw’ computing is maintained or realized through its combination with other materials, and that additional or changed properties can develop in such combinations. The combination involves other materials that have particular properties, and it involves the preparing of the composite as one composite material. <xref ref-type="bibr" rid="R58" id="115" class="deo:Reference">Vallgårda and Redström (2007)</xref> use the concept of the computational composite to discuss computational textiles, computational concrete and computational ‘tensegrity’ (tensegrity referring to ‘a skeleton structure that consists of members in continuous tension and members in discontinuous compression.’ (p. 519). They maintain that the properties of computational composites are concerned with the computational processes, and connect the composite properties to the states that the composite goes through, the transitions between these states, and the control of this process. They therefore connect the properties to the algorithms and data sets in the computation and to whether the control of the process is distributed (an all predetermined, dynamically controlled data set or a set of dynamically changing computing conditions depending on dynamically collected data sets (p. 517)).<marker type="block"/> From my walkthrough of digital electronic systems above, it seems that the two properties characterizing digital design results are processes and abstractions. It is<marker type="page" number="13"/><marker type="block"/> a basic property of computers that computational processes play out in time and also enable the computer to present time-consuming information (e.g., film, music). It is also a basic property that the computer is constructed by means of abstraction: abstraction of processes as well as of the structure and content of the processes. The computer, however, is very concrete. At first glance, the title of this book [Concrete Abstractions] is an oxymoron. After all, the term abstraction refers to an idea or general description, divorced from physical objects. On the other hand, something is concrete when it is a particular object, perhaps something that you can manipulate with your hands and look at with your eyes. yet you often deal with concrete abstractions. Consider, for example, a word processor. When you use a word processor, you probably think that you have really entered a document into the computer and that the computer is a machine which physically manipulates the words in the document. But in actuality, when you “enter” the document, there is nothing new inside the computer – there are just different patterns of activity of electrical charges bouncing back and forth. Moreover, when the word processor “manipulates” the words in the document, those manipulations are really just more patterns of electrical activity. Even the program that you call “word processor” is an abstraction – it’s the way we humans choose to talk about what is, in reality, yet more electrical charges. Still, although these abstractions such as “word processors” and “documents” are merely convenient ways of describing patterns of electrical activity, they are also things that we can buy, sell, copy, and use. (<xref ref-type="bibr" rid="R24" id="122" class="deo:Reference">Hailperin et al. 1999</xref>: ix) <xref ref-type="bibr" rid="R24" id="123" class="deo:Reference">Hailperin et al. (1999)</xref> distinguish between three basic types of (concrete) abstractions: procedural abstraction, data abstractions, and abstractions of state. procedural abstractions are abstractions of processes, seen as a ‘dynamic succession of events’ (p. ix) – which leads us to abstraction of states: the changes made by the program that affect the further execution of the program (or other programs). Abstractions of data concern how information is represented and structured so as to fit the computational processes. Their description of computing is a more specific account of the two characteristics addressed above: processes and abstractions. procedures are structures for processes to go through a sequence of states, and the abstraction of data is the structures limiting the processes – here it makes sense to just talk about abstractions and processes. Designing with processual material means to create or change processes – to look for processes and how general, repeating, quantifiable processes can be delegated to machines. We look for processes to automate – and create both generalised routines and exceptions to them. However, general categories and routines are creations rather than expressions of real life facts (<xref ref-type="bibr" rid="R52" id="124" class="deo:Reference">Star 1991</xref>; <xref ref-type="bibr" rid="R55" id="125" class="deo:Reference">Suchman 1994</xref>; <xref ref-type="bibr" rid="R11" id="126" class="deo:Reference">Bowker and Star 1999</xref>).<marker type="block"/>  <xref ref-type="bibr" rid="R58" id="129" class="deo:Reference">Vallgårda and Redström (2007)</xref> characterize computational technology as temporal due to its computational processes, and as spatial due to the ‘spatial form given to these processes by other materials with strong spatial elements’ (p. 514). The sec- ondary property is what Vallgårda and Redström calls spatial: the space made for<marker type="page" number="14"/><marker type="block"/> the process to become concrete – be it physical or virtual. As pointed out above, Vallgårda and Redström are most concerned with the physical (e.g., pillows that combine textiles and computations), and claim that the computational ‘immaterial’ material is dependent upon other concrete materials to present itself – digital materials are therefore best understood as elements of new, composite materials. <xref ref-type="bibr" rid="R44" id="133" class="deo:Reference">Mazé and Redström (2005)</xref> suggest studying the computational object from the inside: from material to form, and from the outside: from interaction to form. They claim that the form of a computational object does not communicate the fundamental characteristics of that object, unlike, for example, how the size of a mechanical object tells us something about its power. ‘There is no longer any correspondence between the complexity of the surface and the complexity of the inner workings of an object.’ (p. 9). <xref ref-type="bibr" rid="R43" id="134" class="deo:Reference">Maeda (2000)</xref> claims that this has consequences for both the designer and the user: the user cannot evaluate the object by its exterior; the designer gets less space for expressing his/her ideas – but can instead use the time dimension (when there is not enough space to present all necessary information, you need to present pieces of information over time). <xref ref-type="bibr" rid="R44" id="135" class="deo:Reference">Mazé and Redström (2005)</xref> discuss the computational form as a combination of spatial and temporal form, claiming that this makes it impossible to separate form from interaction. Temporal form ‘is manifested through spatial form elements in use’ (p. 10). We therefore need to understand use as the concrete process of the temporal form rather than referring to users’ experiences and needs concerned with their practices: use simply means the concretization of temporal form. Through experiments with spatial and temporal form combinations, they suggest considering the interplay of spatial and temporal properties (space may change over time) to recognize how temporal form develops through mobility (users moving), and that form is not entirely determined by the designers if temporal influence on spatial form is allowed – and vice versa. The form is thus dependent upon the interaction with the environment (the users).<marker type="block"/> Material – or matter – refers to a substance that occupies space. What if the space occupied by digital materials is a symbolic space spanned by the activities in which the process takes attention and time? As a starting point to explore the possibility of talking about processual material, I will use other kinds of processual design results. Candidates for such analogies are design results that exist as an experiential process; music, theatre, dance or other performances. Design of such processes results in descriptions of activities at a very detailed level that are used as pre- scriptions for the concrete realization of the performance (see e.g. <xref ref-type="bibr" rid="R38" id="138" class="deo:Reference">Larssen et al. 2004</xref>; <xref ref-type="bibr" rid="R41" id="139" class="deo:Reference">Loke et al. 2007</xref>). For all performances there exist notations that can be read and interpreted as structure for the process – bearing in mind that the process is a concrete instance of the envisioned process and will be different every time and with every new performer (which may make a new artist’s performance enjoyable even if you have heard the piece many times before).<marker type="page" number="15"/><marker type="block"/> Based on these analogies, it makes sense to characterize processual material as structural representations framing processes, emphasizing that it requires knowledge to ‘see’ the process when reading the representation. Composers and musi- cians hear the music when reading the scores; dancers and choreographers feel the dance when they read the choreography; actors and directors experience the story and the characters when reading the manuscript or storyboard; programmers see the computational process when reading program code and systems designers see the system behaviour when reading the system description. Working with processual material thus implies working with representations of process abstractions, recog- nizing that the concretization of the process will be formed by the situational circumstances (see e.g. <xref ref-type="bibr" rid="R26" id="143" class="deo:Reference">Harper 1987</xref>; goodwin 1997). A good abstraction works for all relevant types of concrete circumstances. It is interesting to bring improvisation into the debate, as seemingly unruly behaviour. However, <xref ref-type="bibr" rid="R6" id="144" class="deo:Reference">Becker (2000)</xref> has observed that most improvising is ‘not quite so inventive as the language we use’ and jam sessions have a ‘very strict eti- quette’ that says that, for example, the ‘number of choruses the first player played set the standard others should follow. To play more would be rude, pushy, self- aggrandizing; to play less hinted that the first player had gone too far and, worse, that the following players who played less had less to say’ (<xref ref-type="bibr" rid="R6" id="145" class="deo:Reference">Becker 2000</xref>: 171). Theatre sport (a group of actors who gets some of their role-play specifics from the audience in the moment of acting) also follows certain rules of improvisation. Improvisation is thus just another set of rules, opening up for a limited set of variations – just like some computer applications open up for a larger set of user input or include a greater variety of responses to user input – both creating more variation but within frames. processual design is to arrange for processes to unfold in particular ways. It seems to make sense to talk about digital design as the composition of processual structures to larger processual structures that can be realized with different symbolic values materializing different process experiences for (and with) users.<marker type="block"/> Digital design deals with both the electrical processes allowing you to use you phone and the processes you engage in when using your phone. ‘When we call a process a computational process, we mean that we are ignoring the physical nature of the process and instead focusing on the information content.’ (<xref ref-type="bibr" rid="R24" id="148" class="deo:Reference">Hailperin et al. 1999</xref>: x). If you worry about ‘the current carrying capacity of the copper wire’ (p. x) when you use your phone, your focus is on the electrical rather than the computational process. Digital design deals with concrete abstractions of processes and their conditions (the data). Some abstractions seem to require knowledge about the concretizations of the abstraction in digitized form, e.g., in order to create an ade- quate sound or good musical presentation process you need to know about digital representation of sounds.<marker type="page" number="16"/><marker type="block"/> Stolterman argues that the basic material for building digital systems is bits (<xref ref-type="bibr" rid="R10" id="152" class="deo:Reference">Stolterman 2006</xref>; <xref ref-type="bibr" rid="R10" id="153" class="deo:Reference">Blevis et al. 2006</xref>), <xref ref-type="bibr" rid="R58" id="154" class="deo:Reference">Vallgårda and Redström (2007)</xref> that it is the composite of electrical voltages and other materials (e.g. textiles) that constitutes the digital material. Acknowledging their physical focus, I still maintain that it is the abstractions composed into a general machine that characterises computers as products and thus constitutes the building materials in digital design. I suggest seeing the digital material as concrete abstractions of processes, addressed at different levels of concretization. This view refers back to the view represented in <xref ref-type="bibr" rid="R24" id="155" class="deo:Reference">Hailperin et al. (1999)</xref> – and many, many other computer science books – that abstracting processes is the basic skill of the digital designer. We need, however, to maintain that digital design can be carried out addressing different levels of concretization though digital design surprisingly often requires us to traverse several levels. One example is the design of a door-opening device: key cards that use magnetic strips as the key and add sound as a feedback to the user to signal correct or faulty card use. To make the sound easy to hear, the wavelength most easily detected by the human ear is chosen (3,000 Hz), also enabling the use of the smallest loudspeaker 9 . Similar need for detailed material knowledge can be found at all levels of digital design, from interface design that chooses a particular blue background colour for ease of reading for dyslexic users (<xref ref-type="bibr" rid="R21" id="156" class="deo:Reference">Fjuk et al. 2006</xref>), to the design of the capacity of an electronic circuit to match the battery’s capacity so that the device does not get over heated when activated. In line with this, among the challenges of designing the ipod is making the very thin battery which, while providing enough power without overheating, also solves the legal, power-related and technical (storage, interface etc) issues necessary for realising the iTunes web site (<xref ref-type="bibr" rid="R47" id="157" class="deo:Reference">Moggridge 2007</xref>). The ipod and its properties is a re-formation and re-configuration of (some of) the actors in music practices, providing a form that gives the ipod its identity and meaning – illustrating the complexity and range of a digital design by including the service infrastructure provided by iTunes and the aesthetically pleasing entry point to that service: the ipod. The content and meaning of the ipod crosses any layered model of the digital artefact. The meaning of the ipod includes all concretization levels; it makes no sense to distinguish between software and hardware when they both cross the ipod artefact and the iTunes service – and the combination of them. With reference to music as a practice, it also makes no sense to single out the ‘content’ or ‘meaningware’ as separate from the apparatus in which it has its existence. <xref ref-type="bibr" rid="R62" id="158" class="deo:Reference">Whalley and Barley (1997)</xref> confirm that ‘technicians work at the empirical interface between a world of physical objects and a world of symbolic representations’ (p. 47). They claim that technicians act as ‘the link between a larger system of work and the materials on which the system depends’ and that ‘the materials of relevance may be hardware, software, micro organisms, the human body, a manufacturing process, or a variety of other physical systems’ depending on the context.<marker type="page" number="17"/><marker type="block"/> The properties of the ipod are a result of design practices, where the fascination for the pieces, the materials, the small parts and their solutions can drive development of the overall design result: the ipod. Design includes the practices of tedious processes of getting the technical solution right, insisting that the idea will work, 10 and processes of bricolage, utilizing existing materials to achieve what you want. 11 gelernter (1998) reflects such practices in his emphasis on the joy of programming.<marker type="block"/> The concrete abstractions with which we work in digital design can be seen as belonging to different levels of concretization (<xref ref-type="bibr" rid="R49" id="165" class="deo:Reference">Mörtberg 2001</xref>; <xref ref-type="bibr" rid="R14" id="166" class="deo:Reference">Bratteteig 2004</xref>), or as packages of ‘processed bits’ made into higher level logical pieces of hardware– software. Think, for example, of the carpenter who works with boards made of wood, or the tailor, who works with yarn and cloth of wool or cotton. Carpenters and tailors know about the processes of making cloth or boards from wool and cotton – or birch and teak – and about conventions for using particular types of cloth or boards (like 2 × 4 for building scaffolding or tweed for a suit) even if they do not do this preparation themselves. The building up of ‘packages’ of digital logic into larger logical units – or abstract processes composed into higher level abstract processes – enable us to apply digital logic at the design process by black-boxing system pieces so that we do not always need to worry about their internal composition, and can focus on the whole design as well as the details. The layering also makes it more difficult to distinguish between the materials and objects. Earlier, I referred to timber as an example of being both a product of the sawmill and a material for the carpenter, illustrating the difficulty of distinguishing between materials and products. The blurring is even more present in composite materials, especially when the composition is fabricated to allow new forms. Levels of design encourages the packaging of increasingly larger pieces of digital logic to be out- sourced during design, as well as sold as pieces to be easily tailored to the use context through integration and modification of variables (grinter 1995, 1998). It is tempting to compare the levels of concretization to the layers of a building construction suggested by <xref ref-type="bibr" rid="R12" id="167" class="deo:Reference">Brand (1994)</xref>, where he distinguishes between the layers by reference to the rate of changing the layer, ranging from the site where the building stands to the stuff that the people living in the building buy, change, rearrange and throw away. 12 Also, different types of professional expertise are involved in building and changing the different layers: carpenters, electricians, plumbers etc.<marker type="page" number="18"/><marker type="block"/> The distinction between tools and materials is particularly ambiguous in digital design. In his discussion of the construction of human–computer interfaces considered as a craft, <xref ref-type="bibr" rid="R65" id="175" class="deo:Reference">Wroblewski (1991)</xref> says that ‘[a]ll partially finished work acts both as a tool and material’ (p. 6) and also that ‘[t]he software craftsman works in a virtual toolsmith’s shop, where all materials can become tools, and all tools are raw materials’ (p. 11).<marker type="block"/>  <xref ref-type="bibr" rid="R45" id="178" class="deo:Reference">McCullough (1998)</xref> introduces the term ‘digital craft’ in exploring how computer- aided design can be seen as a development of craft skills. He emphasises the dema- terialized and symbolic nature of computers and thus how interpretational skills become more important. ‘Common sense becomes visual sense’ (<xref ref-type="bibr" rid="R45" id="179" class="deo:Reference">McCullough 1998</xref>: 46): we read images rather than feel the artefact; the hand becomes less important as the kinaesthetic and tactile sensitivity of hand skills is replaced with interpretations of representations; where the formal properties are partly in the representation and partly in the phenomenon represented. Form in the representation can be seen directly; in the same way as graphical language elements often present structure in a distinct way (graphic symbols, ‘boxes and lines’, indentation in texts). McCullough suggests that the activity of seeing the form in the phenomenon represented is analytical, and emphasizes representational aspects of the language (system architecture, logical structures such as class structures and hier- archies of subclasses, interface properties). Designing with digital (electronic) abstractions makes us focus on the quantifiable aspects of a phenomenon, and makes representations that can be subject to calculations and processing. Representations stand in for something else – but after some time, the original reference may be forgotten and the representation itself gains the status as the real thing (e.g. money). Working with representations is the work of interpretation and meaning-making. Digital representations can also, however, be processed, presenting a model of the design result (Bjerknes and Bratteteig 1987). <xref ref-type="bibr" rid="R40" id="180" class="deo:Reference">Laumann (2005)</xref> describes a process of creating a recording of a song. He documents the states that the song goes through, including the manipulation of sounds on his pc by means of the recording studio software. He reads the visual representations of the sound and manipulates the visual representations, cutting and pasting different recordings into one in order to get the sound he wants on the final version to be printed as the record. The skill to read the sound visualisation can be compared to reading musical scores: he hears the sound from seeing the visualisation (Fig. 5.3). The design processes result in material forms that cross the contexts of design and use – and cross the concretization and abstraction layers of a digital system. <xref ref-type="bibr" rid="R4" id="181" class="deo:Reference">Barad (2003)</xref> discusses the relation between materiality and signification: materiality is discursive (i.e., material phenomena are inseparable from the apparatuses of bodily production: matter emerges out of and includes as part of its being the ongoing<marker type="page" number="19"/><marker type="block"/> reconfiguring of boundaries), just as discursive practices are always already material (i.e., they are ongoing material (re)configurings of the world) (<xref ref-type="bibr" rid="R4" id="188" class="deo:Reference">Barad 2003</xref>: 822). Barad argues against the representationalism present in software engineering and other representational crafts. She bases her argumentation on Butler’s concept of ‘becoming’ and insists that action and speaking are inseparable, that language is an act, and that we cannot not communicate (see also <xref ref-type="bibr" rid="R64" id="189" class="deo:Reference">Winograd and Flores 1986</xref>). The meaning of an artefact includes both the conceptual and the material – what <xref ref-type="bibr" rid="R5" id="190" class="deo:Reference">Barad (2007)</xref> calls material-discursive. <xref ref-type="bibr" rid="R22" id="191" class="deo:Reference">Fujimura (1996)</xref> similarly discusses how scientific knowledge is translated into methods and tools in scientific practices. Digital material is discursive-material composites, and new digital materials expand the boundaries of symbolic, representations and processes – we can dress in digital textiles, take digital medication, make 3D prints (<xref ref-type="bibr" rid="R15" id="192" class="deo:Reference">Capjon 2004</xref>), get weather reports from opening a bottle or see the traffic density displayed as a shift in colour on our desk lamp (e.g. <xref ref-type="bibr" rid="R30" id="193" class="deo:Reference">Ishii et al. 2001</xref>; <xref ref-type="bibr" rid="R31" id="194" class="deo:Reference">Ishii and Ullmer 1997</xref>), and earn money in digital (virtual) worlds. The symbolic representations become more haptic and the haptic more symbolic.<marker type="block"/> The concept ‘material’ comes from Latin materia: matter, and refers to the ‘ele- ments, constituents, or substances of which something is composed or can be made’ (<xref ref-type="bibr" rid="R59" id="197" class="deo:Reference">Webster 2008</xref>). ‘Matter’ means physical substance: ‘material substance that occupies space, has mass, and is composed predominantly of atoms consisting of protons, neutrons, and electrons, that constitutes the observable universe, and that is interconvertible with energy’. Matter, however, has a double meaning and refers also to facts. ‘Materiality’ refers to ‘the quality or state of being material’ (<xref ref-type="bibr" rid="R59" id="198" class="deo:Reference">Webster 2008</xref>). As a design material, the digital characterizes digital design. I have argued that digital material can be seen as concrete abstractions of processes, addressed at different levels of concretization. This view builds on seeing abstraction of processes as the basis in digital design (<xref ref-type="bibr" rid="R24" id="199" class="deo:Reference">Hailperin et al. 1999</xref>). A levelled view also addresses the view that digital materials at the lowest level are electric voltages (Vallgårda and<marker type="page" number="20"/><marker type="block"/>  <xref ref-type="bibr" rid="R58" id="203" class="deo:Reference">Redström 2007</xref>), which at this level can be combined with other physical materials (like textiles) as computational composites. I also appreciate the view that a levelled view introduces a problem of distinguishing between materials and objects (<xref ref-type="bibr" rid="R44" id="204" class="deo:Reference">Mazé and Redström 2005</xref>; <xref ref-type="bibr" rid="R25" id="205" class="deo:Reference">Hallnäs and Redström 2006</xref>). Linking concretization levels with types of design enables us to acknowledge different kinds of design work ranging from nano-electronics to tailoring of systems to a specific organizational context (cf. <xref ref-type="bibr" rid="R12" id="206" class="deo:Reference">Brand 1994</xref>). However, we also should recognize that digital design often addresses different levels of concretization, and that a good design requires that we combine innovation at several levels (cf. the ipod/iTunes). The work of digital design is concerned with the building of working systems by imagining its use – not to be confused with the use perspective of the user in the use experience (see <xref ref-type="bibr" rid="R44" id="207" class="deo:Reference">Mazé and Redström 2005</xref>). Digital design utilizes the properties of digital materials – building concrete abstractions of processes that fit use activities at the physical as well as on the symbolic level. The discursive-material nature of digital design changes the world in a material as well as a discursive sense. ‘Computer programs are unlike any other material, and the form of craftsmanship in software will surely be unique’ says Wroblewski (1991: 17). I agree with him that ‘[f]undamentally, the materials shape the craft’ (p. 17): digital design is profoundly shaped by the characteristics of the digital (<xref ref-type="bibr" rid="R14" id="208" class="deo:Reference">Bratteteig 2004</xref>). Digital design opens up for new possibilities and for things that embody these possibilities. The materials and tools we use in design influence which possibilities we see and choose to realize. Design is thinking with materials, and the discursive-material digital material brings the head and hand even closer to each other. Seeing digital design as thinking with concrete abstractions of processes, at different levels of concretizations as well as across them, suggests that digital designers should understand their material in a way that enable them to move between levels of concretization and choose the right abstraction for the actual design process as it evolves in time. The many levels of digital design open up for many different competencies being involved in imagining and building possible futures.</region>
        <outsider class="DoCO:TextBox" type="page_nr" id="103" page="10" column="1">156</outsider>
        <outsider class="DoCO:TextBox" type="header" id="104" page="11" column="1">A MATTER OF DIgITAL MATERIALITy</outsider>
        <region class="unknown" id="108" page="11" column="1">Computers as Material</region>
        <outsider class="DoCO:TextBox" type="page_nr" id="111" page="11" column="1">157</outsider>
        <outsider class="DoCO:TextBox" type="header" id="112" page="12" column="1">ExpLORIng DIgITAL DESIgn</outsider>
        <region class="unknown" id="117" page="12" column="1">Concrete Abstractions</region>
        <region class="unknown" id="119" page="12" column="1">8 CpU central processing unit.</region>
        <outsider class="DoCO:TextBox" type="page_nr" id="120" page="12" column="1">158</outsider>
        <outsider class="DoCO:TextBox" type="header" id="121" page="13" column="1">A MATTER OF DIgITAL MATERIALITy</outsider>
        <region class="unknown" id="128" page="13" column="1">Material for Process Design</region>
        <outsider class="DoCO:TextBox" type="page_nr" id="131" page="13" column="1">159</outsider>
        <outsider class="DoCO:TextBox" type="header" id="132" page="14" column="1">ExpLORIng DIgITAL DESIgn</outsider>
        <region class="unknown" id="137" page="14" column="1">Processual Material</region>
        <outsider class="DoCO:TextBox" type="page_nr" id="141" page="14" column="1">160</outsider>
        <outsider class="DoCO:TextBox" type="header" id="142" page="15" column="1">A MATTER OF DIgITAL MATERIALITy</outsider>
        <region class="unknown" id="147" page="15" column="1">Digital Material</region>
        <outsider class="DoCO:TextBox" type="page_nr" id="150" page="15" column="1">161</outsider>
        <outsider class="DoCO:TextBox" type="header" id="151" page="16" column="1">ExpLORIng DIgITAL DESIgn</outsider>
        <region class="unknown" id="160" page="16" column="1">9 A 3.000 Hertz tone of 0 dB is the softest sound that a normal human ear can hear.</region>
        <outsider class="DoCO:TextBox" type="page_nr" id="161" page="16" column="1">162</outsider>
        <outsider class="DoCO:TextBox" type="header" id="162" page="17" column="1">A MATTER OF DIgITAL MATERIALITy</outsider>
        <region class="unknown" id="164" page="17" column="1">Levels of Digital Design</region>
        <region class="unknown" id="172" page="17" column="1">10 <xref ref-type="bibr" rid="R29" id="169" class="deo:Reference">Hård (1994)</xref> documents how engineers try hundreds of times to make their idea work. 11 <xref ref-type="bibr" rid="R26" id="170" class="deo:Reference">Harper (1987)</xref> documents the knowledges and skills of a ‘bricoleur’, cf. also <xref ref-type="bibr" rid="R17" id="171" class="deo:Reference">Ciborra (2002)</xref>. 12 Brand distinguishes between site, structure, skin, services, space plan, and stuff.</region>
        <outsider class="DoCO:TextBox" type="page_nr" id="173" page="17" column="1">163</outsider>
        <outsider class="DoCO:TextBox" type="header" id="174" page="18" column="1">ExpLORIng DIgITAL DESIgn</outsider>
        <region class="unknown" id="177" page="18" column="1">Close to the Material</region>
        <outsider class="DoCO:TextBox" type="page_nr" id="183" page="18" column="1">164</outsider>
        <outsider class="DoCO:TextBox" type="header" id="184" page="19" column="1">A MATTER OF DIgITAL MATERIALITy</outsider>
        <region class="DoCO:FigureBox" id="F5.3">
          <image class="DoCO:Figure" src="62ef.page_019.image_02.png" thmb="62ef.page_019.image_02-thumb.png"/>
          <caption class="deo:Caption" id="187" page="19" column="1">Fig. 5.3 Sound image of guitar recording: bounced recording on top, processed with Freeze Selected Tracks on bottom (<xref ref-type="bibr" rid="R40" id="186" class="deo:Reference">Laumann 2005</xref>: 89, Fig. 10.21)</caption>
        </region>
        <region class="unknown" id="196" page="19" column="1">Digital Matters in Design</region>
        <outsider class="DoCO:TextBox" type="page_nr" id="201" page="19" column="1">165</outsider>
        <outsider class="DoCO:TextBox" type="header" id="202" page="20" column="1">ExpLORIng DIgITAL DESIgn</outsider>
      </section>
      <section class="deo:Acknowledgements">
        <h1 class="DoCO:SectionTitle" id="210" confidence="possible" page="20" column="1">Acknowledgments</h1>
        <region class="DoCO:TextChunk" id="211" confidence="possible" page="20" column="1">Thanks to Christina Mörtberg and Erik Stolterman for long-lasting discussions about the material side of computing. Thanks also to gisle Hannemyr for pointing out the distinction between digital and electronic.</region>
      </section>
      <section class="DoCO:Bibliography">
        <h1 class="DoCO:SectionTitle" id="212" confidence="possible" page="20" column="1">References</h1>
        <ref-list class="DoCO:BiblioGraphicReferenceList">
          <ref rid="R1" class="deo:BibliographicReference" id="213" confidence="possible" page="20" column="1">Andersen, n.E., Kensing, F., Lassen, M., Lundin, J., Mathiassen, L., Munk-Madsen, A., &amp; Sørgaard, p. (1990). Professional systems development – Experiences, ideas, and action. Upper Saddle River: prentice-Hall.</ref>
          <ref rid="R2" class="deo:BibliographicReference" id="214" confidence="possible" page="20" column="1">Andersen, p.B. (1986). Semiotics and informatics: computers as media. In p. Ingwersen et al</ref>
          <ref class="deo:BibliographicReference" id="215" confidence="possible" page="20" column="1">(Eds.), Information technology and information use. Towards a unified view of information and information technology (pp. 64–97). London: Taylor graham.</ref>
          <ref rid="R3" class="deo:BibliographicReference" id="218" confidence="possible" page="21" column="1">Andersen, p.B., &amp; Bratteteig, T. (Eds.). (1989). Computers and language at work. The relevance of language and language use in development and use of computer systems. The SyDpOL programme, Department of Informatics, University of Oslo.</ref>
          <ref rid="R4" class="deo:BibliographicReference" id="219" confidence="possible" page="21" column="1">Barad, K. (2003). posthumanist performativity. Toward an understanding of how matter comes to matter. Signs: Journal of Women in Culture and Society, 28(2), 801–831.</ref>
          <ref rid="R5" class="deo:BibliographicReference" id="220" confidence="possible" page="21" column="1">Barad, K. (2007). Meeting the universe halfway: Quantum physics and the entanglement of matter and meaning. Durhamn &amp; London: Duke University press.</ref>
          <ref rid="R6" class="deo:BibliographicReference" id="221" confidence="possible" page="21" column="1">Becker, H. (2000). The etiquette of improvisation. Mind, Culture, and Activity, 7(3), 171–176.</ref>
          <ref rid="R7" class="deo:BibliographicReference" id="222" confidence="possible" page="21" column="1">Berg, M. (1997). On distribution, drift and the electronic medical record: some tools for a sociol- ogy of the formal. In J. A. Hughes, W. prinz, T. Rodden &amp; K. Schmidt (Eds.), Proceedings of the fifth conference on European Conference on Computer-Supported Cooperative Work (ECSCW’97) Lancaster, UK (pp. 141–156). Dordrecht: Kluwer Academic.</ref>
          <ref rid="R8" class="deo:BibliographicReference" id="223" confidence="possible" page="21" column="1">Bjerknes, g., &amp; Bratteteig, T. (1987b). perspectives on description tools and techniques in system development. In p. Docherty, K. Fuchs-Kittowski, p. Kolm &amp; L. Mathiassen (Eds.), System design for human development and productivity: Participation and beyond (pp. 319–330). Amsterdam: north-Holland.</ref>
          <ref rid="R9" class="deo:BibliographicReference" id="224" confidence="possible" page="21" column="1">Bjerknes, g., &amp; Bratteteig, T. (1988a). The memoirs of two survivors – or evaluation of a computer system for cooperative work. In I. greif (Ed.), Proceedings of the 1988 ACM conference on Computer-supported cooperative work, portland, Oregon, USA (pp. 167–177). new york: ACM.</ref>
          <ref rid="R10" class="deo:BibliographicReference" id="225" confidence="possible" page="21" column="1">Blevis, E., Lim, y. K., &amp; Stolterman, E. (2006.). Regarding software as a material of design. Design research society In Proceedings of Wonderground – the 2006 Design Research Society International Conference, Lisbon, portugal.</ref>
          <ref rid="R11" class="deo:BibliographicReference" id="226" confidence="possible" page="21" column="1">Bowker, g., &amp; Star, S.L. (1999). Sorting things out: Classification and its consequences. Cambridge: MIT press.</ref>
          <ref rid="R12" class="deo:BibliographicReference" id="227" confidence="possible" page="21" column="1">Brand, S. (1994). How buildings learn: What happens after they’re built. new york: penguin.</ref>
          <ref rid="R13" class="deo:BibliographicReference" id="228" confidence="possible" page="21" column="1">Bratteteig, T. (2002). Bringing gender Issues to Technology Design. In Floyd, C., Kelkar, g., Kramarae, C., Limpangog, C. &amp; Klein-Franke, S. (Eds.), Feminist challenges in the information age. Opladen: Verlag Leske + Budrich.</ref>
          <ref rid="R14" class="deo:BibliographicReference" id="229" confidence="possible" page="21" column="1">Bratteteig, T. (2004). Making change. Dealing with relations between design and use. Diss. Oslo: Department of Informatics, Faculty of Mathematics and natural Sciences, University of Oslo.</ref>
          <ref rid="R15" class="deo:BibliographicReference" id="230" confidence="possible" page="21" column="1">Capjon, J. (2004). Trial-and-error-based innovation: Catalysing shared engagement in design, Diss.Oslo: Oslo School of Architecture and Design.</ref>
          <ref rid="R16" class="deo:BibliographicReference" id="231" confidence="possible" page="21" column="1">Checkland, p. (1981). Systems thinking, systems practice. Chichester: John Wiley &amp; Sons.</ref>
          <ref rid="R17" class="deo:BibliographicReference" id="232" confidence="possible" page="21" column="1">Ciborra, C. (2002). The labyrinths of information: Challenging the wisdom of systems. Oxford: Oxford University press.</ref>
          <ref rid="R18" class="deo:BibliographicReference" id="233" confidence="possible" page="21" column="1">Dijkstra, E.W. (1976). A discipline of programming. Englewood Cliffs: prentice Hall.</ref>
          <ref rid="R19" class="deo:BibliographicReference" id="234" confidence="possible" page="21" column="1">Dourish, p. (2001). Where the action is: The foundations of embodied interaction. Cambridge: MIT press.</ref>
          <ref rid="R20" class="deo:BibliographicReference" id="235" confidence="possible" page="21" column="1">Dourish, p., &amp; Button, g. (1998). Technomethodology: paradoxes and possibilities. In M. J. Tauber (Ed.), Proceedings of the SIGCHI conference on Human factors in computing systems: common ground (CHI ’96), Vancouver, British Columbia, Canada (pp. 19–26). new york: ACM press.</ref>
          <ref rid="R21" class="deo:BibliographicReference" id="236" confidence="possible" page="21" column="1">Fjuk, A., Kaasbøll, J., &amp; groven, A.-K. (2006). Improvements of teaching and tools for learning object-orientation. In A. Fjuk, A. Karahasanovic, &amp; J. J. Kaasbøll (Eds.), Comprehensive object-oriented learning: The learner’s perspective (pp. 205–220). Santa Rosa: Informing Science press.</ref>
          <ref rid="R22" class="deo:BibliographicReference" id="237" confidence="possible" page="21" column="1">Fujimura, J. (1996). Crafting science. A sociohistory of the quest for the genetics of cancer. Cambridge: Harvard University press.</ref>
          <ref class="deo:BibliographicReference" id="238" confidence="possible" page="21" column="1">glette, K. (2009): personal communication, Dept. of Informatics, University of Oslo.</ref>
          <ref class="deo:BibliographicReference" id="239" confidence="possible" page="21" column="1">gelernter, D. (1998). Machine beauty. Elegance and the heart of technology. new york: Basic Books.</ref>
          <ref class="deo:BibliographicReference" id="240" confidence="possible" page="21" column="1">goodwin, C. (1997). The blackness of black: Color categories as situated practice, resnick. In L. B. Resnick, R. Säljö, C. pontecorvo &amp; B. Burge (Eds.), Discourse, tools and reasoning; essays on situated cognition (pp. 111–140). Berlin: Springer.</ref>
          <ref rid="R23" class="deo:BibliographicReference" id="243" confidence="possible" page="22" column="1">gramazio, F., &amp; Kohler, M. (2007). Digital materiality, talk at Oslo Arkitektforening. October 18. 2007.</ref>
          <ref class="deo:BibliographicReference" id="244" confidence="possible" page="22" column="1">greenfield, A. (2006). Everyware: The dawning age of ubiquitous computing. Berkeley: new Riders publ.</ref>
          <ref class="deo:BibliographicReference" id="245" confidence="possible" page="22" column="1">grinter, R.E. (1995). Using a configuration management tool to coordinate software development. In n. Comstock &amp; C. Ellis (Eds.), Proceedings of conference on organizational computing systems (COCS ’95) (pp. 168–177). new york: ACM press.</ref>
          <ref class="deo:BibliographicReference" id="246" confidence="possible" page="22" column="1">grinter, R. E. (1998). Recomposition: putting it all back together again. In I. greif (Ed.), Proceedings of the 1998 ACM conference on computer supported cooperative work (CSCW ’98) Seattle Washington, USA (pp. 393–403). new york: ACM.</ref>
          <ref rid="R24" class="deo:BibliographicReference" id="247" confidence="possible" page="22" column="1">Hailperin, M., Kaiser, B., &amp; Knight, K. (1999). Concrete abstractions. pacific grove, CA: Brooks/ Cole publ. Co.</ref>
          <ref rid="R25" class="deo:BibliographicReference" id="248" confidence="possible" page="22" column="1">Hallnäs, L., &amp; Redström, J. (2006). Interaction design: foundations, experiments. Borås: The Interactive Institute.</ref>
          <ref rid="R26" class="deo:BibliographicReference" id="249" confidence="possible" page="22" column="1">Harper, D. (1987). Working knowledge: Skill and community in a small shop. Berkeley: University of California press.</ref>
          <ref rid="R27" class="deo:BibliographicReference" id="250" confidence="possible" page="22" column="1">Henderson, K. (1999). On line and on paper. Cambridge: MIT press.</ref>
          <ref rid="R28" class="deo:BibliographicReference" id="251" confidence="possible" page="22" column="1">Hutchins, E. (1995). Cognition in the wild. Cambridge, MA: MIT press.</ref>
          <ref rid="R29" class="deo:BibliographicReference" id="252" confidence="possible" page="22" column="1">Hård, M. (1994). Technology as practice: local and global closure processes in diesel-engine design. Social Studies of Science, 24(2), 549–85.</ref>
          <ref rid="R30" class="deo:BibliographicReference" id="253" confidence="possible" page="22" column="1">Ishii, H., Mazalek, A., &amp; Lee, J. ( 2001). Bottles as a minimal interface to access digital information. In J. Jacko &amp; A Sears (Eds.), Proceedings of the SIGCHI conference on Human factors in computing systems (CHI ‘01), Seattle, Washington (pp. 187–188). new york: ACM pres.</ref>
          <ref rid="R31" class="deo:BibliographicReference" id="254" confidence="possible" page="22" column="1">Ishii, H., &amp; Ullmer, B. (1997). Tangible bits: towards seamless interfaces between people, bits and atoms. In S. pemberton (Ed.), Proceedings of the SIGCHI conference on Human factors in computing systems (CHI ‘97), georgia, United States (pp. 234–241). new york: ACM press.</ref>
          <ref rid="R32" class="deo:BibliographicReference" id="255" confidence="possible" page="22" column="1">Jacucci, g., &amp; Wagner, I. (2007). performative roles of materiality for collective creativity. In B. Schneiderman, g. Fischer, E. giaccardi &amp; M. Eisenberg (Eds.), Proceedings of the 6th ACM SIGCHI conference on Creativity &amp; Cognition (C&amp;C ’07), Washington, DC, USA (pp. 73–82). new york: ACM press.</ref>
          <ref rid="R33" class="deo:BibliographicReference" id="256" confidence="possible" page="22" column="1">Juul-nielsen, J. (1984). personal communication at Risør Trebåtbyggeri Wooden Boat Building, norway.</ref>
          <ref rid="R34" class="deo:BibliographicReference" id="257" confidence="possible" page="22" column="1">Kernighan, B. W. &amp; pike, R. (1999). The practice of programming. Simplicity, clarity, generality, Reading. Massachuesetts: Addison-Wesley.</ref>
          <ref rid="R35" class="deo:BibliographicReference" id="258" confidence="possible" page="22" column="1">Knuth, D. (1973). The art of computer programming vol. 3: Sorting and searching, Reading. Massachusetts: Addison-Wesley.</ref>
          <ref rid="R36" class="deo:BibliographicReference" id="259" confidence="possible" page="22" column="1">Kramer, J. (2007). Is abstraction the key to computing? Communications of ACM, 50(4), 37–42.</ref>
          <ref rid="R37" class="deo:BibliographicReference" id="260" confidence="possible" page="22" column="1">Lanzara, g.F. (1983). The design process: Frames, metaphors and games. In U. Briefs, C. Ciborra &amp; L. Schneider (Eds.), Systems design for, with and by the user (pp. 29–40) Amsterdam: north-Holland.</ref>
          <ref rid="R38" class="deo:BibliographicReference" id="262" confidence="possible" page="22" column="1">Larssen, A.T., Loke, L., Robertson, T., &amp; Edwards, J. (2004). Understanding movement as input for interaction – A study of two EyetoyTM games. In Proeedings of OZCHI 2004 (1–10). Available at: <ext-link ext-link-type="uri" href="http://www.ozchi.org/proceedings/2004/index.html." id="261">http://www.ozchi.org/proceedings/2004/index.html.</ext-link></ref>
          <ref rid="R39" class="deo:BibliographicReference" id="263" confidence="possible" page="22" column="1">Latour, B. (1999). Pandora’s hope: Essays on the reality of science studies. Cambridge, MA: Harvard University press.</ref>
          <ref rid="R40" class="deo:BibliographicReference" id="264" confidence="possible" page="22" column="1">Laumann, K. (2005). Men er det kreativt? Digitale verktøy i kreative prosesser (In norwegian: But is it creative? Digital tools in creative processes) MA thesis. Oslo:Department of Informatics, University of Oslo.</ref>
          <ref rid="R41" class="deo:BibliographicReference" id="265" confidence="possible" page="22" column="1">Loke, L., Larssen, A. T., Robertson, T., &amp; Edwards, J. (2007). Understanding movement for interaction design: Frameworks and approaches. Personal and Ubiquitous Computing, 11(8), 691–701.</ref>
          <ref rid="R42" class="deo:BibliographicReference" id="266" confidence="possible" page="22" column="1">Löwgren, J., &amp; Stolterman, E. (1998). Design av informationsteknik – materialet utan egenskaper [In Swedish]. Lund: Studentlitteratur.</ref>
          <ref rid="R43" class="deo:BibliographicReference" id="268" confidence="possible" page="22" column="1">Maeda, J. (2000). <email id="267">Maeda@media</email>. London: Thomas &amp; Hudson.</ref>
          <ref rid="R44" class="deo:BibliographicReference" id="271" confidence="possible" page="23" column="1">Mazé, R., &amp; Redström, J. (2005). Form and the computational object. Digital Creativity, 16(1), 7–18.</ref>
          <ref rid="R45" class="deo:BibliographicReference" id="272" confidence="possible" page="23" column="1">McCullough, M. (1998). Abstracting craft. The practiced digital hand. Cambridge: MIT press.</ref>
          <ref rid="R46" class="deo:BibliographicReference" id="273" confidence="possible" page="23" column="1">Minsky, M. (1967). Computation: Finite and infinite machines. Englewood Cliffs: prentice-Hall.</ref>
          <ref rid="R47" class="deo:BibliographicReference" id="274" confidence="possible" page="23" column="1">Moggridge, B. (2007). Designing interactions. Cambridge: MIT press.</ref>
          <ref rid="R48" class="deo:BibliographicReference" id="275" confidence="possible" page="23" column="1">Musil, R. (1996). The man without qualities. new york: Vintage books.</ref>
          <ref rid="R49" class="deo:BibliographicReference" id="276" confidence="possible" page="23" column="1">Mörtberg, C. (2001). Abstracting, quantifying, classifying, simplyfying, standardising, building hierachies: What are the systems designers sorting out? The conference Information Technology, Transnational Democracy and Gender. Ronneby, Sweden.</ref>
          <ref class="deo:BibliographicReference" id="277" confidence="possible" page="23" column="1">nygaard, K. (1986). program Development as a Social Activity. In Information processing 86: Proceedings of the IFIP 10th World Computer Congress, Dublin, Ireland (pp. 189–198). Amsterdam: north-Holland.</ref>
          <ref class="deo:BibliographicReference" id="278" confidence="possible" page="23" column="1">nygaard, K. (2002). Foreword. In C. Ciborra, The labyrinths of information: Challenging the wisdom of systems. Oxford: Oxford University press.</ref>
          <ref rid="R50" class="deo:BibliographicReference" id="279" confidence="possible" page="23" column="1">Schön, D. (1983): The reflective practitioner. How professionals think in action. new york: Basic Books</ref>
          <ref rid="R51" class="deo:BibliographicReference" id="280" confidence="possible" page="23" column="1">Sevaldson, B. (2005). Developing digital design techniques: Investigations on creative design computing. Diss. Oslo: Oslo School of Architecture and Design.</ref>
          <ref rid="R52" class="deo:BibliographicReference" id="281" confidence="possible" page="23" column="1">Star, S.L. (1991). Invisible work and silenced dialogues in representing knowledge. In I. Eriksson, B.A. Kitchenham, &amp; K. Tijdens (Eds.), Women, work and computerization: understanding and overcoming bias in work and education (pp. 81–92). Amsterdam: north Holland.</ref>
          <ref rid="R53" class="deo:BibliographicReference" id="282" confidence="possible" page="23" column="1">Stolterman, E. (2006). personal communication.</ref>
          <ref rid="R54" class="deo:BibliographicReference" id="283" confidence="possible" page="23" column="1">Stolterman, E. (2007). Designtänkande (In Swedish: Design Thinking). In Harvard, Åsa &amp; Ilstedt, Sara. (Eds.), Under ytan: en antologi om designforskning [In Swedish: Under the surface: An anthology on design research] (pp. 12–19). Stockholm: Raster Förlag.</ref>
          <ref rid="R55" class="deo:BibliographicReference" id="284" confidence="possible" page="23" column="1">Suchman, L.A. (1994). Do categories have politics? The language/action perspective reconsid- ered. Computer Supported Cooperative Work: The Journal of Collaborative Computing, 2(3), 177–190.</ref>
          <ref rid="R56" class="deo:BibliographicReference" id="285" confidence="possible" page="23" column="1">Suchman, L. A. (2007). Human-machine reconfigurations. Plans and situated actions. Cambridge: Cambridge University press.</ref>
          <ref rid="R57" class="deo:BibliographicReference" id="286" confidence="possible" page="23" column="1">Säljö, R. (2000). Lärande i praktiken. Ett sociokulturellt perspektiv [In Swedish: Learning in practice. A socio-cultural perspective]. Stockholm: prisma Studentlitteratur.</ref>
          <ref rid="R58" class="deo:BibliographicReference" id="287" confidence="possible" page="23" column="1">Vallgårda, A., &amp; Redström, J. (2007). Computational composites. In M. B. Rosson &amp; D: gillmore (Eds.), Proceedings of the SIGCHI conference on human factors in computing systems (CHI ‘07), San Jose CA, USA (pp. 513–522). new york: ACM press</ref>
          <ref rid="R59" class="deo:BibliographicReference" id="288" confidence="possible" page="23" column="1">Webster (2008). Webster dictionary and thesaurus online: www.webster.com. Accessed June 2008.</ref>
          <ref rid="R60" class="deo:BibliographicReference" id="289" confidence="possible" page="23" column="1">Weiser, M., &amp; Brown, J. S. (1997). The coming age of calm technology, In p.J. Denning, &amp; R. M. Metcalfe (Eds.), Beyond calculation: The next fifty years of computing (pp. 75–86). new york: Springer-Verlag.</ref>
          <ref rid="R61" class="deo:BibliographicReference" id="290" confidence="possible" page="23" column="1">Weizenbaum, J. (1976). Computer power and human reason. From judgement to calculation. San Francisco, CA: W. H. Freeman.</ref>
          <ref rid="R62" class="deo:BibliographicReference" id="291" confidence="possible" page="23" column="1">Whalley, p., &amp; Barley, S. R. (1997). Technical work in the division of labor: Stalking the Wily anomaly. In S. R. Barley, &amp; J. Orr (Eds.), Between craft and science: Technical work in the U.S. settings (pp. 23–52). Ithaca: Cornell University press.</ref>
          <ref rid="R63" class="deo:BibliographicReference" id="292" confidence="possible" page="23" column="1">Winograd, T. (1979). Beyond programming languages. Communications of the ACM, 22(7), 391–401.</ref>
          <ref rid="R64" class="deo:BibliographicReference" id="293" confidence="possible" page="23" column="1">Winograd, T., &amp; Flores, F. (1986). Understanding computers and cognition. norwood: Ablex.</ref>
          <ref rid="R65" class="deo:BibliographicReference" id="294" confidence="possible" page="23" column="1">Wroblewski, D.A. (1991). The construction of human–computer interfaces considered as a craft. In J. Karat (Ed.), Taking software design seriously (pp. 1–17). Boston: Academic press.</ref>
          <ref rid="R66" class="deo:BibliographicReference" id="295" confidence="possible" page="23" column="1">Zuboff, S. (1989). In the age of the smart machine: The future of work and power. new york: Basic Books.</ref>
        </ref-list>
        <outsider class="DoCO:TextBox" type="page_nr" id="216" page="20" column="1">166</outsider>
        <outsider class="DoCO:TextBox" type="header" id="217" page="21" column="1">A MATTER OF DIgITAL MATERIALITy</outsider>
        <outsider class="DoCO:TextBox" type="page_nr" id="241" page="21" column="1">167</outsider>
        <outsider class="DoCO:TextBox" type="header" id="242" page="22" column="1">ExpLORIng DIgITAL DESIgn</outsider>
        <outsider class="DoCO:TextBox" type="page_nr" id="269" page="22" column="1">168</outsider>
        <outsider class="DoCO:TextBox" type="header" id="270" page="23" column="1">A MATTER OF DIgITAL MATERIALITy</outsider>
        <outsider class="DoCO:TextBox" type="page_nr" id="296" page="23" column="1">169</outsider>
      </section>
    </body>
  </article>
</pdfx>
