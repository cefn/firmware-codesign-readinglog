<?xml version='1.0' encoding='UTF-8'?>
<pdfx xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://pdfx.cs.man.ac.uk/static/article-schema.xsd">
  <meta>
    <job>f61a6d2d792daac68314ba79292312680c60cf776db5541978868ea4e16571da</job>
    <base_name>62oc</base_name>
    <doi>http://dx.doi.org/10.1145/74334.74346</doi>
    <warning>Original PDF was found to be an image-based/possible OCR document. Output quality may be degraded.</warning>
  </meta>
  <article>
    <front class="DoCO:FrontMatter">
      <outsider class="DoCO:TextBox" type="outsider" id="1">~ C o m p u t e r G r a p h i c s , V o l u m e 23, N u m b e r 3, J u l y 1989</outsider>
      <region class="unknown" id="2">Metamouse: Specifying Graphical Procedures by Example</region>
      <contrib-group class="DoCO:ListOfAuthors">
        <contrib contrib-type="author">
          <name id="3">David L. Maulsby</name>
        </contrib>
        <contrib contrib-type="author">
          <name id="4">lan H. Witten</name>
        </contrib>
        <contrib contrib-type="author">
          <name id="5">Kenneth A. Kittlitz</name>
        </contrib>
      </contrib-group>
      <region class="DoCO:TextChunk" id="6" confidence="possible">K n o w l e d g e Sciences Laboratory, D e p a r t m e n t o f C o m p u t e r Science T h e U n i v e r s i t y o f Calgary, 2500 U n i v e r s i t y D r i v e N W Calgary, Canada T 2 N l N 4</region>
      <abstract class="DoCO:Abstract" id="7">Metamouse is a device enabling the user of a drawing program to specify graphical procedures by supplying example execution traces. The user manipulates objects directly on the screen, creating graphical tools where necessary to help make constraints explicit; the system records the sequence of actions and induces a procedure. Generalization is used both to identify the key features of individual program steps, disregarding coincidental events; and to connect the steps into a program graph, creating loops and conditional branches as appropriate. Metamouse operates within a 2D click-and-drag drafting package, and incorporates a strong model o f the relative imporlance of different types of graphical constraint. Close attention is paid to user interface aspects, and Metamouse helps the user by predicting and performing actions, thus reducing the tedium of repetitive graphical editing tasks.</abstract>
    </front>
    <body class="DoCO:BodyMatter">
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="8" page="1" column="1">OR Categories</h1>
      </section>
      <region class="DoCO:TextChunk" id="9" page="1" column="1">1,2.2 [Artificial Intelligence[ Automatic Programming - program synthesis; 1.2.6 Learning - knowledge acquisition; 1.3.6 [Computer Graphics] Methodology - interaction techniques.</region>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="10" page="1" column="1">Other Keywords and Phrases</h1>
      </section>
      <region class="DoCO:TextChunk" id="11" confidence="possible" page="1" column="1">Geometric constraints, apprenticeship learning.</region>
      <section class="deo:Introduction">
        <h1 class="DoCO:SectionTitle" id="12" page="1" column="1">1 Introduction</h1>
      </section>
      <region class="DoCO:TextChunk" id="13" page="1" column="1">Aesthetically pleasing, visually coherent, meaningful pictures are characterized by the spatial relationships that join components, suggest relative importance, lead the eye through a visual nazTative, and reveal subtle connections. These relationships are called "constraints." Often they compete with each other and must be considered as a group, called a "constraint system." With or without the help of a computer, a graphic artist must manage constraints that may be complex and require compromise or careful ordering to be resolved. A drawing evolves as new objects and constraints are added and as some attributes and constraints change while others remain in force, These elements often interact; for example, changing a text font may require enlarging and re-positioning boxes in a flowchart. Despite the features provided by interactive graphics editors to automate constraints, editing still involves repetitive manual work that requires precision and planning.</region>
      <region class="DoCO:TextChunk" id="14" confidence="possible" page="1" column="1">Permission to copy without fee all or part of this material is granted provided that the copies are not made or distributed for direct commercial advantage, the ACM copyright notice and the title of the publication and its date appear, and notice is given that copying is by permission of the Association for Computing Machinery. To copy otherwise, or to republish, requires a fee and/or specific permission.</region>
      <region class="DoCO:TextChunk" id="15" confidence="possible" page="1" column="2">pC S o cp s ] a. Input parameters: b. Center C on top of P, spandrel S, capital C, move S onto C and pier P. measure overhang, O. S O c. Move O to right end d. Construct triangle of S; put copies of C LRB inside S. and P at O. A L __-~"~"~--__ R H i/ e. Remove S and O. f. Copy capitals to base of piers.</region>
      <region class="DoCO:FigureBox" id="F1">
        <caption class="deo:Caption" id="16" page="1" column="2">Figure 1. Constructing an arch from a rough sketch.</caption>
      </region>
      <region class="DoCO:TextChunk" id="17" page="1" column="2">This paper describes a system that induces picture-editing procedures from execution traces. It observes the user at work, performs a localized analysis of changes in spatial relations to isolate constraints, and matches action sequences to build a state graph that contains conditional branches and loops. Moreover, it induces variables for objects and distinguishes constants from non-deterministic (ie. run-time input) parameters. The system includes a constraint solver to perform the actions it has learned.</region>
      <outsider class="DoCO:TextBox" type="footer" id="18" page="1" column="2">127</outsider>
      <outsider class="DoCO:TextBox" type="footer" id="19" page="1" column="2">Â©1989</outsider>
      <outsider class="DoCO:TextBox" type="footer" id="20" page="1" column="2">ACM-0-89791-312-4/89/007/0127</outsider>
      <outsider class="DoCO:TextBox" type="footer" id="21" page="1" column="2">$00.75</outsider>
      <outsider class="DoCO:TextBox" type="header" id="22" page="2" column="1">(~SGG R A P '89, H Boston, 31 July-4 August, 1989</outsider>
      <region class="unknown" id="23" page="2" column="1">I'll a. Initial placement.</region>
      <region class="unknown" id="24" page="2" column="1">b. Draw line to show relation of hood to stove.</region>
      <region class="DoCO:TextChunk" id="25" confidence="possible" page="2" column="1">d. Move hood to touch</region>
      <region class="unknown" id="26" page="2" column="1">T c. User moves stove to new</region>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="27" page="2" column="1">position.</h1>
        <region class="unknown" id="28" page="2" column="1">[ end of line as in b.</region>
        <region class="DoCO:TextChunk" id="29" confidence="possible" page="2" column="1">f. Hide line.</region>
        <region class="unknown" id="30" page="2" column="1">eoQ 11o I I</region>
        <region class="unknown" id="31" page="2" column="1">e. Stretch stovepipe to touch hood.</region>
        <region class="DoCO:FigureBox" id="F2">
          <caption class="deo:Caption" id="32" page="2" column="1">Figure 2.</caption>
        </region>
        <region class="DoCO:TextChunk" id="33" confidence="possible" page="2" column="1">Maintaining constraints amongst objects.</region>
        <region class="DoCO:TextChunk" id="35" page="2" column="1">A key component of the system is its metaphorical apprentice, Metamouse, an icon that follows the user's actions and represents the focus of attention. The metaphor embodies the s y s t e m ' s limited model of spatial relations: Metamouse is near-sighted but touch sensitive. The user understands that relations at a distance must be constructed, for example by using a line to demonstrate alignment. <marker type="block"/> Section 2 describes some example editing tasks that can be taught to Metamouse. Section 3 discusses research issues and related work. Section 4 describes the current implementation. This is followed, in Section 5, by an evaluation of its performance on the sample tasks.</region>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="36" page="2" column="1">2 Applications</h1>
        <region class="DoCO:TextChunk" id="47" page="2" column="1">Several types of graphical task are appr~opriate for automation by a system such as Metamouse. Primary problems for users are 1) a c h i e v i n g precision, 2) m a i n t a i n i n g integrity of constraints <marker type="column" number="2"/><marker type="block"/> throughout the editing process, and 3) coping with the tedium of repetition, Examples of each type of task are described in detail below.<marker type="block"/>  <xref ref-type="fig" rid="F1" id="40" class="deo:Reference">Figure 1</xref> illustrates the construction of an arch from a sketch of its main components. Initially the artist draws one of the piers, a capital, and the spandrel's extents box. The capital is then centered over the pier and the spandrel box is moved down onto it with the desired lateral overhang. After m e a s u r i n g the overhang, the artist duplicates the pier and capitat at the other end of the arch. A triangular spandrel is then constructed inside the box. Finally, plinths are added to the base of the piers. This editing sequence specifies a procedure for constructing a type of arch from four graphical inputs: pier, capital, spandrel box, and overhang. The construction requires precision but need only be done once.<marker type="block"/> F i g u r e 2 illustrates constraints that must be m a i n t a i n e d throughout the long-term editing of a picture. If the stove is m o v e d , the ventilation hood must be re-positioned above the burners, and the stove-pipe must be stretched or shortened to reach the h o o d from the wall exit. The editing s e q u e n c e proceeds as follows. First, the user expresses the constraint between burners and hood by drawing a tie-line between them. The user then m o v e s the stove to its new position. The constraints are re-established as follows. The tie is m o v e d to touch the burner as before. The hood is m o v e d to contact the tie, and the stove-pipe is stretched to the hood. Finally, the tie-line is r e m o v e d (or hidden). This task illustrates the use of an auxiliary object (the tie) to express a constraint. O t h e r constraints stem from the role that touches play in terminating actions. This procedure could be invoked manually whenever the stove is moved, but it would be desirable to "attach" it to the operation of m o v i n g the stove, which would automatically trigger it.<marker type="block"/>  <xref ref-type="fig" rid="F3" id="43" class="deo:Reference">Figure 3</xref> illustrates a repetitive editing operation or an animation sequence. A teapot moves up and down rows of cups laid out on a buffet, filling them with tea, and then returns to its initial position. Since cups are not perfectly aligned, a row is defined by a line passing through the center of one cup and touching the others. A procedure looping on rows and cups would allow us to change these numbers without re-scripting. M o r e o v e r , a constraint-oriented description of the teapot's path (eg. " m o v e rightward to next cup" rather than " m o v e to (x, y)") w o u l d tolerate adjustments to the layout. A program for this task is shown in <xref ref-type="fig" rid="F4" id="44" class="deo:Reference">Figure 4</xref>.<marker type="block"/> The teapot's initial position is marked with a slash and the pot moves to the table's nearest corner. For each iteration of the main loop, the row-line advances upwards to the center of some cup - - a sweep-selection method [<xref ref-type="bibr" rid="R19" id="46" class="deo:Reference">19</xref>]. The pot m o v e s to the r o w - l i n e ' s near end. For each cycle of the inner loop, the pot advances to meet the following constraints: i) the spout is at the center of some cup, C; ii) C is touching the row-line; and iii) C was not already visited. At the end of a row, some of these constraints fail. Note that the constraints ensure that the pot moves in opposite directions in successive rows. The main loop ends when no cups remain in the row-line's upward path. The teapot then returns to its initial position marker via the buffet's perimeter and, finally, the marker is removed.</region>
        <region class="DoCO:FigureBox" id="Fx38">
          <image class="DoCO:Figure" src="62oc.page_002.image_02.png" thmb="62oc.page_002.image_02-thumb.png"/>
        </region>
        <outsider class="DoCO:TextBox" type="footer" id="48" page="2" column="2">128</outsider>
        <region class="DoCO:FigureBox" id="Fx49">
          <image class="DoCO:Figure" src="62oc.page_003.image_03.png" thmb="62oc.page_003.image_03-thumb.png"/>
        </region>
        <outsider class="DoCO:TextBox" type="header" id="50" page="3" column="1">@* Computer Graphics, Volume 23, Number 3, July 1989</outsider>
        <region class="DoCO:FigureBox" id="Fx51">
          <image class="DoCO:Figure" src="62oc.page_003.image_04.png" thmb="62oc.page_003.image_04-thumb.png"/>
          <image class="DoCO:Figure" src="62oc.page_003.image_05.png" thmb="62oc.page_003.image_05-thumb.png"/>
        </region>
        <region class="DoCO:TextChunk" id="52" confidence="possible" page="3" column="1">a. The scene is set. b. Planned path.</region>
        <region class="DoCO:FigureBox" id="Fx53">
          <image class="DoCO:Figure" src="62oc.page_003.image_09.png" thmb="62oc.page_003.image_09-thumb.png"/>
        </region>
        <region class="unknown" id="54" page="3" column="1">e. Move row-line R up to first row.</region>
        <region class="DoCO:FigureBox" id="Fx55">
          <image class="DoCO:Figure" src="62oc.page_003.image_10.png" thmb="62oc.page_003.image_10-thumb.png"/>
        </region>
        <region class="unknown" id="56" page="3" column="1">8 f. Move teapot up to near end of R.</region>
        <region class="DoCO:FigureBox" id="Fx57">
          <image class="DoCO:Figure" src="62oc.page_003.image_12.png" thmb="62oc.page_003.image_12-thumb.png"/>
        </region>
        <region class="unknown" id="58" page="3" column="1">0 i. R up to next row; pot up to R.</region>
        <region class="unknown" id="59" page="3" column="1">/ j. Scan leftwards along 2nd row.</region>
        <region class="DoCO:FigureBox" id="Fx60">
          <image class="DoCO:Figure" src="62oc.page_003.image_14.png" thmb="62oc.page_003.image_14-thumb.png"/>
        </region>
        <region class="unknown" id="61" page="3" column="1">/ m . End of row</region>
        <region class="DoCO:FigureBox" id="Fx62">
          <image class="DoCO:Figure" src="62oc.page_003.image_15.png" thmb="62oc.page_003.image_15-thumb.png"/>
        </region>
        <region class="DoCO:TextChunk" id="64" confidence="possible" page="3" column="1">n. No more rows; remove R. <xref ref-type="fig" rid="F3" id="63" class="deo:Reference">Figure 3</xref>. The tea-party animation procedure.</region>
        <region class="DoCO:TextChunk" id="65" confidence="possible" page="3" column="1">The power of a system like Metamouse lies in its ability to isolate constraints and predict actions. The user performs only a few steps of the tea-party task. Once Metamouse detects repetition, it predicts subsequent actions until it cannot meet the constraints or until the user objects. It observes the teapot move to the second cup and predicts all actions for the rest of row 1. When it fails to find a fourth cup, it asks the user to take over. The user moves the row-line; Metamouse recognizes this action and hence predicts the move-and-pour sequences for the second and third rows.</region>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="66" confidence="possible" page="3" column="1">3 Background and Related Work</h1>
        <region class="DoCO:FigureBox" id="Fx67">
          <image class="DoCO:Figure" src="62oc.page_003.image_26.png" thmb="62oc.page_003.image_26-thumb.png"/>
          <image class="DoCO:Figure" src="62oc.page_003.image_28.png" thmb="62oc.page_003.image_28-thumb.png"/>
          <image class="DoCO:Figure" src="62oc.page_003.image_31.png" thmb="62oc.page_003.image_31-thumb.png"/>
        </region>
        <region class="DoCO:TextChunk" id="71" confidence="possible" page="3" column="1">Automation of graphical editing tasks has followed two streams of development: interactive tools to help users with constraints; and graphics-oriented programming systems. Interactive help began with Sketchpad [<xref ref-type="bibr" rid="R22" id="68" class="deo:Reference">22</xref>], which used iterative numerical relaxation to resolve several types of constraint among object parameters. A similar approach is adopted in [<xref ref-type="bibr" rid="R27" id="69" class="deo:Reference">27</xref>], which lets users compose constraints based on least-squares relaxation. Recent research has also produced a system that automatically selects and applies appropriate construction tools [<xref ref-type="bibr" rid="R4" id="70" class="deo:Reference">4</xref>]. These systems offer simple, appealing interfaces to a restricted set of constraint-satisfaction methods.</region>
        <region class="DoCO:FigureBox" id="Fx72">
          <image class="DoCO:Figure" src="62oc.page_003.image_06.png" thmb="62oc.page_003.image_06-thumb.png"/>
          <image class="DoCO:Figure" src="62oc.page_003.image_07.png" thmb="62oc.page_003.image_07-thumb.png"/>
        </region>
        <region class="unknown" id="73" page="3" column="2">c. Alternative path.</region>
        <region class="DoCO:FigureBox" id="Fx74">
          <image class="DoCO:Figure" src="62oc.page_003.image_11.png" thmb="62oc.page_003.image_11-thumb.png"/>
          <image class="DoCO:Figure" src="62oc.page_003.image_08.png" thmb="62oc.page_003.image_08-thumb.png"/>
        </region>
        <region class="unknown" id="75" page="3" column="2">/ g. Move pot to first cup; pour.</region>
        <region class="unknown" id="76" page="3" column="2">- d. Constructions for procedure. 000 L!LEL 0 / h. Move potto near end of row-line.</region>
        <region class="unknown" id="77" page="3" column="2">/ I. R, pot to 3rd row.</region>
        <region class="DoCO:FigureBox" id="Fx78">
          <image class="DoCO:Figure" src="62oc.page_003.image_13.png" thmb="62oc.page_003.image_13-thumb.png"/>
          <image class="DoCO:Figure" src="62oc.page_003.image_16.png" thmb="62oc.page_003.image_16-thumb.png"/>
        </region>
        <region class="unknown" id="79" page="3" column="2">p. Remove marker.</region>
        <region class="unknown" id="80" page="3" column="2">k. Row finished; pot to near end of R. @ o. Return pot to marker.</region>
        <region class="DoCO:FigureBox" id="Fx81">
          <image class="DoCO:Figure" src="62oc.page_003.image_17.png" thmb="62oc.page_003.image_17-thumb.png"/>
          <image class="DoCO:Figure" src="62oc.page_003.image_18.png" thmb="62oc.page_003.image_18-thumb.png"/>
          <image class="DoCO:Figure" src="62oc.page_003.image_19.png" thmb="62oc.page_003.image_19-thumb.png"/>
          <image class="DoCO:Figure" src="62oc.page_003.image_21.png" thmb="62oc.page_003.image_21-thumb.png"/>
          <image class="DoCO:Figure" src="62oc.page_003.image_22.png" thmb="62oc.page_003.image_22-thumb.png"/>
        </region>
        <region class="DoCO:TextChunk" id="84" confidence="possible" page="3" column="2">End-user programming is one way to support repetitive, customized editing operations and the invention of arbitrary constraint systems. Given that most users are non-programmers, research has focussed on graphical methods, often based on geometric construction [5, 7, 8, 171. With their graphical interfaces and use of examples, these systems greatly simplify program construction, but users must still work with abstractions. When programming with L.E.G.O. or a macro facility such as [<xref ref-type="bibr" rid="R24" id="82" class="deo:Reference">24</xref>], the user declares loops and conditional branches, albeit by menu selection. Users of ThingLab must conceive an algebraic model of constraints in order to produce equational networks that define them [<xref ref-type="bibr" rid="R5" id="83" class="deo:Reference">5</xref>].</region>
        <region class="DoCO:FigureBox" id="Fx85">
          <image class="DoCO:Figure" src="62oc.page_003.image_23.png" thmb="62oc.page_003.image_23-thumb.png"/>
          <image class="DoCO:Figure" src="62oc.page_003.image_24.png" thmb="62oc.page_003.image_24-thumb.png"/>
          <image class="DoCO:Figure" src="62oc.page_003.image_27.png" thmb="62oc.page_003.image_27-thumb.png"/>
          <image class="DoCO:Figure" src="62oc.page_003.image_29.png" thmb="62oc.page_003.image_29-thumb.png"/>
          <image class="DoCO:Figure" src="62oc.page_003.image_30.png" thmb="62oc.page_003.image_30-thumb.png"/>
          <image class="DoCO:Figure" src="62oc.page_003.image_32.png" thmb="62oc.page_003.image_32-thumb.png"/>
        </region>
        <region class="DoCO:TextChunk" id="89" confidence="possible" page="3" column="2">An alternative is to observe the user at work and infer loops and branches, constants and variables. A number of systems for programming by demonstration have been produced [2, 9, I 1, 16, 211. Programs are constructed incrementally from several execution traces. Only Noddy, a robot teaching system, relies completely on automatic generalization [<xref ref-type="bibr" rid="R2" id="86" class="deo:Reference">2</xref>], but it performs an exponentially complex induction of functions and is incapable of coping with errors. SmallStar [<xref ref-type="bibr" rid="R9" id="87" class="deo:Reference">9</xref>] operates in a very general desktop domain but requires the user to identify variables and their type and value range. Peridot [<xref ref-type="bibr" rid="R16" id="88" class="deo:Reference">16</xref>] infers value ranges and certain spatial relations (such as âcentered within boxâ), but not loops or branches.</region>
        <region class="unknown" id="90" page="3" column="2">129</region>
        <outsider class="DoCO:TextBox" type="header" id="91" page="4" column="1">(~SIGGRAPH '89,Boston, 31 July-4August, 1989</outsider>
        <region class="unknown" id="92" page="4" column="1">) f ) () -@ J () J ( + J ,) (</region>
        <region class="DoCO:TextChunk" id="93" confidence="possible" page="4" column="1">J</region>
        <region class="unknown" id="94" page="4" column="1">Â¢</region>
        <region class="unknown" id="95" page="4" column="1">11 fails</region>
        <region class="unknown" id="96" page="4" column="1">( 5~ J</region>
        <region class="DoCO:FigureBox" id="F4">
          <caption class="deo:Caption" id="97" page="4" column="1">Figure 4.</caption>
        </region>
        <region class="DoCO:TextChunk" id="98" confidence="possible" page="4" column="1">Procedure learned for tea-party animation.</region>
        <region class="DoCO:TextChunk" id="103" confidence="possible" page="4" column="1">Inferring a program is not easy, but induction of complex picture transformations from examples of input and output is intractable [<xref ref-type="bibr" rid="R3" id="99" class="deo:Reference">3</xref>]. M o r e o v e r , systems of equations to represent these transformations would be numerically unstable and difficult to solve. Thus, it is better to induce a sequence of simpler transformations. Drawing is inherently procedural, often systematically ordered with each step governed by very few constraints [<xref ref-type="bibr" rid="R26" id="100" class="deo:Reference">26</xref>]. Nonetheless, it is hard to induce procedures even from simple steps. Typical users do not always construct (or know how to construct) the relevant measurements and relations, but work instead by visual inspection. In effect, their drawings include invisible objects, as illustrated in <xref ref-type="fig" rid="F5" id="101" class="deo:Reference">Figure 5</xref>. Curve-matching methods such as those employed in graphical search and replace [<xref ref-type="bibr" rid="R10" id="102" class="deo:Reference">10</xref>] are not sufficient for inducing patterns in traces that contain invisible objects. On the other hand, examining the screen for implicit spatial relations clearly involves an enormous amount of search and vastly expands the space of hypotheses for generalization. Therefore the system should isolate a small neighborhood of attention, and restrict itself to explicit relations of touch. It follows that user must specify these constructively.</region>
        <region class="DoCO:FigureBox" id="Fx104">
          <image class="DoCO:Figure" src="62oc.page_004.image_33.png" thmb="62oc.page_004.image_33-thumb.png"/>
        </region>
        <region class="unknown" id="105" page="4" column="2">1. move to touch (Table.bottom.left) 2. draw-line R to touch (Table.bottom.right) 3. move to touch (Pot.top.right) 4. draw-line M to touch (Pot.bottom.left) 5. move to grasp (Pot.center) 6. drag Pot to touch (Pot.center : Table.bottom.left) 7. move to grasp (R.midpt) 8. drag R upwards to touch (R.line : F.center), where F is first cup found by scanning upwards 9. move to grasp (Pot.center) 10. drag Pot upwards to touch (Pot.center : R.endpt) 11. drag Pot horizontally to touch (Pot.center : C.center), where C is first cup found by scanning horizontally 12. move to touch (C.top.right) 13. draw-line to touch (C.bottom.left) ; ie. pour tea! 14. move to grasp (Pot.center) 15. drag Pot to touch (Pot.center : R.endpt) 16. delete R 17. move to grasp (Pot.center) 18. drag Pot to touch (Pot.center : Table.bottom) 19. drag Pot to touch (Pot.center : M.midpt) 20. move to grasp (M.midpt) 21. delete M</region>
        <region class="DoCO:TextChunk" id="107" confidence="possible" page="4" column="2">To worsen matters, a preliminary study of MacDraw users performing a set of graphical tasks [<xref ref-type="bibr" rid="R13" id="106" class="deo:Reference">13</xref>] revealed that execution traces are riddled with extraneous and erroneous actions. Users not only m a d e mistakes, but were o b s e r v e d p e r f o r m i n g experiments or simply fidgeting. The order of actions varied greatly within the first several iterations of loops.</region>
        <region class="unknown" id="108" page="4" column="2">D[3 I I a. Initial position.</region>
        <region class="unknown" id="109" page="4" column="2">D D DI I b. Final position. c. Explanation.</region>
        <region class="DoCO:FigureBox" id="F5">
          <caption class="deo:Caption" id="110" page="4" column="2">Figure 5.</caption>
        </region>
        <region class="DoCO:TextChunk" id="111" confidence="possible" page="4" column="2">An invisible object as a constraint.</region>
        <outsider class="DoCO:TextBox" type="footer" id="112" page="4" column="2">130</outsider>
        <outsider class="DoCO:TextBox" type="header" id="113" page="5" column="1">@ ~ Computer Graphics, Volume 23, Number 3, July 1989</outsider>
        <region class="unknown" id="114" page="5" column="1">Teacher</region>
        <region class="unknown" id="115" page="5" column="1">Observe ~</region>
        <region class="unknown" id="116" page="5" column="1">Graphical Action</region>
        <region class="DoCO:TextChunk" id="117" confidence="possible" page="5" column="1">Touches, etc. ~</region>
        <region class="DoCO:TextChunk" id="118" confidence="possible" page="5" column="1">~Â¢</region>
        <region class="unknown" id="119" page="5" column="1">Induce</region>
        <region class="DoCO:TextChunk" id="120" confidence="possible" page="5" column="1">Variables ~Â¢</region>
        <region class="unknown" id="121" page="5" column="1">Induce Constraints</region>
        <region class="DoCO:TextChunk" id="122" confidence="possible" page="5" column="1">_</region>
        <region class="DoCO:TextChunk" id="123" confidence="possible" page="5" column="1">Â¢</region>
        <region class="unknown" id="124" page="5" column="1">Match Action</region>
        <region class="DoCO:TextChunk" id="125" confidence="possible" page="5" column="1">Form Loop, Branch or</region>
        <region class="unknown" id="126" page="5" column="1">Sequence~l Â¢</region>
        <region class="unknown" id="127" page="5" column="1">I Solve ~1 Constraints</region>
        <region class="unknown" id="128" page="5" column="1">Predict Action</region>
        <region class="DoCO:FigureBox" id="F6">
          <caption class="deo:Caption" id="129" confidence="possible" page="5" column="1">Figure 6.</caption>
        </region>
        <region class="DoCO:TextChunk" id="130" confidence="possible" page="5" column="1">Main components and data flow of system.</region>
        <region class="DoCO:TextChunk" id="132" confidence="possible" page="5" column="1">These elicitation problems are well-known in human-human communication, and rules of interaction between human teachers and pupils have been formulated as "felicity conditions" [<xref ref-type="bibr" rid="R25" id="131" class="deo:Reference">25</xref>], four of which apply when inducing graphical procedures: correctness, show-work (demonstrate execution rather than just input and output), no-invisible-objects (express constraints by graphical construction), and focus-activity (eliminate extraneous actions).</region>
        <region class="DoCO:TextChunk" id="135" confidence="possible" page="5" column="1">These conditions are difficult for untrained teachers to satisfy. The Metamouse system uses a metaphorical apprentice, intensive interaction, and generalization to help the teacher. The Metamouse is the system's focus of attention; only touch relations involving it or an object it is grasping are examined. The system tries possible generalizations and predicts actions as early as possible during a teaching session, to eliminate free variation and extraneous actions and also to reduce errors. It can learn alternative actions and re-order their precedence in order to overcome errors. It has an internal model of graphical constraints and asks for explanation when an action seems arbitrary, ie. insufficiently constrained. The metaphor encourages the teacher to demonstrate constraints and adopt an intentional stance toward the system [<xref ref-type="bibr" rid="R6" id="133" class="deo:Reference">6</xref>] rather than understand the details of its constraint and generalization models. Whether or not the metaphor succeeds is an experimental question; some pilot tests have yielded encouraging results [ <xref ref-type="bibr" rid="R14" id="134" class="deo:Reference">14</xref>].</region>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="136" page="5" column="1">4 The Metamouse System</h1>
        <region class="DoCO:FigureBox" id="Fx137">
          <image class="DoCO:Figure" src="62oc.page_005.image_34.png" thmb="62oc.page_005.image_34-thumb.png"/>
        </region>
        <region class="DoCO:TextChunk" id="139" confidence="possible" page="5" column="2">only by the presence of the Metamouse icon: there are no special programming commands except to start and stop Metamouse. The flow of data through the system is sketched in <xref ref-type="fig" rid="F6" id="138" class="deo:Reference">Figure 6</xref>. When the teacher performs a drawing operation, the system records it and augments it with explanatory features, matching objects with variables and identifying probable constraints on the cursor's new position. Metamouse moves to the point at which the action terminated and highlights object parts involved in constraints. The augmented action is then matched with program steps previously learned. If a match is found, the learning module may conjecture a loop or joining of branches. It then predicts subsequent actions to confirm this. Predicted actions are performed by a constraint solver. Metamouse autonomously moves and highlights objects, and continues to do so until the teacher rejects a prediction or the constraint solver fails.</region>
        <region class="unknown" id="140" page="5" column="2">The next two subsections give brief accounts of the graphics</region>
        <region class="DoCO:TextChunk" id="141" confidence="possible" page="5" column="2">application and the Metamouse interface. Following that we examine individual modules of the learning system.</region>
        <region class="unknown" id="142" page="5" column="2">a. Nearedge of box. b. Near vertex of two lines.</region>
        <region class="DoCO:TextChunk" id="144" confidence="possible" page="5" column="2"> <xref ref-type="fig" rid="F7" id="143" class="deo:Reference">Figure 7</xref>. Highlighting distinguished points near cursor (arrowhead) while rubber-banding a line.</region>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="145" page="5" column="2">4.1 A.Sq</h1>
        <region class="DoCO:TextChunk" id="149" confidence="possible" page="5" column="2">Constraints are easier to identify and resolve if primitive operations have few degrees of freedom. Thus a drawing program with a point-and-click user interface, like MacDraw [<xref ref-type="bibr" rid="R12" id="146" class="deo:Reference">12</xref>], is suitable. Our drawing program, A.Sq (after the protagonist of Flatland [<xref ref-type="bibr" rid="R1" id="147" class="deo:Reference">1</xref>]), emulates MacDraw but at present includes only box and line primitives. The user draws and transforms primitive objects by moving iconic handles (as in MacDraw). These handles delimit parts of objects distinguished by the learning system. They appear whenever the cursor (or Metamouse) approaches them, as illustrated in <xref ref-type="fig" rid="F7" id="148" class="deo:Reference">Figure 7</xref>.</region>
        <region class="DoCO:TextChunk" id="153" confidence="possible" page="5" column="2">The choice of primitives and operators has a great impact on the user's expression of constraints. Languages such as L.E.G.O. [<xref ref-type="bibr" rid="R8" id="150" class="deo:Reference">8</xref>] and the primitives of [<xref ref-type="bibr" rid="R17" id="151" class="deo:Reference">17</xref>] provide a basis for traditional "ruler-and-compass" methods of construction. A.Sq's primitive object types P, auxiliary objects A, modes of operation M, user- interface commands U, and internal operators 1, are summarized in <xref ref-type="table" rid="T1" id="152" class="deo:Reference">Table 1</xref> below.</region>
        <region class="DoCO:TextChunk" id="154" confidence="possible" page="5" column="2">At present, the drawing program is relatively simple yet rich enough to study programming-by-example issues. No conceptual difficulties are envisaged in extending the learning system to cope with new primitives such as points, polygons, ellipses, and splines, since only an object's distinguished parts have any significance. We also expect to be able to accommodate new operations such as rotation, grouping, and coloring.</region>
        <outsider class="DoCO:TextBox" type="footer" id="155" page="5" column="2">Our learning system works within an interactive 2D graphics editor. "Teaching mode" is distinguished from normal editing</outsider>
        <outsider class="DoCO:TextBox" type="footer" id="156" page="5" column="2">131</outsider>
        <outsider class="DoCO:TextBox" type="header" id="157" page="6" column="1">'L~,~[~SIG</outsider>
        <outsider class="DoCO:TextBox" type="header" id="158" page="6" column="1">GRAPH '89, B o s t o n , 31 J u l y - 4 August, 1989</outsider>
        <region class="DoCO:TextChunk" id="159" confidence="possible" page="6" column="1">p â¢ box (bottom-left, top-right) line (endptl, endpt2) point (x, y) action (operator, startpt, endpt, object)</region>
        <region class="DoCO:TextChunk" id="160" confidence="possible" page="6" column="1">A: CurrentPoint : point PreviousPoint : point CurrentObject : {box, line } DisplayList : list of {box, line} ActionList : list of actions</region>
        <region class="DoCO:TextChunk" id="161" confidence="possible" page="6" column="1">M: create-lines create-boxes transform-objects</region>
        <region class="DoCO:TextChunk" id="162" confidence="possible" page="6" column="1">U: set-mode (mode e M) set-point (PreviousPoint, CurrentPoint, x, y) delete-object (CurrentObject) undo (ActionList)</region>
        <region class="DoCO:TextChunk" id="163" confidence="possible" page="6" column="1">I: create-line (CurrentObject, PreviousPoint, CurrentPoint, DisplayList) create-box (CurrentObject, PreviousPoint, CurrentPoint, DisplayList) translate-handle-of-object-to-point (handle, CurrentObject, CurrentPoint)</region>
        <region class="DoCO:TextChunk" id="164" confidence="possible" page="6" column="1">Table l. Elements of the A.Sq drawing program.</region>
        <region class="unknown" id="165" page="6" column="1">4.2 Metamouse</region>
        <region class="DoCO:TextChunk" id="168" page="6" column="1">The focus of the teacher's attention is the Metamouse, Basil, a graphical turtle in the tradition of [<xref ref-type="bibr" rid="R18" id="166" class="deo:Reference">18</xref>]. Prior to working with Basil, teachers skim a bio-sheet, excerpted in <xref ref-type="fig" rid="F8" id="167" class="deo:Reference">Figure 8</xref>. When the user of A.Sq senses an opportunity to automate a task, she calls Basil from his den. Rather than f o l l o w the cursor continuously, the turtle icon moves to CurrentPoint at the closure</region>
        <region class="unknown" id="169" page="6" column="1">My name is Basil and as you can see I'm a turtle. You teach me repetitive and finicky tasks. I learn by acting as your apprentice - - I follow you around till I think I know what you'll do next, then I do it for you.</region>
        <region class="unknown" id="170" page="6" column="1">If I guessed wrong HI undo it and wait for you to show me what's right. I only predict after I see you do something you've already</region>
        <region class="unknown" id="171" page="6" column="1">taught me. I can draw lines and boxes and carry them by their iconic handles (grasping with my jaws).</region>
        <region class="unknown" id="172" page="6" column="1">Although I have a good memory, I don't see too well, Instead I work mainly by feel. I remember which parts - - handles and line segments - - are connected,</region>
        <region class="unknown" id="173" page="6" column="1">I'm touch-sensitive only at my snout but I can sense contact between what I'm grasping and anything else.</region>
        <region class="unknown" id="181" page="6" column="1">~i~~i:i ~!::i:: ;: ~.:i~:::!; ~:?!: ~!!: =~::~:i i :i:(:~::i:i,~~.:ii~::::: ~:~ ~.: :~ ! :::!:. i!~: :!; i ::~ iiii ::.i: i~:i:i:?.:~i::,~i :i ~,"~:i:: :!: ::::i :~Yi:,~, :' ~i =.' :: !!~i :~~ii ~;:::i~i;:::: ,~ ~i::.iif:751 i: :~:!i~:: ~~: <email id="174">:;</email>:~ ::! ~:.~~::~!! :: Ã­ii~i :::,: ij !':i:~!~i::::~:i i :!:::ii:::::i:::::~ ~: =:<email id="175">:;</email> i::<email id="176">i:;</email>~:?i ;~, ::~ :i ?,~;~;~ ~i:i ~:::::~: :':~i:' <email id="177">:;</email>i :!!~;! !i ::<email id="178">:;</email>:::i:::,~:::=~ i !:.::i :i: ~;?.::ii~, i: :,i~: ~~~ ~:: ~::~::=.::~i ~, :: ': ~:, :~' i::~ !~::~~ii:: ~-::i :ii ~:,i:.i,~:::.:i :::.:i )~ :,~;~ :~: :,;~:, :~ ::.~:i~:: :.~i i!?~::::::i ::,::~,:::~~! ~ :~!!~ ~ i! <email id="179">~i:;</email>:i::! :::~!:::::iii::.!i i~~!:::::~ !:.i :,i?,::iii ?:i ii i:,,~;~:,~::.: ~ ::::.<email id="180">:;</email> ::,:'~:~::i ::!~~-:i:i~ i~'! i;i::!~ili 'i ill:.:, ~i ~i:.::.i,i~, i: :iii ~:</region>
        <region class="DoCO:FigureBox" id="F8">
          <caption class="deo:Caption" id="182" page="6" column="1">Figure 8.</caption>
        </region>
        <region class="DoCO:TextChunk" id="183" confidence="possible" page="6" column="1">Excerpts from description of Metamouse given to teachers.</region>
        <region class="DoCO:FigureBox" id="Fx184">
          <image class="DoCO:Figure" src="62oc.page_006.image_35.png" thmb="62oc.page_006.image_35-thumb.png"/>
        </region>
        <region class="DoCO:TextChunk" id="193" page="6" column="2">of each A.Sq operation. If the system finds no tactile constraint, Basil asks the user whether position or distance are inputs, constants, or should have been constructed. Should the teacher suspend recording temporarily, Basil withdraws into his shell. In all other respects the A.Sq commands operate as usual. <marker type="block"/> Metamouse is described as near-sighted but touch-sensitive; the teacher understands that only touch relations involving Basil or an object in his grasp are analyzed for constraints. The system highlights relevant parts of objects, as illustrated in <xref ref-type="fig" rid="F9" id="187" class="deo:Reference">Figure 9</xref>. T o u c h e s considered important (see Section 4.5 below) are colored red, others yellow. Associated with each touch is a triangular button; selecting this toggles it from red to yellow or vice versa, so the teacher can override the system's decision.<marker type="block"/> A touch relation is defined as touch ( O b j e c t l . P a r t I : Object2.Part2), where Part i indicates some part of Object i. Distinguished parts are handles vertices, mid-points) and the line segments between them.<marker type="block"/> The use of variables allows different objects to assume a particular role in successive tterations of actions [<xref ref-type="bibr" rid="R20" id="191" class="deo:Reference">20</xref>]. The learning system substitutes variables for objects in touch relations. Variables are defined as variable-definition (Name, Type, Value) structures maintained in a global symbol table. Type is one of {box, line}.<marker type="block"/> References to variables in touch relations are defined as variable- reference (Variable, Valuation-flag) tuples, where Variable points to the definition, and Valuation-flag indicates whether the constraint solver should use the variable's current value or try to assign a new one. The variable inducer looks back through recent steps of the example action trace for previous occurrences of the object; if none is found, the Valuation-flag is set to indicate that the solver must search for it.</region>
        <region class="unknown" id="186" page="6" column="2">4.3 Touch Relations</region>
        <region class="unknown" id="190" page="6" column="2">4.4 Variables</region>
        <region class="unknown" id="194" page="6" column="2">If I have to find, say a box, I set off in the general direction you've taught me (up, down, left, right) until I bump into one. But if you want me to be more selective, give me a tool to carry and teach me to move until it touches.</region>
        <region class="unknown" id="195" page="6" column="2">I can't learn directly hew things should nottouch - - I mean how they should be separated. Instead you should give me tools to separate them.</region>
        <region class="unknown" id="196" page="6" column="2">When you want to teach me, choose "Time for a lesson!" from the Basil menu. If you want to interrupt the lesson say "Take a nap." When you don't agree with what I do, tap me and HI undo it. When I don't know what to do I'll ask you to show me.</region>
        <region class="unknown" id="197" page="6" column="2">So in general you teach me by doing the task yourself, using some extra tools to help me see patterns by feel.</region>
        <region class="unknown" id="198" page="6" column="2">Hope you enjoy teaching me!</region>
        <outsider class="DoCO:TextBox" type="footer" id="199" page="6" column="2">132</outsider>
        <outsider class="DoCO:TextBox" type="header" id="200" page="7" column="1">@ ~ Computer Graphics, Volume 23, Number 3, July 1989 u l i ul â¢</outsider>
        <region class="unknown" id="201" page="7" column="1">B</region>
        <region class="unknown" id="202" page="7" column="1">grasp (B.mid.left)</region>
        <region class="unknown" id="203" page="7" column="1">grasp (L.midpt) touch (L.midpt : B.left) touch (L.endpt : B.top.mid)</region>
        <region class="unknown" id="204" page="7" column="1">Legend [] vertex or mid-point 4 important touch</region>
        <region class="unknown" id="205" page="7" column="1">..... ~~~= irrelevant touch</region>
        <region class="DoCO:FigureBox" id="F9">
          <caption class="deo:Caption" id="206" page="7" column="1">Figure 9.</caption>
        </region>
        <region class="DoCO:TextChunk" id="207" confidence="possible" page="7" column="1">Feedback from Metamouse, highlighting touch relations.</region>
        <region class="unknown" id="208" page="7" column="1">4.5 Constraints</region>
        <region class="DoCO:TextChunk" id="210" page="7" column="1">Isolating relevant constraints from the great many that hold in any given situation is, of necessity, a heuristic procedure. When searching for and transforming objects, the constraint solver is governed by touch relations and Basil's path of movement. The constraint inducer examines touch feedback obtained after each step of the trace. It weeds out trivial or irrelevant touches; the survivors comprise the postcondition of a program step. <marker type="block"/> Although all A.Sq drawing and transformation operators are based on translating CurrentPoint in 2-D display space, user actions occur in a model space containing objects with numerous parts, and in the "activity space" in which several alternative actions may be possible at any given time. Thus Basil operates with multiple degrees of freedom (and hence constraint) in the selection of actions and their parameters. Touch relations have 6 degrees of freedom, 3 on each item: selection of object, part, and position within part.</region>
        <region class="unknown" id="212" page="7" column="1">T :4:<email id="211">:;</email></region>
        <region class="unknown" id="213" page="7" column="1">a. Contact T ignored as overdetermined,</region>
        <region class="unknown" id="214" page="7" column="1">b. Use of T to detect a square.</region>
        <region class="DoCO:FigureBox" id="F10">
          <caption class="deo:Caption" id="215" page="7" column="1">Figure 10.</caption>
        </region>
        <region class="DoCO:TextChunk" id="216" confidence="possible" page="7" column="1">A useful overdetermined constraint.</region>
        <region class="DoCO:TextChunk" id="231" page="7" column="1">A constraint is expressed as constraint (Data, Class, Used), where Data is a touch relation, path, etc., Class is a degree of constraint, and Used is a flag indicating whether this constraint is deemed relevant. The constraint inducer assigns each touch relation to one of four classes. "Determining" constraints select a specific object, part and position within it for each item of a touch relation. For example, in <xref ref-type="fig" rid="F3" id="217" class="deo:Reference">Figure 3</xref>, contact between Basil's snout (a point) and the teapot's center handle is determining. "Strong" constraints leave one choice free, as in touch(teapot- spout.endpt 2 : C.center), where C is a cup found by scanning along the row. " W e a k " relations leave more degrees of freedom.<marker type="column" number="2"/><marker type="block"/> freedom. "Trivial" touches, like grasping the end-point of the row-line after it is drawn, follow from the definition of A.Sq operators and afford no constraint whatsoever.<marker type="block"/> If the classifier finds a determining constraint, it marks other touch relations as "'overdetermined;" they are not needed to derive a new position for CurrentPoint. Such touches may help select an action. They can distinguish otherwise similar situations, as shown in <xref ref-type="fig" rid="F10" id="225" class="deo:Reference">Figure 10</xref>. Here, the touch between point T and the rectangle seems irrelevant, since contact between Box.bottom.left and M e t a m o u s e ' s snout determines the move. But touch (Line.endpt : Box.top)versus touch (Line.endpt : Box.top.right) distinguishes a rectangle from a square. The teacher clicks on the relation icon to change its status.<marker type="block"/> The classifier can detect a lack of sufficient constraint for viable solutions. If all touches are only strong or weak, Basil's path is made a weak constraint with the caveat that the solver may have to relax it. In case of a total lack of touch constraint, Basil asks the user to indicate which of a set of standard tacit constraints, such as input or constant position, applies to this action.<marker type="block"/> Determining, strong, and weak constraints are c o n s i d e r e d relevant; o v e r d e t e r m i n e d , trivial and sustained touches are ignored. Such heuristic rules can provide at most a best guess as to the teacher's precise intentions. As mentioned in Section 4.3 and illustrated in F i g u r e 10, the t e a c h e r can o v e r r i d e Metamouse's decision to ignore a touch relation.<marker type="block"/> The learning algorithm takes the linear sequence of steps performed by the teacher and builds a directed graph containing branches and loops. It operates interactively, so that each new step is integrated into the graph as it is performed, If the user's action matches an existing step, the system conjectures a link to that step. A link is verified by predicting its successors.<marker type="block"/> Each step is a program-node (Predecessors, Action, Successors) structure. Its location in the graph is expressed as lists of Predecessors and Successors. The Action is an action-step (Preconditions, Operation, Postconditions) tuple. Operation is one of the A.Sq operators. Pre- and Postconditions are lists of constraints that must hold before and after executing the action. Preconditions are checked by examining Basil's current sensory</region>
        <region class="DoCO:FigureBox" id="Fx219">
          <image class="DoCO:Figure" src="62oc.page_007.image_36.png" thmb="62oc.page_007.image_36-thumb.png"/>
        </region>
        <region class="unknown" id="220" page="7" column="2">C</region>
        <region class="unknown" id="221" page="7" column="2">B</region>
        <region class="unknown" id="222" page="7" column="2">grasp (C.left) touch (C.bottom.right : Q.endpt)</region>
        <region class="unknown" id="223" page="7" column="2">Note: contact between Q and R is not sensed</region>
        <region class="unknown" id="229" page="7" column="2">4.6 Actions and Procedures</region>
        <outsider class="DoCO:TextBox" type="footer" id="232" page="7" column="2">133</outsider>
        <outsider class="DoCO:TextBox" type="header" id="233" page="8" column="1">':~SIGGRAPH 89,Boston, 31 July-4August,1989</outsider>
        <region class="DoCO:TextChunk" id="234" confidence="possible" page="8" column="1">state; P o s t c o n d i t i o n s are instantiated and verified by the constraint solver.</region>
        <region class="DoCO:TextChunk" id="235" confidence="possible" page="8" column="1">A program step matches an action demonstrated by the teacher if the operator and constraints are the same. A program step can be generalized by dropping constraints in order to match an action. To avoid over-generalizing, Metamouse drops only weak constraints, like path, and remembers them in case they need to be enforced after all.</region>
        <region class="DoCO:TextChunk" id="236" confidence="possible" page="8" column="1">At every opportunity the system generates the next action itself. It checks S u c c e s s o r s of the current node to see if any is executable in the present configuration - - that is, its relevant P r e c o n d i t i o n s hold and its P o s t c o n d i t i o n s are attainable via constraint satisfaction. If there is none, or if the teacher rejects lhe prediction, Metamouse asks for a demonstration of the next step and forms a branch to it.</region>
        <region class="unknown" id="237" page="8" column="1">4.7 Constraint Solver</region>
        <region class="DoCO:TextChunk" id="239" confidence="possible" page="8" column="1">Solving constraints is the process by which actions are predicted - - both to test whether a step is performable and to generate specific parameters for the action. Since all A.Sq actions result from translating a single point, the solver is much simpler than most. It examines the list of P o s t c o n d i t i o n s in order of strength. It generates a solution to the first and then checks that the rest hold. If not, it backtracks to an alternative solution for the first constraint. The process repeats until all constraints hold or no more solutions exist. Details appear in [<xref ref-type="bibr" rid="R15" id="238" class="deo:Reference">15</xref>]. The constraint solver is potentially able to generalize the P o s t c o n d i t i o n s ; at present, only Basil's path is generalized.</region>
        <region class="unknown" id="240" page="8" column="1">5 Evaluation of System</region>
        <region class="DoCO:TextChunk" id="242" confidence="possible" page="8" column="1">A programming by example system should be evaluated with respect to ease of use, real-time performance, and the correctness and generality of the programs it infers. Ease of use has been tested by measuring potential teachers' ability to predict Basil's behavior [ <xref ref-type="bibr" rid="R14" id="241" class="deo:Reference">14</xref>]. It was found that teachers quickly learned what to expect from their pupil, apart from the occasional surprise.</region>
        <region class="DoCO:TextChunk" id="243" confidence="possible" page="8" column="1">Real-time performance is governed by the number of program steps and touch relations to be checked by the action matcher and constraint solver. The complexity of a prediction is proportional to the product of these numbers. The number of touch relations is normally quite small, due to the limited range of Basil's touch sense. At most, it is twice the number of object-parts, since every relation involves either Basil or the object in his grasp. The number of program steps is unbounded; hence it may be advisable to limit the search for a matching step.</region>
        <region class="DoCO:TextChunk" id="244" confidence="possible" page="8" column="1">The current experimental implementation in Lisp on a Macintosh II runs rather slowly, requiring two seconds to make a prediction when joining sequences (subsequent predictions are somewhat faster). Since this delay is invariant with the number of program</region>
        <region class="DoCO:TextChunk" id="245" confidence="possible" page="8" column="1">Task</region>
        <region class="DoCO:TextChunk" id="246" confidence="possible" page="8" column="1">Arch</region>
        <region class="DoCO:TextChunk" id="247" confidence="possible" page="8" column="1">Stove-hood</region>
        <region class="DoCO:TextChunk" id="248" confidence="possible" page="8" column="1">Tea-party</region>
        <region class="DoCO:TextChunk" id="249" confidence="possible" page="8" column="1">Trace # 1 2 1 2 1'</region>
        <region class="unknown" id="250" page="8" column="1">row 1 row 2 row 3 2</region>
        <region class="unknown" id="251" page="8" column="1">Steps Performed in Task Total Predicted Ratio Rejected 41 6 15% 41 41 100 % 12 0 0% 0 12 12 100 % 0 "57 34 60 % 5 18 7 40 % 9 8 90% 18 18 100 % 65 65 100 %</region>
        <region class="DoCO:FigureBox" id="Fx252">
          <image class="DoCO:Figure" src="62oc.page_008.image_37.png" thmb="62oc.page_008.image_37-thumb.png"/>
        </region>
        <region class="DoCO:TextChunk" id="253" confidence="possible" page="8" column="2">steps, it is attributable to excessive and inefficient garbage collection.</region>
        <region class="DoCO:TextChunk" id="254" confidence="possible" page="8" column="2">Metamouse has been tried on a number of example tasks - aligning boxes to arbitrarily rotated axes, distributing boxes at equal spacing along a line, and re-connecting a polyline when one segment is moved. The system learned correct and sufficiently general programs for most of these simple tasks after just one trace. Some examples contained erroneous actions and bizarre coincidences, but errors in the programs were corrected during subsequent lessons.</region>
        <region class="DoCO:TextChunk" id="256" confidence="possible" page="8" column="2"> <xref ref-type="table" rid="T2" id="255" class="deo:Reference">Table 2</xref> shows performance data for the three tasks presented in this paper. For each execution trace, the number of actions correctly predicted by Metamouse is compared with the total number performed (whether by the user or Metamouse). Task competence is measured as their ratio. The number of predictions rejected by the teacher is also shown. The size and growth of the program graphs is given as the number of edges (ie. transitions between actions).</region>
        <region class="DoCO:TextChunk" id="257" confidence="possible" page="8" column="2">The Arch task contained some repeated actions, such as asking the user to create three boxes and copying the two capitals to form two plinths. The former actions were distinguished by the prompt strings specified by the teacher after rejecting predicted prompts. The latter were differentiated because the capitals were known as individuals. In a second trace of Arch, the system correctly predicted all actions.</region>
        <region class="DoCO:TextChunk" id="258" confidence="possible" page="8" column="2">The Stove-hood task was a simple sequence of actions. No predictions could be made during the first trace since the task contains no repeated actions.</region>
        <region class="DoCO:TextChunk" id="260" confidence="possible" page="8" column="2">The Tea-party task is a two-dimensional iteration on cups within rows. <xref ref-type="table" rid="T2" id="259" class="deo:Reference">Table 2</xref> shows performance on each row during the first trace. The system was able to generalize direction and number so that covered the second and third rows. In the first row, the teacher moved the row-line into contact with the cups, then moved the teapot to the row-line's nearest end-point, and then rightward to the first cup. After marking the cup (that is, pouring the tea), the teacher advanced the pot to the next cup, which triggered predictions to mark it and repeat for the third. On attempting a fourth iteration, the constraint solver failed to find another cup in Metamouse's path; this failure was the loop's terminating condition. When the teacher advanced the row-line to the next row, the matcher generalized the contact constraints between row-line and cups, since row 2 contained only one cup. The system then successfully predicted that the teapot would advance and thus induced the outer loop. The direction of the teapot's movement along the row was generalized from rightward to horizontal in order to make subsequent predictions. The loops were now general enough to cover the third row.</region>
        <region class="unknown" id="261" page="8" column="2">Edges in Program Graph Total Growth 42 42 42 0 13 13 13 0 24 24 7 7 7 0 7 0 25 1</region>
        <outsider class="DoCO:TextBox" type="footer" id="262" page="8" column="2">134</outsider>
        <outsider class="DoCO:TextBox" type="footer" id="264" page="8" column="2"> <xref ref-type="table" rid="T2" id="263" class="deo:Reference">Table 2</xref>. Performance of learning system on example tasks.</outsider>
        <outsider class="DoCO:TextBox" type="header" id="265" page="9" column="1">~ ' Computer Graphics, Volume 23, Number 3, July</outsider>
        <outsider class="DoCO:TextBox" type="page_nr" id="266" page="9" column="1">1989</outsider>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="267" page="9" column="1">6 Further Work</h1>
        <region class="DoCO:TextChunk" id="268" confidence="possible" page="9" column="1">The current implementation is unsuitable for much further research. It is too slow and unreliable; expansion of facilities will only exacerbate these problems. Hence we are re- i m p l e m e n t i n g Metamouse in C++ on A p o l l o DN4500 workstations. When a prototype is ready, we will conduct studies with casual users. Graphics primitives such as circles, ellipses and splines are planned, as well as object rotation and grouping. Further desirable additions include the ordering of alternative predictions by generality or frequency, and a pattern- matching command to allow the user to specify a pattern without constructing a procedure.</region>
        <region class="DoCO:TextChunk" id="269" confidence="possible" page="9" column="1">The nature of Metamouse raises several important questions. The system is designed to build a predictive model of human performance by conjecturing intentions behind isolated actions. This focus of attention should be expanded to sequences so that the system might identify free variation on the order of actions, equivalence, ineffectiveness, and so on. Metamouse also facilitates rich interaction. Methods of eliciting constraints from the teacher should be compared with respect to the trade-offs between inductive generalization and explicit indication. Induction of some implicit spatial relations, such as alignment, is not infeasible. On the other hand, graphical gesturing, as in pointing to interesting touch relations, shows promise as a natural technique for teaching.</region>
      </section>
      <section class="deo:Conclusion">
        <h1 class="DoCO:SectionTitle" id="270" page="9" column="1">7 Conclusions</h1>
        <region class="DoCO:TextChunk" id="271" confidence="possible" page="9" column="1">Metamouse demonstrates that it is indeed possible for users to create graphical procedures by direct manipulation. Applications range from producing complex, repetitive drawings, through constructively specifying figures governed by graphical constraint, to generating simple animated algorithms for tasks such as sorting (and pouring tea). Metamouse eagerly reveals its predictions as soon as it can. This has three advantages. First, users reap early benefits when performing repetitive operations. Second, they can correct errors as soon as they occur. Third, they develop confidence in their programs without ever viewing any kind of listing. The principal shortcomings of the current system are its limited repertoire of graphical objects and transformations, the lack of a formal underpinning for the constraint model, and our limited experience of how users react to the new experience of working with Metamouse.</region>
      </section>
      <section class="deo:Acknowledgements">
        <h1 class="DoCO:SectionTitle" id="272" page="9" column="1">Acknowledgements</h1>
        <region class="DoCO:TextChunk" id="273" confidence="possible" page="9" column="1">This research is supported by the Natural Sciences and Engineering Research Council of Canada. We gratefully acknowledge the key role Bruce MacDonald has played in helping us to develop these ideas. We would also like to thank the referees for their helpful suggestions.</region>
      </section>
      <section class="DoCO:Bibliography">
        <h1 class="DoCO:SectionTitle" id="274" page="9" column="1">References</h1>
        <ref-list class="DoCO:BiblioGraphicReferenceList">
          <ref rid="R1" class="deo:BibliographicReference" id="275" page="9" column="1">1. Abbott, Edwin A. Flatland-- A Romance of Many Dimensions. Signet Classics edition. New York. 1984.</ref>
          <ref rid="R2" class="deo:BibliographicReference" id="276" page="9" column="1">2. Andreae, Peter. "Justified generalization: acquiring procedures from examples.'" PhD thesis. Department of Electrical Engineering and Computer Science, MIT. January 1985.</ref>
          <ref rid="R3" class="deo:BibliographicReference" id="277" page="9" column="1">3. Angluin, Dana and Smith, C. H. "Inductive inference: theory and methods." Computing Surveys 3 (15), pp. 237-269. September 1983.</ref>
          <ref rid="R4" class="deo:BibliographicReference" id="279" page="9" column="2">4. Bier, Eric A. and Stone, Maureen C. "Snap-dragging." Proc. ACM SIGGRAPH '86 (Dallas, August 18-22, 1986), in Computer Graphics 20, 4, pp. 233-240.</ref>
          <ref rid="R5" class="deo:BibliographicReference" id="280" page="9" column="2">5. Borning, Alan. "Defining constraints graphically." Human Factors in Computing Systems: Proc. ACM S1GCH1 '86. Boston. April 1986.</ref>
          <ref rid="R6" class="deo:BibliographicReference" id="281" page="9" column="2">6. Dennett, Daniel C. The Intentional Stance. M1T Press. Cambridge MA. 1987.</ref>
          <ref rid="R7" class="deo:BibliographicReference" id="282" page="9" column="2">7. Fuller, Norma and Prusinkiewicz, P. "L.E.G.O.--an interactive graphics system for teaching geometry and computer graphics." Proc. CIPS Edmonton 1986.</ref>
          <ref rid="R8" class="deo:BibliographicReference" id="283" page="9" column="2">8. Fuller, Norma and Prusinkiewicz, P. "Geometric modeling with Euclidean constructions," in [23], pp. 379-391.</ref>
          <ref rid="R9" class="deo:BibliographicReference" id="284" page="9" column="2">9. Halbert, Dan. "Programming by example." Research Report OSD-T8402. Xerox PARC. Palo Alto CA. December 1984,</ref>
          <ref rid="R10" class="deo:BibliographicReference" id="285" page="9" column="2">10. Kurlander, David and Bier, Eric A. "Graphical search and replace." Proc. ACM SIGGRAPH '88 (Atlanta GA, August 1-5, 1988), in Computer Graphics 22, 4, pp. 113-120.</ref>
          <ref rid="R11" class="deo:BibliographicReference" id="286" page="9" column="2">11. MacDonald, Bruce A. and Witten, Ion H. "Programming computer controlled systems by non-experts." Proc. IEEE Systems, Man and Cybernetics Annual Conference. Alexandria VA. October 1987.</ref>
          <ref rid="R12" class="deo:BibliographicReference" id="287" page="9" column="2">12. Cutter, Mark, Halpem, B., Spiegel, J. MacDraw. Apple Computer Inc. 1985, 1987.</ref>
          <ref rid="R13" class="deo:BibliographicReference" id="288" page="9" column="2">13. Maulsby, David. "Inducing procedures interactively." MSc thesis. Department of Computer Science, University of Calgary. December 1988.</ref>
          <ref rid="R14" class="deo:BibliographicReference" id="289" page="9" column="2">14. Maulsby, David and Witten, Ian H. "Inducing procedures in a direct-manipulation environment." Proc. ACM SIGCHI '89 (in press).</ref>
          <ref rid="R15" class="deo:BibliographicReference" id="290" page="9" column="2">15. Maulsby, David, Kittlitz, Ken and Witten, Ian H. "Constraint-solving in interactive graphics--a user-friendly approach." Proc. Computer Graphics International 1989 (in press).</ref>
          <ref rid="R16" class="deo:BibliographicReference" id="291" page="9" column="2">16. Myers, Brad. Creating User Interfaces by Demonstration. Academic Press. San Diego. 1988.</ref>
          <ref rid="R17" class="deo:BibliographicReference" id="292" page="9" column="2">17. Noma, T., Kunii, T. L., Kin, N., Enomoto, H., Aso, E. and Yamamoto, T. Y. "Drawing input through geometrical constructions: specification and applications," in [23], pp. 403-415.</ref>
          <ref rid="R18" class="deo:BibliographicReference" id="293" page="9" column="2">18. Papert, Seymour. Mindstorms. Basic Books. New York. 1980.</ref>
          <ref rid="R19" class="deo:BibliographicReference" id="294" page="9" column="2">19. Preparata, Franco P. and Shamos, Michael I, Computational Geomett T. Springer-Verlag. New York. 1985.</ref>
          <ref rid="R20" class="deo:BibliographicReference" id="295" page="9" column="2">20. Rich, Charles and Waters, Richard. "The programmer's apprentice: a research overview." 1EEE Computer 21 (11), pp. 11-25. November 1988.</ref>
          <ref rid="R21" class="deo:BibliographicReference" id="296" page="9" column="2">21. Smith, David C. "Pygmalion: a creative programming environment." Report STAN-CS-75-499. Stanford U. 1975.</ref>
          <ref rid="R22" class="deo:BibliographicReference" id="297" page="9" column="2">22. Sutherland, Ivan E. "Sketchpad: a man-machine graphical communication system." Proc. AFIPS Spring Joint Computer Conference, vol. 23, pp. 329-246. 1963.</ref>
          <ref rid="R23" class="deo:BibliographicReference" id="300" page="10" column="1">23. Magnenat-Thalmann, Nadia and Thalmann, Daniel, eds. New Trends in Computer Graphics: Proc. CG International '88. Geneva. June 1988.</ref>
          <ref rid="R24" class="deo:BibliographicReference" id="301" page="10" column="1">24. Tempo. Affinity MicroSystems Ltd. Boulder CO. 1986.</ref>
          <ref rid="R25" class="deo:BibliographicReference" id="302" page="10" column="1">25. van Lehn, Kurt. "Felicity conditions for human skill acquisition: validating an Al-based theory." Research Report CIS-21. Xerox PARC. Palo Alto CA. 1983.</ref>
          <ref rid="R26" class="deo:BibliographicReference" id="303" page="10" column="1">26. van Sommers, Peter. Drawing and Cognition. Cambridge Univ. Press. Cambridge UK. 1984.</ref>
          <ref rid="R27" class="deo:BibliographicReference" id="304" page="10" column="1">27. White, R. M. "Applying direct manipulation to geometric construction systems." in [23], pp. 446-455.</ref>
        </ref-list>
        <region class="DoCO:FigureBox" id="Fx278">
          <image class="DoCO:Figure" src="62oc.page_009.image_38.png" thmb="62oc.page_009.image_38-thumb.png"/>
        </region>
        <outsider class="DoCO:TextBox" type="footer" id="298" page="9" column="2">135</outsider>
        <outsider class="DoCO:TextBox" type="header" id="299" page="10" column="1">~L~SIGGRAPH '89,Boston, 31 July-4August, 1989</outsider>
        <region class="DoCO:FigureBox" id="Fx305">
          <image class="DoCO:Figure" src="62oc.page_010.image_39.png" thmb="62oc.page_010.image_39-thumb.png"/>
        </region>
        <outsider class="DoCO:TextBox" type="footer" id="306" page="10" column="2">136</outsider>
      </section>
    </body>
  </article>
</pdfx>
