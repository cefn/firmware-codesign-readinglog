<?xml version='1.0' encoding='UTF-8'?>
<pdfx xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://pdfx.cs.man.ac.uk/static/article-schema.xsd">
  <meta>
    <job>1dc66185c52ff3b63d602e3bf562a9304e54b0fb7139fb41cd14c14d032ce166</job>
    <base_name>62iw</base_name>
    <doi>http://dx.doi.org/10.1109/sew.2007.44</doi>
  </meta>
  <article>
    <front class="DoCO:FrontMatter">
      <outsider class="DoCO:TextBox" type="header" id="1">Appears in 31st IEEE Software Eng. Workshop (SEW 07)</outsider>
      <title-group>
        <article-title class="DoCO:Title" id="2">A Framework for Flexible and Executable Usability Patterns Standards</article-title>
      </title-group>
      <contrib-group class="DoCO:ListOfAuthors">
        <contrib contrib-type="author">
          <name id="3">Scott Henninger</name>
        </contrib>
      </contrib-group>
      <region class="unknown" id="5">Univ. of Nebraska-Lincoln, Computer Science and Eng., CC 0115 Lincoln, NE 68588-0115 USA <email id="4">scotth@cse.unl.edu</email></region>
      <abstract class="DoCO:Abstract" id="6">Software patterns have been used as a software design tool to reuse proven solutions to recurring problems. But the complex interconnections and the number of pattern collections is becoming a barrier for identifying relevant patterns and pattern combinations for a given design context. More formal representations of patterns are needed that support machine processing in addition to the traditional text- based presentation of software patterns. In this paper, Usability Patterns are used to demonstrate a framework and techniques to support the development of pattern forms that facilitate cross-collection links over the World-Wide Web. This is an essential first step that will enable moving from loosely coupled patterns to closely coupled pattern languages. Semantic Web technologies are used both to support distributed and heterogeneous data integration and to provide a computational basis for building intelligent tools that utilize patterns to support software development activities.</abstract>
    </front>
    <body class="DoCO:BodyMatter">
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="7" page="1" column="1">1. Usability Knowledge Dissemination</h1>
      </section>
      <region class="DoCO:TextChunk" id="23" page="1" column="1">Software patterns are proven solutions to recurring problems within a context [ <xref ref-type="bibr" rid="R20" id="8" class="deo:Reference">20</xref>]. The original notion of design patterns stems from Christopher Alexander’s notion of pattern languages for Architecture [<xref ref-type="bibr" rid="R2" id="9" class="deo:Reference">2</xref>]. A key perspective of this work was the dual utility of patterns serving as a common vocabulary by which people can succinctly communicate well-known solutions to recurring problems and a systematic language for developing holistic solutions by composing patterns at different levels of abstraction. Patterns are used to leverage the experience of system designers and capture not only descriptions of solutions to recurring problems, but also the context addressed by the solutions, the means by which problem requirements are satisfied and examples of the solution [<xref ref-type="bibr" rid="R15" id="10" class="deo:Reference">15</xref>]. Pattern usage is currently practiced informally, often through folklore and textbooks, and at best being<marker type="column" number="2"/><marker type="block"/> embedded in hypertext systems supporting semantic- free “related-to” relationships [<xref ref-type="bibr" rid="R23" id="12" class="deo:Reference">23</xref>]. But the continued proliferation and interconnected nature of patterns presents a number of problems that have not been adequately addressed. First is the sheer number of patterns available. The number of pattern collections on the Web is approaching the hundreds and pattern books contribute a number of additional collections. Given that a typical collection has on the order of 20 to 50 (and more) individual patterns, the number of patterns is indeed growing beyond the scope of human memory and expertise. Second, the interconnected nature of patterns (informally defined, if at all) makes it very difficult to understand the complex interrelationships, necessary couplings, contradictions, and inconsistencies amongst the different patterns. Third, there are a number of pattern collections currently in print or on Web-based resources that differ in both format and emphasis. Some patterns across these collections have overlapping content while others represent variants with subtle differences, such as Iterator patterns that deviate from the original Gang-of- Four (GoF) [<xref ref-type="bibr" rid="R20" id="13" class="deo:Reference">20</xref>] definition to become compatible with new and valid forces [<xref ref-type="bibr" rid="R14" id="14" class="deo:Reference">14</xref>]. Fourth, each pattern is itself a piece of potentially complex knowledge that requires a degree of mastery to understand [<xref ref-type="bibr" rid="R34" id="15" class="deo:Reference">34</xref>] and apply to specific problem contexts. These dimensions of scale, complexity, heterogeneity, and required expertise conspire to create barriers to the effective use of pattern technologies. Addressing these and other issues require increasing levels of formality for representing patterns. In particular, the development of pattern languages (as opposed to loosely coupled pattern collections [<xref ref-type="bibr" rid="R23" id="16" class="deo:Reference">23</xref>]), which are systematic means of organizing patterns to provide holistic design solutions [<xref ref-type="bibr" rid="R1" id="17" class="deo:Reference">1</xref>, <xref ref-type="bibr" rid="R43" id="18" class="deo:Reference">43</xref>] require levels of formal representation that have yet to be applied to pattern technologies [<xref ref-type="bibr" rid="R13" id="19" class="deo:Reference">13</xref>]. A number of previous efforts have investigated formalizing design patterns to create formal pattern languages [<xref ref-type="bibr" rid="R16" id="20" class="deo:Reference">16</xref>], formalized UML specifications [<xref ref-type="bibr" rid="R19" id="21" class="deo:Reference">19</xref>], specify pattern compositions [<xref ref-type="bibr" rid="R32" id="22" class="deo:Reference">32</xref>], organize class</region>
      <outsider class="DoCO:TextBox" type="header" id="24" page="2" column="1">Appears in 31st IEEE Software Eng. Workshop (SEW 07)</outsider>
      <region class="DoCO:TextChunk" id="29" confidence="possible" page="2" column="1">frameworks [<xref ref-type="bibr" rid="R30" id="25" class="deo:Reference">30</xref>], and facilitate rigorous pattern reasoning. [<xref ref-type="bibr" rid="R40" id="26" class="deo:Reference">40</xref>]. Most of these formal pattern definitions focus on a single pattern collection, the seminal GoF patterns [<xref ref-type="bibr" rid="R20" id="27" class="deo:Reference">20</xref>], and do not address either intra-collection (distributed) issues or issues arising with diverse types of pattern collections and formats. While some would defend the lack of pattern tools as a positive [<xref ref-type="bibr" rid="R47" id="28" class="deo:Reference">47</xref>], we feel a combination of pattern maturity and new technologies have the potential to improve how patterns are used, created,</region>
      <region class="DoCO:FigureBox" id="Fx30">
        <image class="DoCO:Figure" src="62iw.page_002.image_01.png" thmb="62iw.page_002.image_01-thumb.png"/>
      </region>
      <region class="DoCO:TextChunk" id="32" page="2" column="1">and combined for form problem solutions. Indeed, it may be the case that continued proliferation and diversification of patterns will make it necessary that these improvements take place. In addition to the benefits of more formalized patterns representations that these tools will require, the existence of such tools will facilitate further refinement and development of patterns in the software development process, creating a “forum” for continuous improvement, refinement, and extension of software patterns and pattern languages. In this paper, we extend this work by describing a framework for defining standard pattern forms and demonstrate how this framework is used to create specific pattern forms. The Web Ontology Language (OWL) [<xref ref-type="bibr" rid="R31" id="31" class="deo:Reference">31</xref>] is used to create interoperable forms that can be disseminated over the World-Wide Web. Usability Patterns, an emerging and growing sub- field of software patterns, are used to demonstrate this technology. In the following sections, Usability Design Patterns are described and contrasted with other tools and support that exist for disseminating knowledge about usability issues. Some general background is given on using Semantic Web technologies to implement pattern languages. An exemplar is given to demonstrate how the framework can be used to create interoperable software patterns. We then use the framework to demonstrate how it is used to define specific pattern forms. The paper concludes with a brief discussion of contributions and future directions.</region>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="33" page="2" column="1">2. Packaged Usability Knowledge</h1>
        <region class="DoCO:TextChunk" id="55" page="2" column="1">One means of distributing usability knowledge is usability guidelines, which comes in many forms, from style guides (interface widgets) to general principles to interface consistency guidelines [ <xref ref-type="bibr" rid="R28" id="34" class="deo:Reference">28</xref>, <xref ref-type="bibr" rid="R37" id="35" class="deo:Reference">37</xref>]. While hundreds of usability guidelines have been designed and published, empirical studies have shown mixed results, with some demonstrating that both novice and expert HCI specialists benefit from guidelines [<xref ref-type="bibr" rid="R10" id="36" class="deo:Reference">10</xref>, <xref ref-type="bibr" rid="R29" id="37" class="deo:Reference">29</xref>], while others revealing challenges with finding and applying guidelines for specific problem settings [<xref ref-type="bibr" rid="R41" id="38" class="deo:Reference">41</xref>, <xref ref-type="bibr" rid="R42" id="39" class="deo:Reference">42</xref>]. However, all have found significant problems<marker type="column" number="2"/><marker type="block"/> with the manner in which the knowledge is disseminated and applied. Building on the seminal work on software design patterns [<xref ref-type="bibr" rid="R20" id="43" class="deo:Reference">20</xref>], usability patterns have been increasingly created to disseminate usability knowledge in structured formats [<xref ref-type="bibr" rid="R7" id="44" class="deo:Reference">7</xref>, <xref ref-type="bibr" rid="R21" id="45" class="deo:Reference">21</xref>, <xref ref-type="bibr" rid="R44" id="46" class="deo:Reference">44</xref>, <xref ref-type="bibr" rid="R46" id="47" class="deo:Reference">46</xref>]. Usability patterns are currently the largest kind of software pattern, outpacing traditional software patterns such as architecture and design [<xref ref-type="bibr" rid="R24" id="48" class="deo:Reference">24</xref>]. Unlike usability guidelines, usability patterns explicitly defines contextual information [<xref ref-type="bibr" rid="R17" id="49" class="deo:Reference">17</xref>] and begins to explore interrelationships between patterns. The essential idea of a design pattern is to capture successful solutions to recurring problems defined explicitly by forces (general problem constraints) and contextual information. The result is a problem-solution-context description of a recurring problem and a general, repeatable, solution [<xref ref-type="bibr" rid="R3" id="50" class="deo:Reference">3</xref>]. As shown by the Hover Invitation pattern [<xref ref-type="bibr" rid="R45" id="51" class="deo:Reference">45</xref>] in <xref ref-type="fig" rid="F1" id="52" class="deo:Reference">Figure 1</xref>, patterns add standard elements for explicitly describing attributes such as problem context (Use When), rationale, related patterns, and issues specific to the type of<marker type="page" number="3"/><marker type="column" number="1"/><marker type="block"/> guideline (Accessibility is an attribute that is specifically applicable to usability issues). The goal and objectives of usability patterns and guidelines are essentially the same: to document and manage collective knowledge about usability design issues in a format that is easily disseminated and understood. Incorporating these knowledge forms in a structured, interconnected format has many implications for design tools, disseminating design knowledge to diverse stakeholders, and enhancing the collective knowledge of usability issues.</region>
        <region class="DoCO:FigureBox" id="F1">
          <caption class="deo:Caption" id="42" page="2" column="2">Figure 1: Hover Invitation Pattern (adapted from [<xref ref-type="bibr" rid="R48" id="41" class="deo:Reference">48</xref>]).</caption>
        </region>
        <outsider class="DoCO:TextBox" type="header" id="54" page="3" column="1">Appears in 31st IEEE Software Eng. Workshop (SEW 07)</outsider>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="56" page="3" column="1">2.1. Software Design Patterns</h1>
        <region class="DoCO:TextChunk" id="71" page="3" column="1">As shown in <xref ref-type="fig" rid="F1" id="57" class="deo:Reference">Figure 1</xref>, a software pattern is a formatted description of recurring problems coupled with validated solutions [<xref ref-type="bibr" rid="R3" id="58" class="deo:Reference">3</xref>, <xref ref-type="bibr" rid="R20" id="59" class="deo:Reference">20</xref>]. The structure, known as the pattern form, used to describe patterns varies widely [<xref ref-type="bibr" rid="R12" id="60" class="deo:Reference">12</xref>], from open-ended (free text) prose to complex DTD definitions [<xref ref-type="bibr" rid="R18" id="61" class="deo:Reference">18</xref>], with the most common attributes being a name, problem, context, solution, rationale and example. <xref ref-type="fig" rid="F1" id="62" class="deo:Reference">Figure 1</xref> displays one such pattern form. Most patterns are included in loosely coupled sets of pattern description classified by defined criteria [<xref ref-type="bibr" rid="R20" id="63" class="deo:Reference">20</xref>, <xref ref-type="bibr" rid="R28" id="64" class="deo:Reference">28</xref>] or taxonomies [<xref ref-type="bibr" rid="R45" id="65" class="deo:Reference">45</xref>]. These collections, or catalogs, are often related to other patterns in the collection, either through explicit links or embedded in the pattern description. But these collections are self- contained “islands” of information with extremely few examples that contain pointers outside of the collection boundary [<xref ref-type="bibr" rid="R24" id="66" class="deo:Reference">24</xref>]. While some may refer to patterns in other collections, explicit links (such as hypertext links) are rare or nonexistent. The original design pattern work by Christopher Alexander on architectural techniques for town planning, architectural designs, and building construction, described not only patterns, but also pattern languages capable of composing and structuring patterns to solve holistic design problems [<xref ref-type="bibr" rid="R3" id="67" class="deo:Reference">3</xref>]. This perspective has largely been lost when applied to software patterns [<xref ref-type="bibr" rid="R1" id="68" class="deo:Reference">1</xref>, <xref ref-type="bibr" rid="R43" id="69" class="deo:Reference">43</xref>]. Current software pattern collections are not organized into languages in this sense, though some theories have been posed [<xref ref-type="bibr" rid="R46" id="70" class="deo:Reference">46</xref>]. Most pattern “languages”, however, lack the kind of grammar or other structuring principles that would allow patterns to be composed in a systematic manner to address larger design issues. We therefore refer to any set of patterns using a common form (and often in the same location, be it a Web site, book or technical paper) a pattern collection.</region>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="72" page="3" column="1">3. Current Support for Usability Patterns</h1>
        <region class="DoCO:TextChunk" id="83" page="3" column="1">Pattern collections are currently disseminated through books, Web sites, or technical papers. These collections represent islands of point knowledge on <marker type="column" number="2"/><marker type="block"/> specific technical issues. For example, the seminal Gang of Four (GoF) patterns [<xref ref-type="bibr" rid="R20" id="74" class="deo:Reference">20</xref>] specifically address object-oriented design issues for the creation, structure, and behavior of object-oriented software. While valuable in their own right, these (and other pattern collections) assume that potential pattern users (software designers, usability engineers, etc.) have studies the patterns and are able to known when the patterns are available. This works when there are only an handful of patterns to choose from, but as of 2000 there over 1,000 patterns had been created, and the rate of pattern creation has not decreased since then (one study found over 2,200 patterns scattered across various mediums [<xref ref-type="bibr" rid="R24" id="75" class="deo:Reference">24</xref>]). Computational pattern representations are therefore needed to facilitate intelligent search and provide an infrastructure for applications supporting pattern-based design processes [<xref ref-type="bibr" rid="R12" id="76" class="deo:Reference">12</xref>]. An initial step toward the development of systematic pattern languages is supporting links between pattern collections. This will not only allow the display of alternative patterns (for example both van Welie [<xref ref-type="bibr" rid="R45" id="77" class="deo:Reference">45</xref>] and Yahoo! [<xref ref-type="bibr" rid="R48" id="78" class="deo:Reference">48</xref>] have separate Breadcrumb patterns), conflicting patterns, etc., but will also facilitate links between patterns at different levels of abstraction. While some preliminary work on pattern languages for usability design knowledge exists [<xref ref-type="bibr" rid="R6" id="79" class="deo:Reference">6</xref>, <xref ref-type="bibr" rid="R46" id="80" class="deo:Reference">46</xref>], to date it remains difficult, at best, to link patterns between collections. A primary impediment for cross-collection links is the wide variety of pattern forms used in collections. For example, the Yahoo! pattern collection [<xref ref-type="bibr" rid="R48" id="81" class="deo:Reference">48</xref>] describes each pattern with the properties Problem Summary, Use When, Solution, Rationale, and Accessibility. The van Welie collection [<xref ref-type="bibr" rid="R45" id="82" class="deo:Reference">45</xref>] uses a different set of properties: an introductory example (implicit), Problem, Use When, Solution, Why and More Examples. Note that there are some mismatches within just these two pattern forms. Only the Problem, Use When, and Solution properties are used in common and two property names, ‘Why’ and ‘Rationale’ are used to describe the same concepts. The other properties are exclusive to the individual forms. These pattern forms are just a small example of the diverse pattern forms that currently exist for usability and other types of software patterns.</region>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="84" page="3" column="2">3.1. Pattern Language Standards</h1>
        <region class="DoCO:TextChunk" id="86" page="3" column="2">Drawing on the observation that the lack of standard pattern forms is a serious impediment to the development of tools for using and manipulating patterns, the Pattern Language Markup Language (PLML) [<xref ref-type="bibr" rid="R18" id="85" class="deo:Reference">18</xref>] for HCI patterns was developed. PLML</region>
        <outsider class="DoCO:TextBox" type="header" id="87" page="4" column="1">Appears in 31st IEEE Software Eng. Workshop (SEW 07)</outsider>
        <region class="DoCO:FigureBox" id="F2">
          <image class="DoCO:Figure" src="62iw.page_004.image_02.png" thmb="62iw.page_004.image_02-thumb.png"/>
          <caption class="deo:Caption" id="89" page="4" column="1">Figure 2: Pattern properties in OWL for the PFOWL pattern form.</caption>
        </region>
        <region class="DoCO:TextChunk" id="99" confidence="possible" page="4" column="1">v1.1 was introduced in XML DTD schema form at the CHI 2003 workshop on usability patterns [<xref ref-type="bibr" rid="R18" id="90" class="deo:Reference">18</xref>]. The DTD format has 20 elements representing pattern form properties (problem, solution, etc.) and five attributes. None of the elements specified in the DTD are required, not even the pattern name. Since the release of PLML v 1.1 there have been a few modifications to improve the “standard”, although none have found their way to the hcipatterns.org Wiki site [<xref ref-type="bibr" rid="R22" id="91" class="deo:Reference">22</xref>], the original PLML home. Early modifications added the ‘collection’ element to document the collection a pattern belongs to and pattern- link was extended so it could be used anywhere in the pattern description (see change log at [<xref ref-type="bibr" rid="R5" id="92" class="deo:Reference">5</xref>]). Bienhaus’ Extended Pattern Language Markup Language (PLMLx) [<xref ref-type="bibr" rid="R5" id="93" class="deo:Reference">5</xref>] made the controversial move of making ‘example’ and ‘rationale’ first-level elements, instead of sub-elements of the ‘evidence’ element. This could potentially lose valuable information about what these elements are used for, namely evidential information for the pattern [<xref ref-type="bibr" rid="R18" id="94" class="deo:Reference">18</xref>]. Bienhaus also changed the DTD to make a number of elements mandatory, such as ‘name’, ‘problem’, ‘context’, ‘solution’, and ‘forces’. While this seems a perfectly reasonable decision, it does force change to some pattern forms that are in the original Alexandrian unstructured text form [<xref ref-type="bibr" rid="R3" id="95" class="deo:Reference">3</xref>] or, for example, do not separate context and forces [<xref ref-type="bibr" rid="R6" id="96" class="deo:Reference">6</xref>] (from [<xref ref-type="bibr" rid="R18" id="97" class="deo:Reference">18</xref>]). Deng et al. further extended the PLML standard in a version referred to as PLML v1.2 [<xref ref-type="bibr" rid="R12" id="98" class="deo:Reference">12</xref>], removing some of the mandatory element restrictions added in PLMLx and added a number of sub-elements to further document some elements. For example, the ‘implementation’ element in PLML v1.2 has sub- elements for ‘implementation-name’, ‘code’, and ‘other details’.</region>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="100" page="4" column="1">3.2. Flexible Pattern Form Standards</h1>
        <region class="DoCO:TextChunk" id="103" page="4" column="1">In spite of these standardization efforts, few software pattern repositories have conformed to the <marker type="column" number="2"/><marker type="block"/> standards. 1 It is also important to note the difficulty of achieving consensus on pattern forms, and the problem is exacerbated when pattern forms outside of the usability community are considered [<xref ref-type="bibr" rid="R20" id="102" class="deo:Reference">20</xref>]. Some issues stem from the inflexible constraints imposed by DTD schemas. Foremost amongst the shortcomings of DTD (and XML Schemas for that matter) is that DTD schemas are stand-alone data structures. One cannot derive one DTD from another, or create any other relationship between DTD schemas, for that matter. This means that multiple DTD schemas will always be at odds with each other, forcing a selection of one over the other. A preferred state of affairs would be to allow multiple DTD schemas representing different pattern forms to co- exist while retaining the ability to translate between different pattern elements (properties) such as the earlier example with the ‘Why’ and ‘Rationale’ properties. Another weakness of current pattern forms is that links between patterns cannot be computationally manipulated. This can only be achieved indirectly using XML technologies, creating the need for specialized software and other standards to make effective links that pattern tools can utilize to browse</region>
        <region class="DoCO:TextChunk" id="105" confidence="possible" page="4" column="2">1 It was reported in the CHI 2003 workshop report [<xref ref-type="bibr" rid="R18" id="104" class="deo:Reference">18</xref>] that the van Welie pattern collection was PLML compliant. To date, this is unfortunately not true.</region>
        <outsider class="DoCO:TextBox" type="header" id="106" page="5" column="1">Appears in 31st IEEE Software Eng. Workshop (SEW 07)</outsider>
        <region class="DoCO:TextChunk" id="109" page="5" column="1">patterns. Perhaps more important is the untyped nature of the ‘pattern-link’ element. While some have suggested different link types, such as ‘is-a’, ‘is- contained-by’ and ‘contains’ [<xref ref-type="bibr" rid="R18" id="107" class="deo:Reference">18</xref>], the inability to extend a DTD schema without creating a new, unrelated schema, severely inhibits the ability to create typed relationships between patterns [<xref ref-type="bibr" rid="R35" id="108" class="deo:Reference">35</xref>] that can convey important semantics between patterns that can lead to the creation of interconnected pattern languages.</region>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="110" page="5" column="1">4. Web-Based Ontologies and Patterns</h1>
        <region class="DoCO:TextChunk" id="116" page="5" column="1">The weaknesses of current pattern representations can be summarized as: 1) it is at best difficult to reconcile different pattern forms based on different DTD schemas; 2) different pattern forms use different keywords to represent pattern properties; 3) links between patterns can at best be represented indirectly; and 4) the ability to extend DTDs, particularly to create semantically inspired pattern links, is cumbersome. Our research investigates the feasibility of using next-generation XML technologies to address these issues, while enhancing the representational medium for creating pattern languages and richly interconnected pattern collections. Semantic Web technologies have been developed for creating and disseminating Web-based ontologies in computational formats that also supports human readable forms [ <xref ref-type="bibr" rid="R33" id="111" class="deo:Reference">33</xref>]. In particular, the Web Ontology Language (OWL) [<xref ref-type="bibr" rid="R31" id="112" class="deo:Reference">31</xref>] is a frame-based knowledge representation language based on XML technologies and designed to construct ontologies distributed across the World-Wide Web. OWL is an extension of the Resource Description Framework (RDF) [<xref ref-type="bibr" rid="R27" id="113" class="deo:Reference">27</xref>] which extends XML by adding the concept of a “triple” and utilizing XML namespaces to create uniquely identifiable entities through URIs (Uniform Resource Identifiers). RDF represents information in subject-predicate-object triples that can be used as the basis for formal knowledge representation. For example, “Mary likes Macintosh Apples” is a triple representing a ‘fact’ that a person ‘likes’ a particular kind of apple. For usability patterns, this structure could be used to make statements such as “Breadcrumbs has an Alias named Homeward path” to represent the fact that the names ‘Breadcrumbs’ and ‘Homeward path’ refer to the same pattern. The URI, which is a superset of the URL, is an equally important concept for the creation of interoperable pattern collections. A URI uniquely identifies a concept so that the concept can be used in multiple repositories (ontologies, which will be explained in a bit) with computational assurance that all entities using the URI refer to the same exact<marker type="column" number="2"/><marker type="block"/> concept. For example, an OWL file named PFOWLForm.owl is located on the server cse.unl.edu in the author’s public directory ‘SWOnt’ and contains a concept named ‘hasAlias’. The unique URI for this concept is therefore: <ext-link ext-link-type="uri" href="http://cse.unl.edu/" id="115">http://cse.unl.edu/</ext-link>~scotth/SWont/Patterns/PFOWLForm.owl#hasAl ias This can be verified by entering the address into a browser up to the ‘#’ sign. An XML file will appear that includes, amongst other things, an XML definition of the concept ‘hasAlias’. The utility of URIs is subtle and will become clearer later in this paper, but the key point is that other OWL files can reuse this definition of ‘hasAlias’ by using the URI reference.</region>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="117" page="5" column="2">4.1. Ontology-Based Pattern Representations</h1>
        <region class="DoCO:TextChunk" id="119" page="5" column="2">The Web Ontology Language (OWL) is used to create Web-based ontologies. The definition often used for ontology is a “Formal, explicit specification of a shared conceptualization” [<xref ref-type="bibr" rid="R39" id="118" class="deo:Reference">39</xref>]. In OWL, an ontology is defined by a set of hierarchically arranged concepts that inherit properties and axiomatic definitions of property restrictions. Standard inferencing rules, such as transitivity, equivalence, and other logical relationships further support the definition of flexible and consistent vocabularies with the ontologies. The use of ontologies to represent pattern languages is a marriage of two complementary philosophies. An objective of pattern languages is to provide the means for professionals to use a common vocabulary about design and other issues while OWL has been explicitly designed to implement common vocabularies for machine processing.</region>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="120" page="5" column="2">5. The PFOWL Pattern Infrastructure</h1>
        <region class="DoCO:TextChunk" id="125" page="5" column="2"> <xref ref-type="fig" rid="F2" id="121" class="deo:Reference">Figure 2</xref> shows screen images from the OWL ontology editor Protégé [<xref ref-type="bibr" rid="R38" id="122" class="deo:Reference">38</xref>]. The figure shows a set of pattern form templates arranged in an inheritance hierarchy, including the Pattern Forms in OWL (PFOWL – pronounced fowl), an ontology-based set of pattern forms we have developed as a flexible infrastructure for creating pattern forms and pattern instances. PFOWL refines the Pattern Language Markup Language (PLML) standard [<xref ref-type="bibr" rid="R18" id="123" class="deo:Reference">18</xref>], as shown in PFOWL_Form in the lower-right window of <xref ref-type="fig" rid="F2" id="124" class="deo:Reference">Figure 2</xref>. The XML-compatible data structures of PFOWL utilize semantic web technologies to define a flexible infrastructure with semantic relationships that enable computational inferencing to ensure logical consistency across pattern definitions, infer new facts about patterns and pattern knowledge, and utilize</region>
        <outsider class="DoCO:TextBox" type="header" id="126" page="6" column="1">Appears in 31st IEEE Software Eng. Workshop (SEW 07)</outsider>
        <region class="DoCO:TextChunk" id="128" confidence="possible" page="6" column="1">declarative rules [<xref ref-type="bibr" rid="R25" id="127" class="deo:Reference">25</xref>] to enforce standards and enhance the knowledge stored in patterns.</region>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="129" page="6" column="1">5.1. Formal Pattern Forms</h1>
        <region class="DoCO:FigureBox" id="F3">
          <image class="DoCO:Figure" src="62iw.page_006.image_03.png" thmb="62iw.page_006.image_03-thumb.png"/>
          <caption class="deo:Caption" id="131" page="6" column="1">Figure 3: A pattern form for Web-based interfaces.</caption>
        </region>
        <region class="DoCO:TextChunk" id="135" page="6" column="1">To facilitate the desired flexibility, PFOWL has been defined through a set of pattern forms, consisting of a set of property (attribute) definitions. Pattern designers are free to choose the most appropriate form for their needs, or extend a form. The EssentialForm (follow arrow ➀ in <xref ref-type="fig" rid="F2" id="132" class="deo:Reference">Figure 2</xref>) defines a minimal set of attributes, while the PFOWL_Form defines a large set of attributes representing the PLML goal to accommodate a large set of current pattern forms [<xref ref-type="bibr" rid="R18" id="133" class="deo:Reference">18</xref>]. Ignoring the type of Condition (Necessary or Necessary and Sufficient) for now, note that the property restrictions are defined as subsumption relationships (see the ⊑ sign in the yellow boxes to the right of the property names). OWL interprets this to mean that a type of (subclass) EssentialForm is defined by specializing the inherited class, the empty PLForm, through specific properties, namely the five properties shown in the EssentialForm definition. Each of the defined properties in the pattern forms use OWL cardinality restrictions to define whether the property is required or not. For example, an instance of EssentialForm must have one or more of the Context (hasContext), Solution (hasSolution), and Problem (hsProblem) properties. In addition, an EssentialForm pattern must have exactly one name (patternName) and 0 or more author (patternAuthor). Note that patternAuthor is defined using a universal quantifier, meaning that all instances of this property (i.e. all “authors”) must be an instance of the FOAF (Friend of a Friend) definition of a person, which is a Semantic Web standard definition for people [<xref ref-type="bibr" rid="R8" id="134" class="deo:Reference">8</xref>]. This allows computational reasoning about whether a person used in a definition is the same person, even if defined in a different file on the Web.</region>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="136" page="6" column="1">5.2. Federating Distributed Patterns</h1>
        <region class="DoCO:TextChunk" id="146" page="6" column="1">The plm:, gof:, and posa:, prefixes that appear in the left-middle window and elsewhere are XML namespace abbreviations [ <xref ref-type="bibr" rid="R27" id="137" class="deo:Reference">27</xref>]. These indicate that the constructs come from different OWL files that can be distributed across the WWW and federated into a single location for computational purposes (search, reasoning, etc.). In our example, the namespaces represent common pattern forms located in different<marker type="column" number="2"/><marker type="block"/> files and federated through the OWL import mechanism into our PFOWL file. The plm: namespace defines our essential form, the Coplien form [<xref ref-type="bibr" rid="R11" id="139" class="deo:Reference">11</xref>], and the “canonical” [<xref ref-type="bibr" rid="R4" id="140" class="deo:Reference">4</xref>] forms. The gof: namespace defines the original software design pattern form from the book whose authors are commonly referred to as the Gang of Four [<xref ref-type="bibr" rid="R20" id="141" class="deo:Reference">20</xref>]. Note that the plm: forms build on each other by inheriting properties, while the gof:GoF_Form starts from the base (empty) PLForm because the GoF form uses a different set of attributes (not shown here). The last form represented here, denoted by the posa: namespace represent the Pattern- Oriented Software Architecture [<xref ref-type="bibr" rid="R36" id="142" class="deo:Reference">36</xref>] form. This form inherits from the EssentialForm and adds new properties as defined by the POSA form. Note how each of the concepts representing pattern forms are intermixed within the inheritance hierarchy. This is a degree of flexibility not afforded with other computational formats such as XML and provides a powerful distributed framework for defining and maintain ontologies. For example, another pattern collection designer may want to create a hybrid form that adds inCollection, hasKnownUse, and hasImplementation to the EssentialForm. This can be easily done through an ontology editor that imports the EssentialForm and PFOWL ontology files. The new pattern form would be created by constructing a subtype of plm: EssentialForm and adding the properties pfowl:inCollection, pml:hasKnownUse, and gof:hasImplementation, where pfowl is the namespace represented by the ontology shown in <xref ref-type="fig" rid="F2" id="143" class="deo:Reference">Figure 2</xref>. Since URIs are used for the common elements, the new<marker type="page" number="7"/><marker type="column" number="1"/><marker type="block"/> ontology representing the pattern form would work with other pattern forms using the same properties.</region>
        <outsider class="DoCO:TextBox" type="header" id="145" page="7" column="1">Appears in 31st IEEE Software Eng. Workshop (SEW 07)</outsider>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="147" page="7" column="1">5.3. Pattern Definitions</h1>
        <region class="DoCO:TextChunk" id="151" page="7" column="1">The window to the right in <xref ref-type="fig" rid="F2" id="148" class="deo:Reference">Figure 2</xref> (follow arrow ➁) shows the pattern properties for the PFOWL form which builds on the inherited properties from the canonical, Coplien and essential forms. The inherited properties beneath the line marked INHERITED, along with the concept that originally defined the property. The inherited hasKnownUse property uses the OWL existential quantifier. The meaning of this construct is that at least one hasKnownUse property must have a value defined in the value range of this statement. This is used to define the often cited “rule of three” in which a pattern should represent a well-known (but often unintuitive) solution to a problem [<xref ref-type="bibr" rid="R20" id="149" class="deo:Reference">20</xref>]. Since most pattern forms use examples to describe its “known uses”, the value range for hasKnownUse is a cardinality restriction stating that the pattern definition should have at least three examples. In informal terms, a pattern in the PFOWL form (also the canonical form) must have at least one hasKnownUse property containing at least three hasExample properties. This and a number of other logical forms can create restrictions on class (concept) membership with precise semantics. The semantics can be verified through axiomatic Reasoners [<xref ref-type="bibr" rid="R26" id="150" class="deo:Reference">26</xref>] that can both infer new facts from the relationships and values in the ontology and check the ontology’s consistency against the definition. For example, if an instance of PFOWL_Form were created that did not have a problem statement (instance of the hasProblem property), the Reasoner would flag an error because the cardinality restriction “plm:hasProblem ≥ 1”. These semantic definitions will prove invaluable both when creating new pattern definitions (as the definition can be checked for inconsistencies) and when searching for patterns matching specific criteria.</region>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="152" page="7" column="1">5.4. PFOWL and PLML</h1>
        <region class="DoCO:TextChunk" id="156" page="7" column="1">Creating a pattern form from the PFOWL form involves creating a subclass of PFOWL_Form and restricting range values (object in subject-predicate- object form) to domain-specific concepts. <xref ref-type="fig" rid="F3" id="153" class="deo:Reference">Figure 3</xref> shows the result of creating a Web usability pattern form named WebUI_Form. There are two main things to note in this figure. First, the concept hierarchy in the upper-left window has been extended to include domain-specific concepts, such as DesignNotation, Examples, etc. Second, the definition of WebUI_Form, which inherits properties from the PFOWL form contains local restrictions using the domain-specific concepts.<marker type="column" number="2"/><marker type="block"/> For example, in addition to the cardinality restriction (defined by the PFOWL form) that there can be zero or more hasDiagram properties, WebUI_Form states that at least one of the values must be of concept type ‘DesignNotation’. This restriction uses existential quantification (∃), which carries the semantics that there can be hasDiagram properties using values from other concepts as long as at least one comes from DesignNotation. The other restrictions use universal quantification (∀) whose semantics state that all values must come from the class stated in the restriction. Therefore all values for hasContext must be instances of WebDesignContext and all values for hasSolution must be instances of either WebDesignSolution or SoftwareDesignSolution, as denoted by a union (the ⊔ symbol) of those concepts. Note how the form specializes the pattern form to fit the domain by utilizing domain-specific concepts. The new pattern form can be used to create the Breadcrumbs pattern shown in <xref ref-type="fig" rid="F1" id="155" class="deo:Reference">Figure 1</xref>.</region>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="157" page="7" column="2">5.5. Using the PFOWL Infrastructure</h1>
        <region class="DoCO:TextChunk" id="164" page="7" column="2">Properties in OWL have specific semantics that enable axiomatic reasoning on the values in the ontology. Properties are defined to have a domain and a range, making a triple representation where the property is used as a predicate that acts on an object over a range of values. These predicates can be used with axiomatic definitions defined by OWL to perform reasoning such as property transitivity, value restrictions, equivalence and other constructs that facilitate formal definitions [ <xref ref-type="bibr" rid="R31" id="158" class="deo:Reference">31</xref>]. Suppose we wanted to create a pattern form for the van Welie patterns [<xref ref-type="bibr" rid="R45" id="159" class="deo:Reference">45</xref>]. Both the van Welie and Yahoo! pattern collections use the phrase ‘Use When’ instead of ‘Context’. This is easily rectified using the owl:equivalentProperty construct that defines two properties to be equivalent, meaning the domain and range are the same for both properties. Therefore, adding the statement: useWhen owl:equivalentProperty hasContext to PFOWL definitions means that ‘hasContext’ effectively replaces all instances of ‘useWhen’ (or vice-versa, as the equivalence is symmetric in OWL). While some uses of different pattern forms are more complex than simple equivalence, this example shows some of the expressive power of OWL. The implication for software patterns is that search and other computations can be performed on heterogeneous pattern forms. Perhaps more importantly, these inferences are enabled through definitions embedded in the data itself, as shown in the previous figures. Only standard OWL definitions [<xref ref-type="bibr" rid="R33" id="160" class="deo:Reference">33</xref>] and a number of Description Logic Reasoners designed<marker type="page" number="8"/><marker type="column" number="1"/><marker type="block"/> to process OWL statements [<xref ref-type="bibr" rid="R9" id="163" class="deo:Reference">9</xref>] need to be applied. This along with the concept of URIs means that there is reasonable assurance that anyone anywhere can run these computations and receive the same results. This can have a major impact on how pattern collections are maintained and systematically refined to continuously extend usability design knowledge.</region>
        <outsider class="DoCO:TextBox" type="header" id="162" page="8" column="1">Appears in 31st IEEE Software Eng. Workshop (SEW 07)</outsider>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="165" page="8" column="1">6. Contributions and Discussion</h1>
        <region class="DoCO:TextChunk" id="169" page="8" column="1">Software patterns have proven to be a useful medium for capturing best practices. Thousands of patterns for various software issues have been written [ <xref ref-type="bibr" rid="R24" id="166" class="deo:Reference">24</xref>]. But current practices prevent software patterns from realizing their potential to become a significant software development resource. Developer knowledge of patterns is scattered and mostly concentrated on a few patterns in the GoF and/or POSA pattern collections. In this paper, we specifically explored usability patterns, the largest and fastest growing area of software patterns [<xref ref-type="bibr" rid="R24" id="167" class="deo:Reference">24</xref>]. Usability patterns disseminate knowledge in areas that most software developers lack essential knowledge, thus making it a critical area for further exploring how patterns can be used to effectively disseminate software development knowledge. There are a number of limitations to current software pattern practices. The most critical is that pattern collections are currently written in isolation of other pattern collections with no attempt to understand the relationships between patterns in other collections. Pattern collections also use a wide variety of pattern forms, making it difficult to coordinate pattern development efforts and adding barriers to the effective unification or federation of patterns. This is a significant barrier to the creation of tools that help developers utilize patterns in the software development process, create tools to search for patterns, and develop semantic relationships between patterns. The work described here takes a first step toward creating an infrastructure for addressing these issues. The infrastructure, defined as a data schema, meets many of the needs for developing an interconnected and distributed pattern repository that federates heterogeneous pattern forms. A strength of this infrastructure is that it utilizes a foundation of standardized software tools developed in the growing Semantic Web community. This will facilitate continued refinement and support as this community continues to grow and improve the foundational technologies. The implications for pattern designers are that patterns can continue to be developed using idiomatic pattern forms that meet the representational needs of new patterns while drawing on and connecting to the<marker type="column" number="2"/><marker type="block"/> larger body of both existing patterns and patterns under development. On the other hand, ontology development is difficult to understand and work with. The classic “knowledge acquisition” problem is clearly a significant risk to the potential success of this approach. However, the network effect and the use of recently developed standard pattern forms provide some hope that this approach can succeed where others have been less than successful. While this and other formal knowledge-based approaches are ultimately limited by the quality of the knowledge they contain, it is important to understand that this is true for all knowledge representation mediums, including books. Our approach does not seek to replace human judgment but to augment it with community-driven information that would otherwise be inaccessible or difficult to obtain. People will not seek information if they do not realize that potentially useful information exists.</region>
      </section>
      <section class="deo:FutureWork">
        <h1 class="DoCO:SectionTitle" id="170" page="8" column="2">7. Future Work</h1>
        <region class="DoCO:TextChunk" id="173" page="8" column="2">While this research in its formative stages, Web- based ontologies will play an important role in the development of next-generation Web technologies. It is therefore sensible that these technologies be investigated as a flexible, yet formal pattern representation medium that facilitates machine computation while retaining human readability. The greatest risks to this approach, ontology-based knowledge acquisition and capturing current patterns in this form, require considerable and careful investigation. We are currently working with pattern creators to convert current patterns into the PFOWL infrastructure. This will create a “seed” repository that will not only serve to demonstrate the feasibility of this approach, but will also attract both pattern users and designers to use the approach and begin using the infrastructure for both the creation of new patterns and translations of existing patterns. Tools built on top of the infrastructure are also needed to advance use of this approach. Tools are needed for both pattern users and pattern creators. For pattern users, tools should utilize the federated pattern ontologies (and pattern instances) to find patterns relevant to development efforts and/or design problems. For pattern designers, tools are needed that allow the easy creation of patterns in a given form, extending existing pattern forms when needed, and easing the creation of axiomatic definitions that define the patterns precisely. These tools should also support inferencing and consistency checking. For example, if a pattern designer creates a pattern that is inconsistent <marker type="page" number="9"/><marker type="column" number="1"/><marker type="block"/> with other definitions, then this inconsistency should be flagged so the designer can take appropriate action. A number of issues arise with the collaborative and distributed editing of logically consistent pattern representations. Our future work will investigate the use of Semantic Wiki technologies as a framework for pattern creation. These tools will incorporate rationale, meta-data comments, and support for expert comments from pattern experts and ontology editors.</region>
        <outsider class="DoCO:TextBox" type="header" id="172" page="9" column="1">Appears in 31st IEEE Software Eng. Workshop (SEW 07)</outsider>
      </section>
      <section class="deo:Conclusion">
        <h1 class="DoCO:SectionTitle" id="174" page="9" column="1">8. Conclusions</h1>
        <region class="DoCO:TextChunk" id="176" page="9" column="1">Software patterns are currently practiced informally. Software designers are expected to read about patterns contained in pattern collections and apply them when the situation (context) arises. While knowledge of patterns will remain critical to the use of pattern practices, the scale and diversity of patterns has grown to the point that it is impossible for designer to know the existence of all potentially relevant patterns. Technology solutions are needed that help designers find and apply relevant patterns. This research begins to resolve many of the problems that currently plague the patterns community, such as the need to find and utilize in their current diverse, disconnected, fractured, and distributed form. The PFOWL infrastructure for software patterns utilizes Web-based Semantic Web technologies that add a degree of formal definition to currently informal software pattern practices while retaining the human readability that has made this technique so successful. Through this infrastructure, we envision the creation of distributed repositories of patterns that relate problems to solutions through typed relationships that manifests a systems design method. Both the content of these patterns and knowledge contained in semantic (typed) relationships between patterns that constitute a pattern language are created, refined and maintained by a community of experts in respective subfields. The objective of this research is not an attempt to completely automate software design or user interface design. To the contrary, it is fully recognized that effective design takes a degree of talent and careful work that cannot be captured through rules, patterns or any information system. Continued research is needed to further understand the complexities of creating repositories of usability patterns and applying them proactively in the software development process. We have taken steps in this direction, and hope that future validation and use of our approach provides more information of usability knowledge and the contextual factors that impact this knowledge. Acknowledgements. I gratefully acknowledge the efforts a number of students that have contributed in various ways in this and associated research, <marker type="column" number="2"/><marker type="block"/> particularly Padmapriya Ashokkumar. This research has been funded in part by the National Science Foundation (CCF-0639164).</region>
      </section>
      <section class="DoCO:Bibliography">
        <h1 class="DoCO:SectionTitle" id="177" page="9" column="2">9. References</h1>
        <ref-list class="DoCO:BiblioGraphicReferenceList">
          <ref rid="R1" class="deo:BibliographicReference" id="179" page="9" column="2">[1] C. Alexander, "The Origins of Pattern Theory: the Future of the Theory, and the Generation of a Living World," OOPSLA 1996 Keynote Address, <ext-link ext-link-type="uri" href="http://www.patternlanguage.com/archive/ieee/ieeetext.ht" id="178">http://www.patternlanguage.com/archive/ieee/ieeetext.ht</ext-link> m, 1996.</ref>
          <ref rid="R2" class="deo:BibliographicReference" id="180" page="9" column="2">[2] C. Alexander, The Timeless Way of Building. Oxford Univ. Press, New York, 1979.</ref>
          <ref rid="R3" class="deo:BibliographicReference" id="181" page="9" column="2">[3] C. Alexander, S. Ishikawa, M. Silverstein, A Pattern Language: Towns, Buildings, Construction. Oxford University Press, New York, 1977.</ref>
          <ref rid="R4" class="deo:BibliographicReference" id="183" page="9" column="2">[4] B. Appleton, "Patterns and Software: Essential Concepts and Terminology," <ext-link ext-link-type="uri" href="http://www.cmcrossroads.com/bradapp/docs/patterns-" id="182">http://www.cmcrossroads.com/bradapp/docs/patterns-</ext-link> intro.html, Updated: Feb., 2000.</ref>
          <ref rid="R5" class="deo:BibliographicReference" id="185" page="9" column="2">[5] D. Bienhaus, "PLMLx Doc," <ext-link ext-link-type="uri" href="http://www.cs.kent.ac.uk/people/staff/saf/patterns/diethe" id="184">http://www.cs.kent.ac.uk/people/staff/saf/patterns/diethe</ext-link> lm/plmlx_doc/index.html, Updated: July, 2004.</ref>
          <ref rid="R6" class="deo:BibliographicReference" id="186" page="9" column="2">[6] J. Borchers, A Pattern Approach to Interaction Design. John Wiley &amp; Sons, 2001.</ref>
          <ref rid="R7" class="deo:BibliographicReference" id="187" page="9" column="2">[7] J. Borchers, "CHI Meets PLoP: An Interaction Patterns Workshop," SIGCHI Bulletin, 32(1), pp. 9-12, 2000.</ref>
          <ref rid="R8" class="deo:BibliographicReference" id="189" page="9" column="2">[8] D. Brickley, L. Miller, "FOAF Vocabulary Specification," <ext-link ext-link-type="uri" href="http://xmlns.com/foaf/0.1/." id="188">http://xmlns.com/foaf/0.1/.</ext-link></ref>
          <ref rid="R9" class="deo:BibliographicReference" id="190" page="9" column="2">[9] J. J. Carroll, I. Dickinson, C. Dollin, D. Reynolds, A. Seaborne, K. Wilkinson, "Jena: implementing the semantic web recommendations," Proc. 13th Int'l World Wide Web Conf., pp. 74-83, 2004.</ref>
          <ref rid="R10" class="deo:BibliographicReference" id="191" page="9" column="2">[10] I. W. Connell, N. V. Hammond, "Comparing usability evaluation principles with heuristics," Proc. INTERACT, pp. 621-636, 1999.</ref>
          <ref rid="R11" class="deo:BibliographicReference" id="192" page="9" column="2">[11] J. O. Coplien, Software Patterns. SIGS Press, 1996.</ref>
          <ref rid="R12" class="deo:BibliographicReference" id="193" page="9" column="2">[12] J. Deng, E. Kemp, E. G. Todd, "Managing UI pattern collections," Proc. 6th ACM SIGCHI New Zealand Chapter's Int'l Conf. on Computer-Human Interaction (CHINZ '05), pp. 31-38, 2005.</ref>
          <ref rid="R13" class="deo:BibliographicReference" id="194" page="9" column="2">[13] J. Dietrich, C. Elgar, "A Formal Description of Design Patterns Using OWL," 2005 Australian Software Engineering Conference (ASWEC'05), pp. 243-250, 2005.</ref>
          <ref rid="R14" class="deo:BibliographicReference" id="195" page="9" column="2">[14] J. Dietrich, C. Elgar, "Towards a Web of Patterns," Proc. Semantic Web Enabled Software Engineering (SWESE), 117-132, Galway, Ireland, 2005.</ref>
          <ref rid="R15" class="deo:BibliographicReference" id="196" page="9" column="2">[15] M. B. Dwyer, G. S. Avrunin, J. C. Corbett, "Patterns in property specifications for finite-state verification," Proc. 21st Int's Conf. on Software Engineering, Los Angeles, CA, pp. 411-420, 1999.</ref>
          <ref rid="R16" class="deo:BibliographicReference" id="200" page="9" column="2">[16] A. H. Eden, "Formal Specification of Object Oriented Design," Int'l Conf. on Multidisciplinary Design in Engineering CSME-MDE 2001, Montreal, Canada, on- <marker type="page" number="10"/><marker type="column" number="1"/><marker type="block"/> line at: <ext-link ext-link-type="uri" href="http://www.eden" id="199">http://www.eden</ext-link>- study.org/articles/2001/csme.pdf, 2001.</ref>
          <ref rid="R17" class="deo:BibliographicReference" id="201" page="10" column="1">[17] T. Erickson, "Lingua Francas for Design: Sacred Places and Pattern Languages," Proc. Designing Interactive Systems (DIS 2000), New York, pp. 357- 368, 2000.</ref>
          <ref rid="R18" class="deo:BibliographicReference" id="203" page="10" column="1">[18] S. Fincher, "CHI 2003 Workshop Report - Perspectives on HCI patterns: concepts and tools (introducing PLML)," Interfaces, 56, pp. 26-28, 2003, on-line at: <ext-link ext-link-type="uri" href="http://www.bcs-hci.org.uk/interfaces.html." id="202">http://www.bcs-hci.org.uk/interfaces.html.</ext-link></ref>
          <ref rid="R19" class="deo:BibliographicReference" id="204" page="10" column="1">[19] R. B. France, D.-K. Kim, S. Ghosh, E. Song, "A UML- based pattern specification technique," IEEE Trans. Software Engineering, 30(3), pp. 193- 206, 2004.</ref>
          <ref rid="R20" class="deo:BibliographicReference" id="205" page="10" column="1">[20] E. Gamma, R. Helm, R. Johnson, J. Vlissides, Design Patterns: Elements of Reusable Object-Oriented Software. Addison-Wesley, Reading, MA, 1995.</ref>
          <ref rid="R21" class="deo:BibliographicReference" id="206" page="10" column="1">[21] I. Grahm, A Pattern Language for Web Usability. Addison-Wesley, 2003.</ref>
          <ref rid="R22" class="deo:BibliographicReference" id="208" page="10" column="1">[22] hcipatterns.org, "hcipatterns.org," <ext-link ext-link-type="uri" href="http://www.hcipatterns.org/patterns.html." id="207">http://www.hcipatterns.org/patterns.html.</ext-link></ref>
          <ref rid="R23" class="deo:BibliographicReference" id="210" page="10" column="1">[23] S. Henninger, P. Ashokkumar, "An Ontology-Based Infrastructure for Usability Design Patterns," Proc. Semantic Web Enabled Software Engineering (SWESE), Galway, Ireland, on-line at: <ext-link ext-link-type="uri" href="http://www.mel.nist.gov/msid/conferences/SWESE/repo" id="209">http://www.mel.nist.gov/msid/conferences/SWESE/repo</ext-link> sitory/16ont-based_in4usability_patterns.pdf, pp. 41-55, 2005.</ref>
          <ref rid="R24" class="deo:BibliographicReference" id="211" page="10" column="1">[24] S. Henninger, V. Corrêa, "Software Pattern Communities: Current Practices and Challenges," Pattern Languages of Programs (PLoP 07), (submitted), 2007.</ref>
          <ref rid="R25" class="deo:BibliographicReference" id="213" page="10" column="1">[25] I. Horrocks, P. F. Patel-Schneider, H. Boley, S. Tabet, B. Grosof, M. Dean, "SWRL: A Semantic Web Rule Language Combining OWL and RuleML," W3C, <ext-link ext-link-type="uri" href="http://www.w3.org/Submission/SWRL/." id="212">http://www.w3.org/Submission/SWRL/.</ext-link></ref>
          <ref rid="R26" class="deo:BibliographicReference" id="215" page="10" column="1">[26] Jena, <ext-link ext-link-type="uri" href="http://www.hpl.hp.com/semweb/," id="214">http://www.hpl.hp.com/semweb/,</ext-link> 2002.</ref>
          <ref rid="R27" class="deo:BibliographicReference" id="216" page="10" column="1">[27] M. Klein, "XML, RDF, and Relatives," IEEE Intelligent Systems, 15(2), pp. 26-28, 2001.</ref>
          <ref rid="R28" class="deo:BibliographicReference" id="218" page="10" column="1">[28] S. J. Koyanl, R. W. Bailey, J. R. Nall, "Research-Based Web Design &amp; Usability Guidelines," Communications Technology Branch, National Cancer Institute &amp; US Dept of health and Human Services, <ext-link ext-link-type="uri" href="http://www.usability.gov/pdfs/guidelines.html," id="217">http://www.usability.gov/pdfs/guidelines.html,</ext-link> 2003.</ref>
          <ref rid="R29" class="deo:BibliographicReference" id="219" page="10" column="1">[29] E. Lai-Chong Law, E. T. Hvannberg, "Analysis of Strategies for Improving and Estimating the Effectiveness of Heuristic Evaluation," Proc. 3rd Nordic Conf. on HCI, pp. 241-250, 2004.</ref>
          <ref rid="R30" class="deo:BibliographicReference" id="221" page="10" column="1">[30] K. Lano, J. C. Bicarregui, S. Goldsack, "Formalising Design Patterns," 1st BCS-FACS Northern Formal Methods Workshop, on-line at: <ext-link ext-link-type="uri" href="http://ewic.bcs.org/conferences/1996/formalmethods/pa" id="220">http://ewic.bcs.org/conferences/1996/formalmethods/pa</ext-link> pers/paper11.htm, 1996.</ref>
          <ref rid="R31" class="deo:BibliographicReference" id="223" page="10" column="1">[31] D. L. McGuinness, F. van Harmelen, "OWL Web Ontology Language Overview," W3 Consortium, <ext-link ext-link-type="uri" href="http://www.w3.org/TR/owl-features/." id="222">http://www.w3.org/TR/owl-features/.</ext-link></ref>
          <ref rid="R32" class="deo:BibliographicReference" id="224" page="10" column="2">[32] T. Mikkonen, "Formalizing Design Patterns," Int'l Conf. Software Engineering, pp. 115–124, 1998.</ref>
          <ref rid="R33" class="deo:BibliographicReference" id="226" page="10" column="2">[33] E. Miller, J. Hendler, "Web Ontology Language (OWL)," W3 Consortium, <ext-link ext-link-type="uri" href="http://www.w3.org/2004/OWL/." id="225">http://www.w3.org/2004/OWL/.</ext-link></ref>
          <ref rid="R34" class="deo:BibliographicReference" id="227" page="10" column="2">[34] S. Montero, P. Díaz, I. Aedo, "A Semantic Representation for Domain-Specific Patterns," Int'l Symp. on Metainformatics, U. K. Wiil, Ed(s). Springer- Verlag, LNCS 3511, Salzburg, Austria, pp. 129-140, 2005.</ref>
          <ref rid="R35" class="deo:BibliographicReference" id="228" page="10" column="2">[35] J. Noble, "Classifying relationships between object- oriented design patterns," Australian Software Engineering Conference (ASWEC), pp. 98-107, 1998.</ref>
          <ref rid="R36" class="deo:BibliographicReference" id="229" page="10" column="2">[36] D. C. Schmidt, M. Stal, H. Rohnert, F. Buschmann, Pattern-Oriented Software Architecture, Volume 2: Patterns for Concurrent and Networked Objects. Wiley, 2000.</ref>
          <ref rid="R37" class="deo:BibliographicReference" id="230" page="10" column="2">[37] S. L. Smith, J. N. Mosier, "Guidelines for Designing User Interface Software," ESD-TR-86-278, Technical Report, The MITRE Corporation, 1986.</ref>
          <ref rid="R38" class="deo:BibliographicReference" id="232" page="10" column="2">[38] Stanford Univ., "Protégé Project," Stanford Medical Informatics, <ext-link ext-link-type="uri" href="http://protege.stanford.edu/," id="231">http://protege.stanford.edu/,</ext-link> Updated: Aug. 10, 2006.</ref>
          <ref rid="R39" class="deo:BibliographicReference" id="233" page="10" column="2">[39] R. Studer, V. R. Benjamins, D. Fensel, "Knowledge Engineering: Principles and Methods," Data and Knowledge Engineering, 25, pp. 161-197, 1998.</ref>
          <ref rid="R40" class="deo:BibliographicReference" id="235" page="10" column="2">[40] T. Taibi, D. C. L. Ngo, "Formal Specification of Design Patterns-A Balanced Approach," Journal of Object Technology, 2(4), pp. 127-140, 2003, on-line at: <ext-link ext-link-type="uri" href="http://www.jot.fm/issues/issue_2003_07/article4.pdf." id="234">http://www.jot.fm/issues/issue_2003_07/article4.pdf.</ext-link></ref>
          <ref rid="R41" class="deo:BibliographicReference" id="236" page="10" column="2">[41] L. Tetzlaff, D. R. Schwartz, "The Use of Guidelines in Interface Design," Proc. Human Factors in Computing Systems (CHI '91), ACM, New York, pp. 329-333, 1991.</ref>
          <ref rid="R42" class="deo:BibliographicReference" id="237" page="10" column="2">[42] H. Thovtrup, J. Nielsen, "Assessing the usability of a user interface standard," Proc. Human Factors in Computing Systems (CHI '91), New Orleans, LA, pp. 335-341, 1991.</ref>
          <ref rid="R43" class="deo:BibliographicReference" id="239" page="10" column="2">[43] J. Tidwell, "The Gang of Four are Guilty," <ext-link ext-link-type="uri" href="http://www.mit.edu/" id="238">http://www.mit.edu/</ext-link>~jtidwell/gof_are_guilty.html, 1999.</ref>
          <ref rid="R44" class="deo:BibliographicReference" id="240" page="10" column="2">[44] D. K. van Duyne, J. A. Landay, J. I. Hong, The Design Of Sites. Addison-Wesley, 2002.</ref>
          <ref rid="R45" class="deo:BibliographicReference" id="242" page="10" column="2">[45] M. van Welie, "Patterns in Interaction Design," <ext-link ext-link-type="uri" href="http://www.welie.com/," id="241">http://www.welie.com/,</ext-link> Updated: June 27, 2006.</ref>
          <ref rid="R46" class="deo:BibliographicReference" id="243" page="10" column="2">[46] M. van Welie, G. C. van der Veer, "Pattern Languages in Interaction Design: Structure and Organization," Proc. Interact '03, M. Rauterberg, Wesson, Ed(s). IOS Press, Amsterdam, The Netherlands, Zürich, Switzerland, pp. 527-534, 2003.</ref>
          <ref rid="R47" class="deo:BibliographicReference" id="244" page="10" column="2">[47] J. Vlissides, "Patterns, The Top 10 Misconceptions," Object Magazine, March, 1997.</ref>
          <ref rid="R48" class="deo:BibliographicReference" id="246" page="10" column="2">[48] Yahoo!, "Yahoo! Design Pattern Library," <ext-link ext-link-type="uri" href="http://developer.yahoo.com/ypatterns/," id="245">http://developer.yahoo.com/ypatterns/,</ext-link> 2006.</ref>
        </ref-list>
        <outsider class="DoCO:TextBox" type="header" id="198" page="10" column="1">Appears in 31st IEEE Software Eng. Workshop (SEW 07)</outsider>
        <outsider class="DoCO:TextBox" type="header" id="247" page="11" column="1">Appears in 31st IEEE Software Eng. Workshop (SEW 07)</outsider>
      </section>
    </body>
  </article>
</pdfx>
