<?xml version='1.0' encoding='UTF-8'?>
<pdfx xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://pdfx.cs.man.ac.uk/static/article-schema.xsd">
  <meta>
    <job>f6caf2541df8b5005c78506c8db4230c209b25e5c4c3530fff5a4fbbf39d7c80</job>
    <base_name>62fb</base_name>
    <doi>http://dx.doi.org/10.1007/978-1-84628-925-5_8</doi>
  </meta>
  <article>
    <front class="DoCO:FrontMatter">
      <outsider class="DoCO:TextBox" type="header" id="1">Büscher M., Christensen M., Hansen K.M., Mogensen P., Shapiro D. Bottom-up, top-down? Connecting software architecture design with use, In Voß, A., Hartswood, M.; Ho, K., Procter, R.; Rouncefield, M.; Slack, R.; Büscher, M. Configuring user-designer relations: Interdisciplinary perspectives . Springer Verlag, Accepted for publication in 2007.</outsider>
      <title-group>
        <article-title class="DoCO:Title" id="2">Bottom-up, top-down? Connecting software architecture design with use</article-title>
      </title-group>
      <contrib-group class="DoCO:ListOfAuthors">
        <contrib contrib-type="author">
          <name id="3">Monika Büscher</name>
        </contrib>
        <contrib contrib-type="author">
          <name id="4">Michael Christensen</name>
        </contrib>
        <contrib contrib-type="author">
          <name id="5">Klaus Marius Hansen</name>
        </contrib>
        <contrib contrib-type="author">
          <name id="6">Preben Mogensen</name>
        </contrib>
        <contrib contrib-type="author">
          <name id="7">Dan 1 Shapiro</name>
        </contrib>
      </contrib-group>
      <footnote class="DoCO:Footnote" id="10">1 Department of Sociology, Lancaster University, UK. {m.buscher; <email id="8">d.shapiro}@lancaster.ac.uk</email> 2 Computer Science, Aarhus University, Denmark. {toby; klaus.m.hansen; <email id="9">preben}@daimi.au.dk</email></footnote>
      <contrib-group class="DoCO:ListOfAuthors">
        <contrib contrib-type="author">
          <name id="12">Participatory design has traditionally focused on the design of technology applications or the co-realisation of a more holistic socio-technical bricolage of new</name>
        </contrib>
        <contrib contrib-type="author">
          <name id="13">existing technologies</name>
        </contrib>
        <contrib contrib-type="author">
          <name id="14">practices. ‘Infrastructural’ design issues like software architectures</name>
        </contrib>
        <contrib contrib-type="author">
          <name id="15">programming languages</name>
        </contrib>
        <contrib contrib-type="author">
          <name id="16">communication</name>
        </contrib>
        <contrib contrib-type="author">
          <name id="17">security</name>
        </contrib>
        <contrib contrib-type="author">
          <name id="18">resource models do not seem to be in need of</name>
        </contrib>
        <contrib contrib-type="author">
          <name id="19">nor amenable to</name>
        </contrib>
        <contrib contrib-type="author">
          <name id="20">participatory design. Yet we should expect</name>
        </contrib>
        <contrib contrib-type="author">
          <name id="21">research has indeed shown</name>
        </contrib>
        <contrib contrib-type="author">
          <name id="22">that there are deeply consequential relationships between use</name>
        </contrib>
        <contrib contrib-type="author">
          <name id="23">software architectural design. If designers hide the ‘sensing’</name>
        </contrib>
        <contrib contrib-type="author">
          <name id="24">‘reasoning’</name>
        </contrib>
        <contrib contrib-type="author">
          <name id="25">computation technologies do</name>
        </contrib>
        <contrib contrib-type="author">
          <name id="26">for example</name>
        </contrib>
        <contrib contrib-type="author">
          <name id="27">people can find it difficult to perceive</name>
        </contrib>
        <contrib contrib-type="author">
          <name id="28">understand</name>
        </contrib>
        <contrib contrib-type="author">
          <name id="29">creatively exploit technological affordances (e.g. Belotti</name>
        </contrib>
        <contrib contrib-type="author">
          <name id="30">Edwards 2001). In addition</name>
        </contrib>
        <contrib contrib-type="author">
          <name id="31">the causes of failure</name>
        </contrib>
        <contrib contrib-type="author">
          <name id="32">breakdowns can be hard to detect</name>
        </contrib>
        <contrib contrib-type="author">
          <name id="33">even harder to address (Belotti et al. 2002).</name>
        </contrib>
      </contrib-group>
    </front>
    <body class="DoCO:BodyMatter">
      <section class="deo:Introduction">
        <h1 class="DoCO:SectionTitle" id="11" page="1" column="1">1 Introduction</h1>
      </section>
      <region class="DoCO:TextChunk" id="35" page="1" column="1">Moreover, the emergence of ubiquitous, ambient and component-based computing has taken computing out of comprehensive systems into a multitude of devices, services and resources. In some sense this makes the computer disappear or become invisible (<xref ref-type="bibr" rid="R34" id="34" class="deo:Reference">Weiser 1991</xref>), and it enables increased flexibility and ‘bricolage’ of disparate elements, but it also introduces extra difficulties, for example when it comes to determining which computing devices, services or resources are the most appropriate to use in specific situations. To engage ubiquitous computing technologies effectively and creatively, people need support in making computational processes, states and potential perceivable or ‘palpable’ as and when they may need or wish to do so, and in ways that are appropriate for the particular situation they are in, their level of computational literacy and their interest. New software architectures are needed to support palpability. To address this, various European research teams have come together in the ‘Palpable Computing’ (PalCom) project (www.ist-palcom.org). The project is creating a range of palpable ambient computing prototypes in healthcare, emergency services and landscape architecture. Its principal aim, however, is to create an open architecture for palpable computing. The open architecture will consist of a set of specifications as well as a reference implementation of these specifications.</region>
      <region class="DoCO:TextChunk" id="36" confidence="possible" page="1" column="1">This is an ambitious goal. The demand for appropriateness and the complex, multi-layered translations between material computational processes and the functionality and interfaces</region>
      <outsider class="DoCO:TextBox" type="page_nr" id="37" page="1" column="1">1</outsider>
      <region class="DoCO:TextChunk" id="38" page="2" column="1">that users experience, mean that it is a goal that is impossible to meet completely. However, some significant progress can and must be made if ubiquitous computing is to be an attractive and useful prospect. Clearly, design for palpability is not simply a matter of revealing what was previously hidden. Palpable computing is a new design initiative that envisages ubiquitous technologies whose states, processes and affordances can be made available to the senses, or ‘palpable’, and that are therefore more easily understood, appropriated and controlled. To address palpability, we take six dimensions of the vision of ambient and ubiquitous computing, and challenge them by considering their opposites. Users will often need to find a position that lies between the extremes:</region>
      <region class="DoCO:TextChunk" id="39" confidence="possible" page="2" column="1">ubiquitous/ambient computing complemented with palpable computing invisibility visibility construction de-construction scalability understandability heterogeneity coherence change stability automation user control and deference</region>
      <region class="DoCO:TextChunk" id="40" page="2" column="1">When a supposedly seamless and transparent set of connections breaks down, for example, users should be able to make them visible and inspect what has gone wrong. Similarly, users should be able to deconstruct an ambient assembly of devices and services, both to inspect it for repair and to use its elements for new assemblies. While ambient environments should be able to scale up to large numbers of participating elements, they should also remain understandable. Coherence must be forged from heterogeneous materials, such as disparate digital and physical devices and information, while recognising and where necessary preserving the particularities of each. Changes – for example, of location, resources, context and activity – are normal in an ambient environment, but sometimes users need to be aware of the change and sometimes they need to experience highly stable adaptivity. Users do not want to be constantly pestered with choices and they need to be able to delegate ‘routine’ decisions, but it is inevitable that the system will often guess wrong, so users must always be able to retrieve control – and must have the information to help them to know when they might want to do so.</region>
      <region class="DoCO:TextChunk" id="41" confidence="possible" page="2" column="1">To support the situated negotiation of these core dimensions of ubiquitous computing and to allow people to make computational ‘sensing’, ‘reasoning’, potential and actual activities palpable, new forms and depths of interactivity are required. This is where the ambition and, perhaps, inescapable unattainability of the ultimate design goal of palpable computing lies. Some form of human-like social and contextual perception and skill on the part of the technologies seems to be essential, yet, research within computer-supported cooperative work (CSCW) and related fields proves that it is impossible to produce anything but very</region>
      <outsider class="DoCO:TextBox" type="page_nr" id="42" page="2" column="1">2</outsider>
      <region class="DoCO:TextChunk" id="59" page="3" column="1">limited and flawed versions of such perception and skill (Suchman 1987, <xref ref-type="bibr" rid="R20" id="43" class="deo:Reference">Dreyfus 1992</xref>). When people interact with each other, they are able to negotiate contradictions and complementarities with ease, using nuanced skill, perception and judgement to act appropriately as the situation demands. They are able, that is, to act with social and contextual skill. For computers, however, this is extraordinarily difficult. Palpable applications and services ‘must’ be able to make, and support the making of, optimal choices concerning each of the dimensions outlined above in situated use, and a palpable software architecture ‘must’ support the construction and operation of applications and services that can do so. But we know in advance that it will not be possible to achieve this completely, and that various compromises and simplifications will have to be made.<marker type="block"/> Many designers of computer applications, spanning groupware and CSCW systems (<xref ref-type="bibr" rid="R19" id="45" class="deo:Reference">Dourish 2003</xref>, <xref ref-type="bibr" rid="R4" id="46" class="deo:Reference">Bansler and Havn 2006</xref>), ubiquitous computing (<xref ref-type="bibr" rid="R14" id="47" class="deo:Reference">Chalmers 2003</xref>), context aware and ambient systems (Belotti et al 2002), grid technology (Hartswood et al, submitted), and system security (de Paula et al 2005) share similar concerns. Component-based computing potentially makes creative (de-)composition possible and, more explicitly than any socio- technical step before, turns users into designers. It ‘dissolves’ the privileged position of the designer who knows ‘the system’s range of actions in advance’ (<xref ref-type="bibr" rid="R19" id="48" class="deo:Reference">Dourish 2003</xref>). Research and design have begun to address these challenges with flexible architectures that support a range of tailoring techniques (MacLean et al 1997), with maps and models that reflect, and allow users to modify, system behaviour (<xref ref-type="bibr" rid="R18" id="49" class="deo:Reference">Dourish 1995</xref>), and ways of revealing system properties through ‘seamful design’ (<xref ref-type="bibr" rid="R13" id="50" class="deo:Reference">Chalmers and Galani 2004</xref>). The PalCom research builds on this work. In particular, we seek to move beyond the appreciation that it is impossible for designers to predict what kinds of translations of computational states or processes would be appropriate for different users in different situations. While developing reflective, agent, and component-based support for palpability (<xref ref-type="bibr" rid="R30" id="51" class="deo:Reference">Rimassa et al 2005</xref>, <xref ref-type="bibr" rid="R24" id="52" class="deo:Reference">Ingstrup and Hansen 2005</xref>), PalCom also supports strategies that rely less on the skill of designers to anticipate how and when someone (whose level of computational literacy and situated needs for inspection are unknown) might wish to examine computational processes, and more on support for ‘reflexive’ – in the sense of direct, two-way, feedback-rich – forms of human- computing interaction. Our design incorporates the evolution of standards (Belotti et al. 2002) and a variety of discovery and inspection tools.<marker type="block"/> To pursue these software architectural design goals in a way that fits design into emerging practice, an ethnographically informed, participatory design approach is essential. However, stretching the iterative cycles of participatory design to involve users in the design of software architectures poses a number of difficulties. First in line is the indirectness of users’ experience of computer architectures.<marker type="page" number="4"/><marker type="block"/> In ‘traditional’ participatory design, user participation usually informs the design of hardware and software that seek to support the users’ work directly. Users are able to engage with mock-ups and prototypes of the objects they are co-designing directly, often in a hands-on manner. Where software architecture is concerned, this engagement is indirect. Even though users of palpable applications and services will rely on features of the software architecture to make computational states, processes and affordances palpable, they will rarely interact directly with it. In their pioneering exploration of challenges for user-centred design and evaluation of infrastructure, <xref ref-type="bibr" rid="R21" id="58" class="deo:Reference">Edwards et al (2003)</xref> focus on the indirectness of users’ experience with computer architectures and raise important questions:</region>
      <outsider class="DoCO:TextBox" type="page_nr" id="55" page="3" column="1">3</outsider>
      <region class="DoCO:FigureBox" id="F1">
        <image class="DoCO:Figure" src="62fb.page_004.image_01.png" thmb="62fb.page_004.image_01-thumb.png"/>
        <caption class="deo:Caption" id="57" page="4" column="1">Figure 1 Stretching ‘traditional’ participatory design methods to inform software architecture innovation</caption>
      </region>
      <region class="DoCO:TextChunk" id="61" confidence="possible" page="4" column="1">• Is it possible to more directly couple design of infrastructure features to the design of application features? • How can this more direct coupling exist when the applications the infrastructure supports don’t yet exist or cannot be built without the infrastructure itself? • Could the context of either users or the use of these unknown applications have an important impact on the features we choose? • How can we avoid building a bloated system incorporating every conceivable feature, while ensuring we have a system that will not be constantly updated (and so repeatedly broken) throughout its lifespan? (<xref ref-type="bibr" rid="R21" id="60" class="deo:Reference">Edwards et al 2003</xref>)</region>
      <region class="DoCO:TextChunk" id="64" page="4" column="1">Our experience with participatory design shows that in-depth, long-term engagement with the context of users and use is essential for good design. We involve users deeply and equally as co-designers in long-term processes of socio-technical co-innovation. This is motivated by the fact that long-term use (and design-in-use) of prototypes that is as realistic as possible, in settings that are as realistic as possible, allows users to bring hands-on practical creativity to the use of new technologies. This is a condition for the emergence of viable future practices <marker type="page" number="5"/><marker type="block"/> which, in turn, should inform the design of the technologies under development. Thus, to bring participatory design to the design of software architectures, we must also ask:</region>
      <outsider class="DoCO:TextBox" type="page_nr" id="63" page="4" column="1">4</outsider>
      <region class="DoCO:TextChunk" id="65" confidence="possible" page="5" column="1">• How can we make use experience of software architectures more direct?</region>
      <region class="DoCO:TextChunk" id="73" page="5" column="1">In this chapter we describe how we bring participatory design to the design of the PalCom open architecture. The schema in <xref ref-type="fig" rid="F2" id="66" class="deo:Reference">Figure 2</xref> gives an overview. Four sets of people with different primary interests and skills (users, work analysts, application developers and software architects) connect through observations, participatory workshops, and experiments. Collaboration is often face-to-face and hands-on, as users, work analysts, developers and architects travel to each others’ sites of work, to bring prototypes into real-world use. In the context of participatory and ethnographically-informed design, there is nothing new in users, work analysts and application developers working closely together to inform and challenge the evolving design. Bringing software architects into this process is less usual, however, and a technique we have created to support this is the formation of a group of ‘travelling architects’ (<xref ref-type="bibr" rid="R16" id="67" class="deo:Reference">Corry et al., 2006</xref>). Prototypes embody, and serve as the focus for, innovation in terms of practice, applications and services, and architecture.<marker type="block"/> This method introduces at least four participatory elements to the design of the open architecture. First, the analysis of work practice and of corresponding possibilities for technical support suggest requirements for an underlying software architecture. Second, practitioners’ experiences of using evolving application prototypes expose strengths and weaknesses in the software architecture design, and suggest further requirements. Third, the presence of ‘travelling architects’ – gaining first-hand experience of users’ work settings and of their encounters with prototypes – opens new direct pathways to the software architecture and empowers software architects to participate in a wider range of discussions and negotiations around the design. Fourth, the application developers within the project are themselves users of the evolving open architecture, opening up an opportunity for a participatory design relation amongst the computer scientists in the project.<marker type="page" number="6"/><marker type="block"/> Sections 2 and 3 below explore the intersections between these four elements by focussing on a central example, tracking the evolution of the concept of ‘assemblies’ through a series of reflections from different perspectives, revealing how perspectives and experiences from use, application prototype design and software architecture design intertwine in the participatory design of the PalCom open architecture. Section 2 explores how the concept of ‘assemblies’ arose in the course of close collaboration with one set of prospective users of an application prototype. It formulates some core technical challenges, describes scenarios derived from work practice of the prototypes in use, and considers some implications for the open architecture. Section 3 explores the ways in which the concept of ‘assembly’ was taken up in the open architecture itself. In Section Four, we draw out some key insights from this reflective process.</region>
      <region class="DoCO:FigureBox" id="F2">
        <image class="DoCO:Figure" src="62fb.page_005.image_02.png" thmb="62fb.page_005.image_02-thumb.png"/>
        <caption class="deo:Caption" id="70" page="5" column="1">Figure 2 Schema of the participatory design process</caption>
      </region>
      <outsider class="DoCO:TextBox" type="page_nr" id="72" page="5" column="1">5</outsider>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="74" page="6" column="1">2 Challenges to coupling infrastructure, applications and services</h1>
        <region class="DoCO:TextChunk" id="82" page="6" column="1">Ubiquitous computing has always posed technical challenges for software architectures ( <xref ref-type="bibr" rid="R35" id="75" class="deo:Reference">Weiser 1993</xref>). This stems in part from a complex interplay of requirements from particular applications and particular use, and in part from general properties of these kinds of computing systems such as resource constraints, use of wireless connectivity, and mobility of devices and users. Considered from a technical point of view, many of the six dimensions of the challenge for palpable computing (invisibility/visibility, scalability/understandability, construction/de-construction, heterogeneity/coherence, change/stability, automation/user control and deference) are amenable to established object-oriented software engineering practices. In this chapter, we will focus on the negotiation of visibility/invisibility and construction/deconstruction in an effort to achieve a creative understanding of computational affordances on a small and large scale, although we also touch on the other dimensions. Invisibility of the internals of objects, for example, is usually supported by information hiding and considered a major technique in managing dependencies in software systems (Parnas 1972). Construction (or composition) is the raison d'être of component-based architectures in which applications ideally may be composed from available software components (<xref ref-type="bibr" rid="R33" id="76" class="deo:Reference">Szyperski 1998</xref>). Understandability may be said to be coupled to (static) typing in programming languages where program elements are statically assigned a set of permissible data values.<marker type="block"/> On the other hand, some of the complementary concepts in the challenge pairs give rise to interesting issues in languages, middleware, and software architecture. Visibility, for example, may be in conflict with information hiding (<xref ref-type="bibr" rid="R37" id="78" class="deo:Reference">Ørbæk 2005</xref>), in that controlled ways of ‘opening up’ software systems are needed. In particular, if exceptions arise in the use of palpable computing systems, visibility of what has gone wrong and possibly why becomes important. Actually, in a dynamic pervasive computing world, failure cannot really be seen as exceptional and thus we instead try to design for contingency handling (a concept covering more than just failure handling) rather than exception handling. Change of, e.g., location is also a challenge<marker type="page" number="7"/><marker type="block"/> in that references to resources from software components need to be re-established. De- construction/de-composition, in particular when the de-construction is not an exact inverse of a previous construction, emerges as a major and radical new issue. In general, it may be said that much effort has been expended in middleware development in order to make application programming as transparent as possible to location/distribution, time, failures etc. whereas it was realized at the outset that palpable computing would have to go beyond this in addressing the challenge pairs, e.g., in terms of having to support visibility of components (and their locations) in order to support de-composition. Indeed, it has quite often been remarked that ‘transparent’ in computer science – meaning concealed and invisible – is quite contrary to its everyday use where it means open and accountable. One example is that of distributed systems where “distribution transparency” means exactly that it is not known to components of the system that they reside on different hosts (cf. e.g., <xref ref-type="bibr" rid="R31" id="81" class="deo:Reference">Stroud (1992)</xref>)</region>
        <outsider class="DoCO:TextBox" type="page_nr" id="80" page="6" column="1">6</outsider>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="83" page="7" column="1">2.1 Gaining a sense of how coupling could be achieved in a world where applications/services don’t yet exist</h2>
          <region class="DoCO:TextChunk" id="85" confidence="possible" page="7" column="1">These technical issues have given input to ethnographic work as well as participatory design work in PalCom. It should be noted that although the sequence here places technical constraints and opportunities first, it does not imply a cause/effect relationship from technical issues to fieldwork/PD. The analysis of technical issues is deeply and continuously inspired by observations of existing practice and develops opportunities and problems for ubiquitous computing systems in the light of such observations. One suite of application prototypes we are developing as drivers for software architectural design seeks to support landscape architects in landscape and visual impact assessment (LVIA) e.g. of windfarms. The major difficulties in this work lie in evaluating the impact of planned but not-yet-existing developments on views and experiences of landscape (<xref ref-type="bibr" rid="R10" id="84" class="deo:Reference">Büscher 2006</xref>). This involves identifying and finding key viewpoints, carrying out and documenting a complex and rigorous process of evaluation.</region>
          <region class="DoCO:FigureBox" id="F3">
            <image class="DoCO:Figure" src="62fb.page_007.image_03.png" thmb="62fb.page_007.image_03-thumb.png"/>
            <caption class="deo:Caption" id="87" page="7" column="1">Figure 3 Landscape architect Lynda trying to see whether a proposed wind farm would be visible from touristicallly or otherwise significant viewpoints or when passing: While driving, with maps, computer models, GPS</caption>
          </region>
          <region class="DoCO:TextChunk" id="88" page="7" column="1">In a 60x60 km study area of undulating hills it can be extremely difficult to keep track of the location of a proposed (but not yet physically present) windfarm and envisage its visual and experiential impact on people’s experience of the landscape. The ‘sitepack’ prototype is designed to support landscape and visual assessment. It allows users to assemble photo and</region>
          <outsider class="DoCO:TextBox" type="page_nr" id="89" page="7" column="1">7</outsider>
          <region class="DoCO:TextChunk" id="90" confidence="possible" page="8" column="1">video camera(s), location devices, displays, the car, and other components, including computation services that convert location signals or track specific locations.</region>
          <region class="DoCO:TextChunk" id="93" page="8" column="1">To illustrate some key ideas and challenges around which our participatory design process revolves, and to give readers a sense of some concrete prototypes, we present a set of brief envisioning scenarios. They take activities observed in real work practice within a typical working day for a landscape architect, re-imagined in the context of new support tools. The scenarios, although quite challenging, simplify the reality of work practice, in that they assume only one landscape architect is on site. In reality, there will often be two in the car and sometimes there will be more than one car. <marker type="block"/> Assembling the SiteTracker In the morning, before driving off to find and assess views within the 60x60 km study area, landscape architect Lynda opens her sitepack and assembles a ‘SiteTracker’. The SiteTracker consists of a small video-camera, a motor capable of turning 360 degrees, a digital compass, a GPS, and a display device. The camera, motor and compass are mounted on the car (<xref ref-type="fig" rid="F4" id="92" class="deo:Reference">Figure 4</xref>) in order to assist in determining whether the proposed wind farm is visible from various stretches of the road. Using a service running on her desktop providing an overview of available devices, Lynda assembles the SiteTracker and marks the GPS coordinates for the centre of the proposed wind farm.</region>
          <region class="DoCO:FigureBox" id="F4">
            <image class="DoCO:Figure" src="62fb.page_008.image_04.png" thmb="62fb.page_008.image_04-thumb.png"/>
            <caption class="deo:Caption" id="95" page="8" column="1">Figure 4 Sketches and mock-ups of the site-tracker from participatory design workshops with the landscape architects.</caption>
          </region>
          <region class="DoCO:TextChunk" id="97" confidence="possible" page="8" column="1">The SiteTracker service is set running on the display device and Lynda brings the physical assembly of devices to the car. She mounts the GPS in the front window, the display on the dashboard, and the video camera and compass on top of the motor that, in turn, is mounted on the roof of the car inside a protective casing (<xref ref-type="fig" rid="F5" id="96" class="deo:Reference">Figure 5</xref>). Using the SiteTracker when driving</region>
          <outsider class="DoCO:TextBox" type="page_nr" id="98" page="8" column="1">8</outsider>
          <region class="DoCO:FigureBox" id="Fx99">
            <image class="DoCO:Figure" src="62fb.page_009.image_05.png" thmb="62fb.page_009.image_05-thumb.png"/>
          </region>
          <region class="unknown" id="100" page="9" column="1">Car roof Car dashboard</region>
          <region class="DoCO:FigureBox" id="F5">
            <image class="DoCO:Figure" src="62fb.page_009.image_06.png" thmb="62fb.page_009.image_06-thumb.png"/>
            <image class="DoCO:Figure" src="62fb.page_009.image_07.png" thmb="62fb.page_009.image_07-thumb.png"/>
            <image class="DoCO:Figure" src="62fb.page_009.image_08.png" thmb="62fb.page_009.image_08-thumb.png"/>
            <caption class="deo:Caption" id="102" page="9" column="1">Figure 5 First SiteTracker prototype and its components. The hands and the line track the location of the centre of the wind farm and other important landmarks</caption>
          </region>
          <region class="DoCO:TextChunk" id="122" page="9" column="1">While driving, the GPS constantly provides location information, and the digital compass directional information of where the video-camera is pointing (with faster updates than the GPS). On this basis, the SiteTracker service turns the motor, and thereby the camera, to point towards the proposed wind farm, and the resulting video footage from the camera is shown on the display with an overlay showing exactly where the centre of the wind farm would be, seen from the position of the camera on the roof. <marker type="page" number="10"/><marker type="block"/> While driving, Lynda passes a number of places that will need to be documented later on when the weather improves (documenting a viewpoint usually requires clear, sunny weather to ensure satisfactory visibility). To help her remember viewpoints where pictures should eventually be taken, Lynda frequently stops the car, gets out a still camera, unclips the GPS from the dashboard (disassembling the SiteTracker) and re-assembles the GPS with the still camera to form a ‘GeoTagger’ (<xref ref-type="fig" rid="F7" id="110" class="deo:Reference">Figure 7</xref>), providing a light-weight solution for bringing up into towers, through woodland, up hills, etc. When taking pictures, the GPS coordinates and a rough direction from the GPS is stored alongside the pictures on the camera.<marker type="block"/> The sky clears and Lynda passes an important viewpoint. She decides to document the view by taking high quality panoramic pictures (at least 180 degrees) for photomontages for the official report. She unclips the SiteTracker assembly from the car roof, replaces the video- camera with a high resolution still camera and mounts the new GeoTagger asssembly on a tripod. The tripod provides tilt information. Using the GeoTagger service she can now take panoramic pictures, where locations, accurate directions and tilt of the camera are stored along with the pictures (<xref ref-type="fig" rid="F8" id="115" class="deo:Reference">Figure 8</xref>). On return to the car, she disassembles the GeoTagger and re-assembles the SiteTracker to continue the survey.<marker type="page" number="11"/><marker type="block"/> Later the same day Lynda visits one of the landowners possessing knowledge about the local usages of the terrain, wildlife, bio-diversity, etc. She dismounts the display from the dashboard, stores some pictures, maps and video footage on the display’s storage media and walks into the landowner’s offices.<marker type="block"/> In order to present draft layouts and findings, the display is now made part of new assemblies (via the landowner’s network), utilising local devices: for example, by accessing material via the small display device, but showing and navigating through it using a large screen available in the office. Changes, annotations, etc. are stored on the display device.</region>
          <region class="DoCO:FigureBox" id="F6">
            <image class="DoCO:Figure" src="62fb.page_009.image_09.png" thmb="62fb.page_009.image_09-thumb.png"/>
            <caption class="deo:Caption" id="105" page="9" column="1">Figure 6 Current Site Tracker prototype</caption>
          </region>
          <region class="unknown" id="106" page="9" column="1">Recconnaisance</region>
          <region class="DoCO:FigureBox" id="F7">
            <image class="DoCO:Figure" src="62fb.page_009.image_10.png" thmb="62fb.page_009.image_10-thumb.png"/>
            <image class="DoCO:Figure" src="62fb.page_009.image_11.png" thmb="62fb.page_009.image_11-thumb.png"/>
            <caption class="deo:Caption" id="108" page="9" column="1">Figure 7 The ‘GeoTagger’ indexes photographs with location and direction information</caption>
          </region>
          <outsider class="DoCO:TextBox" type="page_nr" id="109" page="9" column="1">9</outsider>
          <region class="unknown" id="112" page="10" column="1">Documenting the site</region>
          <region class="DoCO:FigureBox" id="F8">
            <image class="DoCO:Figure" src="62fb.page_010.image_12.png" thmb="62fb.page_010.image_12-thumb.png"/>
            <image class="DoCO:Figure" src="62fb.page_010.image_13.png" thmb="62fb.page_010.image_13-thumb.png"/>
            <caption class="deo:Caption" id="114" page="10" column="1">Figure 8 The GeoTagger expanded with tripod</caption>
          </region>
          <region class="unknown" id="117" page="10" column="1">Visiting a Landowner</region>
          <region class="DoCO:FigureBox" id="F9">
            <image class="DoCO:Figure" src="62fb.page_010.image_14.png" thmb="62fb.page_010.image_14-thumb.png"/>
            <caption class="deo:Caption" id="119" page="10" column="1">Figure 9 Assembly at the landowner’s office</caption>
          </region>
          <outsider class="DoCO:TextBox" type="page_nr" id="120" page="10" column="1">10</outsider>
          <region class="DoCO:TextChunk" id="123" confidence="possible" page="11" column="1">When Lynda leaves the premises, all material that was shown on external devices (unless explicitly agreed otherwise) is taken back with the help of a ‘take back service’, so that no potentially confidential material is left on external devices. Remote access and control of devices</region>
          <region class="DoCO:FigureBox" id="F10">
            <image class="DoCO:Figure" src="62fb.page_011.image_15.png" thmb="62fb.page_011.image_15-thumb.png"/>
            <image class="DoCO:Figure" src="62fb.page_011.image_16.png" thmb="62fb.page_011.image_16-thumb.png"/>
            <caption class="deo:Caption" id="125" page="11" column="1">Figure 10 Site Tracker prototype and Site Tracker assembly expanded with remote control (mobile phone). Snapshot from a participatory field experiment</caption>
          </region>
          <region class="DoCO:TextChunk" id="127" page="11" column="1">On a second survey, it turns out that changes have happened since the last visit. Firstly, parts of industrial forestry have been felled, so much more of the wind farm will be visible from an important viewpoint. Secondly, now trees and hedges have leaves (the first visit was during winter), meaning that the hedge along the roadside can no longer be seen through. <marker type="block"/> As a consequence, Lynda has to extend the tripod so that the the GeoTagger is situated some 2,5 m above ground, making it impossible to look through the camera and operate it. Therefore, Lynda extends the GeoTagger assembly with a mobile phone. The image recorded by the still-camera is now shown on the phone’s display, and the phone’s keypad is used as a remote controller to turn the camera and take pictures.</region>
          <region class="DoCO:TextChunk" id="128" confidence="possible" page="11" column="1">Remote collaboration The visibility of the proposed wind farm is now more problematic than previously envisaged, and Lynda starts to wonder whether this may have an influence on the overall layout of the</region>
          <outsider class="DoCO:TextBox" type="page_nr" id="129" page="11" column="1">11</outsider>
          <region class="DoCO:TextChunk" id="130" page="12" column="1">turbines and viewpoints. With the GeoTagger still mounted on the tripod, Lynda now uses the mobile phone to create a data connection back to her home office in order to transfer pictures of the new visibility to show and discuss with colleagues. As the discussion unfolds, the colleague back home is able to remotely control the devices on the tripod (e.g. turning the camera and seeing the result).</region>
          <region class="DoCO:TextChunk" id="131" confidence="possible" page="12" column="1">Below, we summarize how the prototypes described here probe the PalCom open architecture. This corresponds to the first of the four participatory elements of the design of the open architecture introduced on page 5, how the analysis of work practice and of corresponding possibilities for technical support suggest requirements for an underlying software architecture.</region>
          <section class="DoCO:Section">
            <h3 class="DoCO:SectionTitle" id="132" page="12" column="1">2.1.1 Challenges</h3>
            <region class="DoCO:TextChunk" id="134" page="12" column="1">Continuous (Re-)assembling All scenarios involve a continuous (re-)assembly and (re-)construction of services and devices. This is richly supported back in the office with appropriate prototype interfaces to make and show the device and service assembly. However, the work also calls for various disassemblies and reassemblies in the field with more impoverished resources, which must nonetheless optimise both making, and representing to the user (making visible) the assemblies that are in play. It needs always to be clear to what assembly (if any) a particular device currently belongs, what assemblies are in play, on what device a particular service is running, etc. <marker type="block"/> On-the-move In all the scenarios, the assemblies in question will be in motion. This means that even if an assembly remains constant itself, its context changes frequently. An assembly must react appropriately to resulting changes – by, for example, notifying users if potentially useful additional resources become available, such as the processing power in devices in a car that has come in radio range or by switching communication channels when one drops out. This calls for appropriate choices and behaviour, and appropriate documentation of such choices and behaviours, on the part of the assembly.</region>
            <region class="DoCO:TextChunk" id="135" confidence="possible" page="12" column="1">Shifting modes of cooperation The scenarios entail shifts in the actors in collaboration as well as in the modes of collaboration. This may require a change in the behaviour of an assembly, even though neither its constituents nor its physical environment has changed. It may, for example, raise challenges regarding privacy and confidentiality of actions and materials as well as challenges in relation to who operates what assemblies, support for collaborative work, the question of whether users are part of the assemblies, and how to make those relations visible</region>
            <outsider class="DoCO:TextBox" type="page_nr" id="136" page="12" column="1">12</outsider>
            <region class="DoCO:TextChunk" id="137" confidence="possible" page="13" column="1">and understandable. The ‘character’ of an assembly depends on such intangibles as the people involved and their purposes.</region>
            <region class="DoCO:TextChunk" id="139" page="13" column="1">Quality of Service Different assemblies may be able to do the same things, but with different capacities, for example with different levels of accuracy. A high degree of accuracy is not required in all the scenarios, but it is very important in all of them that the user knows and is made aware of the given accuracy. If a landscape architect is taking photographs in poor weather, for general work planning purposes rather than as photographs for official records, she may decide that relatively inaccurate direction information, derived from GPS alone, is adequate. But she should not be misled, either in the present or when reviewing materials at a later date, that just because a compass direction is given, it has the accuracy of a digital compass reading. It may be appropriate to operate with an implicit assembly with regard to accuracy, where the assemblies ‘choose’ among several potential services offering location information, depending on which one is most accurate at the moment (this changes as one moves), but paying attention always to represent the accuracy available in the current state. <marker type="block"/> Un-anticipated use In the scenarios above, we have anticipated a number of assemblies coming into effect during a rather short period of time. What is also expected from this family of situations is that it will produce a set of un-anticipated and unpredictable usages of the existing services and devices, thereby providing for unanticipated or emergent (serendipitous) assemblies and contexts. This in turn informs architectural discussions about whether ‘types’ may emerge during runtime or will be known at design time, whether it is just a matter of naming a particular assembly for one’s own later re-use, or whether it is a matter of sharing a new type of assembly among colleagues, etc.</region>
          </section>
        </section>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="140" page="13" column="1">3 Assemblies</h1>
        <region class="DoCO:TextChunk" id="143" page="13" column="1">In Section 2, ‘assemblies’ were discussed as a concept arising in and from practice and prototype design, and some consequent challenges for the open architecture were considered. But is the concept of assembly itself also relevant for the open architecture and, if so, how? In this section we use the development of the concept of palpable assemblies as a representative illustration of the ways in which the competencies of ethnographers, users, software developers, and software architects interact as part of co-design. In doing so, we analyze four instances of how the assembly concept has evolved, each explored from three different perspectives: software architecture, application development, and use. In section 3.1, we describe how a basic notion of assemblies was introduced to the open architecture. This prompted reflections on the relationship of assemblies to the more conventional software architecture concept of service composition, discussed in section 3.2. The challenges thrown <marker type="page" number="14"/><marker type="block"/> up by this highlighted the issue of assemblies as resource composition, discussed in section 3.3. Lastly, the developing centrality of assemblies foregrounded the need for means to browse and inspect them – to make them palpable – discussed in section 3.4. At all of these stages, there was a consequential interplay between the perspectives of end-users and work analysts, application developers, and software architects, corresponding to all of the four participatory elements of the design of the open architecture introduced on page 5.</region>
        <outsider class="DoCO:TextBox" type="page_nr" id="142" page="13" column="1">13</outsider>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="144" page="14" column="1">3.1 Basic Assemblies</h2>
          <region class="DoCO:TextChunk" id="145" page="14" column="1">Landscape architects – like many professionals – routinely put together ‘assemblies’ of devices (the car, cameras, tripods, GPS, compass, maps, etc.) for particular jobs. To leverage some of the potential of computing technologies into this practice and to drive architectural design, users and work analysts (in collaboration with application prototype developers and software architects) began to talk about engagement with assemblies, components, and devices.</region>
          <section class="DoCO:Section">
            <h3 class="DoCO:SectionTitle" id="146" page="14" column="1">3.1.1 Software architecture perspective</h3>
            <region class="DoCO:TextChunk" id="151" page="14" column="1">The concept of an assembly was embraced by the architects and attempts were made at translating this concept directly into software architecture. A decision was taken to make the assembly a first-class object of the software architecture. A ‘first-class object’ in this context is a construction that users of the software architecture (e.g. application developers) may directly use to construct their programmes, e.g., through a set of specific classes in an object- oriented framework. The assembly was designed as a ‘service’ that had the responsibility of coordinating other services. In the context of the architecture, a ‘service’ is functionality (running in a process) that announces itself on the network and that can be accessed through messages to another process. In the scenarios above, examples of services by this definition are the GeoTagger, the displays, the ‘take back service’, etc. Furthermore, the assembly had responsibility for monitoring the state of the assembly in terms of the availability of the constituent services. <marker type="page" number="15"/><marker type="block"/> In summary, <xref ref-type="fig" rid="F11" id="150" class="deo:Reference">Figure 11</xref> shows the central concepts of the first basic palpable computing architecture. An Assembly is here seen as a set of cooperating Services which are each Runtime Components that in addition to being able to run on a device also provide the service capabilities outlined above. This design may be seen as a rather direct translation of the use- oriented concept into architectural concepts where the assembled parts are considered to be units of communication and functionality, or services, in a distributed system.</region>
            <outsider class="DoCO:TextBox" type="page_nr" id="148" page="14" column="1">14</outsider>
            <region class="DoCO:FigureBox" id="F11">
              <caption class="deo:Caption" id="149" page="15" column="1">Figure 11 The central architectural concepts and their relations taken from the first complete version of the open architecture for palpable computing (from first project internal architecture overview deliverable in 2004). The boxes illustrate concepts and the arrows define qualified relationships between concepts. The concepts related to assemblies are highlighted.</caption>
            </region>
          </section>
          <section class="DoCO:Section">
            <h3 class="DoCO:SectionTitle" id="152" page="15" column="1">3.1.2 Application developers’ perspective</h3>
            <region class="DoCO:TextChunk" id="153" page="15" column="1">Landscape architects’ work on site is only one of several application domains explored with the aim of informing software architectural design in the PalCom project. The challenge for the prototype work is not to design ‘perfect’ special purpose prototypes in support of work in each application domain, but rather, to support the dynamic configuration and reconfiguration of a set of interacting devices into assemblies supporting a wide range of different usages, and thereby to challenge and inform the design of the software architecture. This means that the participatory design of the application prototypes themselves and concerns with their usability are a second order priority. A delicate balance has to be struck to develop realistic and functional enough application prototypes that allow users to appropriate and shape a socio-technical future where palpable computing is available, but that do not ‘waste’ valuable resources needed for the exploration of architectural design requirements. Prototypes may</region>
            <outsider class="DoCO:TextBox" type="page_nr" id="154" page="15" column="1">15</outsider>
            <region class="DoCO:TextChunk" id="155" confidence="possible" page="16" column="1">remain ‘sketchy’, complex and fragile for longer than one would otherwise accept. They maybe ‘wrapped’, that is, run on a laptop simulating, e.g. a mobile phone, rather than instantiated inside an actual mobile phone, and consist of more parts and actions than is obvious to the user.</region>
            <region class="DoCO:TextChunk" id="158" page="16" column="1">In the first iteration of the GeoTagger the assembly consists of a digital still camera, a GPS, a display device (e.g. laptop or PDA) and a mobile phone. When the camera takes a picture, it automatically notifies its surroundings of this. At the same time the GPS is constantly emitting world coordinates for its current location. A software component assembled with the camera and the GPS writes the current location information into the (meta-data part of the) image received from the camera. The updated image is then displayed on e.g. the PDA and simultaneously sent to a web server (typically located back at the office), utilising the Internet capabilities offered by the mobile phone,. <marker type="block"/> The SiteTracker, similarly, consists of four devices: a GPS, a display, a video camera and a digital compass. The GPS constantly provides location information, and the digital compass directional information of where the video camera is pointing. The resulting video footage from the camera is shown on a display with an overlay showing exactly where the point(s) of interest would be. The GPS that takes part in this assembly may be the same GPS as the one that is part of the GeoTagger assembly – it is acting as a service in different contexts. From a use perspective, going from GeoTagger to SiteTracker or vice versa is a matter of disassembling and re-assembling a number of devices. Development of the application prototypes takes place in parallel to the development of the open architecture, and for this reason the open architecture described in section 3.1.1 was in fact not the first architecture developed for these prototypes. For the first iteration of the GeoTagger and the SiteTracker, a prototype software architecture implementation, called Corundum (<xref ref-type="bibr" rid="R37" id="157" class="deo:Reference">Ørbæk 2005</xref>), was developed by the application developers themselves. Inspired by the understanding of, and vision for, use developed through fieldwork and participatory engagement with users, the prototype software architecture implementation behind these first application prototypes focused on supporting five main concepts:</region>
            <region class="DoCO:TextChunk" id="159" confidence="possible" page="16" column="1">• assembly – a set of communicating services • service – announces itself to its surroundings and communicates asynchronously with other services • process – contains services and components and holds a hierarchical map • component – a module residing on disk, can be loaded into a process • hierarchical map – a tree-structured name space used to hold (most of) the non- transient data of a single process.</region>
            <outsider class="DoCO:TextBox" type="page_nr" id="160" page="16" column="1">16</outsider>
            <region class="DoCO:FigureBox" id="F12">
              <image class="DoCO:Figure" src="62fb.page_017.image_17.png" thmb="62fb.page_017.image_17-thumb.png"/>
              <caption class="deo:Caption" id="163" page="17" column="1">Figure 12 Hierarchical maps: ‘Two devices, one hosting two processes each with their own h- map. The h-maps extend outside the devices to illustrate that they are accessible from the outside’. The listing on the right is a commented dump of the h-map of an isolated instance of a simple service (du1), in a situation where it cannot see other services. It is one of the simplest real-world examples. (<xref ref-type="bibr" rid="R37" id="162" class="deo:Reference">Ørbæk 2005</xref>)</caption>
            </region>
            <region class="DoCO:TextChunk" id="166" confidence="possible" page="17" column="1">All components and services ran on Corundum (<xref ref-type="bibr" rid="R5" id="164" class="deo:Reference">Bardram et al. 2004</xref>) which, ‘encourages an extrovert programming style, where components and services expose what they can do (potential uses, events accepted and sent), what they are doing (eg. logging), and what they have been doing (history). This is all done via the h-map which is globally visible, and accessible from outside the process over a network.’ (<xref ref-type="bibr" rid="R37" id="165" class="deo:Reference">Ørbæk 2005</xref>). The Corundum framework differs from the first version of the open architecture described in section 3.1.1 in several respects. The devices that take part in the assembly are seen as a set of communicating services contained in processes on a network. Each of the services can be externally configured through manipulation of an externally visible hierarchical map. An assembler service also uses this hierarchical map when dynamically (re-)configuring the paths of communication necessary for a specific assembly configuration. Each process potentially consists of a number of services and components. One of the main points here is that the technical infrastructure of these early prototypes is deeply influenced by a use perspective – devices have a number of external interfaces that</region>
            <outsider class="DoCO:TextBox" type="page_nr" id="167" page="17" column="1">17</outsider>
            <region class="DoCO:TextChunk" id="170" page="18" column="1">users configure in order to assemble the devices and to make them communicate. However, the story is, of course, more complicated than that – in order to make prototypes like the above do anything beyond the most trivial the need arises for more pure software components and services. In the case of the GeoTagger, there is a need for a piece of logic, for example, that combines the image and the coordinates. Since services are distributed and able to dynamically discover and use each other, this service can in principle reside on any of the participating devices. However, making an informed decision – by the user or (semi-) automatically by a run-time system – about which device to run such a service on requires some degree of software architectural support for visibility and inspectability of available resources (processing power, available memory, network bandwidth etc.) – all matters that were to become central to the Open Architecture. <marker type="block"/> Use perspective Turning back to the fieldwork, the prototypes were put to use with two landscape architects to carry out some initial experiments (<xref ref-type="fig" rid="F13" id="169" class="deo:Reference">Figure 13</xref>). The SiteTracker, for example, produces useful, dynamic composite pictures that accurately track specified points in the landscape. This is first achieved in a static context. Subsequently, when the experiment is repeated in a moving car, the prototype continues to work accurately. Unfortunately, the soldering on the connection to the digital compass breaks after just a few minutes of driving. We experiment with the compass internal to the GPS, but it does not provide updates fast enough and the experiment has to be abandoned.</region>
            <region class="DoCO:FigureBox" id="Fx171">
              <image class="DoCO:Figure" src="62fb.page_018.image_18.png" thmb="62fb.page_018.image_18-thumb.png"/>
            </region>
            <region class="DoCO:TextChunk" id="173" confidence="possible" page="18" column="1"> <xref ref-type="fig" rid="F13" id="172" class="deo:Reference">Figure 13</xref> SiteTracker In the course of the experiment a number of difficulties arise that are inspiring for redesign. We only outline difficulties and design implications for the software architecture, as our focus in this paper is on the participatory process, not the detailed design of the software architecture or the application prototypes (for more detail on the architecture design, see Andersen et al 2006). Difficulty Implications for design or design process. Calibrating the compass and the GPS is Ways of detecting trouble caused by faulty awkward. Calibration seems to be fragile and calibrations and practices of testing the accuracy of requires frequent repetition of the calibration calibrations should be supported. process.</region>
            <outsider class="DoCO:TextBox" type="page_nr" id="174" page="18" column="1">18</outsider>
            <region class="unknown" id="175" page="19" column="1">The wrapped setup – with cables and laptop – To enable real users to experiment with the is clumsy, and it is difficult to see anything on prototype in as realistic as possible use situations, a the screen in the sunlight. less complex design is required The translation from GPS to Ordnance Survey The detection of faults in the computation, and (OS) coordinates is faulty. The cause is ideally their causes, should be supported. unknown. The problem is fixed by driving to a known point of interest and recording the position in OS coordinates. When trying to re-assemble the SiteTracker Software architecture should not require connection after a break, it turns out that a LAN/Wi-Fi type to LAN/Wi-FI infrastructure in it’s physical network has to literally be put in place before surroundings, as such infrastructures will typically an assembly can be made. This is because, in not be present when on the move. Generally, the order to exchange messages, services and software architecture should be able to scale from assemblies at this stage require the presence working in infrastructure rich environments to the of a network connection that supports UDP. infrastructurally simpler environments.. On the Windows laptop this is only present if the laptop is connected to such a network infrastructure in the physical surroundings. Therefore, it is not possible to assemble using just the single laptop, the camera, the GPS and the compass.</region>
            <region class="DoCO:TextChunk" id="181" page="19" column="1">A second round of experiments with a modified SiteTracker prototype takes place a few weeks later. This time, however, the developers run into a whole series of problems right from the start. These, too, reveal pertinent design issues: <marker type="page" number="20"/><marker type="block"/> In general, the difficulties encountered in the use experiments show that there are more activities taking place, with more potential for things to go wrong, than were anticipated, which impact at the level of the architecture as well as the level of the prototypes.</region>
            <region class="unknown" id="177" page="19" column="1">Difficulty Implications for design or design process. When connecting a device it is sometimes When devices connect they should automatically necessary to find the virtual com port to which acquire the necessary resources for establishing the it connects in order to make the service connection. On the other hand, in case of a failure, communicate with the device via this port. The there should be support for making such connection virtual com port number is dynamically resources visible. assigned whenever such a device tries to connect – the com port may change depending on how many devices are currently connected. Currently an assembly is invoked via an XML There is a need for an overview of the assemblies specification in a file, that can be located on available for launch and a mechanism to invoke an any one of the devices involved in the assembly in such a way that it automatically assembly, and the meta assembler – the attempts to start the required services. service responsible for setting up and maintaining the assembly – then looks around and sets up communication between services, it does not start them. Connectivity is still required before an The software architecture should support tools for assembly can be made, even if only one monitoring communication paths and network traffic. computer is involved. Is this a design flaw in the Corundum framework? A constraint from Windows? An IP problem? If the computer on</region>
            <outsider class="DoCO:TextBox" type="page_nr" id="178" page="19" column="1">19</outsider>
            <region class="unknown" id="180" page="20" column="1">which a service is running does not have network connectivity, it is impossible to transmit messages. The SiteTracker loads points of interest from a Better tools for inspection and change of the state of configuration file on startup. The easiest way a running service. Use exposes a missing link to add or change points of interest is currently between prototype and architecture. to manually change the configuration file and then to restart the SiteTracker service. Corundum actually supports on-the-fly changes, but there are no tools to support actually doing it. There is no mechanism or user interface to The options and selections should be inspectable. see or select what configuration file the There could be a need for detecting and visualizing SiteTracker actually reads from when started. the physical context in which services and In this instance there are two different files, assemblies exist. This may also be subject to (semi-) one with UK OS and one with Danish position automation, e.g. on the basis of location. information. The translation between GPS and OS is It would be nice to be able to take a service out of its wrong, but we do not know where it goes current assembly and network context and simply wrong. test it by ‘poking’ it with some input seeing if it comes back with a proper output. It would sometimes be useful for the The basic state of any service should by default be SiteTracker user interface to visualize the able to be shown in a graphical user interface and it coordinates sent to it from the GPS service. should be possible to dynamically combine and change user interfaces while services are running. In the experiment the tracker ‘hands’ (<xref ref-type="fig" rid="F5" id="179" class="deo:Reference">Figure 5</xref>) Again this calls for tools and architecture support for jumped from one side of the display to the getting an overview of running services, their paths other. This could have several causes – the of communication and whether or not they are field of view could be too big, the point of participating in a running assembly. interest could be behind, the coordinates could be wrong. In a later trial it turns out that this issue was caused by the assembly not being properly assembled – i.e. communication paths were not properly setup and the SiteTracker service was using outdated and flawed position and orientation data for its calculations.A further test in Aarhus reveals similar problems, but here the tracking is correct. This suggests that there are also conversion failures.</region>
            <outsider class="DoCO:TextBox" type="page_nr" id="182" page="20" column="1">20</outsider>
          </section>
        </section>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="183" page="21" column="1">3.2 Assemblies as Service Composition</h2>
          <region class="DoCO:TextChunk" id="184" page="21" column="1">As we saw in section 3.1.1, an assembly is defined as a set of cooperating services. In this section we consider the practical implications of this and how it should be realised, again from software architecture, application prototype, and use perspectives.</region>
          <section class="DoCO:Section">
            <h3 class="DoCO:SectionTitle" id="185" page="21" column="1">3.2.1 Software architecture perspective</h3>
            <region class="DoCO:TextChunk" id="193" page="21" column="1">A main conclusion from the use perspective regarding basic assemblies was that the open architecture should support introspection and visibility in various ways (section 3.1). Though this was always known in principle, experience from use enabled it to be given specific content. Section 3.3 explains how the concept of ‘resources’ partly helps meet the challenges. The software architecture was evolved to support this through a refinement of the idea of assemblies as sets of services, eventually leading to the realization that the software architecture also needs to support a more complete concept of assemblies. <marker type="block"/> As part of this refinement process, the investigation of the basic concept of ‘assemblies as services’, led to exploration and refinements of the assembly concept based, among other things, on what services are traditionally thought to be in software architecture (<xref ref-type="bibr" rid="R33" id="187" class="deo:Reference">Szyperski, 1998</xref>). One example of this would be the classification of services as ‘stateless’ or ‘stateful’. A stateless service does not retain a client-specific state (such as the latest GPS coordinate of a specific client) between uses of the service whereas stateful services may do so.<marker type="block"/> Such a distinction is important for (among other things) reasons of scalability (and understandability) of service composition and use in software architecture: if a service is stateless it may be replicated so that different clients access different instances of runtime components and conversely many clients may use a resource-intensive service concurrently. ‘Scalability’ is an example of an ‘architectural quality’ (<xref ref-type="bibr" rid="R6" id="189" class="deo:Reference">Bass et al. 2003</xref>) that exemplifies architectural concepts and practice that are important in designing software architectures. Most architectural qualities correspond to architecturally significant ‘external qualities’ of ISO 9126 (ISO/<xref ref-type="bibr" rid="R26" id="190" class="deo:Reference">IEC, 2001</xref>). In contrast, the qualities that participatory architectural design is also concerned with are qualities-in-use (effectiveness, productivity, safety and satisfaction as seen from the point of view of ISO 9126). As a result of field studies and workshops, the assembly concept as outlined above was thought to support desirable qualities-in-use. On the other hand, little stress was put on external qualities such as performance or scalability in the Corundum prototype and in the h-map implementation. Thus these qualities remained to be explored in the context of software architecture. The participation of ‘travelling architects’ in some of these use experiments (the third of the four participatory elements of the design of the open architecture introduced on page 5) helped to communicate the importance of the approaches adopted in Corundum, and to effect their transfer to the Open Architecture.<marker type="page" number="22"/><marker type="block"/> A further refinement of the assembly concept was the realization that assemblies (at this state of the project) could be thought of as primarily and mainly service compositions. As a consequence, it was considered to remove assemblies as a first class concept in the architecture: if assemblies were only (dynamic) service compositions, their realisation could have been expressed in terms of reference compositions of components/runtime components. However, for reasons discussed in more detail in section 3.3.1 below, it was decided that it was necessary and beneficial to leave the assembly concepts as a central and first-class part of the open architecture. The architectural refinement of the concepts of assemblies and services was then used in application prototyping as discussed below.</region>
            <outsider class="DoCO:TextBox" type="page_nr" id="192" page="21" column="1">21</outsider>
          </section>
          <section class="DoCO:Section">
            <h3 class="DoCO:SectionTitle" id="194" page="22" column="1">3.2.2 Application developers’ perspective</h3>
            <region class="DoCO:TextChunk" id="196" page="22" column="1">The second major iteration of the prototypes involved a move towards a more fine grained service-oriented architecture as defined by the open architecture. <xref ref-type="fig" rid="F14" id="195" class="deo:Reference">Figure 14</xref> shows a schematic of the first version of the SiteTracker assembly, combining a GPS service, emitting basic GPS location information, a compass service, emitting compass direction, and a SiteTracker service combining video images with location and directional information .</region>
            <region class="DoCO:TextChunk" id="197" confidence="possible" page="22" column="1">GPSService CompassService SiteTracker Service VideoInComponent GLDisplayComponent GeoParserComponent</region>
            <region class="DoCO:FigureBox" id="F14">
              <caption class="deo:Caption" id="198" page="22" column="1">Figure 14 Simplified view of the original SiteTracker services, components and communication paths, showing that there are three services involved: GPS, Compass and SiteTracker; and that the last loads and uses three components inside it (arrows depict paths of communication)</caption>
            </region>
            <region class="DoCO:TextChunk" id="206" page="22" column="1">Also integrated into the SiteTracker service was a so-called ‘GeoParser’ component. This component took raw GPS protocol strings (nmea-0183), parsed and converted them into a coordinate system that was appropriate to do the mathematics involved in locating the points of interest in the video image. Experience in use and other considerations (outlined below) suggested that this structure needed to be changed. The second version of the SiteTracker ( <xref ref-type="fig" rid="F15" id="199" class="deo:Reference">Figure 15</xref>), for example, breaks the GeoParser functionality into two: a basic GPSParserService for parsing the GPS protocol strings (emitting coordinates in latitude and longitude) and a GeoConversionService for converting between different geographically<marker type="page" number="23"/><marker type="block"/> related coordinate systems. Furthermore, these functionalities were no longer loaded directly into the main SiteTracker service but instead acted as separate services in their own right.<marker type="block"/> There are several reasons for this small but significant change in the software architecture of the prototype. First of all, in a general architectural context we wanted to further explore the scalability and service composition qualities of the prototypes. For example, if the main SiteTracker service is running on a resource constrained device, the conversion and parsing services can be deployed on separate devices in the network in order to achieve better load balance. Also, since the parsing and conversion services are more or less stateless, other services can dynamically attach to them and make simultaneous use of their functionality – saving having to load the component in more than one place and making efficient use of available computing power on the network. In the latest version of the SiteTracker this is put to practical use when a landscape architect wishes to supplement the augmented video image of the SiteTracker service with a digital map showing their current position and the positions of points of interest. This map service also needs to parse and convert coordinates and therefore looks up running versions of these services on the network and assembles itself with them in order to show the updated information.<marker type="block"/> As users of the SiteTracker, the landscape architects will not see any changes in functionality through this underlying change of architecture. However, as users of the software architecture, they (and the software developers), experience a significant improvement in relation to how flexibly the parts of the system can be composed, de-composed and deployed. This enhances the end users’ experience, in that the assemblies and constituent services lend themselves to a richer set of options in relation to end-users composing their own assemblies.</region>
            <outsider class="DoCO:TextBox" type="page_nr" id="201" page="22" column="1">22</outsider>
            <region class="unknown" id="203" page="23" column="1">GPSService CompassService GPSParserService GeoConversionService SiteTracker Service VideoInComp GLDisplayComp</region>
            <region class="DoCO:FigureBox" id="F15">
              <caption class="deo:Caption" id="204" page="23" column="1">Figure 15 Simplified view of the second version of SiteTracker services, components and communication paths.</caption>
            </region>
            <outsider class="DoCO:TextBox" type="page_nr" id="207" page="23" column="1">23</outsider>
            <region class="DoCO:TextChunk" id="208" confidence="possible" page="24" column="1">Furthermore, the use experiences gained from the first experiments, as explained in section 3.1, strongly indicated the need for better tools for inspection and awareness in relation to services and assemblies and their context. At this point in time we therefore, firstly, initiated development of a basic tool for the browsing and composition of running services and assemblies in the network – an ‘Inspector’. Secondly, the need for inspection of any single service on the network – potentially from a remote location – inspired initial work on the design of a framework for remote inspection and control of services.</region>
            <region class="DoCO:TextChunk" id="218" page="24" column="1">3.2.3 Use perspective (application developers as users) The developers of the application prototypes are closely engaged in the design of the open architecture. In fact, as we saw, they themselves designed a first prototype implementation of a PalCom open architecture, Corundum, in parallel to more comprehensive and conceptual efforts on the part of the software architects. They also use this and subsequent iterations of the PalCom open architecture as part of their development and implementation work and they are, therefore, an invaluable resource in the participatory design process. The goal of the open architecture is to support people from different walks of life, with different levels of ‘computer literacy’ and engaged in different situated activities in making computational states and processes palpable. The challenge is to enable the production of appropriate reflections of computational states and processes ( <xref ref-type="bibr" rid="R18" id="209" class="deo:Reference">Dourish 1995</xref>) or otherwise ‘sensible’ data. Software application developers are highly IT literate users. By examining their current practices of making computational states and processes palpable, and by engaging them in a participatory design process, important insights for the design of the PalCom open architecture can be gained. This corresponds to the last of the four participatory elements of the design of the open architecture introduced on page 5.<marker type="block"/> On the right hand side of <xref ref-type="fig" rid="F16" id="213" class="deo:Reference">Figure 16</xref> we see the SiteTracker and other prototypes working at a ‘Future Laboratory’ with users from another application domain – different emergency response services (police, fire brigade, medical teams) – at the emergency services training ground in Aarhus, Denmark. Future Laboratories enable users to ‘colonize’ and shape a<marker type="page" number="25"/><marker type="block"/> socio-technical future by asking and allowing them to accomplish realistic work with functional prototypes in as realistic as possible work settings (<xref ref-type="bibr" rid="R11" id="216" class="deo:Reference">Büscher et al. 2004</xref>). The commitment to serious hands-on simulation and exploration of real world work enables embodied, practical creativity and reflection as well as participatory evaluation. Here, we have staged a car pile- up, paramedics are putting bio sensors and locators that will be part of the SiteTracker assembly on victims, someone is taking pictures of the victims. That data is sent to the trauma doctor in a prototype acute medical coordination centre. The trauma doctor needs to decide to which hospital victims should go, taking into account the nature of their injuries and the special skills at the different hospitals. Amongst other applications and services, the SiteTracker and GeoTagger are used to take pictures of the individual patients at the scene of the accident and display them on one of the screens in the Acute Medical Coordination Centre.<marker type="block"/> Future Laboratories foster the emergence and evaluation of future practices, which is particularly important when it comes to involving users in the design of software architectures envisaged to support the use of ubiquitous computing as it emerges over the next decades. Our series of Future Laboratories is still in progress and will be the subject of future publications. But the fact that Future Laboratories with end users require functional prototypes means that developers have to create, assemble and test them extensively, in effect inventing and evaluating emerging future practices of developing software applications – carrying out ‘Future Labratories’ of development work.</region>
            <region class="DoCO:FigureBox" id="F16">
              <image class="DoCO:Figure" src="62fb.page_024.image_19.png" thmb="62fb.page_024.image_19-thumb.png"/>
              <caption class="deo:Caption" id="212" page="24" column="1">Figure 16 Developing applications and services on prototypes of the PalCom open architecture</caption>
            </region>
            <outsider class="DoCO:TextBox" type="page_nr" id="215" page="24" column="1">24</outsider>
            <region class="DoCO:TextChunk" id="219" confidence="possible" page="25" column="1">Below we present an analysis of events on the day before the Major Incidents Future Laboratory, when developers were making the prototypes work, coding, assembling, and addressing difficulties by making their causes ‘palpable’ wherever this is possible with the support of the prototype PalCom open architecture.</region>
            <region class="DoCO:FigureBox" id="F17">
              <image class="DoCO:Figure" src="62fb.page_025.image_20.png" thmb="62fb.page_025.image_20-thumb.png"/>
              <caption class="deo:Caption" id="221" page="25" column="1">Figure 17 Assembling the SiteTracker</caption>
            </region>
            <region class="DoCO:TextChunk" id="223" page="25" column="1">Jesper is assembling the SiteTracker. He looks, waits, then exclaims: ‘What?’ and reads out loud: ‘no cameras are currently connected’, reaching for the network cable as he speaks (<xref ref-type="fig" rid="F17" id="222" class="deo:Reference">Figure 17</xref>). Michael saw that the camera had stopped responding, and turned the switch to wake it up, but there are also messages about failed ‘decryption’. They speculate about these errors until they hear Esben laughing behind them. To debug, Esben changed the Java version of the Corundum architecture prototype so it does not encrypt anymore. Because</region>
            <outsider class="DoCO:TextBox" type="page_nr" id="224" page="25" column="1">25</outsider>
            <region class="DoCO:TextChunk" id="225" confidence="possible" page="26" column="1">Jesper is receiving messages from services on the Java architecture and his C++ version of the architecture tries to decrypt them, they are getting errors, but this is not what is causing the lack of connection between the camera service and the display service. J esper’s hand reaches for the network cable again. Similar trouble before was caused by network problems. He leaves the cable plugged in, though, and does a number of things:</region>
            <region class="DoCO:FigureBox" id="F18">
              <image class="DoCO:Figure" src="62fb.page_026.image_21.png" thmb="62fb.page_026.image_21-thumb.png"/>
              <caption class="deo:Caption" id="227" page="26" column="1">Figure 18 Trying to figure out what is wrong</caption>
            </region>
            <region class="DoCO:TextChunk" id="229" confidence="possible" page="26" column="1">H e picks up the camera and takes a picture (<xref ref-type="fig" rid="F18" id="228" class="deo:Reference">Figure 18</xref>), and notes that where it should say ‘get file’, nothing happens, while the assembler says ‘assembly is possible’ and is, indeed, assembling. The meta assembler is adding subscriptions to services. Only the day before Jesper took five pictures and it went ‘tick tick tick, they arrived with ‘get file messages’ ...’. The network is still the prime suspect. Jesper unplugs the cable and switches to the wireless network, but to no avail. While Esben’s sensor services are working nicely, Michael and Jesper are frustrated. They download and install a loopback adaptor, to create a ‘one machine guaranteed functioning network’ to check conclusively whether the problem is network related. This takes about 30 minutes. But again, they have no luck.</region>
            <region class="DoCO:TextChunk" id="230" page="26" column="1">M ichael suggests checking each individual subscription. They start the ‘Inspector’ and examine what is going on. It does not help, and desperation sets in. They restart the ma chine. Consider to drop the prototype from the experiments at the emergency exercise.</region>
            <region class="DoCO:TextChunk" id="231" confidence="possible" page="26" column="1">T hey wonder if there are too many images on the camera (which has also been a problem in the past), but again, no. Jesper explains their current understanding of the problem: ... for some reason the assembler doesn’t finish the job. It doesn’t set up the subscription between the two services. It can see both, it attaches to both and the next step is actually to set their subscriptions up and for some reason it fails that. So when I press the button, due to the fact that the camera does not have any subscribers it does not send a picture out on the network and then the service that is supposed to display it never receives it.</region>
            <outsider class="DoCO:TextBox" type="page_nr" id="232" page="26" column="1">26</outsider>
            <region class="DoCO:TextChunk" id="233" confidence="possible" page="27" column="1">The machine is back up and running, and it works ... once. The second time nothing happens. Jesper suspects that he tried to take another picture too soon and waits a moment before he takes another one, and it works again.</region>
            <region class="DoCO:TextChunk" id="243" page="27" column="1">When the GeoTagger and the SiteTracker work during the Future Laboratory with the emergency personnel, the developers notice a strangely long delay between taking the picture and it showing up on the display. A week later, at another demo, they figure out some of what is wrong. For example, when the camera takes the picture, it is so busy it stops sending even a heartbeat – a simple message saying ‘I’m alive’ to the other services. This breaks the assembly. As soon as the heartbeat is back, the assembly is re-established – but this takes time – and only when it is done can the overview service display the picture. The solution is to run the heartbeat in a separate thread or as part of the communication layer instead of sharing a thread with the camera data and processes. <marker type="block"/> This story informed a day long ‘fieldstorm’: a data session with application developers and software architects where the aim is to generate ideas for technologies that could support the work of developers in making the causes of failures (and possibilities for creative assembly) palpable.<marker type="block"/> The discussion brought out a list of methods of finding out what is going on • The developers insert print commands into the code to produce messages (like ‘assembly is possible’, ‘assembling’, ‘no cameras connected’ • People make amplifiers/translators for themselves (like the inspector) • There is something like ‘pattern recognition’. Flows of messages ‘look right’ when things are working and ‘wrong’ when something is wrong • There are other sensory clues (e.g. the sound of Mac storage in infinite loop) • There is categorisation: specific message types ‘belong’ to specific processes • There is a strong sense of sequence and timing, which helps sense whether things are going well or badly • There is a temptation to re-create ‘good’ (i.e. well known) environments where things worked even when that is not necessary • People pose hypotheses of what might be wrong and falsify • There is a temptation to test things one can easily test, especially under time pressure, and to ignore potential causes that are outside one’s scope • A lot of the process of encountering and dealing with trouble is made public by ‘talking out loud to the machine’ (‘no cameras currently connected’)<marker type="block"/> Finding out is a mixture of ‘intuition, detective work, collaboration and trial and error’. The skills that some developers bring to the matter of computational potential are remarkable. However they are not just special talents, but also the acquired and honed result of everyday<marker type="page" number="28"/><marker type="block"/> practical engagement with computational technologies. Perceptual acuity and analytic proficiency can be trained. They rely on the reflexivity of interaction with computational matter.<marker type="block"/> The term ‘reflexivity’ as it is used here is inspired by notions of the spontaneous, ‘kneejerk’ reflexive reaction to physical stimuli, and the mutually defining, reflexive character of moves in human-human interaction highlighted by Ethnomethodology (Garfinkel 1967, <xref ref-type="bibr" rid="R27" id="240" class="deo:Reference">Lynch 2000</xref>). It does not imply deliberate reflection. In interactions with each other, but also with technologies and the material world, people treat appearances ‘as “the document of,” as “pointing to,” as “standing on behalf of” a presupposed underlying pattern’ (Mannheim, quoted in Garfinkel 1967). In human-human interaction, this ‘documentary method of interpretation’ is sequentially organised and reflexive, that is, each move – each utterance, silence, gaze or embodied behaviour – is shaped by preceding and subsequent events. Each move prospectively informs the next and retrospectively shapes what has happened before. Each move documents a particular understanding of what is going on, and, as such, shapes the interaction as a whole – e.g. as an informal conversation, a meeting, or a medical consultation.<marker type="block"/> Although in human-matter interaction only one partner is sentient, engagement relies on similarly reflexive, sequentially organised moves and documentary methods of interpretation. Materials ‘document’ their processes or states and their ‘understandings’ of moves that their human or non-human counterparts make in the interaction. In everyday encounters with materials much of our human response to material moves becomes reflexive in the sense of automatic. The acts of perception, interpretation and response are unnoticed, what is perceived is a ‘flow’ of activities. However, human-matter interaction in science, medicine, sport, craft, engineering and many other activities amply documents that perception can be trained, that ways can be found to make materials whose moves are outside of the human ‘naked’ sensorium speak in a way that people can sense. The developers’ methods of making computational states and processes ‘speak’ by translating, amplifying and eliciting documentary evidence are instantiations of such practices.<marker type="block"/> It is a major aim, and a major challenge for our participatory design and research efforts to support advanced as well as ‘ordinary’ users’ practices of making computational states and processes palpable. Paying close attention to developers’ practices is one strongly informing strategy for palpable design. Participatory design with developers and end-users, based around hands-on engagement with prototype architectures and prototype applications and services, suggests that support for ‘reflexivity’ (as well as reflection) is a productive avenue for design.</region>
            <outsider class="DoCO:TextBox" type="page_nr" id="238" page="27" column="1">27</outsider>
            <outsider class="DoCO:TextBox" type="page_nr" id="244" page="28" column="1">28</outsider>
          </section>
        </section>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="245" page="29" column="1">3.3 Inspection and Awareness of resources</h2>
          <region class="DoCO:TextChunk" id="246" confidence="possible" page="29" column="1">The troubles occasioned in using the prototypes repeatedly showed the need for computational states and processes to be made palpable and ‘brought into the light’ so that their operation could be understood and engaged with. In this section we indicate, in very brief outline, some of the ways in which this is being achieved.</region>
          <region class="DoCO:TextChunk" id="248" page="29" column="1">3.3.1 Assemblies as Resource Composition Some of the challenges outlined above may be handled by supporting a more detailed, fine- grained, and dynamic modelling and use of resources (e.g., the load level of a CPU such as in the camera example above) in palpable computing. The need for handling resources in a detailed way in palpable systems led to the inclusion of the concept of first and second order resources in the open architecture (<xref ref-type="fig" rid="F19" id="247" class="deo:Reference">Figure 19</xref>). Second order resources encompass a diverse set of concepts (among others services, actors, and communication channels). Second order resources, in turn, contain first order resources which are resources found in hardware and software layers below the palpable computing open architecture. Examples include memory, storage, and battery power. An assembly consists of collections of first and second order resources, and communication. It has a description (of how it is assembled and how it behaves when running) and is run on a computational node running the PalCom open architecture.</region>
          <outsider class="DoCO:TextBox" type="page_nr" id="249" page="29" column="1">29</outsider>
          <region class="DoCO:FigureBox" id="F19">
            <image class="DoCO:Figure" src="62fb.page_030.image_22.png" thmb="62fb.page_030.image_22-thumb.png"/>
            <caption class="deo:Caption" id="252" page="30" column="1">Figure 19 Central concepts and relationships from the second complete version of the palpable computing open architecture (from 2006 Deliverable, here focused on the concept of assembly, with edges blurred). Assemblies and related concepts are highlighted. The concepts are further developed and refined from the concepts shown in <xref ref-type="fig" rid="F11" id="251" class="deo:Reference">Figure 11</xref>.</caption>
          </region>
          <outsider class="DoCO:TextBox" type="page_nr" id="253" page="30" column="1">30</outsider>
          <section class="DoCO:Section">
            <h3 class="DoCO:SectionTitle" id="254" page="31" column="1">3.3.2 Browsing Services and Assemblies</h3>
            <region class="DoCO:TextChunk" id="255" page="31" column="1">The experiences gained from developing and debugging the prototypes as well as the lessons learned and changes made in relation to the architecture, have together led to the development of a tool for browsing, combining and inspecting services and assemblies. This latest version of the tool is a reimplementation of the first ‘Inspector’ prototype of such a tool mentioned in section 3.2. The new version combines browsing and composition functionalities with capabilities for inspection of single services and assemblies. To do this the tool builds on top of the framework, also mentioned above, for remote control and display of services. Via its graphical user interface, the tool shows all services running on devices in the networking context and lets the user inspect possible ingoing and outgoing connections of each service. Furthermore, the outgoing and incoming interfaces of services can be combined into assemblies and all currently running assemblies can be browsed and inspected.</region>
            <region class="DoCO:FigureBox" id="Fx256">
              <image class="DoCO:Figure" src="62fb.page_031.image_23.png" thmb="62fb.page_031.image_23-thumb.png"/>
            </region>
            <region class="DoCO:TextChunk" id="257" confidence="possible" page="31" column="1">Figure 20 A screen shot of the current prototype implementation of a service and assembly browse and inspection tool This is the functionality supported by the current prototype implementation of the tool, and plans are in the near future to extend the tool with abilities to e.g.: • further inspect and change the state of single services – possibly with the option to isolate the service and test it in its own ‘sandbox’, • visualize required and used resources for services and possible reconfigurations of resources in relation to instantiation of assemblies, • monitor and filter data sent between services collaborating in assemblies, and • further inspect the properties of the context in which services and assemblies exist.</region>
            <outsider class="DoCO:TextBox" type="page_nr" id="258" page="31" column="1">31</outsider>
            <region class="DoCO:TextChunk" id="261" page="32" column="1">On the one hand the construction of the tool and the functionalities added to it follow directly out of a simple set of demands stemming from the development and debugging of the prototypes described in the previous sections. However, the point is that in order to make the tool truly workable for everyday users from different walks of life, with different skills and engaged in different use situations, the underlying software architecture has to support such functionalities. By design, any service, for example, has to support inspection and allow for the change of its state at runtime. Different forms of monitoring, browsing and changing the st behaviour of assemblies in context can be supported through the assembly concept with 1 nd and 2 order resources, encompassing e.g. other services and communication channels.. <marker type="block"/> In a broader context the development of the tools and the architecture supporting them is a way of attempting not only to reveal the materiality of digital entities, such as services and assemblies in a network, but also to provide a way of supporting the interplay and dialogue with such materials. Such support for reflexivity has a number of software architectural implications. In addition to the support for introspection of dynamic resources, i.e., the present, the dialogue with computational material can also be based on assemblies that have been used previously, i.e., the past, and with possibilities for assemblies in a given computational context, i.e., the future.<marker type="block"/> Supporting users in reusing past (templates for) assemblies points to the need for distributed storage. Given the inherently ad hoc network of devices and services in palpable computing, this requirement may lead to significant changes in the communication layer of the open architecture. If users of a set of services and devices in a given context should be supported in making informed choices about possible futures of assemblies, distributed storage should be augmented with more powerful semantic models of the capabilities of available resources/services. For example, given a set of services (such as a camera and a compass service), it should be possible for the open architecture to, e.g., support an application that suggests looking for other services (such as a GPS service) to create a SiteTracker assembly.</region>
          </section>
        </section>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="262" page="32" column="1">4 Pulling things together</h1>
        <region class="DoCO:TextChunk" id="267" page="32" column="1">We started out with the puzzle of what the relationship could and should be between software architecture design, application prototype design, and experience of use, and of whether these are amenable to an integrated participatory design approach. The material presented in this chapter shows that these ‘distant’ elements of a large project are indeed mutually informing, and can be made very productively so with some conscious focus and targeted methods. <marker type="page" number="33"/><marker type="block"/> Figure 21 summarises our participatory open architecture design iterations up to this point. The cross-connections that emerged took various forms, some more general and some direct. We began with a set of scenarios, formulated through ethnographic fieldwork, participatory analysis and design workshops, prototype design and experiments. The scenarios envisage how landscape architects would assemble and use sets of devices and services whose processes and affordances can be made palpable, supported by the open architecture under design. Focusing on the real needs of skilled practitioners produced initial requirements for palpable computing that were more specific and problem oriented than could be expected from an attempt to consider ‘ambience’ in the abstract.</region>
        <outsider class="DoCO:TextBox" type="page_nr" id="264" page="32" column="1">32</outsider>
        <region class="DoCO:FigureBox" id="F21">
          <image class="DoCO:Figure" src="62fb.page_033.image_24.png" thmb="62fb.page_033.image_24-thumb.png"/>
          <caption class="deo:Caption" id="266" page="33" column="1">Figure 21 Map of the start of the participatory design of the PalCom open architecture</caption>
        </region>
        <region class="DoCO:TextChunk" id="268" confidence="possible" page="33" column="1">The application prototype designers could not wait for a considered open architecture to be ready, and so programmed an ‘extreme’ version of their own. Because this was available for early experiments with the prototypes in use, further problems, limitations and needs were exposed. Due in part to the cross-participation of personnel, going beyond conventional communication between software design sub-disciplines, these lessons were incorporated into the design for the Open Architecture, where they were generalised to the demands of other settings, and integrated with other practical and theoretical imperatives. Some of the lessons had a relatively specific focus, such as the atomisation of various services for the SiteTracker. Some were more far-reaching, such as the need for inspection and browsing services and the forms these could usefully take. At least one was quite structural: the adoption of the concept of ‘assembly’, originating in use, as a first-class object in the Open Architecture.</region>
        <region class="DoCO:TextChunk" id="273" page="33" column="1">Architectural and application prototypes are now being taken to the test in more demanding realistic use situations. This requires as full as possible functionality and the application prototype developers engage in realistic testing and experimenting. This gave the opportunity to introduce a participatory design element among the computer scientists in the project themselves, by studying the ways in which application prototype designers made use of the evolving Open Architecture. As well as exposing further problems and needs, this demonstrated how in practice designers make software palpable, interrogating intangible materials in ways that bring them to sight and to voice. Observations of their practices of <marker type="page" number="34"/><marker type="block"/> debugging reveal a reflexive ‘dialogue with computational matter’ that relies on rich sensory feedback. Where such sensory data is unavailable, the developers devise means of translating, amplifying, manifesting computational processes. This provokes the need, and shows some of the possibilities, for ‘reflexive design’, and this is being addressed in the third iteration of the application prototypes. These allow users – in the first instance the developers themselves – to inspect, monitor and perceive, computational processes and affordances.<marker type="block"/> Our experience shows that the lessons learnt in ‘traditional’ PD, namely that by involving users more innovative and more viable socio-technical change can be brought about, are equally true when it comes to architectural design. The point we are at at the moment is a gateway to more direct end-user experience of how the open architecture does (or does not) support people in making computational affordances and processes palpable. By observing and by engaging application developers as users in a participatory architecture design process, we have chosen a perspicuous setting where we can study and experiment with current practices of making computational processes and affordances palpable. In doing so, we gain concrete insight into the constraints and possibilities for software architecture design for palpability. If developers cannot make things palpable with the support the prototype architecture provides, then end users would also fail.<marker type="block"/> At the heart of our approach is the observation that engagement with matter is reflexive. What this means is that we go beyond reflection. Reflection assumes that some designer somewhere can anticipate the situation and the computational literacy of the person needing a representation of computational processes. Whether the user’s ‘status’ is chosen by the user or ‘detected’ through context sensors, reflection assumes that designers can pre-prepare appropriate representations. While we ourselves engage in reflective design, we are certain that it is ultimately impossible to achieve appropriateness in this way. In parallel, we therefore also chose a radically different approach: by documenting material processes as ‘objectively’ and at as ‘atomic’ a level as possible, we provide ‘sensible’ data. We believe that there are already standards of producing such documentary evidence emerging, not only in our own work. People may not be able to perceive such documentary evidence with their ‘naked’ senses and not without training and acculturation. We build tools that can amplify, translate, manifest such documentary evidence. This, in turn will enable training and acculturation.</region>
        <outsider class="DoCO:TextBox" type="page_nr" id="270" page="33" column="1">33</outsider>
      </section>
      <section class="DoCO:Bibliography">
        <h1 class="DoCO:SectionTitle" id="274" page="34" column="1">5 References</h1>
        <ref-list class="DoCO:BiblioGraphicReferenceList">
          <ref rid="R1" class="deo:BibliographicReference" id="275" page="34" column="1">Andersen, P. et al. (2005) Open Architecture for Palpable Computing Some Thoughts on Object Technology, Palpable Computing, and Architectures for Ambient Computing. Ob-ject Technology for Ambient Intelligence Workshop, Glasgow, U.K. Proceedings of ECOOP 2005.</ref>
          <ref rid="R2" class="deo:BibliographicReference" id="276" confidence="possible" page="34" column="1">PalCom External Report 50: Deliverable 39 (2.2.2): Open architecture. Technical report, PalCom Project IST-002057, December 2006. Available at:</ref>
          <ref class="deo:BibliographicReference" id="278" confidence="possible" page="34" column="1"> <ext-link ext-link-type="uri" href="http://www.ist-palcom.org/publications/review3/deliverables/Deliverable-39-" id="277">http://www.ist-palcom.org/publications/review3/deliverables/Deliverable-39-</ext-link>[2.2.2]-open- architecture.pdf</ref>
          <ref rid="R3" class="deo:BibliographicReference" id="280" page="35" column="1">Armstrong, J. (1993) Concurrent Programming in Erlang. Prentice Hall</ref>
          <ref rid="R4" class="deo:BibliographicReference" id="281" page="35" column="1">Bansler, J.P. and Havn, E. (2006). Sensemaking in technology-use mediation:Adapting</ref>
          <ref class="deo:BibliographicReference" id="282" page="35" column="1">groupware technology in organizations. Journal of Computer Supported Cooperative Work 15-55.</ref>
          <ref rid="R5" class="deo:BibliographicReference" id="283" page="35" column="1">Bardram, J., Christensen, H. B., and Hansen, K. M. (2004). Architectural Prototyping: An Approach for Grounding Architectural Design and Learning. In Proceedings of the 4th Working IEEE/IFIP Conference on Software Architecture (WICSA 2004), pages 15–24, Oslo, Norway.</ref>
          <ref rid="R6" class="deo:BibliographicReference" id="284" page="35" column="1">Bass, L., Clements, P., and Kazman, R. (2003). Software Architecture in Practice. Addison- nd</ref>
          <ref class="deo:BibliographicReference" id="285" page="35" column="1">Wesley, 2 edition</ref>
          <ref rid="R7" class="deo:BibliographicReference" id="286" page="35" column="1">Bellotti, Victoria, Back, Maribeth, Edwards, W. Keith, Grinter, Rebecca E., Henderson, Austin, Lopes, Cristina (2002): Making sense of sensing systems: five questions for designers and</ref>
          <ref rid="R8" class="deo:BibliographicReference" id="287" page="35" column="1">researchers. In: Terveen, Loren (ed.): Proceedings of the ACM CHI 2002 Conference on Human Factors in Computing Systems Conference. April 20-25, 2002, Minneapolis, Minnesota. p.415-422</ref>
          <ref rid="R9" class="deo:BibliographicReference" id="288" page="35" column="1">Belotti, V. and Edwards, K. (2001) Intelligibility and Accountability: Human Considerations in Context aware systems. Human-Computer Interaction, Volume 16, pp. 193–212</ref>
          <ref rid="R10" class="deo:BibliographicReference" id="289" page="35" column="1">Büscher M. (2006) Vision in motion. Environment and Planning A 2006, volume 38(2) February, pages 281 – 299</ref>
          <ref rid="R11" class="deo:BibliographicReference" id="290" page="35" column="1">Büscher M., Mogensen P., Agger Eriksen M., Friis Kristensen (2004) J. Ways of grounding</ref>
          <ref rid="R12" class="deo:BibliographicReference" id="291" confidence="possible" page="35" column="1">imagination. Proceedings of the Participatory Design Conference (PDC), Toronto, Canada, 27-31 July 2004 pp. 193-203.</ref>
          <ref rid="R13" class="deo:BibliographicReference" id="292" page="35" column="1">Chalmers M, Galani, A. Seamful Interweaving: Heterogeneity in the theory and design of interactive systems. Proceedings of DIS 2004: 243-252.</ref>
          <ref rid="R14" class="deo:BibliographicReference" id="293" confidence="possible" page="35" column="1">Chalmers,M. (2003) Seamful Design and Ubicomp Infrastructure Proc. Ubicomp 2003 Workshop 'At the Crossroads: The Interaction of HCI and Systems Issues in UbiComp'.</ref>
          <ref rid="R15" class="deo:BibliographicReference" id="295" page="35" column="1">Christensen, H.B., Hansen, K.M., Schultz, U.P., Ørbæk, P., Bouvin, N.O. Architecture Presentations: Experiences from Pervasive Computing Projects at Computer Science Department, University of Aarhus. Technical Report, 2004. Available from <ext-link ext-link-type="uri" href="http://www.ist" id="294">http://www.ist</ext-link>- palcom.org/</ref>
          <ref rid="R16" class="deo:BibliographicReference" id="296" page="35" column="1">Corry, A.V., Hansen, K.M., Svensson, D. (2006). Travelling architects – A new way of herding cats. Quality of Software Architectures (Lecture Notes in Computer Science 4214) Berlin: Springer, pp. 111-126.</ref>
          <ref class="deo:BibliographicReference" id="297" page="35" column="1">de Paula, R., Ding, X., Dourish, P., Nies, K., Pillet, B., Redmiles, D., Ren, J., Rode, J. and</ref>
          <ref rid="R17" class="deo:BibliographicReference" id="298" page="35" column="1">Silva Filho, R. (2005). In the Eye of the Beholder: A Visualization-baseed Approach to System Security. Int. J. Human-Computer Studies.</ref>
          <ref rid="R18" class="deo:BibliographicReference" id="299" page="35" column="1">Dourish P. Developing a reflective model of collaborative systems. ACM Transactions on Computer-Human Interaction 1995 2(1):40-63.</ref>
          <ref rid="R19" class="deo:BibliographicReference" id="300" page="35" column="1">Dourish, P. (2003) The appropriation of interactive technologies: Some lessons from Placeless Documents. Journal of Computer Supported Cooperative Work 12: 465-490.</ref>
          <ref rid="R20" class="deo:BibliographicReference" id="301" page="35" column="1">Dreyfus, H. L. (1992) What Computers Still Can’t Do: A critique of artificial reason.</ref>
          <ref class="deo:BibliographicReference" id="302" confidence="possible" page="35" column="1">Cambridge, MA: MIT Press.</ref>
          <ref rid="R21" class="deo:BibliographicReference" id="303" page="35" column="1">Edwards K, Belotti V, Dey AK, Newman MW. Stuck in the middle: The challenges of user- centred design and evaluation for infrastructure. Proceedings of CHI 2003.</ref>
          <ref rid="R22" class="deo:BibliographicReference" id="304" page="35" column="1">Eugster, P., Felber, P., Guerraoui, R., Kermarrec, A. The many faces of publish/subscribe. ACM Computing Surveys, Volume 35, Issue 2, June 2003, pp 114-131 Garfinkel 1967. Studies in Ethnomethodology. Polity.</ref>
          <ref class="deo:BibliographicReference" id="305" page="35" column="1">Hartswood et al. submitted. Abstractions, Accountability and Grid Usability. NCESS.</ref>
          <ref rid="R23" class="deo:BibliographicReference" id="306" page="35" column="1">Henning, M., Vinoski, S. (1999) Advanced CORBA programming with C++. Addison-Wesley</ref>
          <ref rid="R24" class="deo:BibliographicReference" id="308" page="36" column="1">Ingstrup M, Hansen K M. A Declarative approach to architectural reflection. 5th IEEE/IFIP Working Conference on Software Architecture WICSA 2005</ref>
          <ref rid="R25" class="deo:BibliographicReference" id="309" page="36" column="1">Ingstrup, M. and Hansen, K.M.. A Declarative Approach to Architectural Reflection. WICSA 2005</ref>
          <ref rid="R26" class="deo:BibliographicReference" id="310" confidence="possible" page="36" column="1">ISO/IEC (2001). Software Engineering - Product Quality. Part 1: Quality Model. ISO/IEC 9126-1.</ref>
          <ref rid="R27" class="deo:BibliographicReference" id="311" confidence="possible" page="36" column="1">Lynch, M 2000. Against reflexivity as a academic virtue and source of privileged knowledge. Theory, Culture and Society Vol. 17(3), pp. 26-54.</ref>
          <ref rid="R28" class="deo:BibliographicReference" id="312" page="36" column="1">MacLean A, Carter K, Lövstrand L, Moran T. User-tailorable systems: Pressing the issue with buttons. Proceedings of CHI 1990: 175-182.</ref>
          <ref rid="R29" class="deo:BibliographicReference" id="313" confidence="possible" page="36" column="1">Parnas, D.L. On the Criteria To Be Used in Decomposing Systems Into Modules. Communications of the ACM, Vol. 15, No. 12, pp. 1053-1058, December, 1972</ref>
          <ref rid="R30" class="deo:BibliographicReference" id="314" page="36" column="1">Rimassa G, Greenwood D, Calisti M. Palpable computing and the role of agent technol-ogy. Proceedings of Multi-Agent Systems and Applications IV, 4th International Central and Eastern European Conference on Multi-Agent Systems, CEEMAS 2005</ref>
          <ref rid="R31" class="deo:BibliographicReference" id="315" confidence="possible" page="36" column="1">Stroud, R., Transparency and reflection in distributed systems, In Proceedings of the 5th workshop on ACM SIGOPS European workshop: Models and paradigms for distributed systems structuring, 1992.</ref>
          <ref rid="R32" class="deo:BibliographicReference" id="317" confidence="possible" page="36" column="1">The PalCom project <ext-link ext-link-type="uri" href="http://www.ist-palcom.org/" id="316">http://www.ist-palcom.org/</ext-link> 2006 February.</ref>
          <ref rid="R33" class="deo:BibliographicReference" id="318" page="36" column="1">Szyperski, C., Component Software – Beyond Object-Oriented Programming. Addison- Wesley. 1998</ref>
          <ref rid="R34" class="deo:BibliographicReference" id="319" page="36" column="1">Weiser M. The Computer for the Twenty-First Century. Scientific American, pp. 94-10, September 1991.</ref>
          <ref rid="R35" class="deo:BibliographicReference" id="320" page="36" column="1">Weiser, M. 1993 Some Computer Science Problems in Ubiquitous Computing,"</ref>
          <ref rid="R36" class="deo:BibliographicReference" id="321" confidence="possible" page="36" column="1">Communications of the ACM, July 1993. (reprinted as "Ubiquitous Computing". Nikkei Electronics; December 6, 1993; pp. 137-143.)</ref>
          <ref rid="R37" class="deo:BibliographicReference" id="323" page="36" column="1">Ørbæk P. Programming with hierarchical maps. Technical Report DAIMI PB-575, DAIMI, 2005. <ext-link ext-link-type="uri" href="http://www.daimi.au.dk/publications/PB/575/PB-575.pdf" id="322">http://www.daimi.au.dk/publications/PB/575/PB-575.pdf</ext-link></ref>
        </ref-list>
        <outsider class="DoCO:TextBox" type="page_nr" id="279" page="34" column="1">34</outsider>
        <outsider class="DoCO:TextBox" type="page_nr" id="307" page="35" column="1">35</outsider>
        <outsider class="DoCO:TextBox" type="page_nr" id="324" page="36" column="1">36</outsider>
      </section>
    </body>
  </article>
</pdfx>
