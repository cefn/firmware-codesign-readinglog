<?xml version='1.0' encoding='UTF-8'?>
<pdfx xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://pdfx.cs.man.ac.uk/static/article-schema.xsd">
  <meta>
    <job>92d3bd09cb30c54059b16a1d2f72fbe38bb8027529fb62703c487d94592b248b</job>
    <base_name>62kw</base_name>
    <doi confidence="possible" alt_doi="http://dx.doi.org/10.1007/s11334-013-0200-4">http://dx.doi.org/10.1109/ichi.2013.14</doi>
  </meta>
  <article>
    <front class="DoCO:FrontMatter">
      <region class="DoCO:TextChunk" id="1" confidence="possible">Master of Research Thesis</region>
      <title-group>
        <article-title class="DoCO:Title" id="2">Devices, Errors and Improving Interaction Design - A case study using an Infusion Pump</article-title>
      </title-group>
      <region class="unknown" id="3">by</region>
      <contrib-group class="DoCO:ListOfAuthors">
        <contrib contrib-type="author">
          <name id="4">Patrick Oladimeji</name>
        </contrib>
      </contrib-group>
      <region class="DoCO:TextChunk" id="5" confidence="possible">October 2008 Supervisor: Professor Harold Thimbleby Project Dissertation submitted to Swansea University in Partial Fulfillment for the Degree of Master of Research Department of Computer Science Swansea University</region>
    </front>
    <body class="DoCO:BodyMatter">
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="6" page="3" column="1">Declaration</h1>
        <region class="DoCO:TextChunk" id="7" confidence="possible" page="3" column="1">This work has not previously been accepted in substance for any degree and is not being currently submitted in candidature for any degree. October 14, 2008 Signed: Statement 1 This dissertation is being submitted in partial fulllment of the requirements for the degree of a MRes in Computer Science. October 14, 2008 Signed: Statement 2 This dissertation is the result of my own independent work/investigation, ex- cept where otherwise stated. Other sources are specically acknowledged by clear cross referencing to author, work, and pages using the bibliography/references. I understand that failure to do this amounts to plagiarism and will be considered grounds for failure of this dissertation and the degree examination as a whole. October 14, 2008 Signed: Statement 3 I hereby give consent for my dissertation to be available for photocopying and for inter-library loan, and for the title and summary to be made available to outside organisations. October 14, 2008 Signed:</region>
        <region class="DoCO:TextChunk" id="8" confidence="possible" page="5" column="1">To all whose existence have been threatened by an interaction error in technology and to all who have ever sworn as a reaction to bad interaction design...</region>
        <region class="DoCO:TextChunk" id="9" confidence="possible" page="7" column="1">Abstract Bad interaction design causes errors which could in turn cost peoplesâ€™ lives. Research has shown that redesigning the interaction of devices can reduce errors and improve patient safety [Lin et al., 2002]. This project analyses an Alaris GP infusion pump using finite state machine simulation of its interaction and investigates design properties using graph theory. This project also analyses the logs from a Graseby 500 infusion pump in order to discover any patterns that may signify errors in interaction that pose potential danger to patient safety. Lastly, this project explores ways of presenting patient information to a consultant in order to reduce information overload.</region>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="10" page="9" column="1">Contents</h1>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="11" confidence="possible" page="9" column="1">Contents 1 Introduction 2 Example Errors in Computer Systems</h1>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="12" confidence="possible" page="9" column="1">i 3 7</h1>
        <region class="DoCO:TextChunk" id="13" confidence="possible" page="9" column="1">2.1 Errors in complex systems . . . . . . . . . . . . . . . . . . . 7 2.1.1 Aegis Combat System - July 1988 . . . . . . . . . . . 7 2.1.2 Therac 25 1985-1987 . . . . . . . . . . . . . . . . . . 8 2.2 Errors in Medical Devices . . . . . . . . . . . . . . . . . . . 8</region>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="14" confidence="possible" page="9" column="1">3 Human Error</h1>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="15" confidence="possible" page="9" column="1">11</h1>
        <region class="DoCO:TextChunk" id="16" confidence="possible" page="9" column="1">3.1 Classification of Errors . . . . . . . . . . . . . . . . . . . . . 11 3.2 Why Errors Happen . . . . . . . . . . . . . . . . . . . . . . 12 3.3 Measures for error Reduction . . . . . . . . . . . . . . . . . 13 3.4 Usability evaluation and error reduction in medical devices . 14 3.5 A technique for user interaction design and analysis . . . . . 15</region>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="17" confidence="possible" page="9" column="1">4 Interaction Design and Analysis with Graphs 17</h1>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="18" page="9" column="1">4.1 4.1.1 Graph properties Edge Chromatic and usability Number . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 17 17 4.1.2 Centrality . . . . . . . . . . . . . . . . . . . . . . . . 18 4.1.3 A stochastic model of frequencies of traversal of nodes and edges . . . . . . . . . . . . . . . . . . . . . . . . 20 4.1.4 Connectivity . . . . . . . . . . . . . . . . . . . . . . . 20 4.1.5 Reachability . . . . . . . . . . . . . . . . . . . . . . . 21</h2>
          <region class="DoCO:TextChunk" id="19" confidence="possible" page="9" column="1">4.1 4.1.1 Graph properties Edge Chromatic and usability Number . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 17 17 4.1.2 Centrality . . . . . . . . . . . . . . . . . . . . . . . . 18 4.1.3 A stochastic model of frequencies of traversal of nodes and edges . . . . . . . . . . . . . . . . . . . . . . . . 20 4.1.4 Connectivity . . . . . . . . . . . . . . . . . . . . . . . 20 4.1.5 Reachability . . . . . . . . . . . . . . . . . . . . . . . 21 4.1.6 Shortest paths . . . . . . . . . . . . . . . . . . . . . . 21 4.2 Graphs and Errors . . . . . . . . . . . . . . . . . . . . . . . 22 4.2.1 Estimating the probability for error . . . . . . . . . . 22</region>
          <region class="DoCO:TextChunk" id="20" confidence="possible" page="9" column="1">i</region>
          <outsider class="DoCO:TextBox" type="header" id="21" page="10" column="1">ii</outsider>
          <outsider class="DoCO:TextBox" type="header" id="22" page="10" column="1">CONTENTS</outsider>
          <region class="DoCO:TextChunk" id="23" confidence="possible" page="10" column="1">4.2.2 Estimating the ease of error recovery . . . . . . . . . 22</region>
          <section class="DoCO:Section">
            <h3 class="DoCO:SectionTitle" id="24" page="10" column="1">4.2.2 Estimating the ease of error recovery . . . . . . . . . 22</h3>
          </section>
        </section>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="25" confidence="possible" page="10" column="1">5 Analysis of a real device</h1>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="26" confidence="possible" page="10" column="1">25</h1>
        <region class="DoCO:TextChunk" id="27" confidence="possible" page="10" column="1">5.1 About the Alaris Infusion Pump . . . . . . . . . . . . . . . . 25 5.2 From Statecharts to finite state machines . . . . . . . . . . . 25 5.2.1 Specifying the device as a statechart . . . . . . . . . 26 5.3 Automatic FSM generation . . . . . . . . . . . . . . . . . . 27 5.4 Visualising the Alaris interaction graph . . . . . . . . . . . . 30 5.5 Properties discovered . . . . . . . . . . . . . . . . . . . . . 33</region>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="28" confidence="possible" page="10" column="1">6 Analysing Device Logs</h1>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="29" confidence="possible" page="10" column="1">43</h1>
        <region class="DoCO:TextChunk" id="30" confidence="possible" page="10" column="1">6.1 Log analysis and possible insights . . . . . . . . . . . . . . . 44 6.2 Analysis of graseby logs . . . . . . . . . . . . . . . . . . . . 44 6.2.1 Method . . . . . . . . . . . . . . . . . . . . . . . . . 44 6.2.2 Results and Interaction Insights . . . . . . . . . . . . 47</region>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="31" confidence="possible" page="10" column="1">7 Information Presentation in Health Care</h1>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="32" confidence="possible" page="10" column="1">53</h1>
        <region class="DoCO:TextChunk" id="33" confidence="possible" page="10" column="1">7.1 Trends in improving computer systems in Health Care . . . 54 7.1.1 A common user interface . . . . . . . . . . . . . . . . 54 7.1.2 BarCode Medication Administration . . . . . . . . . 55 7.1.3 Ubiquitous Access . . . . . . . . . . . . . . . . . . . 55 7.2 Reducing Information Overload using Visualisation . . . . . 56 7.2.1 The data contents . . . . . . . . . . . . . . . . . . . . 56 7.2.2 Providing visual meaning to the data . . . . . . . . . 56 7.3 Next Steps . . . . . . . . . . . . . . . . . . . . . . . . . . . . 59 7.3.1 Machine Learning as a tool for improving interaction 59</region>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="34" confidence="possible" page="10" column="1">8 Summary</h1>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="35" confidence="possible" page="10" column="1">61</h1>
        <region class="DoCO:TextChunk" id="36" confidence="possible" page="10" column="1">8.1 Formal analysis of Alaris GP Infusion pump . . . . . . . . . 61 8.2 Graseby 500 log analysis . . . . . . . . . . . . . . . . . . . . 63 8.3 Further Work . . . . . . . . . . . . . . . . . . . . . . . . . . 64</region>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="37" confidence="possible" page="10" column="1">Bibliography A Centrality List of Figures</h1>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="38" confidence="possible" page="10" column="1">67 75 79</h1>
      </section>
      <section class="deo:Acknowledgements">
        <h1 class="DoCO:SectionTitle" id="39" page="11" column="1">Acknowledgements</h1>
        <region class="DoCO:TextChunk" id="40" page="11" column="1">I am profoundly grateful to the following people for the various help ren- dered and insights given both intentionally and unintentionally. To my supervisor, Harold, for granting me access to a great deal of work he had already done in the field which gave me an excellent starting point for building my own simulations. To Paul Lee, the Medical Device Training Manager of NHS Trust Wales, who provided the logs from the several pumps used in chapter 6 and granted permission to use them in this thesis. To Wende and Olive for providing real world scenarios that proved to be insightful for the project.</region>
        <region class="DoCO:TextChunk" id="41" confidence="possible" page="11" column="1">1</region>
        <region class="unknown" id="42" page="13" column="1">Chapter 1</region>
      </section>
      <section class="deo:Introduction">
        <h1 class="DoCO:SectionTitle" id="43" page="13" column="1">Introduction</h1>
        <region class="DoCO:TextChunk" id="45" page="13" column="1">The role of technology in the modern world cannot be overstated with computers present everywhere either to speed up tasks, to perform tasks more efficiently and accurately or to simply take the monotony of boring repet- itive tasks away from humans. Apart from the relatively recent ubiquity of computers, the complexity of technology has increased over the years. Consequently the role technology plays in safety critical systems becomes very important as it is not uncommon to find equipment in hospitals that rely on advanced computer systems. Heart rate monitors and volumetric infusion pumps are good examples of such computerised systems. <marker type="block"/> The human in the loop The sheer efficiency and speed with which computers are capable of performing certain functions far outweigh the performance of the average human and this justifies their use in the critical competitive world where speed and accuracy is essential. Engineers and Software developers continue to increase the potential of computer systems by coming up with some interesting and novel applications. However the state of the art in artificial intelligence still lags far behind human intelligence. As a result, technology is often seen as facilitating the job of humans. Computer systems are not about to have a mind of their own soon so they need to be used. It is thus very essential for computer systems designers and programmers to think carefully about the human in the loop and how to best achieve good interaction between man and machine. Despite all the recent technological advancements, errors still occur more</region>
        <region class="DoCO:TextChunk" id="46" confidence="possible" page="13" column="1">3</region>
        <outsider class="DoCO:TextBox" type="page_nr" id="47" page="14" column="1">4</outsider>
        <outsider class="DoCO:TextBox" type="header" id="48" page="14" column="1">CHAPTER 1. INTRODUCTION</outsider>
        <region class="DoCO:TextChunk" id="49" confidence="possible" page="14" column="1">often than necessary in the course of using computer devices [Thimbleby, 2001]. Lying around our technology-centric world are lots of badly designed devices that encourage human error. Apart from devices, a great deal of software is written without much thought for the interaction process that the end user will engage in. Some errors are induced as a result of the cultural and or personal differences between the designer and the end user. For instance on certain touch-screen PDAs, the default (and sometimes the sole) setting for scroll bars is for them to be placed on the right hand side of the screen. This simple design decision poses a perpertual occlusion problem for left-handed users using the device. It becomes a more annoying problem to the user if such a setting cannot be changed. But because of our human nature we get used to it and it becomes part of the process of using the device. The user is resourceful</region>
        <region class="DoCO:TextChunk" id="50" page="14" column="1">Errors in general are only discovered when there is a a noticeable conse- quence of the error. The exact level of perception of the error is dependent on the consequences borne by such an error. When the consequences are negligible, we hardly notice that an error has occured. We accept the device for what it is - a magic box that sometimes works. When, however, the consequences are grave (as in the case of many healthcare devices), there comes the need to unravel the mystery behind badly designed devices and to discover ways of designing devices that minimise human error and optimise error recovery. Bad design occurs everywhere and its manifest in different forms of interaction errors. One common result of bad design is an abnormal task completion time. This could end up frustrating the user. Bad design is however easily overlooked in non-critical scenarios because the user is resourceful and its only a matter of time before a work around is found. Also the consequences of the interaction error is not critical hence the perception that an error has occurred is often over-looked. A real world scenario below is an example of poor design:</region>
        <region class="unknown" id="51" page="14" column="1">After a long day at work, I was hungry and needed to quickly reheat some food from the refridgerator. I had not read the manual for our new microwave oven so I turn the dial (which in our previous microwave oven was used for setting time in minutes) but that only cycled the number on the display between 0.01 and</region>
        <outsider class="DoCO:TextBox" type="page_nr" id="52" page="15" column="1">5</outsider>
        <region class="DoCO:FigureBox" id="F1.1">
          <image class="DoCO:Figure" src="62kw.page_015.image_01.png" thmb="62kw.page_015.image_01-thumb.png"/>
          <caption class="deo:Caption" id="54" page="15" column="1">Figure 1.1:</caption>
        </region>
        <region class="DoCO:TextChunk" id="55" confidence="possible" page="15" column="1">A modified radio interface to enable easier change of radio stations. The user here has marked two station she likes listening to as R3 and R4 in the picture.</region>
        <region class="unknown" id="56" page="15" column="1">0.09. I was confused, hungry and frustrated so I pressed each button on the device until the number â€˜17.50â€™ showed on the screen. At that point, that was enough for me to reheat my food since all I had to do was to pay attention to the time on the screen and stop the device after three minutes.</region>
        <region class="DoCO:TextChunk" id="62" page="15" column="1"> <xref ref-type="fig" rid="F1.1" id="57" class="deo:Reference">Figure 1.1</xref> is an example of a modified user interface. This was done by an elderly woman who enjoys listening to the radio but found it difficult bending down to see the screen of the station as she navigated between radio stations. The radio sits permanently on her kitchen table (as she dislikes moving it around) and her adaptation has made it easy for her to change radio stations from a standing position.<marker type="block"/> Error in Medicine The risk of medication error is particularly high in Pediatric wards which is primarily due to incorrect drug dosage. In the U.K, it is estimated that 1 in 10 people admitted into hospital will be harmed by medical errors [Ward and Clarkson, 2001]. The causes of these errors range from poor user interfaces of computer<marker type="page" number="16"/><marker type="block"/> systems, lack of patient record at point of care [Abraham et al., 2008] and unpreventable scenarios such as lack of knowledge of a patientâ€™s allergic reactions and it has been reported by [Leape et al., 1993] that a good proportion of these medication errors (between 32 and 69 percent) were definitely or possibly preventable. The cost of an interaction error in computer systems in use in healthcare is very high. This project will focus on analysis of two infusion pumps (the Alaris GP Infusion pump and the Graseby 500 infusion pump) using two techniques to gain interesting insights about usability of these pumps. The first technique used will involve representing the Alaris GP infusion pump as finite state machine defined by the states the device can be in and the user interaction necessary for transitioning between the states. This is covered in chapters 4 and 5. The second technique will involve analysis of the event logs produced by 58 graseby infusion pumps over a span of 6 years. Details of this can be found in chapter 6. The second part of my research involved investigating techniques for reducing information overload for the typical clinician and exploring techniques for finding out what is important to the clinician in a typical consultation. Chapter 7 contains details of this.</region>
        <outsider class="DoCO:TextBox" type="page_nr" id="60" page="16" column="1">6</outsider>
        <outsider class="DoCO:TextBox" type="header" id="61" page="16" column="1">CHAPTER 1. INTRODUCTION</outsider>
        <region class="unknown" id="63" page="17" column="1">Chapter 2</region>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="64" page="17" column="1">Example Errors in Computer Systems</h1>
        <region class="DoCO:TextChunk" id="67" page="17" column="1">Very costly errors have occurred in complex computer systems over the years. According to the Institute of Life Sciences in America, between 44,000 and 98,000 people die each year in America as a result of some medical error. This places medical errors as the eighth leading cause of death in the United States [Kohn et al., 2000]. Some instances of errors in complex systems are reviewed below including errors in the use of medical devices. <marker type="block"/> 2.1.1 Aegis Combat System - July 1988 The Aegis combat defense system used by the U.S. Navy was involved in a fatal accident when the USS Vicennes mistakenly shot down Iran Air Flight 655 - a commercial aircraft [Daniel Craig, 2004, Kopec and Tamang, 2007]. It was decided that the commercial flight be shot down after it was mistaken to be a fighter jet. This accident resulted in 290 civilian fatalities. Reports issued by [Daniel Craig, 2004] show that the radar system used by the Aegis combat defense system violated the Proximity Compatibility Principle âˆ— [Wickens and Andre, 1990]. âˆ— The proximity compatibility principle suggests that when a task requires the integra- tion of multiple sources of information, performance is best supported when information</region>
        <region class="unknown" id="66" page="17" column="1">2.1 Errors in complex systems</region>
        <region class="DoCO:TextChunk" id="68" confidence="possible" page="17" column="1">7</region>
        <outsider class="DoCO:TextBox" type="page_nr" id="69" page="18" column="1">8</outsider>
        <outsider class="DoCO:TextBox" type="header" id="70" page="18" column="1">CHAPTER 2. EXAMPLE ERRORS IN COMPUTER SYSTEMS</outsider>
        <region class="DoCO:TextChunk" id="72" page="18" column="1">Another factor that led to the ghastly decision was the software for the internal tracking system for the Aegis which reuses the tracking numbers used in identifying flying objects, without the knowledge of the user. Poor feedback from the system coupled with poor layout of radar display information induced a wrong decision. <marker type="block"/> 2.1.2 Therac 25 1985-1987 The Therac-25, a software controlled radiation therapy machine greatly overdosed 6 patients between June 1985 and January 1987. Ray Cox, one of the six who died of excessive exposure to radiation from the Therac-25 system, received a radiation dose between 16,500 to 25,000 rads in less than a second. This patient had been scheduled to receive 6,000 rads over a period of six and a half weeks [Leveson, 1995]. Investigations carried out by [Leveson, 1995] showed that some of the causes of error in the Therac-25 could be attributed to:</region>
        <region class="DoCO:TextChunk" id="73" confidence="possible" page="18" column="1">â€¢ use of inappropriate error messages and poor user action feedback in the system â€¢ absence of safety hardware present in earlier versions of the Therac (now completely managed by software) â€¢ insuffient software testing 2.2 Errors in Medical Devices</region>
        <region class="DoCO:TextChunk" id="74" page="18" column="1">Early research done by [Schimmel, 1964] showed that 20% of patients admitted to hospital suffered an injury caused by a medical treatment and 20% of those injuries were fatal. In general, it is well established that a good proportion of patients suffer injuries caused by medical treatments given to them in hospitals. Interestingly [Leape, 1994] expresses the gravity of the rate of errors in medicine by comparing it to the aviation and banking industry saying: â€˜if we have to live with 99.9% (level of proficiency) it would be equivalent to 2 unsafe aeroplane landings per day ... 32000 bank cheques deducted from the wrong bank account every hourâ€™. is displayed in close proximity. However when a task requires attention to be focused on a specific source of information, performance will be best supported by a mere separated display [Wickens and Andre, 1990].</region>
        <outsider class="DoCO:TextBox" type="header" id="75" page="19" column="1">2.2. ERRORS IN MEDICAL DEVICES</outsider>
        <outsider class="DoCO:TextBox" type="page_nr" id="76" page="19" column="1">9</outsider>
        <region class="DoCO:TextChunk" id="77" confidence="possible" page="19" column="1">The FDA â€  issued reports on different incidents where user errors have been encouraged by poor hardware and interaction design [Sawyer, 1996]. One of such cases was that of a physician who tried to set an oxygen control knob between 1 and 2 not realizing that the numbers between the knobs represented discreet and not continuous settings. As a result, there was no oxygen flow when the knob was placed at this point and the error cost the life of the patient. In 1986, several pumps in operation were unable to detect an upstream occlusion in the intravenous line for drug infusions. The upstream occlusion could occur if a hospital staff forgets to release the upstream roller clamp after starting the pump for an infusion. It could also be caused by a clogged upstream filter in the intravenous set. The consequences of this is usually that no drug gets delivered to the patient if there is such an occlusion. In some cases, the absence or delay of critical medication had severe effects on patients â€¡ . The reports also showed that several infusion devices suffered from poor displays- one of which led a nurse to read the number â€˜7â€™ as â€˜1â€™ because the display panel was recessed. Another incident involved a nurse who intended to program an infusion pump to deliver 130.1 ml/hr but unintentionally programmed the pump to deliver 1301ml/hr because the decimal point on the pump was designed to be non-functional for rates above 99.9 [Jiajie Zhang and Kubose, 2003]. In 2000, several models of infusion pumps that were lacking the the ability to protect a patient from free-flow delivery of drugs (even when the pump was off) were banned from use [Berens, 2000]. These set of pumps lacked a physical means/mechanism for stopping a drug from flowing freely into a patient despite being off. A great number of incidents have been logged in databases such as MAUDE (Manufacturer and User Facility Device Experience Database) and ECRI (Emergency Care Research Institute) and the data is available for free perusal by the general public. The relatively recent medical device related errors have result in a strong awareness in the medical industry with regards to the relationship between the interface design of medical devices and user errors [Keselman et al., 2003]. This has brought about a release of guidelines by the FDA on how to design safer medical devices [Sawyer, 1996]. These guidelines are made up of â€  Food and Drug Administration â€¡ Source is medical device safety records in the ECRI database</region>
        <outsider class="DoCO:TextBox" type="page_nr" id="78" page="20" column="1">10</outsider>
        <outsider class="DoCO:TextBox" type="header" id="79" page="20" column="1">CHAPTER 2. EXAMPLE ERRORS IN COMPUTER SYSTEMS</outsider>
        <region class="DoCO:TextChunk" id="80" page="20" column="1">human factors issues like consistency, visibility of system status and system feedback, flexibility, error recovery that contribute to the usability of devices. The MDDI (Medical Devices and Diagnositc Industry) also released solid guidelines for designing error-resistant medical devices details of which can be found in [Wiklund, 2002]. Guidelines are generally a good thing to have in design but are clearly not the solution in dealing with errors in medical devices as is evident in current incident reports in MAUDE and ECRI.</region>
        <region class="unknown" id="81" page="21" column="1">Chapter 3</region>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="82" page="21" column="1">Human Error</h1>
        <region class="DoCO:TextChunk" id="83" confidence="possible" page="21" column="1">Error as defined by James Reason is â€˜the failure of a planned sequence of mental or physical activi- ties to acheive an intended outcome when the failure cannot be attributed to chance.â€™ [Reason, 1990] [Kohn et al., 2000] defines error as â€˜the failure of a planned action to be completed as intended (e.g. error of execution) or the use of a wrong plan to acheive an aim (e.g. error of planning).â€™ 3.1 Classification of Errors</region>
        <region class="DoCO:TextChunk" id="84" page="21" column="1">Intention here is an important factor in the definition of error as it helps to distinguish between the two broad classes of errors identified by Norman. Slips and lapses occur when the actions performed to carry out a task do not go as intended (i.e. an error in executing an intention). A common root cause of these is the failure to fully concentrate on the action one is currently performing due to a distracted or diverted attention.Mistakes on the other hand occur when the intended action is not correct (i.e. an error in intention) [Norman, 1983].Mistakes are largely knowledge-based as they stem from possible incorrect judgement, perception or interpretation of a situation. Reason went further to classify errors according to the cognitive stages at which they occur. At the planning stage where a goal and the means to</region>
        <region class="DoCO:TextChunk" id="85" confidence="possible" page="21" column="1">11</region>
        <outsider class="DoCO:TextBox" type="page_nr" id="86" page="22" column="1">12</outsider>
        <outsider class="DoCO:TextBox" type="header" id="87" page="22" column="1">CHAPTER 3. HUMAN ERROR</outsider>
        <region class="DoCO:TextChunk" id="106" page="22" column="1">achieve the goal are identified, mistakes could happen. At the storage stage where the plan is temporarily stored before execution, lapses may occur and at the execution stage where the stored plan is being implemented, slips may occur. It is straightforward to see how Slips can be encouraged by bad interaction design. For instance poor tactile feedback on an infusion pump keypad could cause a slip in data entry. This slip would be spotted assuming said infusion pump had very good visual feedback and the error would be cor- rected by the user appropriately. If not spotted however, the error could be fatal. Mistakes on the other hand are largely knowledge dependent i.e. the more a user knows about a system, the less they are likely to make an error of intention in using the system. As a result, mistakes could be reduced by good user training. The error recovery techniques used in the project are only useful for analysing slips. <marker type="block"/> Errors happen naturally in everyday life. They are generally caused as a result of failure to correctly plan the sequence of actions necessary to carry out a given task or failure to correctly perform a correctly planned task. Errors can be influenced, encouraged, or triggered by many factors including poor interface design, training, environmental condition and fatigue [Reason, 1990, Maddox, 1997]. For instance poor training can show up in a work force as high workload, undue time pressure, inappropriate perception of hazards or motivational difficulties [Reason, 1990]. Poor training could also mean a user has inadequate knowledge on the use of a system. James Reason suggests that error training - a situation where users are presented with the opportunity to make errors and recover from them - should be an integral part of training [Reason, 1990]. Bad instructions in user manuals or help files very often cause errors in interaction. Even operations are â€˜straightforwardâ€™ as operating a television could easily be made annoying to the user by poor instructions. An example is the instruction given by many interactive television channels - â€˜press the red button to get the weather option...â€™. The obedient user looks on to her remote control and presses the most prominent red button on the control (the power button). It is easy to imagine the frustration that follows. The user in this scenario was an elderly woman of 86.<marker type="page" number="23"/><marker type="block"/> The measure taken to reduce errors depends upon the type of error being tackled. For instance staff training is usually an effective starting poing to reduce errors in general. Standardisation of user interfaces and procedures can also reduce error although this should be done at a level that will be high enough to make sense to the user. An example of bad standardisation would be creating identical user interfaces for two different products but requiring different interaction for the two interfaces because certain functions in one device are not applicable in the other device (standardising user interfaces between infusion pumps and syringe pumps). Prescription and drug dosage errors in healthcare can be reduced by providing more accessible patient documentation at the point of care using a mobile ubiquitous access cart mounted with a lightweight computer [Abraham et al., 2008]. Nurses are able to quickly and accurately view patient history data and store new information to be viewed by a different medical personnel. This technique encourages error reduction by making information more accessible. Use of barcode technology to improve the accuracy of the medication administration process has been reviewed by [Wideman et al., 2005]. Stud- ies by [Patterson et al., 2002] showed that the introduction of the barcode medication administration system had negative side effects and actually increased the probability of a medication error. One of the side effects was that nurses were confused by the automated removal of medications by the system. This was implemented in a rigid inflexible manner such that if a drug is to be administered at a specific time, the drug will be removed from the medication list a number of hours after the scheduled administration time regardless of whether the drug has been administered or not. This design decision could lead to missed medications. Another method for error reduction would be designing medical devices to minimize affordances for error [Reason, 1990]. The term affordance was coined by perceptual psychologist J.J. Gibson [Gibson, 1986] to refer to the actionable properties between the world and an actor. Don Norman uses the phrase â€˜perceived affordanceâ€™ in design to refer to the actions a user perceives to be possible on an object [Norman, 1999]. Device interface designers should exploit the end userâ€™s perceived affordance for the device by using the physical properties of the device to suggest certain actions to the user. [Norman, 2002] strongly recommends exploiting the power of<marker type="page" number="24"/><marker type="block"/> constraints in design to minimise errors. Cars are a good example of a ubiquitous safety critical device that use forcing functions to reduce human error. For instance it is not possible to release the parking gear of a car until the brake pedal is depressed. In a medical scenario, drug overdose can be reduced by enforcing that the userâ€™s weight is entered into the system to be used as a validation of the dose rate that is intended to give to the patient. [Thimbleby, 2008] has successfully demonstrated a prototype system using this principle.<marker type="block"/> The issue of evaluating usability and finding usability problems could be done in a number of ways. One could employ the aid of a usability expert who would analyse the user interface of the device and evaluate it using well defined usability heuristics like consistency, closure, visibility, ability to undo, feedback etc. based on work done by Nielsen and Schneiderman [Shneiderman and Plaisant, 2004, Nielsen, 1992]. The next section reviews several techniques and research used to evaluate usability in the medical field. Lots of work has been done in the area of improving interaction of medical devices. Many different approaches have been taken to explore the problem. Experiments performed range from observational research to deep analysis by human factors engineers. [Carayon et al., 2005] used observational studies to asses the interaction between nurses and infusion pump technologies. The experiments were performed to assess the effectiveness of three technologies : a bar code technology, IV pump and Smart IV pump. The bar code technology and the Smart pump were introduced to reduce the iv pump programming errors which would potentially reduce dosage errors. [Ginsburg, 2005] carried out a human factors evaluation and a cross- departmental survey of three infusion pumps from different vendors. The purpose of this evaluation was to select one infusion pump (brand) that would be used in the hospital for the sake of uniformity. Standard usability metrics were used by a usability expert to assess the usability of each infusion pump. Each metric was assessed on a scale of one to five with one being unacceptable usability and five being excellent. In addition, nurses<marker type="page" number="25"/><marker type="block"/> were used for user testing which involved performing predefined tasks like programming a drug infusion from scratch on an infusion pump. A usability expert observed the nurses as they performed the tasks and classified the errors that occured in each task (if any) as critical and non-critical errors. [Lin et al., 1998, Lin et al., 2002] evaluated a commercial Patient Con- trolled Analgesia Infusion pump by comparing its interface with a redesigned interface that took into account many techniques suggested by human factors engineering in order to reduce or eliminate programming errors in the course of using these devices. The evaluation was done using experienced nurses that were asked to perform certain tasks using a simulation of the old and redesigned interface. Results of this evaluation found that user errors were reduced in the redesigned interface. [Chung et al., 2003] introduce an extended hierarchical task analysis methodology for comparing the user interfaces on volumetric infusion pumps. Their evaluation methodology had a focus on predicting errors. Their evaluation, based on Normanâ€™s Action Theory [Norman and Draper, 1986], un- covered the inherent variations found across infusion pumps in use in todayâ€™s hospitals. All the above techniques have the same limitation as they are applied as an afterthought after design is complete and are often time consuming and costly. Below is a very cost effective technique that a designer can use at design time to perform accurate mathematical analysis of a user interface and we identify metrics to watch out for during the analysis phase in order to improve the interaction design of the device.<marker type="block"/> [Thimbleby, 2004] shows that user interfaces are algebraic structures and proposes a theory that users effectively do algebra when they interact with computer systems. This unleashes precise ways of reasoning about the design and usability of interactive systems and provides a technique with a relatively short learning curve when compared to many formal methods that are in use for automatic verification, simulation and model checking for user interfaces like SPIN [Holzmann, 1997]. By representing a systemâ€™s states and possible interaction as a finite state machine, the underlying graph of the deviceâ€™s state machine can be<marker type="page" number="26"/><marker type="block"/> analysed using well founded techniques in graph theory. Representing interaction design as finite state machine has some shortcomings. For instance, the state machine for a complex device could easily get unmanageable and state machines are not ideal for representing continuous systems but several suggestions have been proposed in [Thimbleby, 1994, Thimbleby, 2007] - complex systems can be decomposed to simpler manageable components and continuous systems could be treated as the limit of discreet systems. Compared to other techniques, this technique can be used and the results would be backed up by years of work in graph theory. For instance we will be able to say for any given device that this is the optimal way to design the interaction sequence in this device such that the number of buttons used for navigation is optimal, or such that the traversal of states in the device allows for better error recovery than another device. This technique is not intended to replace the other techniques reviewed in earlier sections. It is however intended as a supplementary method for formal analysis of interaction design.</region>
        <region class="unknown" id="89" page="22" column="1">3.2 Why Errors Happen</region>
        <outsider class="DoCO:TextBox" type="header" id="91" page="23" column="1">3.3. MEASURES FOR ERROR REDUCTION</outsider>
        <outsider class="DoCO:TextBox" type="page_nr" id="92" page="23" column="1">13</outsider>
        <region class="unknown" id="93" page="23" column="1">3.3 Measures for error Reduction</region>
        <outsider class="DoCO:TextBox" type="page_nr" id="95" page="24" column="1">14</outsider>
        <outsider class="DoCO:TextBox" type="header" id="96" page="24" column="1">CHAPTER 3. HUMAN ERROR</outsider>
        <region class="unknown" id="98" page="24" column="1">3.4 Usability evaluation and error reduction in medical devices</region>
        <outsider class="DoCO:TextBox" type="header" id="100" page="25" column="1">3.5. A TECHNIQUE FOR USER INTERACTION DESIGN AND ANALYSIS 15</outsider>
        <region class="unknown" id="102" page="25" column="1">3.5 A technique for user interaction design and analysis</region>
        <outsider class="DoCO:TextBox" type="page_nr" id="104" page="26" column="1">16</outsider>
        <outsider class="DoCO:TextBox" type="header" id="105" page="26" column="1">CHAPTER 3. HUMAN ERROR</outsider>
        <region class="unknown" id="107" page="27" column="1">Chapter 4</region>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="108" page="27" column="1">Interaction Design and Analysis with Graphs</h1>
        <region class="unknown" id="109" page="27" column="1">4.1 Graph properties and usability</region>
        <region class="DoCO:TextChunk" id="113" page="27" column="1">Representing devices as graphs allows for well founded analysis using graph theory. A good number of these graph properties have been discussed in [Thimbleby, 2007] with their application to usability and analysis of interactive devices. Some of these are reviewed below while emphasising their relationship and possible applications to usability. The next chapter applies these properties to a medical device. <marker type="block"/> An edge colouring of a graph assigns a colour to each edge of a graph such that no two adjacent edges share the same colour. By optimally colouring the edges of a graph representing a device and its corresponding interactions, we might obtain a benchmark for the number of unique buttons needed to operate the device.<marker type="block"/> Even though this number might not be practical, it could be useful in distributing buttons for navigating menu structures like dynamically displayed items that are selected using soft-keys on most devices. In other words, the proper edge colouring of a graph produces a lower bound for the number of different buttons needed to traverse a connected graph.</region>
        <region class="unknown" id="111" page="27" column="1">4.1.1 Edge Chromatic Number</region>
        <region class="DoCO:TextChunk" id="114" confidence="possible" page="27" column="1">17</region>
        <outsider class="DoCO:TextBox" type="header" id="115" page="28" column="1">18 CHAPTER 4. INTERACTION DESIGN AND ANALYSIS WITH GRAPHS</outsider>
        <region class="unknown" id="116" page="28" column="1">4.1.2 Centrality</region>
        <region class="DoCO:TextChunk" id="117" page="28" column="1">In graph theory, centrality is used to measure the relative importance of nodes in a graph. Various methods exist for measuring node centrality in a graph and some of them are described below.</region>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="118" confidence="possible" page="28" column="1">Degree Centrality</h1>
        <region class="unknown" id="119" page="28" column="1">is the simplest way and one of the first methods introduced to measure the cetralilty in a graph [Brandes and Erlebach, 2005]. The centrality of any given vertex in the graph is represented by the degree of that vertex. For a directed graph this could even be taken further by taking into account the indegree and the outdegree of the vertex. Hence the concept of the most central vertex in a graph is defined as the vertex with the highest degree.</region>
        <region class="DoCO:TextChunk" id="120" confidence="possible" page="28" column="1">In a social networking graph, where vertices are people and edges de- note friendships between people, centrality can be used to find out interesting information about people in the community. For example someone with whom everyone is a friend is clearly important (central) because taking him out of the graph could render the graph discon- nected. The graph could be made even more interesting by considering the direction of friendship i.e. who requested friendship of the other. This would then produce a directed graph where the indegree of the each vertex contains information about a personâ€™s popularity and the outdegree of the vertex tells us about how sociable that person is.</region>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="121" confidence="possible" page="28" column="1">Betweenness Centrality</h1>
        <region class="unknown" id="122" page="28" column="1">Another method for measuring the centrality of a vertex in a graph is by considering how many shortest paths in the graph the vertex lies on. This is sometimes referred to as relative stress centrality [Brandes and Erlebach, 2005]. The notion of centrality based on betweenness can be explained by a vertex in a communication network that is located on the shortest communication path connecting pairs of others [Freeman, 1977]. This vertex consequently bears an amount of responsibility to any pair of vertices whose shortest path it lies on. As a result, the number of shortest paths that pass through a vertex is an important measure of how much information flow through the graph depends on that vertex.</region>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="123" confidence="possible" page="28" column="1">Closeness Centrality</h1>
        <region class="unknown" id="124" page="28" column="1">is a measure of centrality of a vertex as a function of its shortest paths to all other vertices in the graph. This is usually measured as a sum of shortest paths or an average of shortest paths.</region>
        <outsider class="DoCO:TextBox" type="header" id="125" page="29" column="1">4.1. GRAPH PROPERTIES AND USABILITY</outsider>
        <outsider class="DoCO:TextBox" type="page_nr" id="126" page="29" column="1">19</outsider>
        <region class="DoCO:FigureBox" id="F4.1">
          <image class="DoCO:Figure" src="62kw.page_029.image_02.png" thmb="62kw.page_029.image_02-thumb.png"/>
          <caption class="deo:Caption" id="128" page="29" column="1">Figure 4.1: A star graph and a complete both with 6 vertices.</caption>
        </region>
        <region class="DoCO:TextChunk" id="152" page="29" column="1">As far as interactive devices are concerned, the knowledge of the most central state is very important to the user in efficiently navigating around the device. Ideally a very central (important) state should lie on the shortest path to most other states in the device. An interesting question is thus raised. In an interactive device, should there be one clearly very central state in the device such that the user learns that option or should there be a few of these states such that the user has more options in getting around the device easily? The first option leans towards a design that is based on a star network such that access to all states from every other states is routed through a central state. This technique has been used by apple in the interaction design of its mobile phone - the iPhone. In the iPhone there is a â€˜magicâ€™ home button which when clicked provides a one step access to most other states in the device. The second option is a design whose underlying graph structure approaches a complete graph. The upper bound for such a design would be a K-complete graph (where K is the number of vertices in the graph). It is however impractical to design a system with such properties because the complexity of the user interface needed to provide such graph connectivity would undermine the usability of the device. This would be similar to many windows desktop software that provide the same function as a menu item, an icon and a context menu item (often invoked by secondary mouse buttons). It would be interesting to investigate the appropriateness of each of the options described above in use with mobile and desktop applications. <marker type="page" number="30"/><marker type="block"/> Minimum Spanning Tree The minimum spanning tree of a graph can be used to visualise the cost of visiting all vertices from a given root vertex. The root vertex would usually be the start state for the device in question. Minimum spanning trees are usually useful in determining centrality values of graphs. For example in closeness centrality, where centrality is measured as a function of a nodes shortest paths to all other vertices in the graph, minimum spanning trees could be used.<marker type="block"/> 4.1.3 A stochastic model of frequencies of traversal of nodes and edges Predicting the frequencies of traversal of nodes and edges in a graph could be useful in the development process in finding an appropriate navigational structure for a device. Edges (actions) that are difficult that are difficult to traverse or functions (vertices) that are difficult to reach can then be further investigated for redesign or completely removed. Moreover if the edges were labelled or coloured, the frequency of traversal of edges will give an indication of which buttons would be be used most frequently in the device. An interaction designer should be interested in this because it could affect the size, location and materials used for the buttons. If certain buttons are going to be used a lot more frequently than others, then it follows logically that they would probably wear out faster than the others so extra precautions can be taken to prevent this by using different materials (e.g. a more durable material) or by redesigning the device to allow for a more even distribution of user action on buttons.<marker type="block"/> 4.1.4 Connectivity A graph is said to be connected if for every pair of vertices u and v in the graph, there exists a path between the two vertices. This property (connectivity) should be true for all interactive systems because it means there is no sink state in the device such that the user gets stuck. This would be equivalent to a system freeze in many poorly tested software programs. For directed graphs like interactive devices, knowing that the connectivity property is true is not exactly enough because a path from vertex u to vertex v might be different from the path from vertex v to vertex u. As a result we will be interested in the cost of travelling between these two ver-<marker type="page" number="31"/><marker type="block"/> tices in both directions and the difference in the costs if there is one. This might have interesting effects on errors and error recovery. For instance is it easy to commit errors and difficult to recover from them?<marker type="block"/> A vertex u in a directed graph is reachable from a vertex v if there is a path from vertex u to v. Reachability and connectivity are clearly related since a graphâ€™s reachability needs to be explored to find out if the graph is connected. Given some start vertex s, if a vertex t is unreachable from s, then t is pointless and can be eliminated.<marker type="block"/> From a design point of view, the device graph would ideally be generated from the device specification. Reachability testing would then be useful in iterative design where the device is continuously redesigned to optimise usability. It might also be enlightening to analyse the rechability paths between all states in a device to find out what the cost of the transitions are. For instance if the reachability of a state from another state requires that a device be in the off state at some point, then such a state might need to be investigated because of the possible cost that might be attributed to switching a device off and back on e.g. there might be a heavy time cost in getting the device off and back on.<marker type="block"/> The shortest path between two states u and v is the path with the least cost between the two states. This is usually useful to know as it is the ideal way to navigate around the states in a device. It is also useful in generating interactive user manuals while using a device. For instance, an interactive manual could give the quickest way to a specified function in a device given a current state.<marker type="block"/> Well known algorithms like Floyd-Warshall algorithm and Dijkstraâ€™s algorithm can be used to efficiently find the shortest path between two vertices in a graph [Marshall, 1971, Bondy and Murty, 1976] . This can be performed interactively as a device is run to provide dynamic help or it could be used by wizards in interactive systems.<marker type="page" number="32"/><marker type="block"/> Modeling a device as a graph provides some way of predicting how error tolerant the device is. Questions such as how quickly a user can recover from a one step error could be analysed and approximated using the underlying device graph. [Thimbleby et al., 2001] shows techniques for analysing usability using Markov models. [Thimbleby, 2007] also discusses different forms of interaction errors whose probability of occurence can be predicted and analysed using the deviceâ€™s finiste state machines. Below, some of these techniques are adapted and used in the analysis of the Alaris infusion pump in chapter 5.<marker type="block"/> 4.2.1 Estimating the probability for error Interaction designers should be interested in how error tolerant their design is since errors are inevitable. The ease of committing and error could be estimated as a function of the number of out degree edges from a node. The probability that the intended transition is traversed would then be the inverse of the number of out degree edges from the source node. For instance in a very simple flash light simulation with only â€˜onâ€™ and â€˜offâ€™ states toggled by a single push button, then the probability that the intended state is reached from any source state is 1 assuming the battery and light bulb keep working. We will describe this as the probability of a correct transition from a source state to a target state.<marker type="block"/> 4.2.2 Estimating the ease of error recovery Since errors are inevitable, it is important to analyse the ease with which the average user will recover from such errors. We shall describe the best recovery path as the shortest path between the state the user has arrived in error and the state they intended to transition to.<marker type="page" number="33"/><marker type="block"/> Analysis of this will show that a device with good connectivity will have better error recovery than a device whose underlying interaction structure is less connected i.e. similar to a tree. This is easily seen because complete connectivity ( as seen in a complete graph ) means every state is one step away from every other state and in the case of an error, correcting such an error is only one step away although desinging interaction for maximum connectivity also increases the chances for error so knowledge will play a very important role in error reduction for such a system. However a traversal error in a tree like structure could mean going back up to the node where the wrong turn was taken.</region>
        <outsider class="DoCO:TextBox" type="header" id="130" page="30" column="1">20 CHAPTER 4. INTERACTION DESIGN AND ANALYSIS WITH GRAPHS</outsider>
        <outsider class="DoCO:TextBox" type="header" id="134" page="31" column="1">4.1. GRAPH PROPERTIES AND USABILITY</outsider>
        <outsider class="DoCO:TextBox" type="page_nr" id="135" page="31" column="1">21</outsider>
        <region class="unknown" id="137" page="31" column="1">4.1.5 Reachability</region>
        <region class="unknown" id="140" page="31" column="1">4.1.6 Shortest paths</region>
        <outsider class="DoCO:TextBox" type="header" id="143" page="32" column="1">22 CHAPTER 4. INTERACTION DESIGN AND ANALYSIS WITH GRAPHS</outsider>
        <region class="unknown" id="144" page="32" column="1">4.2 Graphs and Errors</region>
        <region class="DoCO:FigureBox" id="F4.2">
          <image class="DoCO:Figure" src="62kw.page_032.image_03.png" thmb="62kw.page_032.image_03-thumb.png"/>
          <caption class="deo:Caption" id="148" page="32" column="1">Figure 4.2: Finite state machine of a very simple flashlight</caption>
        </region>
        <outsider class="DoCO:TextBox" type="header" id="150" page="33" column="1">4.2. GRAPHS AND ERRORS</outsider>
        <outsider class="DoCO:TextBox" type="page_nr" id="151" page="33" column="1">23</outsider>
        <region class="unknown" id="153" page="35" column="1">Chapter 5</region>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="154" page="35" column="1">Analysis of a real device</h1>
        <region class="unknown" id="155" page="35" column="1">5.1 About the Alaris Infusion Pump</region>
        <region class="DoCO:TextChunk" id="160" page="35" column="1">The Alaris Volumetric infusion pump ( <xref ref-type="fig" rid="F5.1" id="156" class="deo:Reference">figure 5.1</xref>) is a medical device used for controlled automatic delivery of fluid medication or blood transfusion to patients. This pump has an infusion rate range between 1ml/hr and 1200ml/hr with a volumetric accuracy of +/- 5%. It has a 240x240 pixels monochrome display and 14 buttons for operating the device. It contains a rechargeable battery that can operate for approximately 4hrs while infusing at 125ml/hr.<marker type="block"/> The benefits of user interaction analysis using graph theory is only possible if one can represent the interaction of a device as a graph in the first place. This is usually not a trivial task. It could involve reverse engineering an already made device. This method could be largely erroneous because only the states understood by the person reverse engineering the device would be included in the resulting graph. However this would not be the case if a design source code were available for the device. This would allow for accurate and automatic graph generation.<marker type="block"/> For now, we look at one possible way of manually exploring a device in order to generate its underlying graph for analysis.</region>
        <region class="unknown" id="158" page="35" column="1">5.2 From Statecharts to finite state machines</region>
        <region class="DoCO:TextChunk" id="161" confidence="possible" page="35" column="1">25</region>
        <outsider class="DoCO:TextBox" type="page_nr" id="162" page="36" column="1">26</outsider>
        <outsider class="DoCO:TextBox" type="header" id="163" page="36" column="1">CHAPTER 5. ANALYSIS OF A REAL DEVICE</outsider>
        <region class="DoCO:FigureBox" id="F5.1">
          <image class="DoCO:Figure" src="62kw.page_036.image_04.png" thmb="62kw.page_036.image_04-thumb.png"/>
          <caption class="deo:Caption" id="165" page="36" column="1">Figure 5.1: The Alaris GP Volumetric Pump</caption>
        </region>
        <region class="DoCO:TextChunk" id="194" page="36" column="1">5.2.1 Specifying the device as a statechart One of the most useful things to do when trying to analyse a device is to spend a couple of minutes identifying the buttons on the device and if they map to dynamic buttons generated on the device user interface. Most simple devices, like the one being analysed in this thesis make use of soft keys. Soft keys are blank buttons on the device that get different functions depending on the state of the device. Simple devices like these could also be generalised because of the user interface components they are likely to contain. They usually contain lists of things to select from, numeric values that could be changed using spinner- like controls and buttons to be clicked to make a selection or to execute an action. So in general, the buttons on a typical simple (non-touchscreen) device are split between -navigational buttons for list controls, softkey buttons (for selecting dynamic on screen displayed buttons) and quick action short-cut buttons for transitioning between states. Using a simple JSON structure to represent the device and its state space, we can manually crawl the state space of a device by starting from an initial state and iterating through the different buttons on the device to see what state we are taken to. This JSON structure can then be parsed automatically to create a graph that can be analysed. <marker type="page" number="37"/><marker type="block"/> The specification will contain information such as the device name, the device start state and the device states specification. The device state specifications will contain a collection of states. Device states will contain the state name, state type and the neighbours of the state. The neighbours of a state will be specified as a tuple containing the name of the neighbouring state and the button used to transition to that state. <xref ref-type="fig" rid="F5.2" id="169" class="deo:Reference">Figure 5.2</xref> shows an example of a specification from the Alaris infusion pump.<marker type="block"/> The other method of generating a finite state machine would be to do so automatically from its user interface source code. Most modern user interface building languages are specified as a tree structure that contains a nested collection of user interface elements. Coupled with this, the user interface elements have events attached to them such that certain functions are run when a user interacts with the user interface element.<marker type="block"/> Our feedback for change in state for the device will be a subset of changes in the device display or the general appearance of the device outside of its display. This could include feedback on button displays or LED lights on the device. These changes must be persistent until the next interaction sequence from the user. This condition is necessary because if there is a change in the state of the device and such a change is not displayed on the user interface appropriately (as in not visually noticeable or not persistent), then it can be concluded that the user is not aware that the device has changed state. This is a potential design flaw and could easily lead to user errors as pointed out by [Norman, 1983] and [Shneiderman and Plaisant, 2004] and is one of the reasons for the Therac-25 accidents [Leveson, 1995].<marker type="block"/> One last thing that would be useful in automatically generating a finite state machine from source code would be a set of important state properties for the device in question. The device state would then be a function of the values of the properties of the device. Changes to these values will be effected by interacting with the device using the deviceâ€™s user interface elements like buttons. If we take a very simple example of a flash light. The simplest states would be â€˜onâ€™ and â€˜offâ€™. From a programmerâ€™s point of view these two states can be specified using one boolean variable holding true or false. So if our variable is â€˜trueâ€™ then we might say the flash light is â€˜onâ€™ otherwise it is â€˜offâ€™.<marker type="page" number="39"/><marker type="block"/> However not all variables in a program are boolean variables. Tracking the changes of an integer in a program could easily explode the state space. We could remedy this by converting such variables to boolean by simply checking if their value is valid. This can be performed for any complex object which has too many possible different values. So by monitoring the global variable space of a program whenever a user interaction event has been fired, we will be able to get a very accurate finite state machine of the device interaction. Some modern programming languages like Actionscript/Flex even take this a step further in terms of the potential ease with which the programmer can generate the finite state machine for their user interfaces. The ability to generate a user interface finite state machine is however a side effect of the actual feature. Actionscript/Flex has a concept of a View State in the design of user interfaces. A View State in Flex is simply a way of varying the content and appearance of the user interface in response to a user action. The programmer essentially defines different views of the user interface that will be changed based on user action.<marker type="block"/> A trivial example walkthrough Our example will involve the simple flashlight in <xref ref-type="fig" rid="F5" id="182" class="deo:Reference">figure 5.3</xref>. We will use a single boolean property to figure out whether the flashlight is on or off. Let us call this property â€˜isOnâ€™. And we will use a single push button to change this boolean property every time the button is clicked. Since this simple device has only one boolean property, then the total number of states will be 2 1 which gives a total of 2 states.<marker type="block"/> We could make the flashlight more realistic and add two more boolean properties to it. We add the â€˜isBatteryGood â€™ and the â€˜isBulbGood â€™ properties and two buttons to flip the values of these two properties. The total<marker type="page" number="40"/><marker type="block"/> number of states the new device can be in is now 2 3 states. In <xref ref-type="fig" rid="F5.4" id="189" class="deo:Reference">figure 5.4</xref> the boolean properties of the flashlight are arranged in the order isOnâ€“ isBatteryGood â€“isBulbGood and state 111 is the only state where the flash light will be on.<marker type="block"/> Graph visualisation allows for very good understanding of a graph data structure. The JSON state specification for the Alaris Pump was parsed to automatically generate both a finite state machine and a graphml âˆ— file for visualising. The yEd Graph Editor â€  was used to generate the graphs shown in the figures below.</region>
        <outsider class="DoCO:TextBox" type="header" id="167" page="37" column="1">5.3. AUTOMATIC FSM GENERATION</outsider>
        <outsider class="DoCO:TextBox" type="page_nr" id="168" page="37" column="1">27</outsider>
        <region class="unknown" id="171" page="37" column="1">5.3 Automatic FSM generation</region>
        <outsider class="DoCO:TextBox" type="page_nr" id="175" page="38" column="1">28</outsider>
        <outsider class="DoCO:TextBox" type="header" id="176" page="38" column="1">CHAPTER 5. ANALYSIS OF A REAL DEVICE</outsider>
        <region class="DoCO:FigureBox" id="F5.2">
          <image class="DoCO:Figure" src="62kw.page_038.image_05.png" thmb="62kw.page_038.image_05-thumb.png"/>
          <caption class="deo:Caption" id="178" page="38" column="1">Figure 5.2: A sample extract from the json specification for the Alaris pump</caption>
        </region>
        <outsider class="DoCO:TextBox" type="header" id="179" page="39" column="1">5.3. AUTOMATIC FSM GENERATION</outsider>
        <outsider class="DoCO:TextBox" type="page_nr" id="180" page="39" column="1">29</outsider>
        <region class="DoCO:FigureBox" id="F5.3">
          <image class="DoCO:Figure" src="62kw.page_039.image_06.png" thmb="62kw.page_039.image_06-thumb.png"/>
          <caption class="deo:Caption" id="185" page="39" column="1">Figure 5.3: Binary state machine for very simple flashlight</caption>
        </region>
        <outsider class="DoCO:TextBox" type="page_nr" id="187" page="40" column="1">30</outsider>
        <outsider class="DoCO:TextBox" type="header" id="188" page="40" column="1">CHAPTER 5. ANALYSIS OF A REAL DEVICE</outsider>
        <region class="DoCO:FigureBox" id="F5.4">
          <image class="DoCO:Figure" src="62kw.page_040.image_07.png" thmb="62kw.page_040.image_07-thumb.png"/>
          <caption class="deo:Caption" id="192" page="40" column="1">Figure 5.4: Binary state machine for a more complex flashlight. Coinciden- tally this graph is one of the 5 connected cubic graphs with 8 vertices.</caption>
        </region>
        <region class="unknown" id="193" page="40" column="1">5.4 Visualising the Alaris interaction graph</region>
        <region class="unknown" id="197" page="40" column="1">âˆ— graphml is a standard xml specification for specifying graphs. More details can be found at <ext-link ext-link-type="uri" href="http://graphml.graphdrawing.org/" id="195">http://graphml.graphdrawing.org/</ext-link> â€  Free java graph editor available at <ext-link ext-link-type="uri" href="http://www.yworks.com/en/products" id="196">http://www.yworks.com/en/products</ext-link> yed about.html</region>
        <outsider class="DoCO:TextBox" type="header" id="198" page="41" column="1">5.4. VISUALISING THE ALARIS INTERACTION GRAPH</outsider>
        <outsider class="DoCO:TextBox" type="page_nr" id="199" page="41" column="1">31</outsider>
        <region class="DoCO:FigureBox" id="F5.5">
          <caption class="deo:Caption" id="200" page="41" column="1">Figure 5.5:</caption>
        </region>
        <region class="DoCO:TextChunk" id="201" confidence="possible" page="41" column="1">A simplified graph of the alaris infusion pump. The yellow node is the start state, the red node is the infusing state and the cyan node is the â€˜infusion pausedâ€™ state.</region>
        <outsider class="DoCO:TextBox" type="page_nr" id="202" page="42" column="1">32</outsider>
        <outsider class="DoCO:TextBox" type="header" id="203" page="42" column="1">CHAPTER 5. ANALYSIS OF A REAL DEVICE</outsider>
        <region class="DoCO:FigureBox" id="F5.6">
          <image class="DoCO:Figure" src="62kw.page_042.image_08.png" thmb="62kw.page_042.image_08-thumb.png"/>
          <caption class="deo:Caption" id="205" page="42" column="1">Figure 5.6:</caption>
        </region>
        <region class="DoCO:TextChunk" id="206" confidence="possible" page="42" column="1">A more indepth graph of the alaris infusion pump. The graphs shows a replicated interaction sequence in three modes of the device. One when the rate is locked, when the rate is not locked and when the rate-lock is disabled. The yellow states represents the infusing and the infusion-paused state in the three different modes of the device.</region>
        <outsider class="DoCO:TextBox" type="header" id="207" page="43" column="1">5.5. PROPERTIES DISCOVERED</outsider>
        <outsider class="DoCO:TextBox" type="page_nr" id="208" page="43" column="1">33</outsider>
        <region class="unknown" id="209" page="43" column="1">5.5 Properties discovered</region>
        <region class="DoCO:TextChunk" id="235" page="43" column="1">Some of the properties below were generated using the presson framework as found in [Thimbleby, 2007] with minor language port from javascript to actionscript. Other analysis were done using Wolframâ€™s Mathematicaâ€™s robust Combinatorica package of graph theory algorithms. <marker type="block"/> Edge chromatic number The edge chromatic number for the finite state machine of the Alaris GP infusion pump is 6 â€¡ . This means using only six buttons, we can traverse the finite state machine of the device. The alaris pump shown in <xref ref-type="fig" rid="F5.1" id="211" class="deo:Reference">figure 5.1</xref> has 14 buttons. This is 8 buttons in excess of the optimal 6 that could be used to operate the device. The edge chromatic number property of an interaction graph should not be seen as a target to achieve in interaction design but should instead be seen as a lower bound for the least number of buttons possible to navigate a device. This is because on devices like the infusion pump that have icons or labels on most of their buttons, using the least number of buttons necessary for traversing the device would be counter intuitive for the user especially if the buttons were not blank or if the buttons were not used as soft keys whose actual labels were dynamic functions projected on the screen of the device. This property should get more interesting as the size of the device reduces. If a mobile device requires the least number of buttons for use then the edge chromatic number is the property interaction designer should look towards.<marker type="block"/> Connectivity, Shortest paths and eccentricities Analysis show that the device is strongly connected which is not surprising for a safety critical device such as the infusion pump. The worst path length in the device takes 12 button presses. The average path length of any two points in the device takes approximately 4 button presses (3.857 presses to be more precise).<marker type="block"/> Centrality Measuring the centrality of a graph can give insights into the relative importance of nodes in the graph. After using the centrality measures described â€¡ This value was obtained using Mathematicaâ€™s EdgeChromaticNumber function<marker type="page" number="44"/><marker type="block"/> in section 4.1.2, we obtain a ranking of most central states. The tables on the next page show the top 10 most central states according to the different centrality measures. The table below was calculated based on closeness centrality. Closeness centrality calculates a nodeâ€™s importance based on its shortest path to all other nodes in the graph. This is similar to calculating the minimum spanning tree of the graph, and successively using all the nodes in the graph as the root node and then ranking the trees in order of their average height. Below we can see the top 10 most central states measured by closeness centrality. State Centrality score Infusion Setup 1.0 Set VTBI Over TIme 0.89 Dosing Summary 0.86 Confirm Dosing Only Setup 0.86 ml/hr 0.85 Adjust Alarm Volume 0.79 Rate Lock 0.75 Set Drug Amount 0.74 Dosing Only 0.74 Set Rate 0.71 The two tables below are more similar in terms of the states they have identified as the most central states. Designers should look at such a list and ensure that the start state of their device is in the top few central state if not the most central state. This will ensure that the users can get to other states more easily once the device is started. State Centrality score Set Rate 1.0 Rate Lock 0.53 Infusion Setup 0.46 Dosing Summary 0.44 ml/hr 0.43 Dosing Only 0.36 Dosing Units Selection 0.28 Set Weight 0.21 Set Volume 0.18 Set Drug Amount 0.16<marker type="page" number="45"/><marker type="block"/> Frequencies of node and edge traversals From the state transition <xref ref-type="table" rid="Tin" id="221" class="deo:Reference">table in</xref> <xref ref-type="fig" rid="F5.9" id="222" class="deo:Reference">figure 5.9</xref>, it can be seen that the buttons most likely to be used on the device are the Opt1, Opt3, UP, DN, up and dn buttons. These are the softkey buttons and the list selection (list navigation) buttons. The table below shows a more detailed distribution of frequencies of button presses. Another way to look at this is as edge centrality of the graph. The buttons with the highest relative usage are more central to the device as they will be more likely to cause a change in state when pressed at any state.<marker type="block"/> Button Frequency Opt1 21% Opt 3 21% Opt2 5.3% UP 11% dn 11% DN 11% up 8.8% Pressure 3.5% Run 3.5% Option 1.7% Finished 1.7% Hold 1.7% Contrary to what these statistics might show, depending on the level of training or comptence of the user, certain functions of the device might not be used. This is particularly the case with the alaris pump being studied. The predecessor of the pump analysed had considerably less states than the one analysed. This is despite the fact that there was no difference in the appearance of the device. Some buttons in the old version were simply not implemented. For hospitals upgrading to the latest version of the alaris firmware, it is very possible that any user who was happy with the old firmware would ignore the new features added to the device and just use it as if it were the old version firmware - after all the new firmware only makes the interaction graph more complex. <xref ref-type="fig" rid="F5.10" id="224" class="deo:Reference">Figure 5.10</xref> Â§ shows the interaction graph of the Alaris infusion pump running firmware version 1.<marker type="block"/> The probability of committing an error at any state in the device is represented as a function of the number of out degree edges from that state. We Â§ This graph has been obtain courtesy of Prof. Harold Thimbleby whose initial works on the alaris infusion pump has been invaluable to this project.<marker type="page" number="46"/><marker type="block"/> will only be concerned with those edges that lead to a different state that the one the user is currently in and not self edges. This is because an action that leaves the user in the same state does not cost anything in recovery. Thus we can say the probability for error to occur in transition from state a to b is directly proportional to the number of other states that can be reached from state a. The size and arrangement of the buttons of the device would also influence the probability for errors as well as the userâ€™s level of expertise in using the device but we will not be investigating these. From the table below we can see that there are some states with no probability for error. These are states that can be transitioned to only one state. These should be important states because it is a very easy way of safeguarding critical states. If a state is critical, then the transition away from such a state should be done with the knowledge that such a transition is taking place. Note that the Infusing state below does not have a zero probability for error because the infusion can finish (which takes it back to the Set Rate state) or the infusion can be paused which takes it to the On Hold state).<marker type="block"/> But we should not only be concerned about probabilities that errors will occur because they certainly will occur. We should also be interested in how easily a device allows the user to recover from errors. The average number of button presses needed to recover from a one step error (i.e. an error resulting from a single button press) in the alaris infusion pump is<marker type="page" number="47"/><marker type="block"/> 1.985 button presses. The worst one step error recoveries occur when in the pumpâ€™s dosing only setup.</region>
        <outsider class="DoCO:TextBox" type="page_nr" id="215" page="44" column="1">34</outsider>
        <outsider class="DoCO:TextBox" type="header" id="216" page="44" column="1">CHAPTER 5. ANALYSIS OF A REAL DEVICE</outsider>
        <region class="unknown" id="218" page="44" column="1">State Centrality score Set Rate 1.0 Rate Lock 0.47 Infusion Setup 0.42 Pump Details 0.37 VTBI over time 0.37 Dosing Summary 0.32 Adjust Alarm Volume 0.26 L5 0.26 Dosing Units Selection 0.21 Set Weight 0.21</region>
        <outsider class="DoCO:TextBox" type="header" id="219" page="45" column="1">5.5. PROPERTIES DISCOVERED</outsider>
        <outsider class="DoCO:TextBox" type="page_nr" id="220" page="45" column="1">35</outsider>
        <region class="unknown" id="226" page="45" column="1">Errors</region>
        <outsider class="DoCO:TextBox" type="page_nr" id="228" page="46" column="1">36</outsider>
        <outsider class="DoCO:TextBox" type="header" id="229" page="46" column="1">CHAPTER 5. ANALYSIS OF A REAL DEVICE</outsider>
        <region class="unknown" id="231" page="46" column="1">State Probability for error Confirm DosingOnly Setup 0.5 SetRate 0.8 Set Drug Amount 0.5 Show Volume Infused 0 500ml tbi 0 Set VTBI 0.5 Dosing Only 0.5 Dosing Units Selection 0.5 ml/hr 0.5 Set VTBI Over Time 0.8 Rate Lock 0.6666666666666666 Adjust Alarm Volume 0.75 Pump Details 0.5 Infusion Setup 0.8333333333333334 Dosing Summary 0.75 L2 0.5 L5 0.6666666666666666 Set Weight 0.5 On Hold 0 Infusing 0.5 Set Volume 0.5 L8 0.5</region>
        <outsider class="DoCO:TextBox" type="header" id="233" page="47" column="1">5.5. PROPERTIES DISCOVERED</outsider>
        <outsider class="DoCO:TextBox" type="page_nr" id="234" page="47" column="1">37</outsider>
        <outsider class="DoCO:TextBox" type="page_nr" id="236" page="48" column="1">38</outsider>
        <outsider class="DoCO:TextBox" type="header" id="237" page="48" column="1">CHAPTER 5. ANALYSIS OF A REAL DEVICE</outsider>
        <region class="unknown" id="238" page="48" column="1">B 0 B B B B B B B B B B B B B B B B B B B B B B B B B B B B B B B B B B B B @ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 1 1 1 1 0 0 0 1 1 0 1 1 1 0 1 0 0 0 1 1 1 0 0 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 1 1 0 0 0 0 0 0 1 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 1 0 1 0 1 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 C C C C C C C C C C C C C C C 1 C C C C C C C C C C C C C C C C C C C A C C C</region>
        <region class="DoCO:FigureBox" id="F5.7">
          <caption class="deo:Caption" id="239" page="48" column="1">Figure 5.7: Adjacency matrix for the Alaris Pump</caption>
        </region>
        <region class="unknown" id="240" page="48" column="1">B B B B B B 0 B B B @ B B B B B B B B B B B B B B B B B B B B B B B B B B B B 11 10 12 11 11 10 12 11 11 11 4 9 2 0 8 5 8 1 7 3 6 9 0 1 1 2 1 1 1 1 2 1 1 1 1 2 1 1 3 1 1 4 2 3 10 11 11 10 10 10 10 10 7 4 1 6 3 7 5 1 8 2 8 0 9 9 1 2 2 2 2 3 0 2 2 3 2 2 2 4 4 5 2 2 3 2 3 2 2 3 0 3 3 4 3 3 3 1 4 5 3 5 3 3 3 3 6 4 3 3 1 2 2 3 2 2 2 2 1 0 2 5 2 2 2 2 3 4 2 4 3 2 5 5 6 6 6 7 6 6 6 7 4 3 2 4 2 3 3 0 1 4 1 5 6 6 7 7 7 7 7 8 7 8 0 1 3 4 5 4 3 2 1 4 5 2 4 4 5 5 6 5 5 5 6 5 5 0 2 2 3 1 1 2 3 3 4 5 4 4 5 6 5 6 5 5 5 5 7 3 1 8 5 2 0 5 7 6 6 1 1 1 3 3 2 2 2 2 2 2 2 1 0 3 1 3 1 4 4 5 2 1 6 6 7 6 6 6 7 6 3 7 2 8 7 6 9 4 1 6 8 0 5 5 3 3 3 4 4 3 3 3 1 5 4 6 1 3 1 3 1 4 5 1 0 2 4 4 4 5 5 4 4 4 2 5 5 4 4 0 6 7 1 6 2 1 3 3 3 3 4 4 3 3 3 3 5 2 6 3 3 1 2 4 1 4 0 5 2 2 3 0 1 2 2 2 2 3 2 2 4 2 3 5 2 4 2 2 2 3 1 2 1 4 3 3 1 4 0 3 4 3 4 5 5 3 3 3 3 6 3 3 2 3 8 8 8 8 8 9 8 9 5 2 2 6 1 1 0 3 5 4 6 3 7 7 1 3 3 4 0 3 3 3 5 4 3 4 3 6 5 3 3 3 3 3 2 3 1 2 2 2 2 0 2 1 3 2 4 2 2 2 2 2 5 3 2 4 2 3 10 10 8 8 9 9 9 9 9 9 1 1 5 6 6 0 7 2 3 4 2 7 4 2 4 1 0 4 6 4 4 4 7 5 4 4 4 5 4 6 5 5 4 3 C C C C C C C C C C C C C C C C C C C C C C 1 C C C C C C C C C C C C C C A C</region>
        <region class="DoCO:FigureBox" id="F5.8">
          <caption class="deo:Caption" id="241" page="48" column="1">Figure 5.8: All pairs shortest paths</caption>
        </region>
        <outsider class="DoCO:TextBox" type="header" id="242" page="49" column="1">5.5. PROPERTIES DISCOVERED</outsider>
        <outsider class="DoCO:TextBox" type="page_nr" id="243" page="49" column="1">39</outsider>
        <region class="unknown" id="244" page="49" column="1">Action Current State Next State Opt1 Confirm DosingOnly Setup SetRate SetRate Show Volume Infused Set Drug Amount Confirm DosingOnly Setup 500ml tbi Set VTBI Dosing Only Dosing Units Selection Dosing Units Selection Set Weight ml/hr SetRate Infusion Setup ml/hr L5 SetRate Set Weight Set Volume Set Volume Set Drug Amount L8 SetRate Opt3 Confirm DosingOnly Setup Set Drug Amount Set Drug Amount Set Volume Set VTBI SetRate Dosing Units Selection Dosing Only Set VTBI Over Time SetRate Rate Lock SetRate Adjust Alarm Volume SetRate Pump Details SetRate Infusion Setup SetRate Dosing Summary SetRate Set Weight Dosing Units Selection Set Volume Set Weight Opt2 SetRate Set VTBI Show Volume Infused SetRate Set VTBI 500ml tbi UP Dosing Only ml/hr Set VTBI Over Time Rate Lock Adjust Alarm Volume Rate Lock Pump Details Rate Lock Infusion Setup Rate Lock Dosing Summary Rate Lock dn Set VTBI Over Time Adjust Alarm Volume Rate Lock Dosing Summary Infusion Setup Set VTBI Over Time Dosing Summary Infusion Setup L5 L2 L8 L5 DN ml/hr Dosing Only Set VTBI Over Time Pump Details Rate Lock Pump Details Adjust Alarm Volume Pump Details Infusion Setup Pump Details Dosing Summary Pump Details up Set VTBI Over Time Infusion Setup Adjust Alarm Volume Set VTBI Over Time Infusion Setup Dosing Summary L2 L5 L5 L8 Pressure SetRate L2 L2 SetRate Run SetRate Infusing On Hold Infusing Option SetRate Rate Lock Finished Infusing SetRate Hold Infusing On Hold</region>
        <region class="DoCO:FigureBox" id="F5.9">
          <caption class="deo:Caption" id="245" page="49" column="1">Figure 5.9: A state transition table for the Alaris pump. Note that Finished is not a button but an event that triggers a change in state</caption>
        </region>
        <outsider class="DoCO:TextBox" type="page_nr" id="246" page="50" column="1">40</outsider>
        <outsider class="DoCO:TextBox" type="header" id="247" page="50" column="1">CHAPTER 5. ANALYSIS OF A REAL DEVICE</outsider>
        <region class="DoCO:FigureBox" id="F5.10">
          <image class="DoCO:Figure" src="62kw.page_050.image_09.png" thmb="62kw.page_050.image_09-thumb.png"/>
          <caption class="deo:Caption" id="249" page="50" column="1">Figure 5.10: Graph of the previous version of the alaris infusion pump.</caption>
        </region>
        <outsider class="DoCO:TextBox" type="header" id="250" page="51" column="1">5.5. PROPERTIES DISCOVERED</outsider>
        <outsider class="DoCO:TextBox" type="page_nr" id="251" page="51" column="1">41</outsider>
        <region class="unknown" id="252" page="51" column="1">Current State Intended State Errorneous State Steps to Recovery Confirm DosingOnly Setup SetRate Set Drug Amount 1 Set Drug Amount SetRate 10 SetRate Show Volume Infused Set VTBI 1 L2 1 Infusing 1 Rate Lock 1 Set VTBI Show Volume Infused 1 L2 1 Infusing 1 Rate Lock 1 L2 Show Volume Infused 1 Set VTBI 1 Infusing 1 Rate Lock 1 Infusing Show Volume Infused 1 Set VTBI 1 L2 1 Rate Lock 1 Rate Lock Show Volume Infused 1 Set VTBI 1 L2 1 Infusing 1 Set Drug Amount Confirm DosingOnly Setup Set Volume 1 Set Volume Confirm DosingOnly Setup 1 Set VTBI SetRate 500ml tbi 1 500ml tbi SetRate 1 Dosing Only Dosing Units Selection ml/hr 1 ml/hr Dosing Units Selection 1 Dosing Units Selection Set Weight Dosing Only 1 Dosing Only Set Weight 1 ml/hr SetRate Dosing Only 1 Dosing Only SetRate 4 Set VTBI Over Time SetRate Rate Lock 3 Adjust Alarm Volume 1 Pump Details 4 Infusion Setup 1 Rate Lock SetRate 4 Adjust Alarm Volume 1 Pump Details 4 Infusion Setup 1 Adjust Alarm Volume SetRate 4 Rate Lock 3 Pump Details 4 Infusion Setup 1 Pump Details SetRate 4 Rate Lock 3 Adjust Alarm Volume 1 Infusion Setup 1 Infusion Setup SetRate 4 Rate Lock 3 Adjust Alarm Volume 1 Pump Details 4 Dosing Summary SetRate Rate Lock 1 Infusion Setup 1 Pump Details 2 Rate Lock SetRate 2 Infusion Setup 1 Pump Details 2 Infusion Setup SetRate 2 Rate Lock 1 Pump Details 2 Pump Details SetRate 2 Rate Lock 1 Infusion Setup 1</region>
        <region class="DoCO:FigureBox" id="F5.11">
          <caption class="deo:Caption" id="253" page="51" column="1">Figure 5.11: This table shows some of the one step errors that could occur in the course of using the alaris infusion pump and the number of steps needed to correct the error. The number of steps needed was calculated using the shortest paths between the errorneous state and the current state</caption>
        </region>
        <region class="unknown" id="254" page="53" column="1">Chapter 6</region>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="255" page="53" column="1">Analysing Device Logs</h1>
        <region class="DoCO:TextChunk" id="258" page="53" column="1">Devices might be well designed and well tested but there is sometimes the occurrence of errors that result from faulty parts in the device. Many modern devices now have the ability to log events about their use and about certain actions performed on that device over time. The level of detail of logs collected differ from device to device. <marker type="block"/> The Graseby 500 infusion pump is a volumetric infusion pump similar to the Alaris GP infusion pump. The Graseby is primarily powered from the mains with a backup battery that lasts up to 6 hours âˆ— . The accuracy of the pump ranges from 0.1ml/hr to 999.9ml/hr although according to the technical manual, its accuracy below 1ml/hr is low for short infusions. The graseby pump is capable of keeping logs whenever an error occurs while the pump is running as well as whenever the pump alarms. It main- tains a detailed log of the most recent 200 events and a cumulative log of several other properties of the pump. For instance, it contains the total /cumulative volume the pump has infused, the total time the device was used on battery etc.. The log also contains a unique identifier for each pump. This identifier is useful in obtaining extra information about the pump like the date the device was purchased, the location of the device and the department the device is being used. Events tracked by the graseby pump range âˆ— This time depends on the rate of delivery of the drug and the age of the battery. As a result, it is generally advised not to use the pump on battery for more than 2 hours.</region>
        <region class="unknown" id="257" page="53" column="1">About the Graseby 500 infusion pump</region>
        <region class="DoCO:TextChunk" id="259" confidence="possible" page="53" column="1">43</region>
        <outsider class="DoCO:TextBox" type="page_nr" id="260" page="54" column="1">44</outsider>
        <outsider class="DoCO:TextBox" type="header" id="261" page="54" column="1">CHAPTER 6. ANALYSING DEVICE LOGS</outsider>
        <region class="DoCO:TextChunk" id="267" page="54" column="1">from whenever an air bubble is detected in the fluid to whenever there is a change in power source e.g. from Battery to AC. <marker type="block"/> 6.1 Log analysis and possible insights User interaction Analysing these logs could be interesting for different reasons. From a user interaction point of view, the frequency of the events that are triggered by a user action or lack of a user action would give good insights as to how the devices are used in general and in different departments.<marker type="block"/> Carbon footprint The pump logs contain information about the battery use on the device, the amount of hours the device is on charge, the total loading cycles of the device and the total volume of medication the device has infused. Analysis of this group of data can be used to investigate the level of energy consumption of the average pump as well as of collective pumps in use in different departments. The percentage of time the device is in use could be useful in feasibility testing of how many devices are actually needed in the department.<marker type="block"/> Detecting Mechanical Errors Another insight that might be obtained from the analysis of the device logs is the potential presence of a faulty hardware in a particular device. Spotting anomalies in devices becomes a relatively easy task once the data is visually plotted.<marker type="block"/> 6.2.1 Method For the analysis, 58 device logs from 3 departments were used. The date of purchase (life span) of the device ranged from November 2002 to August 2006. Since the devices were not all bought on the same date, the data from the logs were normalised to a time-span of 1 year. The analysis performed on the logs were done to tease out results for any of the insights discussed in section 6.1. The result of the logs was plotted as a bar chart such that it</region>
        <region class="unknown" id="266" page="54" column="1">6.2 Analysis of graseby logs</region>
        <outsider class="DoCO:TextBox" type="header" id="268" page="55" column="1">6.2. ANALYSIS OF GRASEBY LOGS</outsider>
        <outsider class="DoCO:TextBox" type="page_nr" id="269" page="55" column="1">45</outsider>
        <region class="DoCO:FigureBox" id="F6.1">
          <image class="DoCO:Figure" src="62kw.page_055.image_10.png" thmb="62kw.page_055.image_10-thumb.png"/>
          <caption class="deo:Caption" id="271" page="55" column="1">Figure 6.1:</caption>
        </region>
        <region class="DoCO:TextChunk" id="272" confidence="possible" page="55" column="1">Average pump history per year. Unit of measurements are shown in bracket for each of the plotted pump history.</region>
        <region class="DoCO:TextChunk" id="273" page="55" column="1">would be very easy for a technician to understand the results and quickly obtain information about an abnormal device, an abnormal cluster of devices or an abnormal cluster of events. Presentation of the results was done using Adobe Flexâ€™s Charting library using actionscript. Three main things were extracted from the logs for presentation:</region>
        <region class="DoCO:TextChunk" id="275" confidence="possible" page="55" column="1">â€¢ The frequency of each event per device per year. This had two views. The first view showed the data clustered per device. This view made it very clear to see which devices were barely used and which ones were more frequently used. The second view showed the data clustered per event as seen in <xref ref-type="fig" rid="F6" id="274" class="deo:Reference">figure 6.2</xref>. This view made it clear to see roughly the frequency of events across all devices. â€¢ The average battery bucket information per device per year i.e. visualising how long the devices are being used on battery.</region>
        <outsider class="DoCO:TextBox" type="page_nr" id="276" page="56" column="1">46</outsider>
        <outsider class="DoCO:TextBox" type="header" id="277" page="56" column="1">CHAPTER 6. ANALYSING DEVICE LOGS</outsider>
        <region class="DoCO:FigureBox" id="F6.2">
          <image class="DoCO:Figure" src="62kw.page_056.image_11.png" thmb="62kw.page_056.image_11-thumb.png"/>
          <caption class="deo:Caption" id="279" page="56" column="1">Figure 6.2: Frequency of events clustered by the event type. The average frequency is shown in orange bars</caption>
        </region>
        <outsider class="DoCO:TextBox" type="header" id="280" page="57" column="1">6.2. ANALYSIS OF GRASEBY LOGS</outsider>
        <outsider class="DoCO:TextBox" type="page_nr" id="281" page="57" column="1">47</outsider>
        <region class="DoCO:FigureBox" id="F6.3">
          <image class="DoCO:Figure" src="62kw.page_057.image_12.png" thmb="62kw.page_057.image_12-thumb.png"/>
          <caption class="deo:Caption" id="283" page="57" column="1">Figure 6.3: Average use of pumps on battery</caption>
        </region>
        <region class="DoCO:TextChunk" id="285" confidence="possible" page="57" column="1">â€¢ The average pump history data i.e. the total charge time, the total volume infused, the total run time, etc. as seen in <xref ref-type="fig" rid="F6" id="284" class="deo:Reference">figure 6.1</xref>.</region>
        <region class="DoCO:TextChunk" id="294" page="57" column="1">6.2.2 Results and Interaction Insights The results and insights obtained from analysis of the graseby infusion pump logs are discussed below. Three main issues were spotted with the device with interesting questions as to why these events occurred. <marker type="block"/> This event is triggered whenever the door of the infusion pump is opened while the pump is still infusing. The pump reacts to this by stopping the infusion and alerting the user by setting off a warning alarm and displaying the words â€˜Door Openâ€™ on the screen of the pump. This particular event<marker type="page" number="58"/><marker type="block"/> occurs an average of 217 times for all 58 pump logs analysed with one single pump having a frequency as high as 608. So why is this an issue if the pump itself stops the infusion once the door is open? The problem is that there is a potential for an overdose or unintended dosage to the patient if the roller clamp is not shut while the pump is not infusing. This is commonly known as gravity free-flow and has been the cause of many adverse drug events according to MAUDE and ECRI. The roller clamp is a simple physical safety mechanism used in infusions to regulate the rate of flow of fluid from the giving set to the patient. This rate varies from free flow to no flow. However this safety step is completely skipped when the door is opened while the pump is infusing. This also means that the pump relies entirely on the safety clip to prevent free flow of liquid into the patient. The safety clips can however, be faulty as further analysis of the logs shows (see <xref ref-type="fig" rid="F6.4" id="293" class="deo:Reference">figure 6.4</xref>). The correct procedure for opening the pump door while it is infusing is:</region>
        <region class="unknown" id="287" page="57" column="1">Stop pumping - Door Open</region>
        <outsider class="DoCO:TextBox" type="page_nr" id="289" page="58" column="1">48</outsider>
        <outsider class="DoCO:TextBox" type="header" id="290" page="58" column="1">CHAPTER 6. ANALYSING DEVICE LOGS</outsider>
        <region class="DoCO:FigureBox" id="F6.4">
          <image class="DoCO:Figure" src="62kw.page_058.image_13.png" thmb="62kw.page_058.image_13-thumb.png"/>
          <caption class="deo:Caption" id="292" page="58" column="1">Figure 6.4: A section of the average events log (in green) highlighting the number of safety clip related events</caption>
        </region>
        <region class="DoCO:TextChunk" id="295" confidence="possible" page="58" column="1">1. Place the pump on hold to stop the infusion (by pressing the Hold</region>
        <outsider class="DoCO:TextBox" type="header" id="296" page="59" column="1">6.2. ANALYSIS OF GRASEBY LOGS</outsider>
        <outsider class="DoCO:TextBox" type="page_nr" id="297" page="59" column="1">49</outsider>
        <region class="DoCO:TextChunk" id="298" confidence="possible" page="59" column="1">button) 2. Close the roller clamp on tubing 3. Open the pump door</region>
        <region class="DoCO:TextChunk" id="306" page="59" column="1">Potential causes of this effect This could be caused by over-reliance on the pumpâ€™s mechanism for stopping infusion and over-reliance on the safety clip. If the clinical staff get an alert that says the infusion has been stopped because the door has been opened, then why bother go through all the steps above if the pump is going to stop infusing once the door is opened? Another possible cause could be poor training and poor knowledge about the consequences of not going through the correct procedure before opening the pump door. <marker type="block"/> Battery Low and Battery Dead Alarms The Low Battery alarm is triggered when there is approximately one hour of operation remaining on the pump and it is also triggered when there is approximately thirty minutes of operation left on the pump. The Dead Battery event is triggered just before the pump battery runs out of power. It is straightforward and logical to conclude that this event is preceded by one or more low battery alarms. Since a low battery warning precedes a dead battery event, then it means the low battery warnings/alarms are being ignored, missed or forgotten about. Analysis from the pump logs show that approximately 75% of all low battery warnings result in a dead battery (out of an average of 139 low battery warnings, 104 resulted in dead battery). The dead battery causes the infusion to stop. This is clearly a source of adverse events if a patientâ€™s life depends on the drug being delivered.<marker type="block"/> Potential causes of this effect Alarms as a form of notification is an interesting area of research because different people (nurses) react to them in different ways and level of intensity (loudness) of the alarm vary between nurses. Many medical devices have robust customisable settings. Alarm setting is an example of a setting that varies as a result of personal preference between nurses so a setting that<marker type="page" number="60"/><marker type="block"/> is unobstrusive to a nurse might be inaudible to another or annoying to another. Also alarms can usually be suspended for up to 3 minutes and then sub- sequently â€˜ignoredâ€™ if more important matters arise for the nurse to attend to. Changes in alarm settings not only stem from personal differences between nurses, but are sometimes made â€˜to be able to get the job done with as little distress for patients as possibleâ€™ [Randell, 2003]. This could also be as a result of the way alarms are perceived by hospital staff in general due to the high rate of false alarms[Chambrin, 2001]. Qual- itative research done by [Sharman, 2007] with nurses in a hospital emergency department to investigate their attitude towards the technology in use in hospital management supports the point that nurses in reality dis- belief technology and very often feel the need to verify what an electronic device says with a manual device. An interview in this study also showed that the alarms are usually seen as â€˜crying wolfâ€™ and are sometimes ignored or suspended for that reason. There is also the possibility that alarms are ignored because they occur so frequently and as a result are treated as background noise by the clinical staff.<marker type="block"/> The Running-rate-change event is triggered whenever someone completes the sequence of events necessary to change the running rate of the current infusion. If this sequence of events is started and not completed, then the pump alerts the user by producing an alarm to inform the user that the running rate change is not completed. This triggers the Running-rate- change not completed event. Analysis shows that approximately 12% of the time the running rate is changed, the user does not complete the rate change procedure. The correct procedure for changing the rate of infusion according to the pump instruction manual is:</region>
        <outsider class="DoCO:TextBox" type="page_nr" id="302" page="60" column="1">50</outsider>
        <outsider class="DoCO:TextBox" type="header" id="303" page="60" column="1">CHAPTER 6. ANALYSING DEVICE LOGS</outsider>
        <region class="unknown" id="305" page="60" column="1">Running Rate Change and Running Rate Change not completed</region>
        <region class="DoCO:TextChunk" id="307" confidence="possible" page="60" column="1">1. Press the Rate button 2. Enter the new rate using the numeric keypad 3. Press the Run button within 10 seconds of starting the process</region>
        <outsider class="DoCO:TextBox" type="header" id="308" page="61" column="1">6.2. ANALYSIS OF GRASEBY LOGS</outsider>
        <outsider class="DoCO:TextBox" type="page_nr" id="309" page="61" column="1">51</outsider>
        <region class="DoCO:TextChunk" id="312" page="61" column="1">A possible cause for this could be the 10 seconds timeout placed on the process of changing the infusion rate. <marker type="block"/> Energy consumption of pumps From the pump history data in <xref ref-type="fig" rid="F6.1" id="311" class="deo:Reference">figure 6.1</xref>, it can be clearly seen that the ratio of the time the average pump spends infusing to the time the average pump spends charging is about 1:3. Hence if the entire lifespan of the average device is equivalent to the charge time, then the average pump spends 75% of its lifetime charging and doing nothing. Theoretically, it is therefore possible to use 25% of the number of devices currently in use by the hospital to carry out the necessary infusions for the wards assuming all devices were always busy performing an infusion. But this is not practical because some pumps need to be placed permanently in intensive care units where they might be needed in cases of emergency. The point is that for a lot less number of pumps, and by properly man- aging the use of pumps, the average hospital could probably cut down the number of pumps they use and the amount of energy pumps consume when idle.</region>
        <region class="unknown" id="313" page="63" column="1">Chapter 7</region>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="314" page="63" column="1">Information Presentation in Health Care</h1>
        <region class="DoCO:TextChunk" id="316" page="63" column="1">The need to know or have all the bits of information about a patient in healthcare is shared by most clinical practitioners. Thirty years ago, one might have thought things along the lines of â€˜only if we had all the data on that patient then health care would be much simplerâ€™. Whereas nowadays, the quantity of information stored per patient goes into the gigabytes but healthcare is still having problems in the area of early detection of patient health deterioration. This is despite the fact that a great deal of information about the patient is stored in computer systems and healthcare practitioners are now facing a new problem of information overload. An example of an early detection of the deterioration of a patientâ€™s health is knowing how to identify a chronic instance in gastro-intestinology and deciding the optimal time to intervene with surgery. Already a great deal of information is collected on several patients with the same illness. The question now is that could be knowledge of similar conditions be used in predicting the course of a new patientâ€™s illness. The problems faced by most healthcare systems is knowing how to extract the relevant information to show a clinician in a typical consultation with a patient, knowing the best way to present such information, the qual- ity of the data available, and privacy and legal issues involved in accessing any complete real world data. <xref ref-type="fig" rid="F7.1" id="315" class="deo:Reference">Figure 7.1</xref> is a screenshot of a typical patient management system in use in health care today. This is a particularly good example of the existence of information overload in patient health manage-</region>
        <region class="DoCO:TextChunk" id="317" confidence="possible" page="63" column="1">53</region>
        <outsider class="DoCO:TextBox" type="page_nr" id="318" page="64" column="1">54</outsider>
        <outsider class="DoCO:TextBox" type="header" id="319" page="64" column="1">CHAPTER 7. INFORMATION PRESENTATION IN HEALTH CARE</outsider>
        <region class="DoCO:FigureBox" id="F7.1">
          <image class="DoCO:Figure" src="62kw.page_064.image_14.png" thmb="62kw.page_064.image_14-thumb.png"/>
          <caption class="deo:Caption" id="321" page="64" column="1">Figure 7.1: Screenshot of a typical patient management system</caption>
        </region>
        <region class="DoCO:TextChunk" id="335" page="64" column="1">ment software. The software contains 11 tabs each having dense textual data as shown in the figure. <marker type="block"/> Clinicians are usually required to use multiple software to access different bits of data about a patient during a consultation. These are usually cre- ated by different vendors and as a result follow different conventions for important clinical data and units of measurements such as dates, dosage<marker type="page" number="65"/><marker type="block"/> descriptions etc.. In 2004, Microsoft Health started a project, MSCUI âˆ— , with the NHS to create a standard for the user interface elements in use in healthcare software. However this does not address the problem of information overload.<marker type="block"/> In order to reduce the potential for wrong or inappropriate drug administration and to improve patient safety,[Wideman et al., 2005] implemented a barcode medication administration system that was able to verify that the correct medication was ordered, the correct dosage was administered at the time required and the entire process be documented appropriately. Research done by [Koppel et al., 2008] across five hospitals using barcode systems has however shown that the use of barcode medication administration systems caused the clinicians to resort to work-arounds when the system does not work. For instance it was not uncommon for the barcode to be unreadable because it is smudged, crinkled or for the scanner to run out of battery power. This meant that the nurses had to manually enter the medication using an internal entry number, thereby bypassing the barcode system.<marker type="block"/> Another way of improving patient safety is by make information available at the point of care a notion called ubiquitous access[Abraham et al., 2008]. This involves having mobile but networked computers available at the point of care so that nurses are provided with essential information and are also able to record essential information at the point of care and the information is available in real time for review by other clinical staff. Other obvious benefits to this technique is that information triage is easier and less tedious. Also the issue of being unable to read another nurseâ€™s (or doctorâ€™s handwriting) is eliminated. Limitations of the system include nursesâ€™s poor or lack of typing skills , poor battery life for the mobile work- station and it does not directly tackle the problem of information overload. Clinicians still have to sieve through all available information about the patient for relevant information.<marker type="page" number="66"/><marker type="block"/> 7.2.1 The data contents The data used in this part of the project contains records of patients from the Gastrointestinology department. The dataset used contains approximately 40000 patients. The dataset contains demographic information (sex, age and postcode). Other important information contained in the dataset are described below.</region>
        <region class="unknown" id="323" page="64" column="1">7.1 Trends in improving computer systems in Health Care 7.1.1 A common user interface</region>
        <outsider class="DoCO:TextBox" type="header" id="325" page="65" column="1">7.1. TRENDS IN IMPROVING COMPUTER SYSTEMS IN HEALTH CARE 55</outsider>
        <region class="unknown" id="327" page="65" column="1">7.1.2 BarCode Medication Administration</region>
        <region class="unknown" id="329" page="65" column="1">7.1.3 Ubiquitous Access</region>
        <region class="unknown" id="331" page="65" column="1">âˆ— Microsoft common user interface. Visit www.mscui.net for more information</region>
        <outsider class="DoCO:TextBox" type="page_nr" id="332" page="66" column="1">56</outsider>
        <outsider class="DoCO:TextBox" type="header" id="333" page="66" column="1">CHAPTER 7. INFORMATION PRESENTATION IN HEALTH CARE</outsider>
        <region class="unknown" id="334" page="66" column="1">7.2 Reducing Information Overload using Visualisation</region>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="336" confidence="possible" page="66" column="1">Episodes</h1>
        <region class="DoCO:TextChunk" id="337" confidence="possible" page="66" column="1">represent a patientâ€™s encounter with a clinician. This could be for different purposes e.g. Consultation, Review, endoscopy, colonoscopy etc..</region>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="338" confidence="possible" page="66" column="1">Health Characteristics</h1>
        <region class="unknown" id="339" page="66" column="1">represent different types of health information discovered about the patient. These could be grouped into diagnosis, signs, symptoms, past history e.t.c. These are usually recorded per episode. Certain diagnosis in the dataset contained a severity score that was one of none, mild, medium, severe or extreme. This was a score produced by the clinician based on the patients health.</region>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="340" confidence="possible" page="66" column="1">Actions</h1>
        <region class="DoCO:TextChunk" id="341" confidence="possible" page="66" column="1">represent things the clinician does to the patient at each episode. These are generally grouped as investigations (e.g. full blood count), procedures (e.g. colonoscopy with biopsy), administration etc..</region>
        <region class="DoCO:TextChunk" id="342" page="66" column="1">7.2.2 Providing visual meaning to the data Data Visualisation enables a user to quickly see the way data is distributed such that the user can make quick conclusions or is quickly drawn to further investigate interesting parts of the data. In order to provide some visual journey of a patientâ€™s record in the dataset, a browser was built for exploring the dataset. Four views were provided in the browser. The views are described below.</region>
        <region class="DoCO:TextChunk" id="344" confidence="possible" page="66" column="1">â€¢ The health characteristics view contained a tree view of all the health characteristics discovered for the current patient for the selected episode. The tree was grouped by the health type i.e. Diagno- sis, Family history, Signs, symptoms etc.. <xref ref-type="fig" rid="F7.2" id="343" class="deo:Reference">Figure 7.2</xref> shows a screen shot of the health characteristics view for a patient.</region>
        <outsider class="DoCO:TextBox" type="header" id="345" page="67" column="1">7.2. REDUCING INFORMATION OVERLOAD USING VISUALISATION</outsider>
        <outsider class="DoCO:TextBox" type="page_nr" id="346" page="67" column="1">57</outsider>
        <region class="DoCO:FigureBox" id="F7.2">
          <image class="DoCO:Figure" src="62kw.page_067.image_15.png" thmb="62kw.page_067.image_15-thumb.png"/>
          <caption class="deo:Caption" id="348" page="67" column="1">Figure 7.2: Health Characteristics tree view for a patient for a single episode</caption>
        </region>
        <region class="DoCO:FigureBox" id="F7.3">
          <image class="DoCO:Figure" src="62kw.page_067.image_16.png" thmb="62kw.page_067.image_16-thumb.png"/>
          <caption class="deo:Caption" id="350" page="67" column="1">Figure 7.3: Actions tree view for a patient for a single episode</caption>
        </region>
        <region class="DoCO:TextChunk" id="355" confidence="possible" page="67" column="1">â€¢ The actions view is similar to the health characteristics view but contained the actions taken on the patient for the selected episode. The tree was grouped by the action type. <xref ref-type="fig" rid="F7.3" id="351" class="deo:Reference">Figure 7.3</xref> shows a screenshot of the actions view for a patient. â€¢ The episodes view contained a temporal chart that depicted instances of episodes and the number of actions and health characteristics recorded for that episode. The idea is to be able to see the frequency of encounters this patient has had with a clinician and to recognise any patterns if there are any. The user is able to mouse over each data point to get details of the episode, actions or health characteristics on that data point and the user is also able to click on any of the data points to change the health characteristics and actions tree view. <xref ref-type="fig" rid="F7.4" id="352" class="deo:Reference">Figure 7.4</xref> shows the episodes frequency plot and <xref ref-type="fig" rid="F7.5" id="353" class="deo:Reference">figure 7.5</xref> shows a typical mouse over detailed tooltip. â€¢ The severity view contained a temporal chart that depicted the severity of some of the diagnosed illnesses of the patient over time. <xref ref-type="fig" rid="F7.6" id="354" class="deo:Reference">Figure 7.6</xref> shows a typical severity view. The user could mouse over the data points for details and click on the data points to change the episode data displayed by the action and health characteristic view to the episode represented by the data point.</region>
        <outsider class="DoCO:TextBox" type="page_nr" id="356" page="68" column="1">58</outsider>
        <outsider class="DoCO:TextBox" type="header" id="357" page="68" column="1">CHAPTER 7. INFORMATION PRESENTATION IN HEALTH CARE</outsider>
        <region class="DoCO:FigureBox" id="F7.4">
          <image class="DoCO:Figure" src="62kw.page_068.image_17.png" thmb="62kw.page_068.image_17-thumb.png"/>
          <caption class="deo:Caption" id="359" page="68" column="1">Figure 7.4: The episode frequency plot. The orange data points represent the episodes, the blue data points represent the number of health characteristics discovered in an episodes and the green data points represent the number of actions taken in an episode.</caption>
        </region>
        <region class="DoCO:FigureBox" id="F7.5">
          <image class="DoCO:Figure" src="62kw.page_068.image_18.png" thmb="62kw.page_068.image_18-thumb.png"/>
          <caption class="deo:Caption" id="361" page="68" column="1">Figure 7.5: The episode frequency plot showing more detailed information on mouse over.</caption>
        </region>
        <region class="DoCO:FigureBox" id="F7.6">
          <image class="DoCO:Figure" src="62kw.page_068.image_19.png" thmb="62kw.page_068.image_19-thumb.png"/>
          <caption class="deo:Caption" id="363" page="68" column="1">Figure 7.6: Chart showing the severity history of ulcerative colitis across all episodes for a patient. The user can easily see that this is a chronic case of ulcerative colitis because of the fluctuation of severity for this patient.</caption>
        </region>
        <outsider class="DoCO:TextBox" type="header" id="364" page="69" column="1">7.3. NEXT STEPS</outsider>
        <outsider class="DoCO:TextBox" type="page_nr" id="365" page="69" column="1">59</outsider>
        <region class="DoCO:FigureBox" id="F7.7">
          <image class="DoCO:Figure" src="62kw.page_069.image_20.png" thmb="62kw.page_069.image_20-thumb.png"/>
          <caption class="deo:Caption" id="367" page="69" column="1">Figure 7.7: A screenshot of the patient browser running in a web browser</caption>
        </region>
        <region class="DoCO:TextChunk" id="371" page="69" column="1">The complete patient browser can be seen in <xref ref-type="fig" rid="F7.7" id="368" class="deo:Reference">figure 7.7</xref> running in a web browser. The patient browser has been optimised to run at a minimum resolution of 1024 x 768 pixels.<marker type="block"/> 7.3.1 Machine Learning as a tool for improving interaction Machine learning is currently being investigated as a tool for improving the user interface interaction for patient management systems. By recording logs on how clinicians actually use the system in terms of:</region>
        <region class="unknown" id="370" page="69" column="1">7.3 Next Steps</region>
        <region class="DoCO:TextChunk" id="372" confidence="possible" page="69" column="1">â€¢ the region(s) of the user interface that the user spends most time on in terms of mouse clicks and mouse overs â€¢ eye tracking could be used to observe where the user focuses on and how long is spent focusing on a region</region>
        <outsider class="DoCO:TextBox" type="page_nr" id="373" page="70" column="1">60</outsider>
        <outsider class="DoCO:TextBox" type="header" id="374" page="70" column="1">CHAPTER 7. INFORMATION PRESENTATION IN HEALTH CARE</outsider>
        <region class="DoCO:TextChunk" id="375" page="70" column="1">Another possible idea is to introduce a command line interface similar to what is found in enso â€  . This will provide the clinician with advanced search- ing abilities that is not provided in the browser. This will also give good insight as to what the clinician thinks is important but is not yet incorpo- rated into the user interface.</region>
        <region class="DoCO:TextChunk" id="377" confidence="possible" page="70" column="1">â€  Enso is a powerful cross-platform command based interface for performing common tasks such as launching programs, calculating sums or looking up definitions without losing focus of your current task. Visit <ext-link ext-link-type="uri" href="http://humanized.com/enso/" id="376">http://humanized.com/enso/</ext-link> for details</region>
        <region class="DoCO:TextChunk" id="378" confidence="possible" page="71" column="1">Chapter 8 Summary The field of human computer interaction is lacking in scalable formal methods for automatic interaction design analysis[Shneiderman and Plaisant, 2004]. Only recently has there been some research in the area. Using a medical device as a case study, this project utilised the principles of interaction programming and design analysis described in [Thimbleby, 2007] to analyse a safety critical device and highlight the aspects of the device where there is room for improvement. This project also analyses event logs from 58 Graseby 500 Infusion pumps in chapter 6. 8.1 Formal analysis of Alaris GP Infusion pump</region>
        <region class="DoCO:TextChunk" id="379" page="71" column="1">This project has shown that harnessing the powers of mathematics in the field of interaction design has several benefits epecially when these mathematical techniques are integrated into todayâ€™s design cycles and environment. Already Adobeâ€™s Flex âˆ— development environment has a concept of View States which allows designers to define different views for the states of their program and define interaction events that effect transitions between these views. This is a good step towards integrating the formal methods described in this project into the development environment as we were able to generate the finite state machine of programs using the concept of view states in Flex.</region>
        <region class="DoCO:TextChunk" id="381" confidence="possible" page="71" column="1">âˆ— This feature has been available since version 2 of the software. For more details on this product please visit <ext-link ext-link-type="uri" href="http://www.adobe.com/products/flex/" id="380">http://www.adobe.com/products/flex/</ext-link> 61</region>
        <outsider class="DoCO:TextBox" type="page_nr" id="382" page="72" column="1">62</outsider>
        <outsider class="DoCO:TextBox" type="header" id="383" page="72" column="1">CHAPTER 8. SUMMARY</outsider>
        <region class="DoCO:TextChunk" id="384" page="72" column="1">We have identified certain properties that designers should be interested in. These properties should aid and guide the designer when analysing their interfaces preferably before the user interface is tested by real world users. This will ensure a solid design before users are used to evaluate the overall interaction experience or task completion of the device.</region>
        <region class="DoCO:TextChunk" id="385" confidence="possible" page="72" column="1">Interesting Properties â€¢ Edge Chromatic Number of a graph is the minimum number of colors needed to color the edges in a graph. This could easily give designers the lower bound on the minimum number of buttons needed to traverse the device. Like most of these properties this is a property to guide the designer not a magic box for generating perfect user interfaces. Using the minimum number of buttons needed by the device could be very impractical. â€¢ Centrality is the relative ranking of nodes or edges in a graph according to their importance in the graph. The interesting factor here is how importance is measured. Section 4.1.2 describes three measures for calculating this importance. The most central state would be a good starting state for the device and it would be a good recovery state for the device in the case of a crash. The knowledge of central states would be useful to users as it might help them navigate the user interface more efficiently. â€¢ Error Recovery is essential in any device let alone safety critical ones since errors are inevitable. We measure this in terms of the relative ease with which the user can return to an intended state if they errorneously went to a different state. This property is strongly related to connectivity because the more connected a graph is (i.e. the more the graph looks like a complete graph) the easier it is to recover from errors while traversing that graph.</region>
        <region class="DoCO:TextChunk" id="386" page="72" column="1">The following are a few of the useful properties that were identified in [Thimbleby, 2007] and should be of interest to designers.</region>
        <region class="DoCO:TextChunk" id="387" confidence="possible" page="72" column="1">â€¢ Connectivity is the property that determines whether a path exists between all vertices in the interaction graph. If the device is not connected, then there is a good chance that the user will get stuck at some point while using the device.</region>
        <outsider class="DoCO:TextBox" type="header" id="388" page="73" column="1">8.2. GRASEBY 500 LOG ANALYSIS</outsider>
        <outsider class="DoCO:TextBox" type="page_nr" id="389" page="73" column="1">63</outsider>
        <region class="DoCO:TextChunk" id="390" confidence="possible" page="73" column="1">â€¢ Shortest paths will enlighten the user about the quickest way to travel between the states of a device. This has a particularly useful application for generating user manuals and can be run interactively for more on-demand queries by the user. â€¢ Overrun errors occur very often especially when the feedback of the system (usually a form of display) is slower than the user interaction. This usually results in the user repeating their action causing the ocassional double-bounce key error or double function call in the case of software. These should be investigated and appropriate actions should be taken so that these errors are reduced to the minimum or eliminated where possible.</region>
        <region class="DoCO:TextChunk" id="402" page="73" column="1">The properties listed above are not exhaustive and the designer is encouraged to explore and find other properties that might be useful for the particular application or device being designed. <marker type="block"/> The implications of formal methods on interaction design analysis The use of mathematical techniques such as the ones presented in chapter 4 provides a solid analytical tool for designers to use as a starting point for interaction analysis. Other techniques for assessing usability (e.g interviews, questionnaires or usage logs) could then be used in addition to get a triangulated opinion on the device being studied.<marker type="block"/> Analysis of the Graseby 500 logs has raised three main issues. The first issue is that of the need to provide better training to clinical staff in the correct procedure for performing certain actions on the pump. For example analysis of the logs show that the clinical staff do not always follow the correct procedure when opening the door of the pump. Also staff should be informed about the consequences of not following the correct procedure to perform actions. Secondly, alerts by pump are possibly ignored , not heard or do not provide enough time for the staff to react to them. For example 75% of the low battery warning alerts result in a dead battery. Analysis of battery usage of the pumps show that the pumps are being used far too long on battery. Even after being advised not to let the pump<marker type="page" number="74"/><marker type="block"/> run for more than two hours on battery before changing the power source, analysis shows that some pumps are being used for much longer times sometimes for as long as 7+ hours. General analysis of the pumpsâ€™ history shows that only 25% of the charge time in the average life time of each device is the device actually running.<marker type="block"/> As an area for further explorations for this project, we could implement a framework that would work with any modern programming language (for instance Java, C#, C++) and not just ActionScript. Conceptually, this is a straight forward task and it will help improve lots of existing systems and newly built systems. Creating an accurate model of a device and performing statistical analysis based on the probability an error will occur and estimating the ease of recovery of an error based on how â€˜well-connectedâ€™ the device is a great starting point but it is necessary to remember that there is a human in the loop who has got a range of complex behaviours. One way of taking this project forward would be to incorporate the model of a typical userâ€™s cogni- tion into the framework used to analyse the usability of devices. One way of doing this would be to integrate work from the field of cognitive psychology in the analysis of errors in devices by biasing the the probability that a certain error will occur (or a certain path in the device interaction graph will be traversed) based on how much the user knows about the device. Usability analysis using techniques like the ones used in this project generates lots of numbers (for example it was discovered that the average path length for the Alaris GP Infusion pump is 3.857) but it is not very clear where these numbers lie on the â€˜scale of usabilityâ€™. The scale of usability should be able to provide useful benchmarks such as â€˜3 is the optimal average path length for a device with the complexity of the Alaris GP Infusion pumpâ€™. Such a scale does not exist yet. A possible way of designing such a scale is measuring the device graph relative to two extreme graphs with the same number of nodes. A circular graph, where each node has only two neighbours or a star graph could be used as the lower bound of usability and a K-complete graph could be used as the upper (optimal) bound of usability where every node is connected.<marker type="page" number="75"/><marker type="block"/> The ideas above are only speculations and require rigorous research to be asserted.</region>
        <region class="unknown" id="393" page="73" column="1">8.2 Graseby 500 log analysis</region>
        <outsider class="DoCO:TextBox" type="page_nr" id="395" page="74" column="1">64</outsider>
        <outsider class="DoCO:TextBox" type="header" id="396" page="74" column="1">CHAPTER 8. SUMMARY</outsider>
        <region class="unknown" id="398" page="74" column="1">8.3 Further Work</region>
        <outsider class="DoCO:TextBox" type="header" id="400" page="75" column="1">8.3. FURTHER WORK</outsider>
        <outsider class="DoCO:TextBox" type="page_nr" id="401" page="75" column="1">65</outsider>
      </section>
      <section class="DoCO:Bibliography">
        <h1 class="DoCO:SectionTitle" id="403" page="77" column="1">Bibliography</h1>
        <region class="DoCO:TextChunk" id="404" confidence="possible" page="77" column="1">[Abraham et al., 2008] Abraham, C., Watson, R. T., and Boudreau, M.-C. (2008). Ubiquitous access: on the front lines of patient care and safety. Com- munications of the ACM, 51:95â€“99. [cited at p. 6, 13, 55] [Berens, 2000] Berens, M. J. (2000). Nursing accidents unleash silent killer. mis- use of medical pumps leads to deaths. Chicago Tribune. [cited at p. 9] [Bondy and Murty, 1976] Bondy, J. A. and Murty, U. S. R. (1976). Graph Theory with Applications. The MacMillan Press Ltd, first edition. [cited at p. 21] [Brandes and Erlebach, 2005] Brandes, U. and Erlebach, T. (2005). Network Analysis: Methological Foundations (Lecture Notes in Computer Science). Springer, 1 edition. [cited at p. 18] [Carayon et al., 2005] Carayon, P., Wetterneck, T. B., Hundt, A. S., Ozkaynak, M., Ram, P., Desilvey, J., Hicks, B., Robert, T. L., Enloe, M., Sheth, R., and Sobande, S. (2005). Observing nurse interaction with infusiotn pump technology. Advances in Patient Safety: From Research to Implementation, 2:349â€“364. [cited at p. 14] [Chambrin, 2001] Chambrin, M.-C. (2001). Alarms in the intensive care unit: how can the number of false alrams be reduced? Critical Care, 5:184â€“188. [cited at p. 50] [Chung et al., 2003] Chung, P. H., Zhang, J., Johnson, T. R., and Patel, V. L. (2003). An extended hierarchical task analysis for error prediction in medical devices. In AMIA Annual Symposium Proceedings, pages 165â€“169. American Medical Informatics Association. [cited at p. 15] [Daniel Craig, 2004] Daniel Craig, Dan Morales, M. O. (Spring, 2004). Uss vi- cennes incident. M.I.T Aeronautics and Astronautics. [cited at p. 7] 67</region>
        <outsider class="DoCO:TextBox" type="page_nr" id="405" page="78" column="1">68</outsider>
        <outsider class="DoCO:TextBox" type="header" id="406" page="78" column="1">BIBLIOGRAPHY</outsider>
        <region class="DoCO:TextChunk" id="407" confidence="possible" page="78" column="1">[Freeman, 1977] Freeman, L. C. (1977). A set of measures of centrality based on betweenness. Sociometry, 40(1):35â€“41. [cited at p. 18] [Gibson, 1986] Gibson, J. J. (1986). The Ecological Approach to Visual Percep- tion. Lawrence Erlbaum Associates, Inc. [cited at p. 13] [Ginsburg, 2005] Ginsburg, G. (2005). Human factors engineering: A tool for medical device evaluation in hospital procurement decision-making. Journal of Biomedical Informatics, 38:213â€“219. [cited at p. 14] [Holzmann, 1997] Holzmann, G. (1997). The model checker spin. Software En- gineering, IEEE Transactions on, 23(5):279â€“295. [cited at p. 15] [Jiajie Zhang and Kubose, 2003] Jiajie Zhang, Todd R. Johnson, V. L. P. D. L. P. and Kubose, T. (2003). Using usabilty heuristics to evaluate patient safety of medical devices. [cited at p. 9] [Keselman et al., 2003] Keselman, A., Patel, V. L., Johnson, T. R., and Zhang, J. (2003). Institutional decision-making to select patient care devices: identifying venues to promote patient safety. Journal of Biomedical Informatics, 36:31â€“44. [cited at p. 9] [Kohn et al., 2000] Kohn, L. T., Corrighan, J. M., and Donaldson, M. S., editors (2000). To Err is Human: Building a Safer Health System. National Academy Press. [cited at p. 7, 11] [Kopec and Tamang, 2007] Kopec, D. and Tamang, S. (2007). Failures in complex systems: case studies, causes, and possible remedies. SIGCSE Bull., 39(2):180â€“184. [cited at p. 7] [Koppel et al., 2008] Koppel, R., Wetterneck, T., Telles, J. L., and Karsh, B.-T. (2008). Workarounds to barcode medication administration systems: Their occurrences, causes and threats to patient safety. Journal of the American Medical Informatics Association, 15(4):408â€“423. [cited at p. 55] [Leape, 1994] Leape, L. L. (1994). Error in medicine. Journal of the American Medical Informatics Association, 272(23):1851â€“1857. [cited at p. 8] [Leape et al., 1993] Leape, L. L., Lawthers, A. G., Brennan, T. A., and Johnson, W. G. (1993). Preventing medical injury. QRB Qual Rev Bull, 19(5):144â€“149. [cited at p. 6] [Leveson, 1995] Leveson, N. (1995). Safeware:system safety and computers. [cited at p. 8, 27]</region>
        <outsider class="DoCO:TextBox" type="page_nr" id="408" page="79" column="1">69</outsider>
        <region class="DoCO:TextChunk" id="409" confidence="possible" page="79" column="1">[Lin et al., 1998] Lin, L., Isla, R., Doniz, K., Harkness, H., Vicente, K. J., and Doyle, D. J. (1998). Applying human factors to the design of medical equipment: Patient-controlled analgesia. Journal of Clinical Monitoring and Com- puting, 14:253â€“263. [cited at p. 15] [Lin et al., 2002] Lin, L., Vicente, K. J., and Doyle, D. J. (2002). Patient safety, potential adverse drug events, and medical device design: A human factors engineering approach. Journal of Biomedical Informatics, 34:274â€“284. [cited at p. vii, 15] [Maddox, 1997] Maddox, M. E. (1997). Designing medical devices to minimize human error. Medical Devices and Diagnostic Industry Magazine. [cited at p. 12] [Marshall, 1971] Marshall, C. W. (1971). Applied Graph Theory. Wiley Inter- Science. [cited at p. 21] [Nielsen, 1992] Nielsen, J. (1992). Finding usability problems through heuristic evaluation. In CHI â€™92: Proceedings of the SIGCHI conference on Human factors in computing systems, pages 373â€“380, New York, NY, USA. ACM. [cited at p. 14] [Norman, 1983] Norman, D. A. (1983). Design rules based on analyses of human error. Commun. ACM, 26(4):254â€“258. [cited at p. 11, 27] [Norman, 1999] Norman, D. A. (1999). Affordance, conventions, and design. interactions, 6(3):38â€“43. [cited at p. 13] [Norman, 2002] Norman, D. A. (2002). The design of everyday things. Basic Books. [cited at p. 13] [Norman and Draper, 1986] Norman, D. A. and Draper, S. W. (1986). User Centered System Design; New Perspectives on Human-Computer Interaction. Lawrence Erlbaum Associates, Inc., Mahwah, NJ, USA. [cited at p. 15] [Patterson et al., 2002] Patterson, E. S., Cook, R. I., and Render, M. L. (2002). Improving patient safety by identifying side effects from introducing bar coding in medication administration. The Journal of the American Medical Informatics Association, 9:540â€“553. [cited at p. 13] [Randell, 2003] Randell, R. (2003). User customisation of medical devices: the reality and the possiblities. Cognition, Technology and Work, 5(3):163â€“170. [cited at p. 50] [Reason, 1990] Reason, J. (1990). Human Error. Cambridge University Press. [cited at p. 11, 12, 13]</region>
        <outsider class="DoCO:TextBox" type="page_nr" id="410" page="80" column="1">70</outsider>
        <outsider class="DoCO:TextBox" type="header" id="411" page="80" column="1">BIBLIOGRAPHY</outsider>
        <region class="DoCO:TextChunk" id="412" confidence="possible" page="80" column="1">[Sawyer, 1996] Sawyer, D. (1996). Do it by design: An introduction to human factors in medical devices. [cited at p. 9] [Schimmel, 1964] Schimmel, E. M. (1964). The hazards of hosptalization. Quality and Safety in Health Care, 12(1):58â€“63. [cited at p. 8] [Sharman, 2007] Sharman, Z. (2007). Remembering the basics: Administrative technology and nursing care in hospital emergency departmebt. Internation Journal of Medical Informatics, 76:222â€“228. [cited at p. 50] [Shneiderman and Plaisant, 2004] Shneiderman, B. and Plaisant, C. (2004). Designing the User Interface: Strategies for Effective Human-Computer Interaction (4th Edition). Pearson Addison Wesley. [cited at p. 14, 27, 61] [Thimbleby, 1994] Thimbleby, H. (1994). Formulating usability. SIGCHI Bull., 26(2):59â€“64. [cited at p. 16] [Thimbleby, 2001] Thimbleby, H. (2001). The computer science of everyday things. In AUIC â€™01: Proceedings of the 2nd Australasian conference on User interface, pages 3â€“12, Washington, DC, USA. IEEE Computer Society. [cited at p. 4] [Thimbleby, 2004] Thimbleby, H. (2004). User interface design with matrix algebra. ACM Trans. Comput.-Hum. Interact., 11(2):181â€“236. [cited at p. 15] [Thimbleby, 2007] Thimbleby, H. (2007). Press On: Priciples of Interaction Pro- gramming. The MIT Press, first edition. [cited at p. 16, 17, 22, 33, 61, 62] [Thimbleby, 2008] Thimbleby, H. (2008). Ignorance of interaction programming is killing people. interactions, 15(5):52â€“57. [cited at p. 14] [Thimbleby et al., 2001] Thimbleby, H., Cairns, P., and Jones, M. (2001). Usability analysis with markov models. ACM Trans. Comput.-Hum. Interact., 8(2):99â€“132. [cited at p. 22] [Ward and Clarkson, 2001] Ward, J. and Clarkson, D. P. J. (2001). Device- related medical error current practice and solutions. The Drug Delivery Com- panies Report 2001, pages 58â€“63. [cited at p. 5] [Wickens and Andre, 1990] Wickens, C. D. and Andre, A. D. (1990). Proximity compatibility and information display: effects of color, space, and objectness on information integration. Hum. Factors, 32(1):61â€“77. [cited at p. 7, 8] [Wideman et al., 2005] Wideman, M. V., Whittler, M. E., and Anderson, T. M. (2005). Barcode medication administration: Lessons learned from an intensive care unit implementation. Advances in Patient Safety, 3:437â€“451. [cited at p. 13, 55]</region>
        <outsider class="DoCO:TextBox" type="page_nr" id="413" page="81" column="1">71</outsider>
        <region class="DoCO:TextChunk" id="414" confidence="possible" page="81" column="1">[Wiklund, 2002] Wiklund, M. E. (2002). Human factors desing, eleven keys to designing error-resistant medical devices. Medical Devices and Diagnostic Industry Magazine. [cited at p. 10]</region>
        <region class="unknown" id="415" page="83" column="1">Appendices</region>
        <region class="unknown" id="416" page="83" column="1">73</region>
        <region class="unknown" id="417" page="85" column="1">Appendix A</region>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="418" page="85" column="1">Centrality</h1>
        <region class="DoCO:TextChunk" id="419" page="85" column="1">The figures below show three different measures of centrality used in the analysis of the Alaris Pump. It is possible to see the states that are most central as the centrality score of each state is depicted using both the size and the colour of each node in the graph. The larger nodes should be perceived as more central to the use of the device. Colour coding the nodes was done from red to orange where the red nodes represent the most central nodes and the orange/yellow nodes are less central. These figures were generated using the yEd graph editor.</region>
        <region class="DoCO:TextChunk" id="420" confidence="possible" page="85" column="1">75</region>
        <outsider class="DoCO:TextBox" type="page_nr" id="421" page="86" column="1">76</outsider>
        <outsider class="DoCO:TextBox" type="header" id="422" page="86" column="1">APPENDIX A. CENTRALITY</outsider>
        <region class="DoCO:FigureBox" id="FA.1">
          <image class="DoCO:Figure" src="62kw.page_086.image_21.png" thmb="62kw.page_086.image_21-thumb.png"/>
          <caption class="deo:Caption" id="424" page="86" column="1">Figure A.1:</caption>
        </region>
        <region class="DoCO:TextChunk" id="425" confidence="possible" page="86" column="1">Degree centrality of the Alaris pump</region>
        <outsider class="DoCO:TextBox" type="page_nr" id="426" page="87" column="1">77</outsider>
        <region class="DoCO:FigureBox" id="FA.2">
          <image class="DoCO:Figure" src="62kw.page_087.image_22.png" thmb="62kw.page_087.image_22-thumb.png"/>
          <caption class="deo:Caption" id="428" page="87" column="1">Figure A.2: Closeness centrality of the Alaris Pump</caption>
        </region>
        <outsider class="DoCO:TextBox" type="page_nr" id="429" page="88" column="1">78</outsider>
        <outsider class="DoCO:TextBox" type="header" id="430" page="88" column="1">APPENDIX A. CENTRALITY</outsider>
        <region class="DoCO:FigureBox" id="FA.3">
          <image class="DoCO:Figure" src="62kw.page_088.image_23.png" thmb="62kw.page_088.image_23-thumb.png"/>
          <caption class="deo:Caption" id="432" page="88" column="1">Figure A.3: Node betweeness centrality of the Alaris Pump</caption>
        </region>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="433" page="89" column="1">List of Figures</h1>
        <region class="DoCO:TextChunk" id="434" confidence="possible" page="89" column="1">1.1 A modified radio interface to enable easier change of radio stations. The user here has marked two station she likes listening to as R3 and R4 in the picture. . . . . . . . . . . . . . . . . . . 5 4.1 A star graph and a complete both with 6 vertices. . . . . . . . 19 4.2 Finite state machine of a very simple flashlight . . . . . . . . . 22 5.1 The Alaris GP Volumetric Pump . . . . . . . . . . . . . . . . . 26 5.2 A sample extract from the json specification for the Alaris pump 28 5.3 Binary state machine for very simple flashlight . . . . . . . . . . 29 5.4 Binary state machine for a more complex flashlight. Coinciden- tally this graph is one of the 5 connected cubic graphs with 8 vertices. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 30 5.5 A simplified graph of the alaris infusion pump. The yellow node is the start state, the red node is the infusing state and the cyan node is the â€˜infusion pausedâ€™ state. . . . . . . . . . . . . . . . . 31 5.6 A more indepth graph of the alaris infusion pump. The graphs shows a replicated interaction sequence in three modes of the device. One when the rate is locked, when the rate is not locked and when the rate-lock is disabled. The yellow states represents the infusing and the infusion-paused state in the three different modes of the device. . . . . . . . . . . . . . . . . . . . . . . . . 32 5.7 Adjacency matrix for the Alaris Pump . . . . . . . . . . . . . . 38 5.8 All pairs shortest paths . . . . . . . . . . . . . . . . . . . . . . . 38 5.9 A state transition table for the Alaris pump. Note that Finished is not a button but an event that triggers a change in state . . . 39 5.10 Graph of the previous version of the alaris infusion pump. . . . 40 79</region>
        <outsider class="DoCO:TextBox" type="page_nr" id="435" page="90" column="1">80</outsider>
        <outsider class="DoCO:TextBox" type="header" id="436" page="90" column="1">LIST OF FIGURES</outsider>
        <region class="DoCO:TextChunk" id="437" confidence="possible" page="90" column="1">5.11 This table shows some of the one step errors that could occur in the course of using the alaris infusion pump and the number of steps needed to correct the error. The number of steps needed was calculated using the shortest paths between the errorneous state and the current state . . . . . . . . . . . . . . . . . . . . . 41 6.1 Average pump history per year. Unit of measurements are shown in bracket for each of the plotted pump history. . . . . . . . . . 45 6.2 Frequency of events clustered by the event type. The average frequency is shown in orange bars . . . . . . . . . . . . . . . . 46 6.3 Average use of pumps on battery . . . . . . . . . . . . . . . . . 47 6.4 A section of the average events log (in green) highlighting the number of safety clip related events . . . . . . . . . . . . . . . . 48 7.1 Screenshot of a typical patient management system . . . . . . . 54 7.2 Health Characteristics tree view for a patient for a single episode 57 7.3 Actions tree view for a patient for a single episode . . . . . . . . 57 7.4 The episode frequency plot. The orange data points represent the episodes, the blue data points represent the number of health characteristics discovered in an episodes and the green data points represent the number of actions taken in an episode. . . . . . . 58 7.5 The episode frequency plot showing more detailed information on mouse over. . . . . . . . . . . . . . . . . . . . . . . . . . . . 58 7.6 Chart showing the severity history of ulcerative colitis across all episodes for a patient. The user can easily see that this is a chronic case of ulcerative colitis because of the fluctuation of severity for this patient. . . . . . . . . . . . . . . . . . . . . . . 58 7.7 A screenshot of the patient browser running in a web browser . 59 A.1 Degree centrality of the Alaris pump . . . . . . . . . . . . . . . 76 A.2 Closeness centrality of the Alaris Pump . . . . . . . . . . . . . 77 A.3 Node betweeness centrality of the Alaris Pump . . . . . . . . . 78</region>
        <section class="DoCO:Section">
          <h3 class="DoCO:SectionTitle" id="438" page="90" column="1">4.1.1 Edge Chromatic Number . . . . . . . . . . . . . . . . 17 4.1.2 Centrality . . . . . . . . . . . . . . . . . . . . . . . . 18 4.1.3 A stochastic model of frequencies of traversal of nodes and edges . . . . . . . . . . . . . . . . . . . . . . . . 20 4.1.4 Connectivity . . . . . . . . . . . . . . . . . . . . . . . 20 4.1.5 Reachability . . . . . . . . . . . . . . . . . . . . . . . 21 4.1.6 Shortest paths . . . . . . . . . . . . . . . . . . . . . . 21 4.2 Graphs and Errors . . . . . . . . . . . . . . . . . . . . . . . 22 4.2.1 Estimating the probability for error . . . . . . . . . . 22 i</h3>
        </section>
      </section>
    </body>
  </article>
</pdfx>
