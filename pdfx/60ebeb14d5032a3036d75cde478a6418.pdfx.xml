<?xml version='1.0' encoding='UTF-8'?>
<pdfx xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://pdfx.cs.man.ac.uk/static/article-schema.xsd">
  <meta>
    <job>58af691cf7f32fc98e2b8c4edf9c9fa99b98d08ac026edf47b7954f44e65aadd</job>
    <base_name>62lv</base_name>
    <doi>http://dx.doi.org/10.1207/s15327051hci2101_3</doi>
  </meta>
  <article>
    <front class="DoCO:FrontMatter">
      <region class="DoCO:FigureBox" id="Fx1">
        <image class="DoCO:Figure" src="62lv.page_001.image_01.png" thmb="62lv.page_001.image_01-thumb.png"/>
      </region>
      <title-group>
        <article-title class="DoCO:Title" id="2">Pattern languages in HCI: a critical review</article-title>
      </title-group>
      <region class="unknown" id="4">DEARDEN, A. M. and FINLAY, J. Available from Sheffield Hallam University Research Archive (SHURA) at: <ext-link ext-link-type="uri" href="http://shura.shu.ac.uk/22/" id="3">http://shura.shu.ac.uk/22/</ext-link></region>
      <abstract class="DoCO:Abstract" id="5" confidence="possible">This document is the author deposited version. You are advised to consult the publisher's version if you wish to cite from it. Published version DEARDEN, A. M. and FINLAY, J. (2006). Pattern languages in HCI: a critical review. Human computer interaction, 21 (1), 49-102. Repository use policy Copyright © and Moral Rights for the papers on this site are retained by the individual authors and/or other copyright owners. Users may download and/or print one copy of any article(s) in SHURA to facilitate their private study or for non- commercial research. You may not engage in further distribution of the material or use it for any profit-making activities or any commercial gain.</abstract>
      <contrib-group class="DoCO:ListOfAuthors">
        <contrib contrib-type="author">
          <name id="6">Sheffield Hallam University Research Archive</name>
        </contrib>
      </contrib-group>
      <outsider class="DoCO:TextBox" type="footer" id="8"> <ext-link ext-link-type="uri" href="http://shura.shu.ac.uk" id="7">http://shura.shu.ac.uk</ext-link></outsider>
      <outsider class="DoCO:TextBox" type="header" id="9">Published in Human Computer Interaction, 21(1), January 2006</outsider>
      <region class="unknown" id="10">Pattern Languages in HCI: A critical review</region>
      <section class="DoCO:Section">
        <h2 class="DoCO:SectionTitle" id="11" confidence="possible" page="2" column="1">Andy Dearden</h2>
        <region class="unknown" id="12" page="2" column="1">Communication and Computing Research Centre, Sheffield Hallam University</region>
      </section>
      <section class="DoCO:Section">
        <h2 class="DoCO:SectionTitle" id="13" confidence="possible" page="2" column="1">Janet Finlay</h2>
        <region class="unknown" id="15" page="2" column="1">School of Computing, Leeds Metropolitan University RUNNING HEAD: PATTERN LANGUAGES IN HCI Corresponding Author Andy Dearden, Communication and Computing Research Centre, Sheffield Hallam University, Howard Street, Sheffield, S1 1WB, UK Tel: +44 (0)114 225 2916 Fax: +44 (0)114 225 3161 Email:<email id="14">a.m.dearden@shu.ac.uk</email> Brief Authors’ Biographies: Andy Dearden is an interaction designer with an interest in knowledge sharing and communication in software development; he is a senior lecturer in the Communication and Computing Research Centre at Sheffield Hallam University. Janet Finlay is a usability researcher with an interest in design communication and systemsevaluation; she is Professor of Interactive Systems in the School of Computing at Leeds Metropolitan University.</region>
        <outsider class="DoCO:TextBox" type="footer" id="16" page="2" column="1">-1-</outsider>
        <outsider class="DoCO:TextBox" type="header" id="17" page="3" column="1">Published in Human Computer Interaction, 21(1), January 2006</outsider>
        <region class="DoCO:TextChunk" id="18" confidence="possible" page="3" column="1">ABSTRACT This paper presents a critical review of patterns and pattern languages in human-computer interaction (HCI). In recent years, patterns and pattern languages have received considerable attention in HCI for their potential as a means for developing and communicating information and knowledge to support good design. This review examines the background to patterns and pattern languages in HCI, and seeks to locate pattern languages in relation to other approaches to interaction design. The review explores four key issues: what is a pattern? what is a pattern language? how are patterns and pattern languages used? and how are values reflected in the pattern-based approach to design? Following on from the review, a future research agenda is proposed for patterns and pattern languages in HCI.</region>
        <outsider class="DoCO:TextBox" type="footer" id="19" page="3" column="1">-2-</outsider>
        <outsider class="DoCO:TextBox" type="header" id="20" page="4" column="1">Published in Human Computer Interaction, 21(1), January 2006</outsider>
        <region class="DoCO:TextChunk" id="21" confidence="possible" page="4" column="1">CONTENTS 1. INTRODUCTION 2. The scope of this review 3. A Short History of Patterns 3.1. Christopher Alexander 3.2. Pattern Languages in Software Engineering 3.3. Patterns in HCI 4. Issue 1: What is a pattern? 4.1. Characteristics of Pattern 4.2. Identifying Patterns 4.3. The presentation of patterns 4.4. Patterns, Guidelines and Claims 5. Issue 2: What is a Pattern Language? 5.1. Pattern languages and pattern catalogues 5.2. The organisation of pattern languages 5.3. Notions of generativity 6. Issue 3: How are patterns and pattern languages used? 6.1. Patterns for participatory design 6.2. Patterns as technical lexicon 6.3. Patterns as organisational memory 6.4. Patterns as lingua franca 6.5. Patterns as design rationale 7. Issue 4: Values and pattern languages 7.1. The properties examined to identify patterns 7.2. Values in the selection of and rationale for individual patterns 7.3. Values in the process of developing patterns 7.4. Values in the process of using patterns 8. Conclusion: A research agenda for patterns in HCI 8.1. Exploring pattern languages in use 8.2. Organising pattern languages</region>
        <outsider class="DoCO:TextBox" type="footer" id="22" page="4" column="1">-3-</outsider>
        <outsider class="DoCO:TextBox" type="header" id="23" page="5" column="1">Published in Human Computer Interaction, 21(1), January 2006</outsider>
        <region class="DoCO:TextChunk" id="24" confidence="possible" page="5" column="1">8.3. Improving the production of pattern languages 8.4. Examining our values References</region>
        <outsider class="DoCO:TextBox" type="footer" id="25" page="5" column="1">-4-</outsider>
        <outsider class="DoCO:TextBox" type="header" id="26" page="6" column="1">Published in Human Computer Interaction, 21(1), January 2006</outsider>
      </section>
    </front>
    <body class="DoCO:BodyMatter">
      <section class="deo:Introduction">
        <h1 class="DoCO:SectionTitle" id="27" page="6" column="1">1. INTRODUCTION</h1>
        <region class="DoCO:TextChunk" id="55" page="6" column="1">A pattern may be defined as a structured description of an invariant solution to a recurrent problem within a context. A pattern language is a collection of such patterns organised in a meaningful way. In recent years patterns and pattern languages have attracted increasing attention in human computer interaction (HCI) for their potential in recording and communicating design knowledge and supporting the design process. Patterns and pattern languages are now being developed and presented in a wide range of HCI areas, including: ubiquitous systems ( <xref ref-type="bibr" rid="R148" id="28" class="deo:Reference">Roth, 2002</xref>; <xref ref-type="bibr" rid="R104" id="29" class="deo:Reference">Landay &amp; Borriello, 2003</xref>), web design (van <xref ref-type="bibr" rid="R172" id="30" class="deo:Reference">Duyne, Landay &amp; Hong, 2003</xref>, <xref ref-type="bibr" rid="R82" id="31" class="deo:Reference">Graham, 2003</xref>), safety-critical interactive systems (<xref ref-type="bibr" rid="R95" id="32" class="deo:Reference">Hussey, 1999</xref>), multimedia exhibits (<xref ref-type="bibr" rid="R30" id="33" class="deo:Reference">Borchers, 2001</xref>), hypertext and hypermedia (<xref ref-type="bibr" rid="R145" id="34" class="deo:Reference">Rossi, Schwabe &amp; Lyardet, 1997</xref>, 2000; <xref ref-type="bibr" rid="R146" id="35" class="deo:Reference">Rossi, Lyardet &amp; Schwabe, 1999</xref>; <xref ref-type="bibr" rid="R129" id="36" class="deo:Reference">Nanard, Nanard &amp; Kahn, 1998</xref>), personal digital assistants (Wier &amp; <xref ref-type="bibr" rid="R181" id="37" class="deo:Reference">Noble, 2003</xref>), socio-technical systems (<xref ref-type="bibr" rid="R68" id="38" class="deo:Reference">Thomas, 2003</xref>) and games design (<xref ref-type="bibr" rid="R23" id="39" class="deo:Reference">Bjork, Lundren &amp; Holopainen, 2003</xref>), as well as more general interaction design languages (<xref ref-type="bibr" rid="R167" id="40" class="deo:Reference">Tidwell, 1998</xref>, 1999a, 2003; van <xref ref-type="bibr" rid="R173" id="41" class="deo:Reference">Welie, 2002</xref>-2005; <xref ref-type="bibr" rid="R103" id="42" class="deo:Reference">Laakso, 2003</xref>). Initial efforts exploring patterns tended to focus on specific pattern development, leading to repeated debates on correctness and commonality of form and structure, together with a certain amount of “partisanship” regarding particular pattern approaches. Work in software engineering and in interaction design shows a variety of debates about the nature of „patterns‟. Various common elements are generally agreed to be relevant parts of the presentation of patterns, but different authors give significantly different emphases. The result of this is a field that can be daunting to the newcomer, who may find it difficult to disentangle the conceptual characteristics of the approach and therefore its potential contribution to HCI. In this paper, we present a critical review of research on patterns and pattern languages in HCI, highlighting four key issues within the field. Our aim is to provide an overview of the field, and identify key literature that may be useful and informative to HCI practitioners and researchers. This review also aims to locate patterns in relation to other established and emerging techniques in interactive systems design such as: guidelines and heuristics (<xref ref-type="bibr" rid="R159" id="43" class="deo:Reference">Smith &amp; Mosier, 1986</xref>; <xref ref-type="bibr" rid="R130" id="44" class="deo:Reference">Nielsen, 1994</xref>), style-guides (e.g. <xref ref-type="bibr" rid="R124" id="45" class="deo:Reference">Microsoft Corporation, 2003</xref>; <xref ref-type="bibr" rid="R79" id="46" class="deo:Reference">GNOME project, 2003</xref>); participatory design (<xref ref-type="bibr" rid="R85" id="47" class="deo:Reference">Greenbaum &amp; Kyng, 1991</xref>; <xref ref-type="bibr" rid="R155" id="48" class="deo:Reference">Schuler &amp; Namioka, 1993</xref>; Muller, Haslwanter &amp; Dayton,<marker type="page" number="7"/><marker type="block"/> 1997), claims analysis (<xref ref-type="bibr" rid="R161" id="52" class="deo:Reference">Sutcliffe &amp; Carroll, 1999</xref>; <xref ref-type="bibr" rid="R162" id="53" class="deo:Reference">Sutcliffe 2000</xref>) and design rationale (MacLean, <xref ref-type="bibr" rid="R110" id="54" class="deo:Reference">Young, Bellotti &amp; Moran, 1991</xref>). We begin by outlining the scope of the pattern endeavour that we will consider. We then present a short history of patterns, beginning with Alexander‟s exposition in architecture, through work in software engineering, to the consideration of patterns in human-computer interaction, in order to place the latter in its historical context. Our review then examines: different interpretations of the concept of pattern; different ideas on the nature of pattern language, different approaches to the use of patterns within the design process, and different ideas about the role of values in pattern-supported design, before suggesting an agenda for future research.</region>
        <outsider class="DoCO:TextBox" type="footer" id="50" page="6" column="1">-5-</outsider>
        <outsider class="DoCO:TextBox" type="header" id="51" page="7" column="1">Published in Human Computer Interaction, 21(1), January 2006</outsider>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="56" page="7" column="1">2. THE SCOPE OF THIS REVIEW</h1>
        <region class="DoCO:TextChunk" id="67" page="7" column="1">This review is addressed to practitioners and researchers in HCI. Consequently, the primary focus is on patterns and pattern languages that discuss interaction and interface design issues. There are, however, a large number of patterns from other domains, e.g. software engineering and organisational design, which may have a bearing on interactions between humans and computers. To avoid extending the scope of our review beyond practical limits, we define three broad classes of software-related pattern and pattern language that may be discussed: General software design patterns –a problem is stated in terms of desirable qualities of the internal structure and behaviour of software, and the solution is stated in terms of suggested code structures. The majority of patterns in <xref ref-type="bibr" rid="R75" id="57" class="deo:Reference">Gamma, Helm, Johnson and Vlissides (1995)</xref> fall into this category. Interface software design patterns – a problem is stated in the domain of desirable interaction behaviours, and the solution is stated in terms of suggested code structures. Examples in this category include: patterns for implementing systems that follow a „tools and materials‟ metaphor (<xref ref-type="bibr" rid="R144" id="58" class="deo:Reference">Riehle &amp; Zűllighoven, 1995</xref>); patterns for implementing digital sound synthesis systems (<xref ref-type="bibr" rid="R99" id="59" class="deo:Reference">Judkins &amp; Gill 2000</xref>); patterns to implement queuing of interaction events (<xref ref-type="bibr" rid="R178" id="60" class="deo:Reference">Wake, Wake &amp; Fox, 1996</xref>); patterns for e-commerce agent systems (<xref ref-type="bibr" rid="R180" id="61" class="deo:Reference">Weiss 2001</xref>); and patterns for mobile services (<xref ref-type="bibr" rid="R148" id="62" class="deo:Reference">Roth 2002</xref>). Interaction design patterns – a problem is stated in the domain of human interaction issues, and the solution is stated in terms of suggested perceivable interaction behaviour. A good example in this category is Tidwell‟s (1998, 1999a) pattern collection including patterns such as G O B ACK<marker type="page" number="8"/><marker type="block"/> TO A S AFE P LACE which advocates providing users with a clearly identifiable way of returning a system to a well known state such as the home page of a website. <xref ref-type="bibr" rid="R30" id="66" class="deo:Reference">Borchers (2001)</xref> includes three distinct pattern languages, the second of which is composed of interaction design patterns and the third of interface software design patterns. Two examples from Borchers serve to clarify the distinction between interaction design patterns and interface software design patterns. The interaction design pattern E ASY H ANDOVER deals with the problem that:</region>
        <outsider class="DoCO:TextBox" type="footer" id="64" page="7" column="1">-6-</outsider>
        <outsider class="DoCO:TextBox" type="header" id="65" page="8" column="1">Published in Human Computer Interaction, 21(1), January 2006</outsider>
        <region class="DoCO:TextChunk" id="69" confidence="possible" page="8" column="1">"Most interactive systems implicitly assume that each user begins using their system from a start page or initial state. At interactive exhibits, however, one user often takes over from the previous one, possibly in the middle of the interaction, and without knowing the interaction history of the previous user." [<xref ref-type="bibr" rid="R30" id="68" class="deo:Reference">Borchers, 2001</xref>, p117] The pattern is illustrated by a photograph of two visitors to an interactive exhibit, one who is using the exhibit, and another who is waiting for her turn. The pattern then discusses the design issues and makes the recommendation: “Therefore: Minimize the dialogue history that a new user needs to know to begin using an interactive exhibit. Offer a simple means to return the system to its initial state. If critical, user-specific parameters such as language need to be set by a user, let the users change the setting at any time, no matter where they are in the system" [ibid, p119] This solution is then illustrated using a 'stick figure' drawing. In contrast, B RANCHING T RANSFORMER C HAIN , an example of an interface software design pattern, takes as its problem: "If a software system is to react interactively to incoming musical data, it has to perform various processing steps on this data. However, the way in which these processing steps are to be combined is not always obvious." [ibid., p153] Here the proposed solution is: "Therefore: Use a chain of software objects that process the incoming musical data in sequence. Order the transformations so that coarse rythmic, harmonic or melodic changes are applied before finer-grained adjustments." [ibid., p155].</region>
        <outsider class="DoCO:TextBox" type="footer" id="70" page="8" column="1">-7-</outsider>
        <outsider class="DoCO:TextBox" type="header" id="71" page="9" column="1">Published in Human Computer Interaction, 21(1), January 2006</outsider>
        <region class="DoCO:TextChunk" id="80" page="9" column="1">The solution is then illustrated by means of a block diagram. Based on the definitions above, this review is primarily concerned with „Interaction Design Patterns‟ and, to a lesser extent with „Interface Software Design Patterns‟. To set the review in context, it is necessary to consider other literature, particularly from Software Engineering and Architecture. However, within such literature, this review will be restricted to general discussions of pattern languages, rather than discussions of the detailed content of the patterns themselves. Due to space constraints, and the authors' desire to consider the wide range of different approaches to patterns, the paper does not include detailed illustrations of any complete patterns. The reader is referred to published pattern languages and collections (e.g. <xref ref-type="bibr" rid="R9" id="72" class="deo:Reference">Alexander, 1977</xref>; <xref ref-type="bibr" rid="R75" id="73" class="deo:Reference">Gamma et al. 1995</xref>; van <xref ref-type="bibr" rid="R172" id="74" class="deo:Reference">Duyne et al. 2003</xref>) or the available on-line collections of interaction design patterns (e.g. <xref ref-type="bibr" rid="R167" id="75" class="deo:Reference">Tidwell, 1998</xref>, 1999a, 2003; van <xref ref-type="bibr" rid="R173" id="76" class="deo:Reference">Welie, 2002</xref>-2005; <xref ref-type="bibr" rid="R32" id="77" class="deo:Reference">Brighton Usability Group, 2003</xref>). Fincher‟s Pattern Gallery 1 (<xref ref-type="bibr" rid="R63" id="78" class="deo:Reference">Fincher, 2000b</xref>) provides an extensive on- line catalogue of pattern formats from a range of sources, together with example patterns to illustrate each style. To help orientate the reader who is unfamiliar with patterns, we discuss an example of an Alexandrian pattern in the next section. The early work of <xref ref-type="bibr" rid="R10" id="79" class="deo:Reference">Alexander and colleagues (1975, 1977, 1979, 1982, 1985, 1987)</xref> in developing pattern languages in architecture will be considered in order to locate HCI patterns within an appropriate historical context.</region>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="81" page="9" column="1">3. A SHORT HISTORY OF PATTERNS</h1>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="82" page="9" column="1">3.1. Christopher Alexander</h2>
          <region class="DoCO:TextChunk" id="89" confidence="possible" page="9" column="1">Design patterns and pattern languages arose in architecture from the work of Christopher Alexander and his colleagues. Within his profession his proposals have been controversial (<xref ref-type="bibr" rid="R53" id="83" class="deo:Reference">Dovey, 1990</xref>; <xref ref-type="bibr" rid="R150" id="84" class="deo:Reference">Saunders, 2002</xref>) but nonetheless they have captured the public imagination with regard to architecture (<xref ref-type="bibr" rid="R102" id="85" class="deo:Reference">King, 1993</xref>; <xref ref-type="bibr" rid="R73" id="86" class="deo:Reference">Gabriel, 1996b</xref>; <xref ref-type="bibr" rid="R150" id="87" class="deo:Reference">Saunders 2002</xref>) and have been influential in several other domains. Alexander‟s early work, summarised in „Notes on the Synthesis of Form‟ (<xref ref-type="bibr" rid="R5" id="88" class="deo:Reference">Alexander, 1964</xref>), proposed a systemic approach to architectural design problems. The approach involves analytic decomposition of the problem into sub-problems, each characterized by a set of competing 1 The gallery is available at: www.cs.kent.ac.uk/people/staff/saf/patterns/gallery.html.</region>
          <outsider class="DoCO:TextBox" type="footer" id="90" page="9" column="1">-8-</outsider>
          <outsider class="DoCO:TextBox" type="header" id="91" page="10" column="1">Published in Human Computer Interaction, 21(1), January 2006</outsider>
          <region class="DoCO:TextChunk" id="99" confidence="possible" page="10" column="1">forces. By resolving the forces in each sub-problem, and synthesizing the individual solutions, the architect generates a solution to the original global problem. <xref ref-type="bibr" rid="R5" id="92" class="deo:Reference">Alexander (1964)</xref> even considered the possibility of a computational solution to such problems. During the period from the mid sixties to mid seventies, Alexander became sceptical of his suggestions in „Notes on the Synthesis of Form‟. In the 1970s and early 80s, he and his colleagues set out to define a new understanding and a new approach to architectural design. <xref ref-type="bibr" rid="R81" id="93" class="deo:Reference">Grabow (1983)</xref>, in his biography, describes the changes in Alexander‟s thinking during this period as a „paradigm shift‟. The new approach, centred on the concept of pattern languages, is described in a series of books, namely: The Timeless Way of Building (<xref ref-type="bibr" rid="R7" id="94" class="deo:Reference">Alexander, 1979</xref>); A Pattern Language (<xref ref-type="bibr" rid="R9" id="95" class="deo:Reference">Alexander et al., 1977</xref>); The Oregon Experiment (<xref ref-type="bibr" rid="R11" id="96" class="deo:Reference">Alexander, Silverstein, Angel, Ishikawa &amp; Abrams, 1975</xref>); The Linz Café / Das Kafe Linz (Alexander, 1982); The Production of Houses (<xref ref-type="bibr" rid="R8" id="97" class="deo:Reference">Alexander, Davis, Martinez &amp; Corner, 1985</xref>) and A New Theory of Urban Design (<xref ref-type="bibr" rid="R10" id="98" class="deo:Reference">Alexander, Neis, Anninou &amp; King, 1987</xref>). The books were published as a series, and are explicitly given volume numbers, which do not correspond with the chronological order of publication. Volume one of the series (The Timeless Way of Building) sets out Alexander‟s view of how patterns and pattern languages evolve, and how they should be utilized in design. Volume two (A Pattern Language) offers one instance of a pattern language. The last four volumes of the series each recount a case study in which the pattern based approach to design was applied.</region>
          <region class="DoCO:TextChunk" id="100" page="10" column="1">Alexander‟s pattern language used a specific format for the presentation of a pattern. To illustrate this format, and give a further illustration of the pattern concept, we outline one of his patterns. An Alexandrian pattern starts with the name and reference number, e.g. L IGHT ON T WO S IDES OF E VERY R OOM (pattern 159). The name is concise and evocative but not obscure. This is followed by a picture (in Alexander‟s case a photograph) showing an example of an instantiation of the pattern and a short paragraph which sets its context, including the names of patterns to which this one contributes. The problem that this pattern addresses is then stated. In the case of L IGHT ON T WO S IDES OF E VERY R OOM , the problem is that:</region>
          <region class="DoCO:TextChunk" id="102" confidence="possible" page="10" column="1">“When they have a choice, people will always gravitate to those rooms which have light on two sides, and leave the rooms which are lit only from one side unused and empty.” (<xref ref-type="bibr" rid="R9" id="101" class="deo:Reference">Alexander et al., 1977</xref> pattern 159)</region>
          <outsider class="DoCO:TextBox" type="footer" id="103" page="10" column="1">-9-</outsider>
          <outsider class="DoCO:TextBox" type="header" id="104" page="11" column="1">Published in Human Computer Interaction, 21(1), January 2006</outsider>
          <region class="DoCO:TextChunk" id="105" page="11" column="1">This concise statement of the problem is followed by a detailed discussion and rationale, including the empirical background and evidence (the motivation for the pattern) and the „forces‟ involved in the resolution of the problem. The solution is then included:</region>
          <region class="DoCO:TextChunk" id="108" confidence="possible" page="11" column="1">“Locate each room so that it has outdoor space outside it on at least two sides, and then place windows in these outdoor walls so that natural light falls into every room from more than one direction.” (<xref ref-type="bibr" rid="R9" id="106" class="deo:Reference">Alexander et al., 1977</xref> pattern 159) The pattern then includes a diagram, which illustrates the solution, and a paragraph indicating how this pattern relates to other „lower‟ patterns in the pattern language, that is those which contribute to it. The Alexandrian form has been adopted by some, but by no means all, pattern writers in other fields. For a summary of alternate forms, see the Pattern Gallery (<xref ref-type="bibr" rid="R63" id="107" class="deo:Reference">Fincher, 2000b</xref>).</region>
        </section>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="109" page="11" column="1">3.2. Pattern Languages in Software Engineering</h2>
          <region class="DoCO:TextChunk" id="131" page="11" column="1">In the late 1980s and early 1990s, researchers in software engineering were exploring ways to reuse design knowledge. For example, <xref ref-type="bibr" rid="R44" id="110" class="deo:Reference">Coplien (1992)</xref> investigated idiomatic styles of C++ code; Wirfs-<xref ref-type="bibr" rid="R185" id="111" class="deo:Reference">Brock, Vlissides, Cunningham, Johnson and Bollette (1991)</xref> examined the design of frameworks that supported effective code re-use; Garlan and colleagues investigated the re-use of formal specifications for a family of products (<xref ref-type="bibr" rid="R76" id="112" class="deo:Reference">Garlan &amp; Delisle 1990</xref>), and generic software architectures that could be refined to specific implementations (Galan &amp; <xref ref-type="bibr" rid="R77" id="113" class="deo:Reference">Notkin 1991</xref>, <xref ref-type="bibr" rid="R78" id="114" class="deo:Reference">Garlan &amp; Shaw 1993</xref>). Alexander‟s concept of „design patterns‟ was noticed in the context of this research (<xref ref-type="bibr" rid="R18" id="115" class="deo:Reference">Beck &amp; Cunningham, 1987</xref>; <xref ref-type="bibr" rid="R41" id="116" class="deo:Reference">Coad, 1992</xref>; <xref ref-type="bibr" rid="R12" id="117" class="deo:Reference">Anderson, 1993</xref>; <xref ref-type="bibr" rid="R42" id="118" class="deo:Reference">Coad &amp; Mayfield, 1993</xref>; <xref ref-type="bibr" rid="R74" id="119" class="deo:Reference">Gamma, Helm, Johnson &amp; Vlissides, 1993</xref>; <xref ref-type="bibr" rid="R13" id="120" class="deo:Reference">Anderson, Coad &amp; Mayfield, 1994</xref>). The first conference on „Pattern Languages of Programming‟ (PLoP) was held in August 1994 (<xref ref-type="bibr" rid="R47" id="121" class="deo:Reference">Coplien &amp; Schmidt, 1995</xref>). Since then, PLoP conferences have been held annually (<xref ref-type="bibr" rid="R21" id="122" class="deo:Reference">Vlissides, Coplien &amp; Kerth, 1996</xref>; <xref ref-type="bibr" rid="R117" id="123" class="deo:Reference">Martin, Reihle &amp; Buschmann, 1997</xref>; <xref ref-type="bibr" rid="R91" id="124" class="deo:Reference">Harrison, Foot &amp; Rohnert, 1999</xref>; <xref ref-type="bibr" rid="R137" id="125" class="deo:Reference">PLoP, 1998</xref>; <xref ref-type="bibr" rid="R138" id="126" class="deo:Reference">PLoP, 1999</xref>, <xref ref-type="bibr" rid="R139" id="127" class="deo:Reference">PLoP, 2000</xref>, <xref ref-type="bibr" rid="R140" id="128" class="deo:Reference">PLoP, 2001</xref>; <xref ref-type="bibr" rid="R141" id="129" class="deo:Reference">PLoP 2002</xref>; PLoP, 2003). Other conference series investigating pattern languages in software engineering have also been established, e.g. EuroPLoP in Europe, ChiliPLoP in Arizona and KoalaPLoP in Australasia. Another important milestone was the publication of <xref ref-type="bibr" rid="R75" id="130" class="deo:Reference">Gamma et al. (1995)</xref>, often referred to as the „Gang of Four‟ book, which remains one of best selling books in software engineering.</region>
          <outsider class="DoCO:TextBox" type="footer" id="132" page="11" column="1">- 10 -</outsider>
          <outsider class="DoCO:TextBox" type="header" id="133" page="12" column="1">Published in Human Computer Interaction, 21(1), January 2006</outsider>
        </section>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="134" page="12" column="1">3.3. Patterns in HCI</h2>
          <region class="DoCO:TextChunk" id="174" page="12" column="1">Early work on patterns in software engineering included solutions for user-interface software design. Thus, <xref ref-type="bibr" rid="R75" id="135" class="deo:Reference">Gamma et al. (1993, 1995)</xref> include patterns such as O BSERVER (an abstraction similar to the „Model View Controller‟ architecture) and D ECORATOR (a software design solution used for embellishments such as scrollable panels). The proceedings of the first meeting of PLoP begin with two papers presenting a single interaction design pattern (<xref ref-type="bibr" rid="R2" id="136" class="deo:Reference">Adams 1995</xref>) and a pattern language with four interaction design patterns to describe a „tools and materials‟ metaphor for user interface design, and seven interface software patterns that help implement such interfaces (<xref ref-type="bibr" rid="R144" id="137" class="deo:Reference">Riehle &amp; Zűllighoven, 1995</xref>). In the proceedings of the third meeting (<xref ref-type="bibr" rid="R117" id="138" class="deo:Reference">Martin et al., 1997</xref>), user-interface patterns were recognized as a discrete area of interest and afforded a separate „part‟ of the proceedings, despite being represented by a single paper (<xref ref-type="bibr" rid="R31" id="139" class="deo:Reference">Bradac &amp; Fletcher, 1997</xref>). In the fourth meeting, four papers were grouped in the proceedings as relating to „Patterns of Human-Computer Interaction‟ (see <xref ref-type="bibr" rid="R91" id="140" class="deo:Reference">Harrison et al., 1999</xref>). In 1998, (<xref ref-type="bibr" rid="R137" id="141" class="deo:Reference">PLoP, 1998</xref>) the organisers grouped the papers using section titles taken from „A Pattern Language‟, with the majority of interaction design patterns appearing in the session „Zen View‟ (pattern 134 in <xref ref-type="bibr" rid="R9" id="142" class="deo:Reference">Alexander et al., 1977</xref>). Eight of the papers at the 1998 conference include interaction design or interface software design patterns. In 1999 (<xref ref-type="bibr" rid="R138" id="143" class="deo:Reference">PLoP, 1999</xref>), four papers addressing user-interface issues appear in a group together with two patterns that are primarily concerned with network performance issues. In recent years PLoP has included only a small number of examples of interaction design patterns. While the number of interaction design and interface software design patterns appearing in PLoP was falling, interest in patterns at meetings of the HCI community was growing. Patterns workshops have become regular events at CHI (<xref ref-type="bibr" rid="R17" id="144" class="deo:Reference">Bayle et al. 1998</xref>; <xref ref-type="bibr" rid="R87" id="145" class="deo:Reference">Griffiths, Pemberton, Borchers &amp; Stork 2000</xref>; van <xref ref-type="bibr" rid="R173" id="146" class="deo:Reference">Welie, Mullet &amp; McInerney 2002</xref>; <xref ref-type="bibr" rid="R65" id="147" class="deo:Reference">Fincher et al., 2003</xref>; <xref ref-type="bibr" rid="R156" id="148" class="deo:Reference">Schümmer, Borchers, Thomas &amp; Zdun, 2004</xref>), as well as being held at a meeting of the Usability Professionals Association in 1999 (<xref ref-type="bibr" rid="R84" id="149" class="deo:Reference">Granlund &amp; Lafreniere, 1999a</xref>), and at Interact in 1999 (<xref ref-type="bibr" rid="R86" id="150" class="deo:Reference">Griffiths, Pemberton &amp; Borchers, 1999</xref>). Panels were held at CHI 2001 (<xref ref-type="bibr" rid="R30" id="151" class="deo:Reference">Borchers &amp; Thomas, 2001</xref>) and at IHM-HCI 2001 (<xref ref-type="bibr" rid="R88" id="152" class="deo:Reference">Griffiths &amp; Pemberton, 2001</xref>). An early mention of patterns in the mainstream HCI literature was in <xref ref-type="bibr" rid="R132" id="153" class="deo:Reference">Norman and Draper (1986)</xref> and <xref ref-type="bibr" rid="R133" id="154" class="deo:Reference">Norman (1988)</xref> but in neither case was the potential use of patterns explored in any detail. More recently, however, papers discussing the use of patterns have been published in a variety of forums including DIS (<xref ref-type="bibr" rid="R58" id="155" class="deo:Reference">Erickson, 2000a</xref>),<marker type="page" number="13"/><marker type="block"/> ECSCW (<xref ref-type="bibr" rid="R115" id="159" class="deo:Reference">Martin, Rodden, Rouncefield, Sommerville &amp; Viller, 2001</xref>), CHI (<xref ref-type="bibr" rid="R48" id="160" class="deo:Reference">Dearden, Finlay, Allgar &amp; McManus, 2002a</xref>), PDC (<xref ref-type="bibr" rid="R49" id="161" class="deo:Reference">Dearden, Finlay, Allgar &amp; McManus, 2002b</xref>; <xref ref-type="bibr" rid="R154" id="162" class="deo:Reference">Schuler, 2002</xref>), HCI (<xref ref-type="bibr" rid="R69" id="163" class="deo:Reference">Finlay, Allgar, Dearden &amp; McManus, 2002</xref>) and ACM Hypertext conferences (<xref ref-type="bibr" rid="R145" id="164" class="deo:Reference">Rossi, 1997</xref>; <xref ref-type="bibr" rid="R129" id="165" class="deo:Reference">Nanard et al. 1998</xref>). A number of interaction design pattern languages have also been published in book form, including Borchers‟ triple languages for the development of interactive exhibits (<xref ref-type="bibr" rid="R27" id="166" class="deo:Reference">Borchers, 2001a</xref>), Van Duyne et al.‟s Design of Sites language (<xref ref-type="bibr" rid="R172" id="167" class="deo:Reference">Van Duyne et al., 2003</xref>) and, most recently, Graham‟s (<xref ref-type="bibr" rid="R82" id="168" class="deo:Reference">Graham, 2003</xref>) language on web usability, as well as many more web-based collections (e.g. <xref ref-type="bibr" rid="R167" id="169" class="deo:Reference">Tidwell, 1998</xref>, 1999a, 2003; Van <xref ref-type="bibr" rid="R173" id="170" class="deo:Reference">Welie, 2002</xref>-2005; <xref ref-type="bibr" rid="R23" id="171" class="deo:Reference">Bjork et al., 2003</xref>; <xref ref-type="bibr" rid="R103" id="172" class="deo:Reference">Laakso, 2003</xref>). These developments are consistent with the expectations of the participants in the early PLoP meetings. In their introduction to the proceedings of the first PLoP conference, <xref ref-type="bibr" rid="R75" id="173" class="deo:Reference">Johnson &amp; Cunningham (1995)</xref> state their expectation that “as the PLoP community grows and matures ... PLoP will itself splinter along traditional lines of interest” [ibid. p. ix]. The remainder of this paper will consider four of the key issues that arise within patterns research. We begin with the fundamental question of what is a pattern.</region>
          <outsider class="DoCO:TextBox" type="footer" id="157" page="12" column="1">- 11 -</outsider>
          <outsider class="DoCO:TextBox" type="header" id="158" page="13" column="1">Published in Human Computer Interaction, 21(1), January 2006</outsider>
        </section>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="175" page="13" column="1">4. ISSUE 1: WHAT IS A PATTERN?</h1>
        <region class="DoCO:TextChunk" id="209" page="13" column="1">The debate as to what constitutes a pattern has occupied considerable attention in software engineering and HCI. <xref ref-type="bibr" rid="R106" id="176" class="deo:Reference">Lea (1994)</xref> describes the term pattern as a „pre-formal construct‟, noting that Alexander provides no formal definition. Alexander offers many different descriptions of patterns that are taken up by different authors. <xref ref-type="bibr" rid="R41" id="177" class="deo:Reference">Coad (1992)</xref> emphasises the idea of patterns emerging from repetitions in human behaviour, quoting Alexander‟s observation that „every place is given its character by certain patterns of events that keep on happening there‟ (<xref ref-type="bibr" rid="R7" id="178" class="deo:Reference">Alexander, 1979</xref>, as quoted by <xref ref-type="bibr" rid="R41" id="179" class="deo:Reference">Coad, 1992</xref>, p 152). <xref ref-type="bibr" rid="R73" id="180" class="deo:Reference">Gabriel (1996b)</xref>, <xref ref-type="bibr" rid="R51" id="181" class="deo:Reference">Denning &amp; Dargan (1996)</xref>, <xref ref-type="bibr" rid="R40" id="182" class="deo:Reference">Cline (1996)</xref>, <xref ref-type="bibr" rid="R75" id="183" class="deo:Reference">Johnson &amp; Cunningham (1995)</xref> and <xref ref-type="bibr" rid="R27" id="184" class="deo:Reference">Borchers (2001a)</xref> also highlight this view. This viewpoint emphasises patterns as recurrent phenomena or structures that must be observed and discovered. The POINTER project (<xref ref-type="bibr" rid="R115" id="185" class="deo:Reference">Martin et al., 2001</xref>; <xref ref-type="bibr" rid="R116" id="186" class="deo:Reference">Martin, Rouncefield &amp; Rodden, 2002</xref>) captures just such recurrent phenomena, drawing on examples of common interactions derived from ethnographic studies. An alternative view highlights patterns as artefacts for the explicit representation of design guidance. <xref ref-type="bibr" rid="R75" id="187" class="deo:Reference">Gamma et al. (1995)</xref> quote Alexander „Each pattern describes a problem ... and then describes the core of the solution ...‟ (<xref ref-type="bibr" rid="R9" id="188" class="deo:Reference">Alexander et al., 1977</xref>, page x, as quoted by Gamma et al.<marker type="page" number="14"/><marker type="block"/> 1995, p 2). <xref ref-type="bibr" rid="R21" id="192" class="deo:Reference">Beck et al. (1996)</xref> describe patterns as „a particular prose form‟ (ibid. p. 103) and <xref ref-type="bibr" rid="R28" id="193" class="deo:Reference">Borchers (2001b)</xref> describes patterns as „... above all, a didactic medium for human readers ...‟ (ibid. p. 361). <xref ref-type="bibr" rid="R36" id="194" class="deo:Reference">Schmidt, Fayad and Johnson (1996)</xref> and <xref ref-type="bibr" rid="R14" id="195" class="deo:Reference">Astrachan, Berry, Cox and Mitchener (1998)</xref> have a similar emphasis. For Alexander, there is no contradiction between these views. In The Timeless Way of Building, <xref ref-type="bibr" rid="R7" id="196" class="deo:Reference">Alexander (1979)</xref> posits pattern languages as fundamental to the organisation of building, concluding that „nothing is made without a pattern language in the maker‟s mind; and what that thing becomes, its depth, or its banality, comes also from the pattern language in the builder‟s mind ...‟ (ibid. p 224). Later, he argues that „... in a period when languages are no longer widely shared, ... it becomes necessary to make patterns explicit, ... so that they can be shared in a new way – explicitly instead of implicitly – and discussed in public.‟ (<xref ref-type="bibr" rid="R7" id="197" class="deo:Reference">Alexander, 1979</xref>, p. 246). His effort to explicate patterns gives rise to „A Pattern Language‟ (<xref ref-type="bibr" rid="R9" id="198" class="deo:Reference">Alexander et al., 1977</xref>). Hence, for Alexander, pattern languages are both a theoretical account of the organisation of the built environment, and specific designed artefacts, whose purpose includes re-invigorating public participation in, and discussion of, architectural design. Our discussion of patterns reflects this and, unless explicitly stated, we are referring to constructed, documented patterns rather than patterns in the world. In software engineering and HCI it is generally agreed that a pattern is a structured description of an invariant 2 solution to a recurrent problem in context, reflecting Alexander‟s problem oriented approach. However, such an approach is not universal. A distinction can be drawn between design patterns, which centre on a problem and a proven solution, and activity patterns, which simply provide a description of existing patterns of activity (<xref ref-type="bibr" rid="R17" id="199" class="deo:Reference">Bayle et al., 1998</xref>). For example, the patterns developed in the POINTER project (<xref ref-type="bibr" rid="R115" id="200" class="deo:Reference">Martin et al., 2001</xref>; <xref ref-type="bibr" rid="R116" id="201" class="deo:Reference">Martin et al., 2002</xref>), which seek to summarise findings from ethnographic studies, can be seen as „activity patterns‟ in Bayle et al.‟s terms. Another area of work in software has proposed the idea of „AntiPatterns‟ which are<marker type="block"/> 2 It should be noted that the term invariant here refers to a set of shared characteristics of the recommended solution, but that the solution will need to be adapted to the specific circumstances in which it is applied. Hence, there is variability in the way that the solution is instantiated in individual applications, but the pattern describes the invariant core of solutions to the (recurrent) problem.<marker type="page" number="15"/><marker type="block"/> examples of poor design practice together with descriptions of how the design could be repaired , (<xref ref-type="bibr" rid="R33" id="206" class="deo:Reference">Brown, Malveau, McCormick &amp; Mowbray , 1998</xref>). AntiPatterns have not attracted much attention within HCI, although there was some discussion at the CHI 2000 patterns workshop (<xref ref-type="bibr" rid="R87" id="207" class="deo:Reference">Griffiths et al., 2000</xref>), in spite of many collections of examples of bad interaction design, with and without repairs. The validity of AntiPatterns in Alexandrian terms can be debated, since patterns are, by his definition, concerned with capturing good practice. However, their use in software is relatively common and they do occur in interaction design (see for example, <xref ref-type="bibr" rid="R82" id="208" class="deo:Reference">Graham, 2003</xref>). Within this review, however, we concentrate on the predominant view, i.e. on „design patterns‟.</region>
        <outsider class="DoCO:TextBox" type="footer" id="190" page="13" column="1">- 12 -</outsider>
        <outsider class="DoCO:TextBox" type="header" id="191" page="14" column="1">Published in Human Computer Interaction, 21(1), January 2006</outsider>
        <outsider class="DoCO:TextBox" type="footer" id="204" page="14" column="1">- 13 -</outsider>
        <outsider class="DoCO:TextBox" type="header" id="205" page="15" column="1">Published in Human Computer Interaction, 21(1), January 2006</outsider>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="210" page="15" column="1">4.1. Characteristics of Pattern</h2>
          <region class="DoCO:TextChunk" id="213" page="15" column="1">A number of researchers have discussed what constitutes a design pattern and what distinguishes it from other design advice. <xref ref-type="bibr" rid="R17" id="211" class="deo:Reference">Bayle et al. (1998)</xref> assert that patterns are notable because they are based on examples, facilitate multiple levels of abstraction, bridge the gap between the physical and the social aspects of design and are amenable to piecemeal development. <xref ref-type="bibr" rid="R61" id="212" class="deo:Reference">Fincher (1999)</xref> also identifies capture of practice and abstraction as important, but adds: organising principle to relate patterns to other patterns in a way that enables design; a value system that is embodied in the patterns; and a particular presentational style.</region>
          <region class="DoCO:TextChunk" id="215" confidence="possible" page="15" column="1">Perhaps the most comprehensive attempt to characterise patterns arises from the software engineering literature. <xref ref-type="bibr" rid="R184" id="214" class="deo:Reference">Winn and Calder (2002)</xref> suggest nine essential characteristics of pattern, some of which reflect attributes also identified by previous researchers. Below we summarise the characteristics that Winn and Calder identify. 1. A pattern implies an artifact: A pattern should provide a higher-level picture of the shape of the artefact that it describes. The implication is that patterns must support the design of something. 2. A pattern bridges many levels of abstraction: A pattern provides design information at different levels of abstraction. Winn &amp; Calder point out that patterns in software engineering include both sample code and „big-picture‟ structure diagrams. 3. A pattern includes its rationale: It is both functional and non-functional. A pattern should include an explanation of why the solution is recommended, and what trade-offs are involved.</region>
          <outsider class="DoCO:TextBox" type="footer" id="216" page="15" column="1">- 14 -</outsider>
          <outsider class="DoCO:TextBox" type="header" id="217" page="16" column="1">Published in Human Computer Interaction, 21(1), January 2006</outsider>
          <region class="DoCO:TextChunk" id="219" confidence="possible" page="16" column="1">4. A pattern is manifest in a solution: It should be possible to see the pattern that has been used within the finished artefact, since a pattern relates to both design process and structure. Generally, it is not possible, by inspecting a piece of software, to identify whether a particular development process was used in its production. In contrast, if a software engineering pattern has been used, its structure will be evident in the code. 5. A pattern captures system hot-spots: System hot-spots are points within a software system that must be open to changes as the system evolves in response to a changing environment and modified requirements. By identifying invariants of good design, patterns also highlight design elements that must be open to change, and thus help to manage the interplay between stability and change. 6. A pattern is part of a language: Patterns are related to other patterns and work together to resolve the complexity of system design problems. 7. A pattern is validated by use: Patterns can only be proved through evidence of their existence in real artefacts and their contribution to design. Although this characteristic is similar to 4 above, there is a subtle distinction. Here the emphasis is on the evidence required to verify the existence of a pattern, which requires that the pattern is found in a range of successful system designs. 8. A pattern is grounded in domain: Patterns relate to specific domains and have no meaning outside those domains. Patterns drawn from different domains should not be expected to work together, and discussion of patterns without consideration of the domains in which they are grounded is likely to be confused and confusing. 9. A pattern captures a big idea: Patterns should focus on key, difficult problems within a domain. Not every design problem warrants a pattern. Within the field of HCI a number of other characteristics have also been debated. <xref ref-type="bibr" rid="R17" id="218" class="deo:Reference">Bayle et al. (1998)</xref> raise several additional points. 10. Patterns support a „lingua franca‟: Patterns should support discussions with people who are not specialists in the domain. In contrast with the concerns of software engineering, patterns in HCI should be accessible and understandable by end- users.</region>
          <outsider class="DoCO:TextBox" type="footer" id="220" page="16" column="1">- 15 -</outsider>
          <outsider class="DoCO:TextBox" type="header" id="221" page="17" column="1">Published in Human Computer Interaction, 21(1), January 2006</outsider>
          <region class="DoCO:TextChunk" id="222" confidence="possible" page="17" column="1">11. Different patterns deal with problems at different scales: Some patterns in HCI deal with high-level issues such as business process or task structure, while others address low level details of GUI construction such as the layout of tables. 12. Patterns reflect design values: Patterns are not neutral but explicitly reflect design values. The selection of patterns and the recording of patterns are value-laden activities, reflecting the priorities and motivations of the writer. We return to this point in more detail in section 7. 13. Patterns capture design practice: Patterns are derived from actual practice not theoretical or conceptual proposals. This perspective relates to Winn and Calder‟s points 4 and 7 above but here the emphasis is on the processes of identifying and developing patterns.</region>
          <region class="DoCO:TextChunk" id="226" page="17" column="1"> <xref ref-type="fig" rid="F1" id="223" class="deo:Reference">Figure 1</xref> compares the position of Winn and Calder with that of a selection of authors in HCI who discuss the nature of design patterns. In this table we indicate a direct statement with a bullet and an implicit agreement (for example through the use made of patterns) with a question mark. We have included distinctions made by different authors, even where these are closely related. <xref ref-type="fig" rid="F1" id="224" class="deo:Reference">Figure 1</xref> illustrates the level of debate on even the fundamental question of what constitutes a pattern and, to a degree, reflects a diversity of theoretical and philosophical perspectives on the nature of patterns. As we have already seen, Alexander viewed patterns both as a theoretical account of the built environment and as constructed artefacts to support design. Similarly, some authors are primarily interested in patterns as a way of capturing and sharing design knowledge and values, where it is assumed that documented patterns capture actual and observable successful design practice. Others see patterns primarily as an accessible form of design guidance and focus particularly on patterns that have immediate application and (in some cases) where that application can be automated.<marker type="block"/> Some of the requirements laid down by Winn and Calder have not been identified as important in HCI, for example the issue of system hotspots. Others, such as levels of abstraction within a pattern, are perhaps so obviously implied by the generic solution and concrete examples, as not to be stated explicitly by any HCI authors. Similarly, many HCI authors imply the focus on design of an artefact through inclusion of notions such as construction and generativity, although they do not mention this explicitly. It is clear, however, that there is a general agreement within HCI that patterns should allow communication between different groups; that pattern languages,</region>
          <outsider class="DoCO:TextBox" type="footer" id="227" page="17" column="1">- 16 -</outsider>
          <outsider class="DoCO:TextBox" type="header" id="228" page="18" column="1">Published in Human Computer Interaction, 21(1), January 2006</outsider>
          <region class="DoCO:TextChunk" id="230" confidence="possible" page="18" column="1">as opposed to single patterns, are important; that patterns address problems at different levels; and that patterns involve questions of value. <xref ref-type="fig" rid="F1" id="229" class="deo:Reference">FIGURE 1</xref> ABOUT HERE</region>
        </section>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="231" page="18" column="1">4.2. Identifying Patterns</h2>
          <region class="DoCO:TextChunk" id="233" page="18" column="1">As we have seen, one of the distinguishing characteristics of patterns is that they are derived from practice rather than theory. In The Timeless Way of Building, <xref ref-type="bibr" rid="R7" id="232" class="deo:Reference">Alexander (1979)</xref> describes a process that begins by finding places that exhibit what he calls „the quality without a name‟, and then trying to identify the distinguishing characteristics that account for the success of the selected design solution. He then seeks to identify key „invariants‟ that are common to all good solutions to that design problem and not present in poor solutions.</region>
          <region class="DoCO:TextChunk" id="241" confidence="possible" page="18" column="1">In software engineering, it is usually agreed that patterns must be discovered by reference to design solutions, rather than being constructed from first principles. <xref ref-type="bibr" rid="R41" id="234" class="deo:Reference">Coad (1992)</xref> suggests that “patterns are found by trial end error and by observation” [p.153]. <xref ref-type="bibr" rid="R41" id="235" class="deo:Reference">Coad &amp; Mayfield (1992)</xref> discuss „discovering‟ patterns from experience. <xref ref-type="bibr" rid="R73" id="236" class="deo:Reference">Gabriel (1996b)</xref> and <xref ref-type="bibr" rid="R21" id="237" class="deo:Reference">Meszaros (1996)</xref> both use the metaphor of „mining‟ patterns from existing designs. The mining metaphor has been used in workshops on patterns in HCI (van <xref ref-type="bibr" rid="R173" id="238" class="deo:Reference">Welie et al. 2002</xref>), and many of the patterns offered by <xref ref-type="bibr" rid="R168" id="239" class="deo:Reference">Tidwell (1998, 1999a)</xref>, van Welie (2002-2005) and <xref ref-type="bibr" rid="R32" id="240" class="deo:Reference">Brighton Usability Group (2003)</xref> are clearly based on observations of common design solutions.</region>
          <region class="DoCO:TextChunk" id="255" page="18" column="1">Pattern mining starts with identification of good practice. However, it is not enough simply to capture good HCI practice: pattern mining requires capture of practice that is both good and significant ( <xref ref-type="bibr" rid="R64" id="242" class="deo:Reference">Fincher &amp; Utting, 2002</xref>). Patterns are not intended to state obvious solutions to trivial problems or to cover every possible design decision, but to capture “big ideas” (<xref ref-type="bibr" rid="R184" id="243" class="deo:Reference">Winn &amp; Calder, 2002</xref>). A pattern should capture insights about the design that can inform even an experienced designer; explaining not only how a problem can be solved but also why a design choice is appropriate to a particular context. <xref ref-type="bibr" rid="R67" id="244" class="deo:Reference">Fincher (2000)</xref> reflects that identifying patterns in HCI, i.e. attributing positive qualities of an artefact to particular facets of the design, may be complicated by the high levels of complexity and context dependence in interaction. For example, certain designs (and patterns) may be appropriate in one culture, but not in another (<xref ref-type="bibr" rid="R89" id="245" class="deo:Reference">Hall, Lawson &amp; Minocha, 2003</xref>). Other design elements may be appropriate only in the context of a particular „genre‟. These problems are not unique to HCI, nor are they insurmountable. Alexander and<marker type="page" number="19"/><marker type="block"/> colleagues (<xref ref-type="bibr" rid="R7" id="249" class="deo:Reference">Alexander, 1979</xref>; <xref ref-type="bibr" rid="R102" id="250" class="deo:Reference">King, 1993</xref>) suggest that different cultures will develop and extend their own architectural pattern languages. <xref ref-type="bibr" rid="R89" id="251" class="deo:Reference">Hall et al. (2003)</xref> have suggested incorporating statements relating to cultural setting within the „context‟ of individual patterns. Walldius (2002) shows how patterns can be used to describe particular „genres‟ of film. <xref ref-type="bibr" rid="R172" id="252" class="deo:Reference">Van Duyne et al. (2003)</xref> use the idea of „site genre‟ as an organising principle within their web design pattern language. One element that is perhaps unique to interaction design patterns is the need to include the notion of temporality (<xref ref-type="bibr" rid="R16" id="253" class="deo:Reference">Barfield et al., 1994</xref>; <xref ref-type="bibr" rid="R27" id="254" class="deo:Reference">Borchers, 2001a</xref>). Unlike architecture, HCI deals with an artefact where time is significant and the context of and solutions to interaction problems are liable to be dynamic rather than static. A pattern must therefore be able to capture these temporal aspects. Tidwell‟s (1999) pattern, STEP - BY - STEP INSTRUCTIONS exemplifies this issue. The pattern addresses a context in which</region>
          <outsider class="DoCO:TextBox" type="footer" id="247" page="18" column="1">- 17 -</outsider>
          <outsider class="DoCO:TextBox" type="header" id="248" page="19" column="1">Published in Human Computer Interaction, 21(1), January 2006</outsider>
          <region class="DoCO:TextChunk" id="256" confidence="possible" page="19" column="1">“A user needs to perform a complex task, with limited time, knowledge, attention, or space. Alternatively, the nature of the task is step-by-step, and it’s meaningless to show all the action possibilities at once.” [ibid.] The solution suggested for the pattern is: “Walk the user through the task one step at a time, giving very clear instructions at each step. Use visual similarities in all the steps, e.g. typography and layout, to maintain a rhythm throughout the task; make each step a focal point, both visually and in the user’s “attention space.” If information is needed from the user, ask for it in simple terms and with brevity, by keeping it short, you can better maintain the user’s sense of flow through the whole step-by- step process.” [ibid.]</region>
          <region class="DoCO:TextChunk" id="265" page="19" column="1">The solution is illustrated by a line drawing as shown in <xref ref-type="fig" rid="F2" id="257" class="deo:Reference">Figure 2</xref>. <xref ref-type="fig" rid="F2" id="258" class="deo:Reference">FIGURE 2</xref> ABOUT HERE It is clear that Tidwell‟s pattern relies on an understanding of the diagram as a series of user interface states with navigation between them. The use of alternative media (such as video) has been suggested to illustrate interactive time-based solutions (<xref ref-type="bibr" rid="R25" id="259" class="deo:Reference">Borchers, 2000a</xref>) but the fundamental issue of abstracting true interaction rather than simply snapshots of appearance or behaviour remains. On the other hand, patterns should also embody a timeless quality, presenting a solution that is applicable regardless of particular platform or current technology. This is arguably a weakness in many current interaction design patterns, which are strongly based on a particular and current<marker type="page" number="20"/><marker type="block"/> user interface paradigm (graphical user interfaces for example). <xref ref-type="bibr" rid="R17" id="263" class="deo:Reference">Bayle et al. (1998)</xref> suggest that patterns that address interaction issues at a „high level‟ of abstraction may be timeless, but that patterns that are closer to the detail of interaction design perhaps necessarily reflect current paradigms. Tidwell‟s (1998, 1999a) Common Ground language includes examples of both types. G O B ACK TO A S AFE P LACE is equally applicable to desktop systems, mobile phones, personal digital assistants (PDAs) and aircraft flight control systems. It is likely to be relevant in any interactive system devised in the future, whereas S TACK OF W ORKING S URFACES very clearly reflects current window based interaction styles. The lack of variety of good examples and the immaturity of our design field as compared to architecture may lead to weaker examples being used as the basis of patterns in HCI (<xref ref-type="bibr" rid="R64" id="264" class="deo:Reference">Fincher, 2002</xref>). Many interaction design „patterns‟ can be criticized for identifying common rather than necessarily good practice. We shall return to the discussion of „good‟ practice in Section 7 where we discuss the role of values in patterns.</region>
          <outsider class="DoCO:TextBox" type="footer" id="261" page="19" column="1">- 18 -</outsider>
          <outsider class="DoCO:TextBox" type="header" id="262" page="20" column="1">Published in Human Computer Interaction, 21(1), January 2006</outsider>
        </section>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="266" page="20" column="1">4.3. The presentation of patterns</h2>
          <region class="DoCO:TextChunk" id="298" page="20" column="1"> <xref ref-type="bibr" rid="R61" id="267" class="deo:Reference">Fincher (1999)</xref> indicates that identifying good practice is the “least part of the achievement” in developing patterns. <xref ref-type="bibr" rid="R17" id="268" class="deo:Reference">Bayle et al. (1998)</xref> note that it is relatively easy to observe phenomena in the world but much more difficult to use these observations to develop and explicate good patterns. In order to be useful, patterns must present an abstraction of good practice at a meaningful level of granularity. Formulations that are too abstract will be impractical in real design use; those that are too specific will be difficult to re-use in new scenarios. <xref ref-type="bibr" rid="R64" id="269" class="deo:Reference">Fincher and Utting (2002)</xref> compare abstraction in patterns to good teaching practice: it should facilitate understanding of the principles embodied in specific examples, to identify what is important in the examples. <xref ref-type="bibr" rid="R184" id="270" class="deo:Reference">Winn and Calder (2002)</xref> suggest that patterns should present knowledge at graduating levels of abstraction.The focus on design patterns as a distinct form for design guidance has led to debates about the content and structure of patterns. In software engineering, a range of alternative formats appear in <xref ref-type="bibr" rid="R18" id="271" class="deo:Reference">Beck and Cunningham (1987)</xref>, <xref ref-type="bibr" rid="R41" id="272" class="deo:Reference">Coad (1992)</xref>, <xref ref-type="bibr" rid="R19" id="273" class="deo:Reference">Beck (1994)</xref>, <xref ref-type="bibr" rid="R19" id="274" class="deo:Reference">Beck and Johnson (1994)</xref>, <xref ref-type="bibr" rid="R75" id="275" class="deo:Reference">Gamma et al. (1995)</xref> and <xref ref-type="bibr" rid="R70" id="276" class="deo:Reference">Fowler (1997)</xref>. <xref ref-type="bibr" rid="R123" id="277" class="deo:Reference">Meszaros and Doble (1998)</xref> present a pattern language for pattern writing, suggesting a degree of stabilization around certain formats. <xref ref-type="bibr" rid="R158" id="278" class="deo:Reference">Sharp, Manns and Eckstein (2003)</xref> report on the way that the format of patterns to support computer science education had to be modified to better suit the needs of their target audience.<marker type="page" number="21"/><marker type="block"/> In HCI, alternative formats have been followed by <xref ref-type="bibr" rid="R168" id="282" class="deo:Reference">Tidwell (1998, 1999a)</xref>, <xref ref-type="bibr" rid="R27" id="283" class="deo:Reference">Borchers (2001a)</xref>, van <xref ref-type="bibr" rid="R174" id="284" class="deo:Reference">Welie, van der Veer and Eliëns (2000)</xref>, <xref ref-type="bibr" rid="R116" id="285" class="deo:Reference">Martin et al. (2001, 2002)</xref>, <xref ref-type="bibr" rid="R172" id="286" class="deo:Reference">Van Duyne et al. (2003)</xref> and <xref ref-type="bibr" rid="R170" id="287" class="deo:Reference">Tidwell (2003)</xref>. Some of these (e.g. <xref ref-type="bibr" rid="R27" id="288" class="deo:Reference">Borchers, 2001a</xref>) reflect the layout and typesetting of A Pattern Language, for example, using bold fonts to highlight the key sections of the „problem‟ and „solution‟ and separating the text that describes the pattern‟s position in the language from the body of the pattern by using three diamonds. Others (e.g. <xref ref-type="bibr" rid="R167" id="289" class="deo:Reference">Tidwell, 1998</xref>, 1999a) reflect the style of <xref ref-type="bibr" rid="R75" id="290" class="deo:Reference">Gamma et al. (1995)</xref> with a series of specific headings: in Tidwell‟s case the headings used are: Examples, Context, Problem, Forces, Solution, Resulting context and Notes. Still others represent departures from previous forms (e.g. <xref ref-type="bibr" rid="R170" id="291" class="deo:Reference">Tidwell, 2003</xref>; <xref ref-type="bibr" rid="R115" id="292" class="deo:Reference">Martin et al. 2001</xref>, 2002; van <xref ref-type="bibr" rid="R172" id="293" class="deo:Reference">Duyne et al., 2003</xref>). Representative examples of interaction design pattern forms have been collected in the Pattern Gallery (<xref ref-type="bibr" rid="R63" id="294" class="deo:Reference">Fincher, 2000b</xref>). Several attempts have been made to identify common elements and to formalise these in some way, for example <xref ref-type="bibr" rid="R86" id="295" class="deo:Reference">Griffiths et al. (1999)</xref> and the pattern language markup language PLML developed at the CHI‟2003 workshop (<xref ref-type="bibr" rid="R65" id="296" class="deo:Reference">Fincher, 2003</xref>). The DTD for PLML is given in <xref ref-type="fig" rid="F3" id="297" class="deo:Reference">Figure 3</xref> and several collections have now been made PLML compliant, including van Welie (2002-2005).</region>
          <outsider class="DoCO:TextBox" type="footer" id="280" page="20" column="1">- 19 -</outsider>
          <outsider class="DoCO:TextBox" type="header" id="281" page="21" column="1">Published in Human Computer Interaction, 21(1), January 2006</outsider>
          <region class="DoCO:TextChunk" id="300" confidence="possible" page="21" column="1">Dearden et al. (2002 a, b) and <xref ref-type="bibr" rid="R69" id="299" class="deo:Reference">Finlay et al. (2002)</xref> highlight the degree to which different formats, including abbreviated patterns, affect the use of patterns in practical design settings.</region>
        </section>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="301" page="21" column="1">4.4. Patterns, Guidelines and Claims</h2>
          <region class="DoCO:TextChunk" id="303" confidence="possible" page="21" column="1">Advocates of patterns in HCI have often sought to demonstrate clear distinctions between patterns and other forms of design guidance. For example, <xref ref-type="bibr" rid="R27" id="302" class="deo:Reference">Borchers (2001a)</xref> suggests that patterns improve upon style guides, guidelines and standards: „... through their structured inclusion of existing examples and insightful explanation not only of the solution, but also of the problem context in which this solution can be used, and the structured way in which patterns are integrated into the hierarchy of the language ...‟ (ibid. p60).</region>
          <outsider class="DoCO:TextBox" type="footer" id="304" page="21" column="1">- 20 -</outsider>
          <outsider class="DoCO:TextBox" type="header" id="305" page="22" column="1">Published in Human Computer Interaction, 21(1), January 2006</outsider>
          <region class="DoCO:TextChunk" id="307" confidence="possible" page="22" column="1"> <xref ref-type="fig" rid="F3" id="306" class="deo:Reference">FIGURE 3</xref> ABOUT HERE</region>
          <region class="DoCO:TextChunk" id="318" page="22" column="1">Patterns should also be compared to other efforts to re-use design knowledge such as „claims‟ 3 (<xref ref-type="bibr" rid="R161" id="308" class="deo:Reference">Sutcliffe &amp; Carroll, 1999</xref>; Sutcliffe, 2001). To examine such arguments, we need to clarify both the forms of design guidance being discussed, and the contrasts identified. The following common types of design guidance can be distinguished: 1. style guides, which are specific to an environment or product grouping (e.g. <xref ref-type="bibr" rid="R79" id="309" class="deo:Reference">GNOME project, 2003</xref>; <xref ref-type="bibr" rid="R124" id="310" class="deo:Reference">Microsoft Corporation, 2003</xref>); 2. general guidelines applicable to a range of systems (e.g. <xref ref-type="bibr" rid="R159" id="311" class="deo:Reference">Smith &amp; Mosier, 1986</xref>); 3. standards, which may resemble guidelines, but carry some formal authority (e.g. ISO 9241, International Standards Organisation [ISO], no date); 4. claims, which incorporate both theoretical argumentation and specific illustrative examples (<xref ref-type="bibr" rid="R161" id="312" class="deo:Reference">Sutcliffe &amp; Carroll, 1999</xref>; Sutcliffe, 2001); 5. heuristics, which are general statements of desirable properties (e.g. <xref ref-type="bibr" rid="R130" id="313" class="deo:Reference">Nielsen, 1994</xref>). A number of different aspects of patterns and pattern languages are suggested as distinctive. The major contrasts noted by van <xref ref-type="bibr" rid="R174" id="314" class="deo:Reference">Welie et al. (2000)</xref>, <xref ref-type="bibr" rid="R27" id="315" class="deo:Reference">Borchers (2001a)</xref>, <xref ref-type="bibr" rid="R62" id="316" class="deo:Reference">Fincher (2000a)</xref>, and <xref ref-type="bibr" rid="R32" id="317" class="deo:Reference">Brighton Usability Group (2003)</xref> are: 1. the level of abstraction at which guidance is offered; 2. the grounding of patterns in existing design examples, or „capture of practice‟; 3. the statement of the problem addressed by a pattern; 4. the discussion of the context in which a pattern should be applied; 5. the provision of a supporting rationale for the pattern; 6. the organisation of patterns into pattern languages; and 7. the embedding of ethics or values in the selection and organisation of patterns. To simplify discussion we note that standards are not a distinct form of guidance, but are distinguished by their authority. Indeed, the most commonly used standard in HCI (ISO 9241) includes many sections presented as guidelines (referred to as „principles‟ or „recommendations‟</region>
          <region class="DoCO:TextChunk" id="322" confidence="possible" page="22" column="1">3 <ext-link ext-link-type="uri" href="http://www.co.umist.ac.uk/hci_design/appc.htm" id="319">http://www.co.umist.ac.uk/hci_design/appc.htm</ext-link> offers one approach to presenting claims. <ext-link ext-link-type="uri" href="http://ucs.ist.psu.edu" id="320">http://ucs.ist.psu.edu</ext-link> which can be searched for examples of claims in the context of various projects (e.g. <ext-link ext-link-type="uri" href="http://ucs.ist.psu.edu/dbitemview.asp?id=43&amp;section=" id="321">http://ucs.ist.psu.edu/dbitemview.asp?id=43&amp;section=</ext-link>\Garden- com\Activity+Design\Rationale)</region>
          <outsider class="DoCO:TextBox" type="footer" id="323" page="22" column="1">- 21 -</outsider>
          <outsider class="DoCO:TextBox" type="header" id="324" page="23" column="1">Published in Human Computer Interaction, 21(1), January 2006</outsider>
          <region class="DoCO:TextChunk" id="340" page="23" column="1">within the standard). This leaves four distinct forms of guidance. Hence, we can identify twenty- eight (4 x 7) distinct assertions. For example „interaction design patterns differ from heuristics because patterns are grounded in concrete examples‟. Examining these assertions it is clear that patterns differ from both style guides (because patterns aim to generalise away from particular implementation environments and from fine detail of user-interface rendering, and patterns discuss the context in which they are applicable), and from heuristics (because patterns identify particular solutions, the context of application, and are supported by a rationale). However, it is more difficult to distinguish patterns from guidelines (e.g. <xref ref-type="bibr" rid="R159" id="325" class="deo:Reference">Smith &amp; Mosier, 1986</xref>; ISO 9241) and claims (<xref ref-type="bibr" rid="R161" id="326" class="deo:Reference">Sutcliffe &amp; Carroll, 1999</xref>; Sutcliffe, 2001). The following similarities and contrasts can be identified: 1. Level of abstraction: Patterns, guidelines and claims can all be stated at various levels of abstraction. Some patterns tackle issues at a similar level of detail to typical examples of guidelines, e.g. T HE S HIELD (van <xref ref-type="bibr" rid="R174" id="327" class="deo:Reference">Welie et al., 2000</xref>) is comparable with ISO 9241-10 principle 3.3. However, the organisation of guidelines around particular styles of interaction (e.g. „data entry‟, „form filling‟ or „menu selection‟) may lead towards guidelines dealing with fine details of interaction, e.g. the arrangement of options within menus. In contrast, interaction design patterns can address larger scale issues over extended interactions. For examples, see S TEP - BY -S TEP I NSTRUCTIONS (<xref ref-type="bibr" rid="R167" id="328" class="deo:Reference">Tidwell, 1998</xref>, 1999a), E ASY H ANDOVER (<xref ref-type="bibr" rid="R27" id="329" class="deo:Reference">Borchers, 2001a</xref>), or R ECOMMENDATION C OMMUNITY (van <xref ref-type="bibr" rid="R172" id="330" class="deo:Reference">Duyne et al., 2003</xref>). Claims can also describe such larger scale design issues. 2. Use of examples: Patterns, guidelines and claims all include examples, but whereas examples in guidelines are usually phrased in general terms, e.g. „imagine an application that ...‟ (<xref ref-type="bibr" rid="R159" id="331" class="deo:Reference">Smith &amp; Mosier, 1986</xref>), patterns and claims refer to specific implemented systems. There is a slight difference between patterns and claims in the use of examples. Patterns emphasise their grounding in multiple examples of successful designs, whereas claims emphasise grounding in theory. A theory „motivates‟ a claim (Sutcliffe &amp; Carroll, 1998), and the claim „explains‟ the design of a single artefact. <xref ref-type="bibr" rid="R162" id="332" class="deo:Reference">Sutcliffe (2000)</xref> suggests that a pattern may be a „generic design for‟ a claim (p. 205). 3. Statement of the problem: Neither guidelines nor claims include a specific problem that they attempt to address.<marker type="page" number="24"/><marker type="block"/> 4. Context: Some guidelines include „exceptions‟ to identify situations where they should not be applied, but this is not required in all cases. Claims include a specific scenario in which a particular artefact is used, which indicates a „context‟ in which the claim appears valid. In contrast, patterns aim to characterise a set of possible contexts in which the particular design advice should be followed. Hence the „context‟ in a pattern may generalize over the „context‟ for individual claims. 5. Supporting rationale: Guidelines, claims and patterns all provide some supporting rationale based in both primary research and other literature. The presentation of that rationale is more concise in Smith and Mosier‟s guidelines than is the case with typical patterns (e.g. <xref ref-type="bibr" rid="R27" id="336" class="deo:Reference">Borchers, 2001a</xref>; van <xref ref-type="bibr" rid="R174" id="337" class="deo:Reference">Welie et al., 2000</xref>). ISO 9241 does not include the references to the literature within the individual guidelines, instead providing a general bibliography. 6. Connections between elements: Cross-referencing is common to guidelines, claims and patterns. However, while guidelines include occasional cross-referencing, both patterns and claims emphasise organisation and interdependence. We return to this issue in the next section. 7. Embedding values: At one level, guidelines, claims and patterns all embody design values. However in guidelines and claims these values are implicit, patterns aim to make these explicit (<xref ref-type="bibr" rid="R17" id="338" class="deo:Reference">Bayle, 1998</xref>), both in the detail of individual patterns and in the way that values inform pattern mining (<xref ref-type="bibr" rid="R64" id="339" class="deo:Reference">Fincher &amp; Utting, 2002</xref>). In summary, patterns are potentially more general than existing examples of guidelines, use more specific examples, include the statement of a „problem‟ that they address, deliberately scope their context of application, and explicitly reflect particular design values. Patterns can be distinguished from claims by the inclusion of a problem statement, the requirement for multiple examples, the treatment of context, and the recognition that a pattern explicitly reflects selected design values. This comparison suggests that claims analysis might be a fruitful approach to the identification of patterns, but there may be a tension between the „theoretical and empirical‟ grounding of claims, and the „value led‟ approach of patterns.</region>
          <outsider class="DoCO:TextBox" type="footer" id="334" page="23" column="1">- 22 -</outsider>
          <outsider class="DoCO:TextBox" type="header" id="335" page="24" column="1">Published in Human Computer Interaction, 21(1), January 2006</outsider>
        </section>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="341" page="24" column="1">5. ISSUE 2: WHAT IS A PATTERN LANGUAGE?</h1>
        <region class="DoCO:TextChunk" id="342" confidence="possible" page="24" column="1">Alexander‟s original work was not merely about individual patterns, but was explicitly concerned with the concept of pattern languages. Taken in isolation, patterns are, at best,</region>
        <outsider class="DoCO:TextBox" type="footer" id="343" page="24" column="1">- 23 -</outsider>
        <outsider class="DoCO:TextBox" type="header" id="344" page="25" column="1">Published in Human Computer Interaction, 21(1), January 2006</outsider>
        <region class="DoCO:TextChunk" id="346" confidence="possible" page="25" column="1">“unrelated good ideas” (<xref ref-type="bibr" rid="R6" id="345" class="deo:Reference">Alexander, 1996</xref>). However combined in a language, patterns provide coherent support for design generation. In this section we examine what this means.</region>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="347" page="25" column="1">5.1. Pattern languages and pattern catalogues</h2>
          <region class="DoCO:TextChunk" id="356" page="25" column="1">There are two forms of organisation readily evident in A Pattern Language. On the one hand, the patterns are collected into sets according to levels of physical scale, e.g. the first section of the language addresses the size and distribution of towns and cities, while later sections address smaller units such as neighbourhoods, clusters of houses and individual rooms. In addition, the patterns form a network, where each pattern contains backward references to patterns that set its context, i.e. patterns that have already been used or selected, and forward references to patterns that can be used to help realise the current pattern. For example, the S TREET C AFÉ pattern begins by discussing patterns such as I DENTIFIABLE N EIGHBOURHOOD , A CTIVITY N ODES , and S MALL P UBLIC S QUARES that provide contexts to which a street café will contribute and ends by directing the reader to patterns that help realise the street café such as creating an O PENING TO THE S TREET , making the terrace double as A P LACE TO W AIT , and using D IFFERENT C HAIRS . This directed network structure provides for Alexander‟s analogy with the production rules of a grammar (<xref ref-type="bibr" rid="R7" id="348" class="deo:Reference">Alexander, 1979</xref>, p187). In contrast, <xref ref-type="bibr" rid="R75" id="349" class="deo:Reference">Gamma et al. (1995)</xref> describe their efforts as a catalogue of patterns that have some interrelationships, but do not form a pattern language in Alexander‟s sense. Gamma et al. classify their patterns by their area of concern: creation of objects, structuring of software systems or dynamic behaviour of systems. Other authors who have used classification schemes to organise pattern collections include <xref ref-type="bibr" rid="R101" id="350" class="deo:Reference">Kendall, Murali Krishna, Pathak and Suresh (1998)</xref>, <xref ref-type="bibr" rid="R148" id="351" class="deo:Reference">Roth (2002)</xref>, <xref ref-type="bibr" rid="R111" id="352" class="deo:Reference">Mahemoff and Johnston (1998)</xref>, <xref ref-type="bibr" rid="R95" id="353" class="deo:Reference">Hussey and Mahemoff (1999)</xref>. One of the early OOPSLA workshops in which patterns were a major topic was concerned with creating a „handbook for software architects‟ (<xref ref-type="bibr" rid="R12" id="354" class="deo:Reference">Anderson,1993</xref>). <xref ref-type="bibr" rid="R47" id="355" class="deo:Reference">Coplien and Schmidt (1995)</xref>, discuss the distinction between pattern languages and catalogues, and suggest that</region>
          <region class="DoCO:TextChunk" id="358" confidence="possible" page="25" column="1">„it is likely that catalogs of patterns ... will provide the most payoff for pattern based software development over the next few years. It turns out that comprehensive pattern languages ... are challenging to produce ...‟ [ibid. p322]. <xref ref-type="bibr" rid="R75" id="357" class="deo:Reference">Gamma et al. (1995)</xref> express the hope that as more patterns are collected their catalogue might evolve and be organised into a language.</region>
          <outsider class="DoCO:TextBox" type="footer" id="359" page="25" column="1">- 24 -</outsider>
          <outsider class="DoCO:TextBox" type="header" id="360" page="26" column="1">Published in Human Computer Interaction, 21(1), January 2006</outsider>
          <region class="DoCO:TextChunk" id="369" page="26" column="1">Some authors in software engineering have applied the concepts of refinement and specialisation to examine relationships between patterns. For example, see <xref ref-type="bibr" rid="R188" id="361" class="deo:Reference">Yacoub and Ammar (1998)</xref>, Mikkonnen (1998), <xref ref-type="bibr" rid="R4" id="362" class="deo:Reference">Agerbo and Cornils (1998)</xref> and <xref ref-type="bibr" rid="R163" id="363" class="deo:Reference">Tahara, Ohsuga and Honiden (1999)</xref>. A similar approach for interaction design patterns is suggested by <xref ref-type="bibr" rid="R128" id="364" class="deo:Reference">Mullet (2002)</xref>, who proposes three possible relationships between patterns, namely: derivation, where one pattern inherits elements from a higher level pattern; aggregation, where one pattern is contained within another pattern; and association, where one pattern uses another. <xref ref-type="bibr" rid="R172" id="365" class="deo:Reference">Van Welie and van de Veer (2003)</xref> suggest a similar set of connections between patterns. A number of pattern collections have been presented using a layered approach, with sets of patterns addressing different „levels‟ of a design problem. For example, <xref ref-type="bibr" rid="R163" id="366" class="deo:Reference">Tahara et al. (1999)</xref>, provide patterns addressing macro-architectural, micro-architectural, and finally object levels for the design of agent systems. <xref ref-type="bibr" rid="R135" id="367" class="deo:Reference">Paternò (2000)</xref> suggests „task patterns‟ described in the ConcurTaskTrees notation, which are in turn linked to software „architectural patterns‟ that are described by configurations of re-usable interaction components called „interactors‟. <xref ref-type="bibr" rid="R83" id="368" class="deo:Reference">Granlund, Lafreniere and Carr (2001)</xref> suggest interaction design patterns at the levels of „business domain‟, „business process‟, „task‟, „conceptual design‟ and „design‟.</region>
        </section>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="370" page="26" column="1">5.2. The organisation of pattern languages</h2>
          <region class="DoCO:TextChunk" id="402" page="26" column="1">While the majority of work in the PLoP conferences has been in the form of individual patterns or pattern collections, a number of networked languages have been presented. For examples, see <xref ref-type="bibr" rid="R97" id="371" class="deo:Reference">Johnson (1992)</xref>, <xref ref-type="bibr" rid="R143" id="372" class="deo:Reference">Richardson (2001)</xref>, <xref ref-type="bibr" rid="R90" id="373" class="deo:Reference">Hanmer (2000)</xref>, <xref ref-type="bibr" rid="R34" id="374" class="deo:Reference">Buschmann (2001)</xref> and <xref ref-type="bibr" rid="R55" id="375" class="deo:Reference">Dyson and Anderson (1997)</xref>. Networked pattern languages for interface software include: <xref ref-type="bibr" rid="R144" id="376" class="deo:Reference">Riehle and Zűllighoven (1995)</xref>, <xref ref-type="bibr" rid="R31" id="377" class="deo:Reference">Bradac and Fletcher (1997)</xref>, <xref ref-type="bibr" rid="R171" id="378" class="deo:Reference">Towell (1998)</xref>, <xref ref-type="bibr" rid="R43" id="379" class="deo:Reference">Coldewey (1998)</xref>, <xref ref-type="bibr" rid="R99" id="380" class="deo:Reference">Judkins and Gill (2000)</xref> <xref ref-type="bibr" rid="R114" id="381" class="deo:Reference">Marick (2000)</xref> and <xref ref-type="bibr" rid="R22" id="382" class="deo:Reference">Berczuk, Appleton and Cabrera (2000)</xref>. Indeed, Beck and Cunningham‟s (1987) paper, which is generally accepted as the first application of patterns to software engineering, is a networked pattern language for the design of window-based applications. <xref ref-type="bibr" rid="R143" id="383" class="deo:Reference">Richardson (2001)</xref> and <xref ref-type="bibr" rid="R90" id="384" class="deo:Reference">Hanmer (2000)</xref> use an „enables‟ relationship between patterns, where later patterns enable the realisation of earlier patterns. <xref ref-type="bibr" rid="R34" id="385" class="deo:Reference">Buschmann (2001)</xref> selects the term „completes‟ to express the relationship between patterns. This relationship in which one pattern „completes‟ another at a higher scale is evident in Alexander‟s writing, particularly in A New Theory of Urban Design (<xref ref-type="bibr" rid="R10" id="386" class="deo:Reference">Alexander et al., 1987</xref>). Tidwell‟s (1998, 1999a) interaction design patterns are networked in a similar way. <xref ref-type="bibr" rid="R27" id="387" class="deo:Reference">Borchers (2001a)</xref> provides three examples of<marker type="page" number="27"/><marker type="block"/> networked pattern languages for: creating blues music, interaction design for multimedia exhibits and interface software design for multimedia exhibits. <xref ref-type="bibr" rid="R172" id="391" class="deo:Reference">Van Duyne et al. (2003)</xref> provide a networked „language‟ for the design of websites. Fincher and others have drawn attention to the issue of finding a suitable „organising principle‟ for pattern languages in HCI (<xref ref-type="bibr" rid="R67" id="392" class="deo:Reference">Fincher &amp; Windsor, 2000</xref>; <xref ref-type="bibr" rid="R64" id="393" class="deo:Reference">Fincher &amp; Utting, 2002</xref>; <xref ref-type="bibr" rid="R64" id="394" class="deo:Reference">Fincher, 2002</xref>). <xref ref-type="bibr" rid="R67" id="395" class="deo:Reference">Fincher and Windsor (2000)</xref> suggest four requirements for an organising principle for a pattern language: it should provide a taxonomy to enable the user to find patterns; it should allow users to find related or proximal patterns; it should allow the user to evaluate the problem from different standpoints; and it should be generative, allowing users to develop new solutions. The two stage organising principle that they propose focuses on the activities of design and the physical characteristics of interface elements rather than the activities of use. This focus is similar to that of other collections such as <xref ref-type="bibr" rid="R168" id="396" class="deo:Reference">Tidwell (1998, 1999a)</xref>. <xref ref-type="bibr" rid="R172" id="397" class="deo:Reference">Van Duyne et al. (2003)</xref> group their web-design patterns to address different design aspects, beginning with „site genre‟, then examining issues such as „writing and managing content‟, and „making site search fast and relevant‟. <xref ref-type="bibr" rid="R172" id="398" class="deo:Reference">Van Welie and van de Veer (2003)</xref> propose a layered structure with patterns organised by: posture, akin to Van Duyne et al.‟s genres; experience, relating to the particular expectation of the user in approaching the system; task, relating to sequences of interactions; and activity, relating to low level actions. The layers provide a mechanism for grouping the patterns but it is not clear how the relationships between the patterns are determined by it. These structuring proposals all provide a way of taxonomising a pattern collection, but they do not actively support the process of identifying new patterns. The organisation is not predictive. <xref ref-type="bibr" rid="R64" id="399" class="deo:Reference">Fincher (2002)</xref> contrasts this with other domains, notably chemistry, where the periodic table facilitated the discovery of previously unknown elements, because the organising structure illuminated “gaps” where these could fit. Fincher argues that the organisation of interaction design patterns by physical elements or common uses is arbitrary, whereas Alexander‟s patterns are organised by the “particular quality of the relationship between physical and psychosocial space” (ibid. p.3). The former could be characterised as a structure; while the latter includes a clear structuring principle. <xref ref-type="bibr" rid="R64" id="400" class="deo:Reference">Fincher (2002)</xref> suggests that Cognitive Dimensions (<xref ref-type="bibr" rid="R24" id="401" class="deo:Reference">Green &amp; Blackwell, 2003</xref>) might be a candidate for a structuring principle for interaction design patterns.</region>
          <outsider class="DoCO:TextBox" type="footer" id="389" page="26" column="1">- 25 -</outsider>
          <outsider class="DoCO:TextBox" type="header" id="390" page="27" column="1">Published in Human Computer Interaction, 21(1), January 2006</outsider>
        </section>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="403" page="27" column="1">5.3. Notions of generativity</h2>
          <outsider class="DoCO:TextBox" type="footer" id="404" page="27" column="1">- 26 -</outsider>
          <outsider class="DoCO:TextBox" type="header" id="405" page="28" column="1">Published in Human Computer Interaction, 21(1), January 2006</outsider>
          <region class="DoCO:TextChunk" id="436" page="28" column="1">A key concept in distinguishing pattern collections from pattern languages is the idea of generativity. In The Timeless way of Building, Alexander explicitly invokes comparison with generative grammars ( <xref ref-type="bibr" rid="R7" id="406" class="deo:Reference">Alexander, 1979</xref>, p 187). One reading of the organisation of A Pattern Language (<xref ref-type="bibr" rid="R9" id="407" class="deo:Reference">Alexander et al., 1977</xref>) suggests the idea of generating designs by implicit sequencing of decisions, derived by traversing the network of links between the individual patterns. This understanding is consistent with Alexander‟s description of case-studies in The Oregon Experiment and The Production of Houses (<xref ref-type="bibr" rid="R11" id="408" class="deo:Reference">Alexander et al., 1975</xref>, 1985). In software engineering, a number of authors have sought to emulate this idea of a generative language. Beck and Cunningham‟s (1987) suggest that a pattern language helps designers to ask and answer the right question at the right time, i.e. the language can be used to sequence design decisions. <xref ref-type="bibr" rid="R19" id="409" class="deo:Reference">Beck (1994)</xref>, <xref ref-type="bibr" rid="R106" id="410" class="deo:Reference">Lea (1994)</xref> and <xref ref-type="bibr" rid="R164" id="411" class="deo:Reference">Tahara, Toshiba, Ohsuga and Honiden (2001)</xref> also suggest using the language for sequencing. The idea of patterns being connected by an enabling relationship, where later patterns enable the realization of earlier patterns is apparent in pattern languages in both software engineering and HCI (for examples see: <xref ref-type="bibr" rid="R1" id="412" class="deo:Reference">Aarsten, Brugali &amp; Menga, 1996</xref>; <xref ref-type="bibr" rid="R55" id="413" class="deo:Reference">Dyson &amp; Anderson, 1997</xref>). The notion of an „enables‟ or „completes‟ relationship between patterns (<xref ref-type="bibr" rid="R143" id="414" class="deo:Reference">Richardson, 2001</xref>; <xref ref-type="bibr" rid="R90" id="415" class="deo:Reference">Hanmer, 2000</xref>; <xref ref-type="bibr" rid="R34" id="416" class="deo:Reference">Buschmann, 2001</xref>) is consistent with this reading of „generative‟, in the sense that a higher level pattern implies the use of the lower level patterns that enable it. In HCI <xref ref-type="bibr" rid="R27" id="417" class="deo:Reference">Borchers (2001a)</xref> suggests this notion of generative sequencing of design decisions, which is also adopted by <xref ref-type="bibr" rid="R69" id="418" class="deo:Reference">Finlay et al. (2002)</xref>. <xref ref-type="bibr" rid="R67" id="419" class="deo:Reference">Fincher and Windsor (2000)</xref> also reflect this by incorporating design process into their organising structure for pattern languages. However, this is not the only way that the term „generative‟ has been discussed in software engineering and HCI. <xref ref-type="bibr" rid="R72" id="420" class="deo:Reference">Gabriel (1996a)</xref> suggests that individual patterns can be considered „generative‟ because they give indirect advice about what to do to achieve a desirable outcome, rather than simply stating that the outcome is desirable. He gives the example of telling himself to „follow through‟ when hitting a tennis ball. This advice is indirect, it does not centre on the outcome of propelling the ball at speed, instead it indicates a specific practical action that will achieve the desired result. <xref ref-type="bibr" rid="R106" id="421" class="deo:Reference">Lea (1994)</xref> also emphasises this notion of generativity, as do <xref ref-type="bibr" rid="R111" id="422" class="deo:Reference">Mahemoff and Johnston (1998)</xref>. <xref ref-type="bibr" rid="R19" id="423" class="deo:Reference">Beck and Johnson (1994)</xref> suggest using patterns to construct a more complete design rationale for a whole system, analogous to a mathematical proof. In this analogy, patterns correspond to axioms (or theorems) of the design space. This approach is similar to Thimbleby‟s (1990)<marker type="page" number="29"/><marker type="block"/> concept of „Generative Usability Engineering Principles‟, which specify constraints on permissible designs to ensure that resulting designs exhibit desirable properties. This may also be consistent with Alexander‟s analogy between pattern languages and Chomsky‟s grammars and with Alexander et al.‟s (1987) approach in „A New Theory of Urban Design‟, and in „Notes on the Synthesis of Form‟ (<xref ref-type="bibr" rid="R5" id="427" class="deo:Reference">Alexander, 1964</xref>), both of which can be interpreted as forms of design by constraint solving. Another concept of „generative‟ discussed in HCI, is the idea of generating an option space of alternative designs from which the design team should select (<xref ref-type="bibr" rid="R105" id="428" class="deo:Reference">Lane, 1990</xref>; MacLean et al., 1991; <xref ref-type="bibr" rid="R50" id="429" class="deo:Reference">Dearden &amp; Harrison, 1997</xref>). Some pattern collections offer the reader a choice of alternative (incompatible) solutions to a design problem, from which one must be selected, based on specified attributes of the domain. For examples in software engineering see <xref ref-type="bibr" rid="R120" id="430" class="deo:Reference">McKenney (1996)</xref>, <xref ref-type="bibr" rid="R55" id="431" class="deo:Reference">Dyson and Anderson (1997)</xref>, <xref ref-type="bibr" rid="R149" id="432" class="deo:Reference">Sandu (2001)</xref>, <xref ref-type="bibr" rid="R164" id="433" class="deo:Reference">Tahara et al. (1999, 2001)</xref> <xref ref-type="bibr" rid="R112" id="434" class="deo:Reference">Mai and de Champlain (2001)</xref>, <xref ref-type="bibr" rid="R160" id="435" class="deo:Reference">Souza, Matwin and Japkowicz (2002)</xref>. In HCI an example is Tidwell‟s (1998, 1999a) alternative patterns T ILED W ORKING S URFACE and S TACK OF W ORKING S URFACES .</region>
          <outsider class="DoCO:TextBox" type="footer" id="425" page="28" column="1">- 27 -</outsider>
          <outsider class="DoCO:TextBox" type="header" id="426" page="29" column="1">Published in Human Computer Interaction, 21(1), January 2006</outsider>
        </section>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="437" page="29" column="1">6. ISSUE 3: HOW ARE PATTERNS AND PATTERN LANGUAGES USED?</h1>
        <region class="DoCO:TextChunk" id="453" page="29" column="1">Alexander and colleagues provide four books in which they describe various experiments applying pattern-based design ( <xref ref-type="bibr" rid="R11" id="438" class="deo:Reference">Alexander et al., 1975</xref>; <xref ref-type="bibr" rid="R8" id="439" class="deo:Reference">Alexander et al.,1985</xref>; <xref ref-type="bibr" rid="R10" id="440" class="deo:Reference">Alexander, 1982; Alexander et al.,1987</xref>). In the field of software engineering, although many patterns, pattern collections and pattern languages have been published, there has been comparatively little discussion of the practical aspects of using patterns. <xref ref-type="bibr" rid="R21" id="441" class="deo:Reference">Beck et al. (1996)</xref> reports on a panel discussion comparing experiences between various software organisations and <xref ref-type="bibr" rid="R71" id="442" class="deo:Reference">Fraser, Beck, Booch, Johnson and Opdyke (1997)</xref> debate whether frameworks and patterns actually reduce design costs. We have not found any published details of observational or empirical studies of software developers using patterns in practice. Similarly, in HCI, there has been relatively little written about the practical details of using patterns in design projects (van <xref ref-type="bibr" rid="R174" id="443" class="deo:Reference">Welie et al. 2000</xref>). <xref ref-type="bibr" rid="R27" id="444" class="deo:Reference">Borchers (2001a)</xref> discusses how patterns might be applied at different stages of Nielsen‟s (1993) usability engineering lifecycle, and reports that patterns were used by various design teams in developing musical exhibits, but does not discuss precise details of the design activity. <xref ref-type="bibr" rid="R67" id="445" class="deo:Reference">Windsor (2000)</xref> describes using patterns to<marker type="page" number="30"/><marker type="block"/> capture design rationale within specific projects. The Participatory Patterns Project (<xref ref-type="bibr" rid="R69" id="449" class="deo:Reference">Dearden et al. 2002</xref> a, b; <xref ref-type="bibr" rid="R69" id="450" class="deo:Reference">Finlay et al. 2002</xref>) have reported on simulated design exercises supported by patterns. <xref ref-type="bibr" rid="R29" id="451" class="deo:Reference">Borchers (2002)</xref> reports on the use of patterns for teaching interaction design. <xref ref-type="bibr" rid="R39" id="452" class="deo:Reference">Chung et al. (2004)</xref> describe an empirical evaluation of the use of patterns for ubiquitous computing, which they (and we) believe to be the first controlled empirical study of the use of patterns with designers. In this section we consider these proposed uses of interaction design patterns in more detail.</region>
        <outsider class="DoCO:TextBox" type="footer" id="447" page="29" column="1">- 28 -</outsider>
        <outsider class="DoCO:TextBox" type="header" id="448" page="30" column="1">Published in Human Computer Interaction, 21(1), January 2006</outsider>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="454" page="30" column="1">6.1. Patterns for participatory design</h2>
          <region class="DoCO:TextChunk" id="463" page="30" column="1">Alexander argues that user participation in design is essential to successful building: “... it is virtually impossible to get a building that is well adapted to these needs if the people who are the actual users do not design it.” (<xref ref-type="bibr" rid="R11" id="455" class="deo:Reference">Alexander et al., 1975</xref>, p.42). His pattern language was intended to enable users to actively and directly design their own living and working spaces, in part by providing a common language with which they could make proposals and discuss ideas with an „architect-builder‟. An important practical element of this usage is the meaningful naming of patterns: in Alexander‟s language pattern names (without detail) are sufficient to facilitate this discussion. A similar emphasis on the need to develop a shared language is apparent in the participatory tradition in HCI (<xref ref-type="bibr" rid="R56" id="456" class="deo:Reference">Ehn &amp; Sjőgren, 1991</xref>; <xref ref-type="bibr" rid="R56" id="457" class="deo:Reference">Ehn &amp; Kyng, 1991</xref>; O‟Neill, 1998). <xref ref-type="bibr" rid="R102" id="458" class="deo:Reference">King (1993)</xref> points out that a community using a pattern language in architecture is likely to evolve and develop their own specific pattern language or dialect. Several authors in HCI have recognised this participatory focus. Bayle, et al. (1998) highlight participatory design as one possible application for pattern languages. <xref ref-type="bibr" rid="R27" id="459" class="deo:Reference">Borchers (2001a)</xref> also mentions participatory design as a possibility. The Participatory Patterns Project (<xref ref-type="bibr" rid="R48" id="460" class="deo:Reference">Dearden et al. 2002a</xref>, b; <xref ref-type="bibr" rid="R69" id="461" class="deo:Reference">Finlay et al. 2002</xref>) has investigated ways of combining pattern languages with other techniques for participatory interaction design, such as paper prototyping, and has found the approach promising. A variation on the use of patterns in concert with paper prototyping, is work by <xref ref-type="bibr" rid="R108" id="462" class="deo:Reference">Lin and Landay (2002)</xref> who propose to integrate patterns into a design sketching environment, allowing designers to drag and drop patterns into their sketches and customise them to meet local requirements. While this approach is intended for experienced designers, its potential application within participatory design to support early prototyping with patterns is clear.</region>
          <outsider class="DoCO:TextBox" type="footer" id="464" page="30" column="1">- 29 -</outsider>
          <outsider class="DoCO:TextBox" type="header" id="465" page="31" column="1">Published in Human Computer Interaction, 21(1), January 2006</outsider>
        </section>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="466" page="31" column="1">6.2. Patterns as technical lexicon</h2>
          <region class="DoCO:TextChunk" id="484" page="31" column="1">Many authors in software engineering report the use of pattern names as a specialist technical lexicon to support design debates. For example, <xref ref-type="bibr" rid="R47" id="467" class="deo:Reference">Schmidt (1995)</xref> suggests that a knowledge of patterns “helped experts document, discuss and reason systematically about sophisticated architectural concepts” (ibid. p. 70). <xref ref-type="bibr" rid="R40" id="468" class="deo:Reference">Cline (1996)</xref> suggests that patterns provide a „standard vocabulary‟ amongst developers. Meszaros (in <xref ref-type="bibr" rid="R21" id="469" class="deo:Reference">Beck et al., 1996</xref>) states a similar view. This standard vocabulary can also benefit design documentation, since a pattern name might be sufficient, in some contexts, to explain a complex design. <xref ref-type="bibr" rid="R54" id="470" class="deo:Reference">Du and England (2001)</xref> propose augmenting the User Action Notation (<xref ref-type="bibr" rid="R92" id="471" class="deo:Reference">Hartson, Siochi &amp; Hix, 1990</xref>) with references to patterns in order to produce more concise design specifications. <xref ref-type="bibr" rid="R40" id="472" class="deo:Reference">Cline (1996)</xref>, <xref ref-type="bibr" rid="R47" id="473" class="deo:Reference">Schmidt (1995)</xref> and <xref ref-type="bibr" rid="R14" id="474" class="deo:Reference">Astrachan and Wallingford (1998)</xref> all suggest using patterns to educate novices about good software design, and to integrate novices into design teams. <xref ref-type="bibr" rid="R14" id="475" class="deo:Reference">Astrachan et al. (1998)</xref> claim that patterns should form an essential part of the undergraduate computing science curricula. The explicit presentation of the content of patterns may also ease communication across development teams (<xref ref-type="bibr" rid="R47" id="476" class="deo:Reference">Schmidt, 1995</xref>, p.69). <xref ref-type="bibr" rid="R80" id="477" class="deo:Reference">Goldfedder and Rising (1996)</xref> suggest using patterns to inform the review of a design, and to aid documentation. The use of patterns as an educational tool is carried through into HCI. One of the earliest HCI publications on patterns focuses on the use of patterns within an interaction design curriculum (<xref ref-type="bibr" rid="R16" id="478" class="deo:Reference">Barfield et al., 1994</xref>). <xref ref-type="bibr" rid="R29" id="479" class="deo:Reference">Borchers (2002)</xref> suggests two ways of using patterns within the curriculum: as a tool to present HCI design knowledge to students and as a methodology to support design. His experiences suggest that both can be successful and that students can grasp the patterns concept. <xref ref-type="bibr" rid="R157" id="480" class="deo:Reference">Seffah (2003)</xref> and <xref ref-type="bibr" rid="R158" id="481" class="deo:Reference">Sharp, Manns and Eckstein (2003)</xref> take this a step further by suggesting the use of pedagogical patterns to design courses, as well as teaching interaction design and process patterns. <xref ref-type="bibr" rid="R40" id="482" class="deo:Reference">Cline (1996)</xref> advocates these ways of using patterns, but also suggests that patterns can be used pro-actively to suggest design structures. Where this pro-active design generation is applied, Cline suggests that designers must apply a degree of „high-level pattern matching‟ (ibid. p 47) to identify which patterns to use, and concludes that „the design patterns must be part of one‟s flesh and blood – looking things up in a book would be completely unacceptable in these on-the-fly situations” (p47). <xref ref-type="bibr" rid="R80" id="483" class="deo:Reference">Goldfedder and Rising (1996)</xref> and Buschmann, Meunier, Rohnert, Sommerlad and Stal (1996, p423 ff) voice a similar concern that the time to find a pattern increases as more</region>
          <outsider class="DoCO:TextBox" type="footer" id="485" page="31" column="1">- 30 -</outsider>
          <outsider class="DoCO:TextBox" type="header" id="486" page="32" column="1">Published in Human Computer Interaction, 21(1), January 2006</outsider>
          <region class="DoCO:TextChunk" id="487" confidence="possible" page="32" column="1">and more patterns are published. This situation may suggest that designers will need to search a database of patterns to find one that matches their current problems, but whether this is a practical solution in the heat of real software development projects is open to debate. However, such resources are useful for students and practitioners seeking to enhance their knowledge and skills.</region>
        </section>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="488" page="32" column="1">6.3. Patterns as organisational memory</h2>
          <region class="DoCO:TextChunk" id="503" page="32" column="1">In both HCI and software engineering, there has been some work on using patterns as part of an organisational memory. <xref ref-type="bibr" rid="R21" id="489" class="deo:Reference">Beck et al. (1996)</xref> discuss efforts within specific organisations both to use patterns and to develop patterns that are specific to the domains in which those organisations operate. <xref ref-type="bibr" rid="R119" id="490" class="deo:Reference">May and Taylor (2003)</xref> propose patterns as a tool for organisational knowledge management. In HCI, Henniger (2001) suggests a process where each development project begins by interrogating a corporate memory to retrieve and select patterns (and guidelines) to use within the project. Relevant patterns are identified by a rule-based system that matches patterns and guidelines against project characteristics (such as user populations, tasks and GUI tools). The selected patterns are then passed to the project to consider. At the end of the project any patterns used are reviewed and may be updated based on the experience gained. <xref ref-type="bibr" rid="R83" id="491" class="deo:Reference">Granlund et al. (2001)</xref> also suggest updating patterns on the basis of project experiences. Alexander et al.‟s (1975) suggestions for the management of the pattern language in The Oregon Experiment (ibid. p136 ff.), part of which is an annual public review of the pattern language, can also be viewed as a form of organisational learning. This context of organisational memory has led to the development of a number of tools to support the editing of patterns and pattern languages. Borchers (2001a, p 195ff.) describes requirements for PET a „Pattern Editing Tool‟. <xref ref-type="bibr" rid="R154" id="492" class="deo:Reference">Schuler (2002)</xref> and colleagues are developing an on-line pattern submission and discussion environment for recording patterns for „living communication‟. This environment allows participants to submit and edit their own patterns, and allows members of the public to review submissions. Some authors have investigated incorporating software patterns into development tools, or implementing patterns as components of programming languages (see, e.g. <xref ref-type="bibr" rid="R121" id="493" class="deo:Reference">Meijler, Demeyer &amp; Engel, 1997</xref>; <xref ref-type="bibr" rid="R4" id="494" class="deo:Reference">Agerbo &amp; Cornils, 1998</xref>; <xref ref-type="bibr" rid="R113" id="495" class="deo:Reference">Mapelsden, Hosking &amp; Grundy, 2002</xref>; <xref ref-type="bibr" rid="R37" id="496" class="deo:Reference">Chambers, Harrison &amp; Vlissides, 2000</xref>). This has also been proposed in interaction design (<xref ref-type="bibr" rid="R68" id="497" class="deo:Reference">Molina, Torres &amp; Pastor, 2003</xref>; Lin &amp; <xref ref-type="bibr" rid="R104" id="498" class="deo:Reference">Landay, 2003</xref>). It can be objected that such efforts only incorporate the<marker type="page" number="33"/><marker type="block"/> „solution‟ part of the pattern, but do not provide advice to software designers about when to use that particular pattern. <xref ref-type="bibr" rid="R107" id="502" class="deo:Reference">Leacock, Malone and Wheeler (2005)</xref> describe the production of a library of interaction design patterns at Yahoo!, to which they hope to add visual assets and code fragments that can be re-used by developers to produce systems that conform with the approved patterns.</region>
          <outsider class="DoCO:TextBox" type="footer" id="500" page="32" column="1">- 31 -</outsider>
          <outsider class="DoCO:TextBox" type="header" id="501" page="33" column="1">Published in Human Computer Interaction, 21(1), January 2006</outsider>
        </section>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="504" page="33" column="1">6.4. Patterns as lingua franca</h2>
          <region class="DoCO:TextChunk" id="514" page="33" column="1">Crocker (in <xref ref-type="bibr" rid="R21" id="505" class="deo:Reference">Beck et al. 1996</xref>) and <xref ref-type="bibr" rid="R19" id="506" class="deo:Reference">Beck (1994)</xref> both discuss using patterns to support communication between designers responsible for the definition of the overall architecture of a system, and designers responsible for applications software. <xref ref-type="bibr" rid="R36" id="507" class="deo:Reference">Schmidt (1996)</xref> suggests using patterns to explain architectural design issues to managers. <xref ref-type="bibr" rid="R70" id="508" class="deo:Reference">Fowler (1997)</xref> suggests using his patterns in collaboration with requirements analysts, clients and domain experts to develop specific models for particular projects. In HCI, Erickson (2000) also suggests patterns as a „lingua franca‟ to support and enhance communication about design, in particular advocating the use of patterns to help users to engage with design processes. <xref ref-type="bibr" rid="R83" id="509" class="deo:Reference">Granlund et al. (2001)</xref> suggest a design process of four phases: system definition; user profiling and task analysis; conceptual design; and „design‟. In each phase, patterns are used as archetypes to begin design discussions with users and clients. <xref ref-type="bibr" rid="R27" id="510" class="deo:Reference">Borchers (2001a)</xref> reports on the use of three separate pattern languages, addressing different aspects of the design of a multi-media exhibit, namely: designing and playing a piece of blues music; designing user interaction for the exhibit; and designing software to implement the exhibit‟s musical synthesis capabilities. Borchers suggests that, because the pattern format is familiar to designers from each of these different disciplines, they can more readily share their design thinking with each other across disciplinary boundaries. <xref ref-type="bibr" rid="R116" id="511" class="deo:Reference">Martin et al. (2001, 2002)</xref> use patterns (although not design patterns) to present findings from ethnographic studies in a form that might be applied by software designers. <xref ref-type="bibr" rid="R60" id="512" class="deo:Reference">Fernández, Holmer, Rubart and Schűmmer (2002)</xref> express the hope that their patterns for groupware will improve communication within development teams, between development teams and end users, and between end users. Denning and Dargan express the hope that a pattern language could provide „a method of mapping from human actions to software functions in a way that is intelligible to clients, designers and engineers simultaneously‟ (<xref ref-type="bibr" rid="R51" id="513" class="deo:Reference">Denning &amp; Dargan, 1996</xref>, p114). In the Participatory Patterns project, patterns are used to</region>
          <outsider class="DoCO:TextBox" type="footer" id="515" page="33" column="1">- 32 -</outsider>
          <outsider class="DoCO:TextBox" type="header" id="516" page="34" column="1">Published in Human Computer Interaction, 21(1), January 2006</outsider>
          <region class="DoCO:TextChunk" id="519" confidence="possible" page="34" column="1">facilitate communication between users and website designers (<xref ref-type="bibr" rid="R69" id="517" class="deo:Reference">Finlay et al., 2002</xref>, <xref ref-type="bibr" rid="R69" id="518" class="deo:Reference">Dearden et al., 2002</xref>).</region>
        </section>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="520" page="34" column="1">6.5. Patterns as design rationale</h2>
          <region class="DoCO:TextChunk" id="547" page="34" column="1">As we noted in the discussion of „generativity‟, there are a variety of understandings about the semantic relationships between patterns, pattern languages and the designs produced from patterns. There is general agreement that patterns provide some rationale for particular design decisions, but the suggested (or implicit) structure of such rationales differs between authors. Each of Alexander‟s patterns contains a discussion of the issues that surround the problem that the pattern addresses, and explains why the chosen solution is desirable. <xref ref-type="bibr" rid="R40" id="521" class="deo:Reference">Cline (1996)</xref> argues that patterns can provide software engineers with design elements that have „well-understood trade- offs‟ (ibid. p. 47). Each of Gamma et al.‟s (1995) patterns includes discussion of the trade-offs involved in selecting and using it. Additionally, within the „implementation‟ section of some of Gamma et al’s patterns (e.g. F ACTORY M ETHOD , S TATE ), alternative design options for certain aspects of the pattern are offered together with advice on selection. Unlike Alexander‟s original work, some pattern languages in software engineering offer alternative patterns for similar problems, but designed for different contexts (e.g. <xref ref-type="bibr" rid="R3" id="522" class="deo:Reference">Adams et al., 1996</xref>; <xref ref-type="bibr" rid="R55" id="523" class="deo:Reference">Dyson &amp; Anderson, 1997</xref>; <xref ref-type="bibr" rid="R120" id="524" class="deo:Reference">McKenney, 1996</xref>; <xref ref-type="bibr" rid="R149" id="525" class="deo:Reference">Sandu, 2001</xref>; <xref ref-type="bibr" rid="R112" id="526" class="deo:Reference">Mai &amp; de Champlain, 2001</xref>). <xref ref-type="bibr" rid="R70" id="527" class="deo:Reference">Fowler (1997)</xref> prefers to offer multiple ways of addressing a problem within a single pattern. <xref ref-type="bibr" rid="R164" id="528" class="deo:Reference">Tahara et al. (2001)</xref> define the context in which each of their patterns should be applied using a common set of indexing attributes. <xref ref-type="bibr" rid="R160" id="529" class="deo:Reference">Souza et al. (2002)</xref> take a similar approach. <xref ref-type="bibr" rid="R45" id="530" class="deo:Reference">Coplien (1998)</xref> uses tables to relate the selection of certain patterns to analyses of commonalities and variabilities within a domain. This type of language suggests the possibility of using patterns in combination with a design rationale notation such as Questions, Options and Criteria (QOC) (MacLean et al., 1991). In such a combination, the patterns themselves could become re-usable elements of the rationale. <xref ref-type="bibr" rid="R70" id="531" class="deo:Reference">Fowler (1997)</xref> suggests that his patterns can be used to suggest options for a design, which may be accepted, modified or rejected. However, when the pattern is modified or rejected, the justification for that decision should be recorded as part of the design rationale. However, to date, we are unable to find any published demonstration of how such a design rationale would be constructed or presented.<marker type="page" number="35"/><marker type="block"/> Beck and Johnson‟s (1994) analogy with axiomatic mathematical proof suggests a more complete rationale connecting all of the design decisions. Such an interpretation would require a pattern language that is „generative‟ in the strict sense of a generative grammar, with the rationale for a design corresponding to a parse tree. Each of Beck and Johnson‟s patterns includes a „pre-conditions‟ section restricting the scope of the pattern, e.g. “you are writing a program that is animating a visual display in real time, probably in response to user input ...” (<xref ref-type="bibr" rid="R19" id="535" class="deo:Reference">Beck &amp; Johnson, 1994</xref>, p147). Hence, in this reading, the design rationale could be a proof that the pattern language (the set of axioms) entails the proposition that the specified context (or any context matching the required pre-conditions) implies the selection of the chosen design. This example highlights the fact that the context of a pattern is composed of two different parts. On the one hand, there is a context defined by the position of the pattern in the language, i.e. the larger patterns that it enables; on the other hand, part of the context refers to the nature of the environment in which the pattern is to be applied, the pre-conditions. In HCI, different authors reflect these different understandings of design rationale. Pattern languages that make use of „enabling‟ links to generate designs are consistent with Beck and Johnson‟s (1994) idea of a proof (see <xref ref-type="bibr" rid="R27" id="536" class="deo:Reference">Borchers, 2001a</xref>; <xref ref-type="bibr" rid="R48" id="537" class="deo:Reference">Dearden et al., 2002a</xref>, b; <xref ref-type="bibr" rid="R69" id="538" class="deo:Reference">Finlay et al., 2002</xref>; <xref ref-type="bibr" rid="R144" id="539" class="deo:Reference">Riehle &amp; Zűllighoven, 1995</xref>; <xref ref-type="bibr" rid="R31" id="540" class="deo:Reference">Bradac &amp;Fletcher, 1997</xref>; <xref ref-type="bibr" rid="R171" id="541" class="deo:Reference">Towell, 1998</xref>; <xref ref-type="bibr" rid="R43" id="542" class="deo:Reference">Coldewey, 1998</xref>; <xref ref-type="bibr" rid="R99" id="543" class="deo:Reference">Judkins &amp; Gill, 2000</xref>; <xref ref-type="bibr" rid="R114" id="544" class="deo:Reference">Marick, 2000</xref>). However, these examples do not specify additional contextual details for each individual pattern. Rather the designer must make an initial decision about whether the language is relevant and, if so, the validity of the language and its correct application provides the rationale for the generated design. <xref ref-type="bibr" rid="R168" id="545" class="deo:Reference">Tidwell (1998, 1999a)</xref> provides a generative language but does include some patterns that represent distinct alternatives for similar problems (e.g. T ILED W ORKING S URFACE and S TACK OF W ORKING S URFACES ). However, she does not specify in detail how to select between these options. <xref ref-type="bibr" rid="R172" id="546" class="deo:Reference">Van Duyne et al. (2003)</xref> provide some alternative patterns (e.g. F IXED W IDTH S CREEN S IZE and V ARIABLE W IDTH S CREEN S IZE ) together with textual discussion of suitable contexts for the application of each alternative, which would enable a form of rationale closer to Beck and Johnson‟s (1994) approach. Pattern collections and catalogues, cf. van Welie (2002-2005), Henniger (2001), suggest a greater emphasis on pattern matching to construct the rationale. Granlund et al‟s. (2001) approach also emphasises a rationale constructed by comparing pattern contexts with the conditions of a specific project. This approach is similar to Fowler‟s (1997). Mahemoff and</region>
          <outsider class="DoCO:TextBox" type="footer" id="533" page="34" column="1">- 33 -</outsider>
          <outsider class="DoCO:TextBox" type="header" id="534" page="35" column="1">Published in Human Computer Interaction, 21(1), January 2006</outsider>
          <outsider class="DoCO:TextBox" type="footer" id="548" page="35" column="1">- 34 -</outsider>
          <outsider class="DoCO:TextBox" type="header" id="549" page="36" column="1">Published in Human Computer Interaction, 21(1), January 2006</outsider>
          <region class="DoCO:TextChunk" id="553" confidence="possible" page="36" column="1"> <xref ref-type="bibr" rid="R111" id="550" class="deo:Reference">Johnston (1998)</xref> and <xref ref-type="bibr" rid="R95" id="551" class="deo:Reference">Hussey and Mahemoff (1999)</xref> begin with an analysis of relevant usability dimensions, which is similar to Tahara et al.‟s (1999) approach, but they do not take this further into a defined process for using patterns. <xref ref-type="bibr" rid="R67" id="552" class="deo:Reference">Windsor (2000)</xref> reports on the use of patterns as an explicit mechanism for recording and organising the design rationale in an interaction design project.</region>
        </section>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="554" page="36" column="1">7. ISSUE 4: VALUES AND PATTERN LANGUAGES</h1>
        <region class="DoCO:TextChunk" id="558" confidence="possible" page="36" column="1">The idea of a „design language‟ is well established in the sense of a collection of elements used to create a common design style (<xref ref-type="bibr" rid="R142" id="555" class="deo:Reference">Rheinfrank &amp; Eveson, 1996</xref>). However, Alexander‟s work clearly seeks more than just consistency of style. Rather, he chose the patterns in A Pattern Language to support a humane architecture that resulted in environments that he describes as „living‟ and „nurturing‟. In his keynote address to the annual conference on Object Oriented Programming Systems, Languages and Architectures (OOPSLA) in 1996, <xref ref-type="bibr" rid="R6" id="556" class="deo:Reference">Alexander (1996)</xref> draws attention to the „moral component‟ as central to his use of pattern languages in architecture. “In the architectural pattern language there is, at root, behind the whole thing, a constant preoccupation with the question, under what circumstances is the environment good?” (<xref ref-type="bibr" rid="R6" id="557" class="deo:Reference">Alexander, 1996</xref>). This leads to our fourth issue, the place of values in pattern languages for HCI. Issues of value are apparent in patterns in a number of different ways, including:  The key properties that are examined when attempting to identify „good‟ design from which patterns may be discovered;  The selection of, and the rationale provided for, individual patterns;  The processes by which patterns are recorded and developed;  The way in which patterns are used. We examine these aspects in detail below.</region>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="559" page="36" column="1">7.1. The properties examined to identify patterns</h2>
          <region class="DoCO:TextChunk" id="585" page="36" column="1">Alexander discusses, at length, „The Quality without a Name‟. He appeals to this „quality‟ to distinguish spaces and buildings that are „living‟ from negative or „dead‟ spaces. His patterns are then selected to enable the design of such „living‟ spaces. His procedure for identifying spaces <marker type="page" number="37"/><marker type="block"/> with this „quality‟ is based on personal observation, but he claims that the „quality‟ is objective and empirical. To support this claim he reports that when people experience spaces that either do or do not have the quality, they exhibit a high level of agreement about its presence or absence. This might be interpreted as a claim of inter-rater reliability, though Alexander does not quantify the claim or provide any evidence. What is apparent is the holistic nature of the „quality‟ that Alexander is seeking. <xref ref-type="bibr" rid="R53" id="563" class="deo:Reference">Dovey (1990)</xref> describes Alexander‟s approach as implicitly phenomenological and suggests that: “The patterns are derived from the lived world (lebenswelt) of everyday experience and they gain their power, if at all, not by being proven empirically correct, but by showing us a direct connection between the pattern and our experience of the built environment.” (ibid. p4, author‟s italics). In Software Engineering, <xref ref-type="bibr" rid="R72" id="564" class="deo:Reference">Gabriel (1996a)</xref> discusses the idea of code being „habitable‟ for those involved in the day-to-day maintenance of a system (ibid. pp9 – 16). He considers, and eventually rejects, „alive, whole, comfortable, free, exact, egoless and eternal.‟ (ibid. pp. 36ff) but admits „I still can‟t tell you what the quality is, but I can tell you some things about software that possesses it. ...‟ (ibid. p42 – 43). <xref ref-type="bibr" rid="R75" id="565" class="deo:Reference">Gamma et al. (1995)</xref> and <xref ref-type="bibr" rid="R40" id="566" class="deo:Reference">Cline (1996)</xref> emphasise designing software that is easy to re-use, in particular designing systems that are robust to certain types of change that may be necessary as requirements evolve. Wynn and <xref ref-type="bibr" rid="R184" id="567" class="deo:Reference">Calder (2002)</xref> describe this as identifying system „hot-spots‟, i.e. distinguishing aspects of the system that should remain invariant from those that should permit change. Others highlight clarity of communication within development teams and between software development teams and maintenance teams (e.g. see <xref ref-type="bibr" rid="R47" id="568" class="deo:Reference">Schmidt, 1995</xref>; <xref ref-type="bibr" rid="R40" id="569" class="deo:Reference">Cline, 1996</xref>; <xref ref-type="bibr" rid="R21" id="570" class="deo:Reference">Beck et al. 1996</xref>). Both <xref ref-type="bibr" rid="R21" id="571" class="deo:Reference">Beck and Meszaros, in their contributions to Beck et al. (1996)</xref>, describe an aim of saving time in designing software, though Meszaros qualifies this by suggesting that patterns help „less experienced developers produce good designs faster‟ [ibid. p112]. <xref ref-type="bibr" rid="R169" id="572" class="deo:Reference">Tidwell (1999b)</xref> criticises software engineers for concentrating on such „technical‟ values, and for failing to apply values relating to users‟ experience of software. The importance of values was recognised early in the development of patterns in HCI, for example <xref ref-type="bibr" rid="R17" id="573" class="deo:Reference">Bayle et al. (1998)</xref> discuss this issue. Some authors have sought to identify an analogy for the „quality without a name‟ in HCI. A definition developed at the 1999 ChiliPLoP workshop (<xref ref-type="bibr" rid="R26" id="574" class="deo:Reference">Borchers 2000b</xref>; see also <xref ref-type="bibr" rid="R27" id="575" class="deo:Reference">Borchers 2001a</xref>, p. 36) suggests “transparency”; Pemberton posits “engaging” (<xref ref-type="bibr" rid="R87" id="576" class="deo:Reference">Pemberton, 2000</xref>); Van <xref ref-type="bibr" rid="R174" id="577" class="deo:Reference">Welie et al. (2000)</xref> suggest that „usability‟ is sufficient;<marker type="page" number="38"/><marker type="block"/>  <xref ref-type="bibr" rid="R38" id="581" class="deo:Reference">Christiansen (2005)</xref> suggests „competence affirmation‟; <xref ref-type="bibr" rid="R69" id="582" class="deo:Reference">Finlay et al. (2002)</xref> compare the „quality without a name‟ to Maslow‟s notion of “wholeness” (<xref ref-type="bibr" rid="R118" id="583" class="deo:Reference">Maslow, 1970</xref>), which incorporates a sense of unity and integration as an essential component of self-actualisation. However, none of these proposals fully capture what Alexander intended where the „quality‟ is the essence of being alive. It is not surprising that it is difficult to agree an appropriate analogy for the „quality without a name‟ given the holistic and experiential character of the „quality‟ described by Alexander. It is debatable whether the „quality‟ can exist at all in technology design, whether it should be sought or whether there are other properties (for example usability, acceptability, engagement) that may be more appropriate as outcomes of using interaction design patterns. Certainly, at the level of interface elements, usability may be more desirable. There is arguably also less agreement about what is fundamental to quality in interactive software compared with architecture, which may contribute to the difficulties in identifying an analogy to Alexander‟s „quality without a name‟. However, it is also valuable to explore what it might mean to be “living” in the context of technology design. Certainly properties of the living world, such as context awareness and adaptability, have been explored in technology design but, while seen as theoretically desirable, appropriate “technological” interpretations of these properties remain elusive. This concept is particularly pertinent when considering patterns at a more global level than those concerned with specific interface elements, for example, patterns which describe how, when and even if technology should be deployed. There are relatively few examples of patterns at this level, Schuler‟s (2002) patterns for “living communication” being the closest. However, <xref ref-type="bibr" rid="R64" id="584" class="deo:Reference">Fincher and Utting (2002)</xref> insist that patterns and pattern languages must embody values since they advocate particular design ideas to be emulated. Hence, all pattern language development challenges practitioners and researchers in HCI to examine the value systems that they employ.</region>
          <outsider class="DoCO:TextBox" type="footer" id="561" page="36" column="1">- 35 -</outsider>
          <outsider class="DoCO:TextBox" type="header" id="562" page="37" column="1">Published in Human Computer Interaction, 21(1), January 2006</outsider>
          <outsider class="DoCO:TextBox" type="footer" id="579" page="37" column="1">- 36 -</outsider>
          <outsider class="DoCO:TextBox" type="header" id="580" page="38" column="1">Published in Human Computer Interaction, 21(1), January 2006</outsider>
        </section>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="586" page="38" column="1">7.2. Values in the selection of and rationale for individual patterns</h2>
          <region class="DoCO:TextChunk" id="587" confidence="possible" page="38" column="1">As well as informing the process of selecting „good‟ designs from which patterns might be identified, the individual patterns that are selected and the rationales provided within individual patterns help to make the authors‟ design values explicit. For example, Alexander includes patterns such as O LD P EOPLE E VERYWHERE (40) and F OUR S TOREY LIMIT (21) that clearly reflect particular design values of integrated communities in touch with their environment. In HCI,</region>
          <outsider class="DoCO:TextBox" type="footer" id="588" page="38" column="1">- 37 -</outsider>
          <outsider class="DoCO:TextBox" type="header" id="589" page="39" column="1">Published in Human Computer Interaction, 21(1), January 2006</outsider>
          <region class="DoCO:TextChunk" id="592" page="39" column="1">patterns also reflect the values and priorities of their authors. For example, Borchers‟ patterns A TTRACT -E NGAGE -D ELIVER and E ASY H ANDOVER both reflect the value of efficiency, in terms of the flow of people through the exhibition. In the case of the former this is from the perspective of the exhibition sponsor or organiser, wishing to maximise the number of people able to receive the message they wish to deliver. The latter is also concerned with efficiency but has a slightly different focus, reflecting the needs of the user within this rapid turnover. <xref ref-type="bibr" rid="R172" id="590" class="deo:Reference">Van Duyne et al. (2003)</xref> include a group of six patterns for „Building Trust and Credibility‟. These patterns focus on how designers can create web designs to engender a sense of trust. However, the priority in these patterns is on establishing credibility through external appearance and explicit statements of trustworthiness rather than any attempt to address the actual behaviour (trustworthy or otherwise) of the organisation behind the site. Values within pattern selection and rationale are reflected in the presentation of patterns at different levels, which provide a value-based context even where patterns cannot be used directly. Alexander includes patterns at a range of levels, from regional and whole city development, through local town planning, to individual neighbourhoods and buildings to interior designs. Clearly not every potential user of the pattern language can exploit all of these patterns: home owners may only be able to use interior design patterns and some limited architectural patterns, whereas architects, builders and town planners could utilise building and neighbourhood patterns directly. Relatively few stakeholders are in a position to make direct use of the highest-level patterns (such as I NDEPENDENT R EGIONS ), although Alexander would argue that each development contributes piecemeal to these global patterns. However, these patterns are also important in that they express the values that underpin the authors‟ view of architectural development, providing context for the lower level patterns. In HCI, there has been little work as yet on such high level, contextual patterns. Perhaps the most relevant work is the Public Sphere Project sponsored by Computer Professionals for Social Responsibility (CPSR) (<xref ref-type="bibr" rid="R154" id="591" class="deo:Reference">Schuler, 2002</xref>). However it is easy to see parallels in terms of the types of environments, philosophies and scales of development that many researchers and practitioners would wish to promote within interaction design.</region>
        </section>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="593" page="39" column="1">7.3. Values in the process of developing patterns</h2>
          <outsider class="DoCO:TextBox" type="footer" id="594" page="39" column="1">- 38 -</outsider>
          <outsider class="DoCO:TextBox" type="header" id="595" page="40" column="1">Published in Human Computer Interaction, 21(1), January 2006</outsider>
          <region class="DoCO:TextChunk" id="607" page="40" column="1">In The Timeless Way of Building <xref ref-type="bibr" rid="R7" id="596" class="deo:Reference">Alexander (1979)</xref> describes the evolution of pattern languages as a social process that is critically dependent on the involvement of users in using and discussing the language and the buildings generated by it (ibid., Ch 13). In particular Alexander suggests that professionalisation of debate about design leads people “lose confidence in their own judgement” (ibid. p233) about what designs work for them. From The Oregon Experiment, it is apparent that <xref ref-type="bibr" rid="R11" id="597" class="deo:Reference">Alexander et al. (1975)</xref> expect that specific communities will both adapt existing patterns to suit their needs and will create patterns and pattern languages that are specific to their situation. <xref ref-type="bibr" rid="R102" id="598" class="deo:Reference">King (1993)</xref> also discusses the development of specific languages within specific communities. This view of the evolution of a pattern language as a social process might be compared with the concepts such as a speech community (<xref ref-type="bibr" rid="R187" id="599" class="deo:Reference">Wynn &amp; Novick, 1995</xref>), or a genre ecology (<xref ref-type="bibr" rid="R59" id="600" class="deo:Reference">Erickson, 2000b</xref>). In software engineering, a specific practice of „writers workshops‟, and „shepherding‟ has evolved to support the development of patterns and pattern languages. Each workshop has a „shepherd‟, who acts as chair and facilitator of the workshop and works with the authors of the papers to initially prepare the paper for the workshop. In the workshop, workshop participants discuss the paper but the author(s) are not allowed to comment. Their role is to listen to the discussion. After the workshop, the author(s) take the comments of the workshop into account in finalizing the paper for publication (Kafura, Lavender &amp; <xref ref-type="bibr" rid="R36" id="601" class="deo:Reference">Schmidt, 1996</xref>; <xref ref-type="bibr" rid="R35" id="602" class="deo:Reference">Buschmann et al., 1996</xref>; <xref ref-type="bibr" rid="R46" id="603" class="deo:Reference">Coplien, 2001</xref>). A key value in this process is to ensure that the comments are always constructive, with the appointed „shepherd‟ taking responsibility for maintaining the constructive atmosphere. There is some evidence of similar pattern writing workshops in HCI, for example, Borchers (2001a, pp171ff) discusses how one pattern was modified in the course of such a workshop before final inclusion in the published pattern language and <xref ref-type="bibr" rid="R156" id="604" class="deo:Reference">Schümmer et al. (2004)</xref> included shepherding activity. While writers‟ workshops emphasise pattern writing as a professional albeit apprenticed activity, the Participatory Patterns Project (<xref ref-type="bibr" rid="R48" id="605" class="deo:Reference">Dearden et al., 2002a</xref>, b; <xref ref-type="bibr" rid="R69" id="606" class="deo:Reference">Finlay et al., 2002</xref>) reports that use of patterns in a participatory context permitted users to critique and make proposals for change in patterns. This suggests that Alexander‟s vision of users owning and evolving their own languages may be facilitated by participatory practices. Another issue that has impacted the development of pattern languages, particularly in HCI, is the distribution of researchers interested in the subject, and the demands on researchers to publish</region>
          <outsider class="DoCO:TextBox" type="footer" id="608" page="40" column="1">- 39 -</outsider>
          <outsider class="DoCO:TextBox" type="header" id="609" page="41" column="1">Published in Human Computer Interaction, 21(1), January 2006</outsider>
          <region class="DoCO:TextChunk" id="614" confidence="possible" page="41" column="1">and own work. <xref ref-type="bibr" rid="R17" id="610" class="deo:Reference">Bayle et al. (1998)</xref> recognise that pattern language development needs to be a community effort, yet the competitive pressures within the wider research context can mediate against such a cooperative approach. This has led instead to competing voices and individual (and often repeated) efforts. Recent moves in developing a shared XML schema for patterns (<xref ref-type="bibr" rid="R65" id="611" class="deo:Reference">Fincher, 2003</xref>) and the availability of web-based communication systems to permit on-line collaboration in the effort of documenting and distributing pattern languages (for example, van <xref ref-type="bibr" rid="R173" id="612" class="deo:Reference">Welie, 2002</xref>-2005) are perhaps a move towards a more coherent sharing of the pattern development effort. <xref ref-type="bibr" rid="R154" id="613" class="deo:Reference">Schuler (2002)</xref> and colleagues are developing an on-line pattern submission and discussion environment for recording patterns for „living communication‟. This environment allows participants to submit and edit their own patterns, and allows members of the public to view currently submitted patterns. It is hoped that this environment will in future support a collaborative process whereby participants can select and develop the patterns towards a coherent pattern language.</region>
        </section>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="615" page="41" column="1">7.4. Values in the process of using patterns</h2>
          <region class="DoCO:TextChunk" id="621" page="41" column="1">Alexander‟s use of patterns to support participatory design is driven (in part) by a value system that treats localised control, and contextual sensitivity in design as essential. The Linz Café (Alexander, 1982) and A New Theory of Urban Design (<xref ref-type="bibr" rid="R10" id="616" class="deo:Reference">Alexander et al., 1987</xref>) discuss the importance of making decisions on the actual construction site, and taking into account the surrounding context. In The Oregon Experiment and The Production of Houses <xref ref-type="bibr" rid="R8" id="617" class="deo:Reference">Alexander et al. (1975, 1985)</xref> emphasise the use of patterns by a community to design for itself. In this situation it is important that the written patterns are not regarded as blueprints for design, rather they provide guidance which must be locally interpreted, and must be open to challenge. In the participatory tradition in HCI there is a similar commitment to users as active participants, rather than passive „subjects‟, and to the importance of local context in systems design. As discussed in section 6.1, The Participatory Patterns Project (<xref ref-type="bibr" rid="R48" id="618" class="deo:Reference">Dearden et al, 2002a</xref>, b; <xref ref-type="bibr" rid="R69" id="619" class="deo:Reference">Finlay et al. 2002</xref>) have conducted some initial investigations into this area. However initial results suggest that users may ascribe unwarranted authority to advice presented in the form of patterns (<xref ref-type="bibr" rid="R49" id="620" class="deo:Reference">Dearden et al., 2002b</xref>). To avoid this, the authors advocate encouraging ownership and development of the language by users.</region>
          <outsider class="DoCO:TextBox" type="footer" id="622" page="41" column="1">- 40 -</outsider>
          <outsider class="DoCO:TextBox" type="header" id="623" page="42" column="1">Published in Human Computer Interaction, 21(1), January 2006</outsider>
        </section>
      </section>
      <section class="deo:Conclusion">
        <h1 class="DoCO:SectionTitle" id="624" page="42" column="1">8. CONCLUSION: A RESEARCH AGENDA FOR PATTERNS IN HCI</h1>
        <region class="DoCO:TextChunk" id="631" page="42" column="1">In this paper we have examined the patterns endeavour in HCI, looking in particular at the nature of patterns and pattern languages, the ways that patterns can be used, and the values they embody. From our review, it is clear that significant contributions have been made in the development of patterns and pattern languages which have been employed in the design of real systems (e.g. <xref ref-type="bibr" rid="R27" id="625" class="deo:Reference">Borchers, 2001a</xref>; van <xref ref-type="bibr" rid="R172" id="626" class="deo:Reference">Duyne et al. 2003</xref>). However, although the use of patterns is reported, there is little concrete evaluation of either the usefulness of pattern languages within the process or the contribution that they have made to the quality of the end product or to the design process (with notable exceptions such as <xref ref-type="bibr" rid="R29" id="627" class="deo:Reference">Borchers, 2002</xref>; <xref ref-type="bibr" rid="R48" id="628" class="deo:Reference">Dearden et al. 2002a</xref>, b; <xref ref-type="bibr" rid="R69" id="629" class="deo:Reference">Finlay et al. 2002</xref>; <xref ref-type="bibr" rid="R39" id="630" class="deo:Reference">Chung et al., 2004</xref>). Further, discussions of patterns and pattern languages so far within HCI have been dominated by form and examples, with limited examination of the philosophy and values of pattern based design. Given this context, we suggest that the research agenda for patterns in HCI should prioritise four areas, namely:  Exploring appropriate ways to use pattern languages in design and in education, and evaluating the contribution that pattern languages can make;  Finding ways to organise pattern languages in HCI so that patterns at different levels (from the broader social context of systems to the detail of interfaces) can be applied together in design.  Exploring and improving the processes by which patterns are identified, recorded and reviewed so that the existing stock of patterns and pattern languages available in HCI can be constantly improved and enlarged, in particular to include generic patterns as well as those focused on particular platforms or interaction styles;  Examining the way that values are explicated and promulgated in pattern languages and in pattern-led design.</region>
        <region class="DoCO:TextChunk" id="632" confidence="possible" page="42" column="1">We examine each of these areas in more detail.</region>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="633" page="42" column="1">8.1. Exploring pattern languages in use</h2>
          <region class="DoCO:TextChunk" id="641" page="42" column="1">One of the most obvious weaknesses in HCI research on patterns to date is the lack of substantive evidence of their benefits for actual design practice. Perhaps understandably attention has focused on generating patterns, rather than on using them, and most researchers have developed their own languages for a variety of reasons. Significant effort is now required to <marker type="page" number="43"/><marker type="block"/> examine the use of these languages in actual design (e.g. via empirical and observational studies) and in education to demonstrate what benefits might be gained from a patterns approach. Three notable studies have demonstrated possible approaches to evaluating pattern languages in use. <xref ref-type="bibr" rid="R29" id="637" class="deo:Reference">Borchers (2002)</xref> describes evaluations of the value of patterns to student learning in two undergraduate HCI modules. <xref ref-type="bibr" rid="R69" id="638" class="deo:Reference">Dearden et al. (2002)</xref> and <xref ref-type="bibr" rid="R69" id="639" class="deo:Reference">Finlay et al. (2002)</xref> describe a qualitative study of the role of patterns in simulated participatory design activities. <xref ref-type="bibr" rid="R39" id="640" class="deo:Reference">Chung et al. (2004)</xref> report on a structured empirical study using a pattern language in a simulated design activity including a group of experienced designers. These studies provide some possible ways in which such evaluations could be conducted. However, none of these studies can be treated as conclusive, so there is considerable need for further work. Two key limitations of the work to date are that:  The studies have not attempted to compare patterns with any other type of design advice, whereas a key claim made for HCI patterns is that they are in some way superior to other forms of design guidance;  The studies have only investigated simulated design activities rather than longitudinal observations of „real world‟ developments, which may reveal different characteristics. Given that a range of substantial pattern collections and pattern languages are now available, future research efforts must be focused on exploring how they can actually be used both in design and in education, and in evaluating their effectiveness in these areas. Comparative and longitudinal studies in particular are needed. A secondary related area of research may consider alternative ways in which pattern languages can be used to develop and document the rationale for design decisions.</region>
          <outsider class="DoCO:TextBox" type="footer" id="635" page="42" column="1">- 41 -</outsider>
          <outsider class="DoCO:TextBox" type="header" id="636" page="43" column="1">Published in Human Computer Interaction, 21(1), January 2006</outsider>
        </section>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="642" page="43" column="1">8.2. Organising pattern languages</h2>
          <region class="DoCO:TextChunk" id="648" page="43" column="1"> <xref ref-type="bibr" rid="R67" id="643" class="deo:Reference">Fincher and Windsor (2000)</xref> have raised the question of how pattern languages in HCI should be organised. This issue will have a significant impact on the ways in which larger pattern languages might be applied as practical resources in design, as it determines how easy it is to locate core and related patterns and whether patterns can be used effectively to generate solutions to problems. The organisation of pattern languages in HCI is particularly problematic because of the wide range of different levels that may be addressed by patterns in HCI, from the broader social context in which an interactive system is used, to the low-level details of interaction. Unlike architectural patterns, where “scale” provides a useful organising principle, in HCI the<marker type="page" number="44"/><marker type="block"/> problem is multi-dimensional. Scale is important, but designers also address problems in terms of technology, task, information, and time. Providing organisational structures and retrieval approaches that reflect these different conceptualisations is a challenge that requires further research. Another challenge is creating an HCI pattern language that is truly „generative‟. Looking outside the practice to related theories and principles, as proposed by <xref ref-type="bibr" rid="R64" id="647" class="deo:Reference">Fincher (2002)</xref>, merits further investigation. A related issue is the management and maintenance of pattern languages, as the interconnected structure of a pattern language becomes more complex. Here software tools may be helpful but they should be focused not on automating the application of patterns (patterns provide design guidance not blueprints) but on the intelligent management, organisation and retrieval of patterns to support their use in design practice. Here, attention must be paid to the differences between the sequence and pacing of activities in architectural production and in interactive systems development.</region>
          <outsider class="DoCO:TextBox" type="footer" id="645" page="43" column="1">- 42 -</outsider>
          <outsider class="DoCO:TextBox" type="header" id="646" page="44" column="1">Published in Human Computer Interaction, 21(1), January 2006</outsider>
        </section>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="649" page="44" column="1">8.3. Improving the production of pattern languages</h2>
          <region class="DoCO:TextChunk" id="650" page="44" column="1">To date pattern development has been relatively ad hoc, based on designer experience and largely individual or small group efforts. Much of the effort has been on developing individual patterns, collections and pattern languages. A number of different pattern languages and collections have been developed using different formats and structures, resulting in the same essential patterns (as recurrent phenomena) being reproduced (as explicit texts) in these different formats. For example, the pattern S TEP BY S TEP I NSTRUCTIONS first proposed by Tidwell (1999) describes the same phenomenon as van Welie‟s (2002-2005) W IZARD and van Duyne et al.‟s (2003) P ROCESS F UNNEL . However, while S TEP BY S TEP I NSTRUCTIONS is a relatively generic pattern, the W IZARD pattern, in the choice of name alone, implies a particular style of solution, and the P ROCESS F UNNEL , a particular type of application. This duplication of effort is further complicated by the pressures in academia to produce publications and by issues of copyright. New members of the HCI patterns community have been encouraged to engage in writers‟ workshops to practice the skills of identifying and writing patterns. For some workshops, a proposal for a (new) pattern or pattern language is required to gain admission. This approach, when combined with the pressures in academia to produce publications, has some drawbacks.  Firstly, it makes the development and completion of patterns expensive, since much of the work takes place at face-to-face meetings at international events;</region>
          <outsider class="DoCO:TextBox" type="footer" id="651" page="44" column="1">- 43 -</outsider>
          <outsider class="DoCO:TextBox" type="header" id="652" page="45" column="1">Published in Human Computer Interaction, 21(1), January 2006</outsider>
          <region class="DoCO:TextChunk" id="653" confidence="possible" page="45" column="1"> Secondly, it assigns a high value to producing new patterns and new pattern languages for presentation at such workshops, but provides few incentives for evaluating, critiquing, improving and evolving existing languages;  Thirdly, it is unclear how such improvements to an existing language should be published, if a pattern is regarded as the copyright of the initial author(s), then it is not clear how improvements can be made, recognised and distributed;  Fourthly, these workshops may fail to engage with some key stakeholders in pattern language development, namely end-users and designers, who should be the primary beneficiaries.</region>
          <region class="DoCO:TextChunk" id="661" page="45" column="1"> <xref ref-type="bibr" rid="R17" id="654" class="deo:Reference">Bayle et al. (1998)</xref> suggested that identifying and writing patterns needs to become a genuine community effort within HCI. The Pattern Language for Living Communication project (<xref ref-type="bibr" rid="R154" id="655" class="deo:Reference">Schuler, 2002</xref>) has attempted to develop a broad international community, working together in a shared workspace where patterns can be proposed, critiqued and edited on-line. However, the project is not yet in a position to claim that a successful process for developing pattern languages has been found. This situation indicates that research is required to develop better ways to encourage the widest possible collaboration in pattern language development. This may require some way of recognising and rewarding efforts made to contribute to a pattern language, as well as suggesting a requirement for new tools for computer supported collaboration in pattern language development. A means for reporting experiences of using particular patterns and taking such experience reports into account in improving patterns is needed. Some concept of community ownership of a language may be necessary, with collective democratic governance of the content of such languages. Alexander et al. proposed a possible model for an architectural pattern language in The Oregon Experiment (1975). An alternative approach might explore the different licensing approaches of the open source software community as models to permit community development of pattern languages. More fundamentally, the duplication of patterns highlights the conflict between pattern languages that are aiming in some sense to be generic and applicable to a range of situations, those that are specific to a particular platform or interaction style, and those that are targeted to a particular domain or application area. The tendency in the proliferation of HCI pattern languages<marker type="page" number="46"/><marker type="block"/> has been towards patterns directed at particular interaction styles (e.g. desktop computing) across a range of domains, or pattern languages that are specific to particular domains. We believe that the research community also needs to develop patterns and pattern languages that are generic across platforms, styles and domains, that are in some sense „timeless‟. To achieve this we need to improve our understanding of successful design in HCI. Pattern mining depends fundamentally on identifying successful design, a process that we need to refine. Frameworks for analysing design to identify the elements that make it successful are needed. Here work in other areas, from traditional usability assessment and more recent work on understanding the nature of user experience (e.g. <xref ref-type="bibr" rid="R186" id="659" class="deo:Reference">Wright &amp; McCarthy, 2004</xref>) to observations from other design disciplines (e.g. <xref ref-type="bibr" rid="R52" id="660" class="deo:Reference">Dorst, 2003</xref>) may be useful.</region>
          <outsider class="DoCO:TextBox" type="footer" id="657" page="45" column="1">- 44 -</outsider>
          <outsider class="DoCO:TextBox" type="header" id="658" page="46" column="1">Published in Human Computer Interaction, 21(1), January 2006</outsider>
        </section>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="662" page="46" column="1">8.4. Examining our values</h2>
          <region class="DoCO:TextChunk" id="665" page="46" column="1">Values need to be given more attention in HCI generally, as we recognise the wider social and ethical implications of the technologies we design (<xref ref-type="bibr" rid="R109" id="663" class="deo:Reference">Light, Blandford, Cockton, Dearden &amp; Finlay, 2004</xref>; <xref ref-type="bibr" rid="R182" id="664" class="deo:Reference">Wild, Dearden, Light &amp; Muller, 2005</xref>). We need to consider the values HCI practitioners and researchers should be promoting and how this might be done. In terms of patterns we need to think further about whether there is an equivalent of „quality without a name‟ for HCI and, if so, what it might be. We need to address how we can identify patterns that are both timeless and culturally sensitive. Understanding the role of values in design may help us to recognise the values embodied in patterns. There are also value issues involved in the development and use of patterns where the need for recognition of contribution needs to be balanced with openness for use and further development. The patterns community may be able to learn here from practices relating to open source software. One area that has largely been neglected to date has been the consideration of global HCI design patterns. Alexander‟s Pattern Language begins with patterns on a global scale (e.g. I NDEPENDENT R EGIONS ) which may have little practical meaning to someone building a single home but which serve both to make explicit the value context in which more specific patterns should be understood, and to inform decision makers. HCI patterns have so far understandably concentrated on the specifics of designing particular applications but say little about how technology should be deployed or about the wider context. This is an area where patterns can contribute to the values debate.</region>
          <outsider class="DoCO:TextBox" type="footer" id="666" page="46" column="1">- 45 -</outsider>
          <outsider class="DoCO:TextBox" type="header" id="667" page="47" column="1">Published in Human Computer Interaction, 21(1), January 2006</outsider>
          <region class="DoCO:TextChunk" id="668" confidence="possible" page="47" column="1">Patterns and pattern languages offer an approach to design with much potential. Research in these areas is now needed to ensure that this promise is fulfilled and that pattern language research makes an effective and lasting contribution to the practice and understanding of interaction design.</region>
          <outsider class="DoCO:TextBox" type="footer" id="669" page="47" column="1">- 46 -</outsider>
          <outsider class="DoCO:TextBox" type="header" id="670" page="48" column="1">Published in Human Computer Interaction, 21(1), January 2006</outsider>
          <outsider class="DoCO:TextBox" type="footer" id="671" page="48" column="1">- 47 -</outsider>
          <outsider class="DoCO:TextBox" type="header" id="672" page="49" column="1">Published in Human Computer Interaction, 21(1), January 2006</outsider>
          <region class="DoCO:TextChunk" id="675" confidence="possible" page="49" column="1">NOTES Acknowledgments. We are grateful for the comments and the feedback we have received from many people whilst developing this article. In particular, we should like to thank Barbara McManus, Elizabeth Allgar and Sally Fincher for their comments on early drafts. We should also like to thank all the reviewers for their helpful comments, and particularly Ralph Johnson and Jack Carroll for their insights and encouragement. Support. The authors wish to acknowledge the support of their respective institutions in enabling this work. Authors’ Present Addresses. Andy Dearden. Communication and Computing Research Centre, Sheffield Hallam University, Sheffield, S1 1WB, UK. Email:<email id="673">a.m.dearden@shu.ac.uk</email> Janet Finlay, School of Computing, Leeds Metropolitan University, Caedmon Hall, Headingley Campus, Leeds, LS6 3QS, UK. Email:<email id="674">j.finlay@leedsmet.ac.uk</email> HCI Editorial Record. (supplied by Editor)</region>
          <outsider class="DoCO:TextBox" type="footer" id="676" page="49" column="1">- 48 -</outsider>
          <outsider class="DoCO:TextBox" type="header" id="677" page="50" column="1">Published in Human Computer Interaction, 21(1), January 2006</outsider>
        </section>
      </section>
      <section class="DoCO:Bibliography">
        <h1 class="DoCO:SectionTitle" id="678" page="50" column="1">REFERENCES</h1>
        <ref-list class="DoCO:BiblioGraphicReferenceList">
          <ref rid="R1" class="deo:BibliographicReference" id="679" page="50" column="1">Aarsten, A., Brugali, D., &amp; Menga, G. (1996). Designing Concurrent and Distributed Control Systems. Communications of the ACM, 39(10), 50 – 58.</ref>
          <ref rid="R2" class="deo:BibliographicReference" id="680" page="50" column="1">Adams, S. (1995). Functionality Ala Carte. In Coplien &amp; Schmidt (1995), 1 – 8.</ref>
          <ref rid="R3" class="deo:BibliographicReference" id="681" page="50" column="1">Adams, M., Coplien, J., Gamoke, R., Hanmer, R., Keeve, F., &amp; Nicodemus K. (1996). Fault Tolerant Telecommunication System Patterns. In Vlissides, Coplien, &amp; Kerth (1996), 549 – 561.</ref>
          <ref rid="R4" class="deo:BibliographicReference" id="682" page="50" column="1">Agerbo, E., &amp; Cornils, A. (1998). How to preserve the benefits of design patterns. In Proceedings of OOPSLA’98, ACM SIGPLAN Notices 33(10), 134 – 143.</ref>
          <ref rid="R5" class="deo:BibliographicReference" id="683" page="50" column="1">Alexander, C. (1964). Notes on the Synthesis of Form. Harvard University Press Alexander, C. (1982). The Linz Café / Das Kafe Linz. Oxford, UK. Oxford University Press.</ref>
          <ref rid="R6" class="deo:BibliographicReference" id="685" page="50" column="1">Alexander, C. (1996). The Origins of Pattern Theory, the Future of the Theory, And The Generation of a Living World. Keynote address to the eleventh annual conference on Object-oriented programming systems, languages, and applications. October 6 - 10, 1996, San Jose, CA USA. Available from: <ext-link ext-link-type="uri" href="http://www.patternlanguage.com/archive/ieee/ieee.htm" id="684">http://www.patternlanguage.com/archive/ieee/ieee.htm</ext-link></ref>
          <ref rid="R7" class="deo:BibliographicReference" id="686" page="50" column="1">Alexander, C. (1979). The Timeless Way of Building. Oxford, UK. Oxford University Press.</ref>
          <ref rid="R8" class="deo:BibliographicReference" id="687" page="50" column="1">Alexander, C., Davis, H., Martinez, J., &amp; Corner, D. (1985). The Production of Houses. Oxford, UK: Oxford University Press.</ref>
          <ref rid="R9" class="deo:BibliographicReference" id="688" page="50" column="1">Alexander, C., Ishikawa, S., Silverstein, M., Jacobson, M., Fiksdahl-King, I., &amp; Angel, S. (1977). A Pattern Language. Oxford, UK. Oxford University Press.</ref>
          <ref rid="R10" class="deo:BibliographicReference" id="689" page="50" column="1">Alexander, C., Neis, H., Anninou, A., &amp; King, I. (1987). A New Theory of Urban Design. Oxford, UK. Oxford University Press.</ref>
          <ref rid="R11" class="deo:BibliographicReference" id="690" page="50" column="1">Alexander, C., Silverstein, M., Angel, S., Ishikawa, S., &amp; Abrams, D. (1975). The Oregon Experiment. Oxford, UK. Oxford University Press.</ref>
          <ref rid="R12" class="deo:BibliographicReference" id="691" page="50" column="1">Anderson, B. (1993). Addendum to the Proceedings of OOPSLA ’92. Workshop Report: Towards and Architecture Handbook. OOPS Messenger 4(2), pp. 109 – 113.</ref>
          <ref rid="R13" class="deo:BibliographicReference" id="692" page="50" column="1">Anderson, B., Coad, P., &amp; Mayfield, M. (1994). Addendum to the Proceedings of OOPSLA ’93. Workshop Report: Patterns: Building Blocks for Object Oriented Architectures. OOPS Messenger 5(2), pp. 107 – 109.</ref>
          <ref rid="R14" class="deo:BibliographicReference" id="694" page="50" column="1">Astrachan, O., &amp; Wallingford E. (1998). Loop Patterns. Paper presented at PLoP ’98. Available from: <ext-link ext-link-type="uri" href="http://jerry.cs.uiuc.edu/" id="693">http://jerry.cs.uiuc.edu/</ext-link>~plop/plop98/final_submissions/P60.pdf</ref>
          <ref rid="R15" class="deo:BibliographicReference" id="697" page="51" column="1">Astrachan, O., Berry, G., Cox, L., &amp; Mitchener, G. (1998). Design Patterns: An Essential Component of CS Curricula. ACM SIGSCE Bulletin, 30 (1), pp. 153 – 160.</ref>
          <ref rid="R16" class="deo:BibliographicReference" id="698" page="51" column="1">Barfield, L., Van Burgsteden, W., Lanfermeijer, R., Mulder, B., Ossewold, J., Rijken, D., &amp; Wegner, P. (1994). Education: Interaction Design. In ACM SIGCHI Bulletin, Vol 26, 3.</ref>
          <ref rid="R17" class="deo:BibliographicReference" id="699" page="51" column="1">Bayle, E., Bellamy, R., Casaday, G., Erickson, T., Fincher, S., Grinter, B., Gross, B., Lehder, D., Marmolin, H., Moore, B., Potts, C., Skousen, G., &amp; Thomas, J. (1998). Putting it all together: Towards a pattern language for interaction. SIGCHI Bulletin, 30, 1, 17-33.</ref>
          <ref rid="R18" class="deo:BibliographicReference" id="701" page="51" column="1">Beck, K., &amp; Cunningham, W. (1987). Using Pattern Languages for Object-Oriented Programs. Technical Report No. CR-87-43. Tektronix Inc., Available from: <ext-link ext-link-type="uri" href="http://c2.com/doc/oopsla87.html" id="700">http://c2.com/doc/oopsla87.html</ext-link></ref>
          <ref rid="R19" class="deo:BibliographicReference" id="702" page="51" column="1">Beck, K., &amp; Johnson, R. (1994). Patterns Generate Architectures. In, Proceedings of the OO Programming 8 th European conference (ECOOP 94) Berlin: Springer. 139-149</ref>
          <ref rid="R20" class="deo:BibliographicReference" id="703" page="51" column="1">Beck, K. (1994). Patterns and Software Development. Dr Dobbs Journal, 19 (2). pp. 18 – 23.</ref>
          <ref rid="R21" class="deo:BibliographicReference" id="704" page="51" column="1">Beck, K., Coplien, J. O., Crocker, R., Dominick, L., Meszaros, G., Paulisch, F., &amp; Vlissides, J. (1996). Industrial Experience with Design Patterns. Proceedings of the 18th International Conference on Software Engineering (ICSE 18). IEEE Computer Society, ISBN 0-8186- 7246-3. 103 – 114.</ref>
          <ref rid="R22" class="deo:BibliographicReference" id="706" page="51" column="1">Berczuk, S., Appleton, B., &amp; Cabrera, R. (2000). Getting Ready to Work: Patterns for a Developer’s Workspace. Paper presented at PLoP 2000. Available from: <ext-link ext-link-type="uri" href="http://jerry.cs.uiuc.edu/" id="705">http://jerry.cs.uiuc.edu/</ext-link>~plop/plop2k/proceedings/Berczuk/Berczuk.pdf</ref>
          <ref rid="R23" class="deo:BibliographicReference" id="708" page="51" column="1">Bjork, S., Lundren, S., &amp; Holopainen, J. (2003). Game Design Patterns Project. Available at <ext-link ext-link-type="uri" href="http://www.gamedesignpatterns.org/" id="707">http://www.gamedesignpatterns.org/</ext-link></ref>
          <ref rid="R24" class="deo:BibliographicReference" id="709" page="51" column="1">Blackwell, A., &amp; Green, T. (2003). Notational Systems – The Cognitive Dimensions of Notations Framework. In J. M. Carroll (ed.) HCI Models, Theories and Frameworks: Toward a Multidisciplinary Science, Morgan Kaufmann, pp. 103 – 134.</ref>
          <ref rid="R25" class="deo:BibliographicReference" id="711" page="51" column="1">Borchers, J. (2000a). Interaction Design Patterns: Twelve Theses. Position paper presented at the Workshop on Pattern Languages for Interaction Design, CHI 2000 Conference on Human Factors in Computing Systems, April 2-3rd, The Hague, Netherlands. Available at: <ext-link ext-link-type="uri" href="http://www.hcipatterns.org/publications.html" id="710">http://www.hcipatterns.org/publications.html</ext-link></ref>
          <ref rid="R26" class="deo:BibliographicReference" id="712" page="51" column="1">Borchers, J. (2000b). CHI Meets PLoP: An Interaction Patterns Workshop. SIGCHI Bulletin, 32 (1), 9 – 12.</ref>
          <ref rid="R27" class="deo:BibliographicReference" id="713" page="51" column="1">Borchers, J. (2001a). A Pattern Approach to Interaction Design. John Wiley and Sons, Chichester, UK.</ref>
          <ref rid="R28" class="deo:BibliographicReference" id="714" page="51" column="1">Borchers, J. (2001b). A Pattern Approach to Interaction Design. AI &amp; Society 15, 359 – 376.</ref>
          <ref rid="R29" class="deo:BibliographicReference" id="718" page="52" column="1">Borchers J. (2002). Teaching HCI Design Patterns: Experience From Two University Courses. Position paper for Patterns in Practice workshop at CHI 2002, Minneapolis, MI. April 21 – 25, 2002. Available from: <ext-link ext-link-type="uri" href="http://www.hcipatterns.org" id="717">http://www.hcipatterns.org</ext-link>.</ref>
          <ref rid="R30" class="deo:BibliographicReference" id="719" page="52" column="1">Borchers, J. O., &amp; Thomas, J. C. (2001). Patterns: what's in it for HCI? Panel Discussion. In, CHI '01 extended abstracts on Human factors in computer systems, ACM Press, ISBN 1- 58113-340-5, 225 – 226.</ref>
          <ref rid="R31" class="deo:BibliographicReference" id="720" page="52" column="1">Bradac, M., &amp; Fletcher, B. (1997). A Pattern Language for Developing Form Style Windows. In, Martin et al., 1997, 347 – 393.</ref>
          <ref rid="R32" class="deo:BibliographicReference" id="722" confidence="possible" page="52" column="1">Brighton Usability Group (2003). The Brighton Usability Patterns Collection. Available at: <ext-link ext-link-type="uri" href="http://www.cmis.brighton.ac.uk/research/patterns/home.html" id="721">http://www.cmis.brighton.ac.uk/research/patterns/home.html</ext-link></ref>
          <ref rid="R33" class="deo:BibliographicReference" id="723" page="52" column="1">Brown, W. H., Malveau, R. C., McCormick, H. W., &amp; Mowbray, T. J. (1998). AntiPatterns: Refactoring Software, Architectures and Projects in Crisis. New York, John Wiley.</ref>
          <ref rid="R34" class="deo:BibliographicReference" id="725" page="52" column="1">Buschmann, F. (2001). A Pattern Language for Distributed Object Computing. Presented at EuroPLoP 2001. Available at: <ext-link ext-link-type="uri" href="http://hillside.net/patterns/EuroPLoP2001/papers/Buschmann.zip" id="724">http://hillside.net/patterns/EuroPLoP2001/papers/Buschmann.zip</ext-link></ref>
          <ref rid="R35" class="deo:BibliographicReference" id="726" page="52" column="1">Buschmann, F., Meunier, R., Rohnert, H., Sommerlad, P., &amp; Stal, M. (1996). Pattern-oriented software architecture: a system of patterns, John Wiley &amp; Sons, Inc., New York, NY, 1996.</ref>
          <ref rid="R36" class="deo:BibliographicReference" id="728" page="52" column="1">Buschmann, F., Johnson, R., Coplien, J., Rising, L, Delano, D., Gamma, E., &amp; Schmidt D. (1996). How to hold a writers’ workshop, Written in preparation for PLoP 1996 Available from: <ext-link ext-link-type="uri" href="http://www.cs.wustl.edu/" id="727">http://www.cs.wustl.edu/</ext-link>~schmidt/writersworkshop.html</ref>
          <ref rid="R37" class="deo:BibliographicReference" id="729" page="52" column="1">Chambers, C., Harrison, B., &amp; Vlissides, J. (2000). A Debate on Language and Tool Support for Design Patterns. In Proceedings of the 27th ACM SIGPLAN-SIGACT symposium on Principles of programming languages. ACM Press. ISBN: 1-58113-125-9, pp. 277 – 289.</ref>
          <ref rid="R38" class="deo:BibliographicReference" id="730" page="52" column="1">Christiansen, E. (2005). Competence affirmation as a complementary quality of human-computer interaction. To be presented at Quality, Values and Choice a workshop at CHI 2005, Portland, OR, 1 st – 7 th April, 2005. Available from www.bath.ac.uk/~maspjaw/workshops/QVC/Papers/Christiansen.pdf</ref>
          <ref rid="R39" class="deo:BibliographicReference" id="731" page="52" column="1">Chung, E.S., Hong, J. I., Lin, J., Prabaker, M. K., Landay, J. A., &amp; Lin, A. L. (2004). Development and Evaluation of Emerging Design Patterns for Ubiquitous Computing. In Proceedings of DIS 2004, ACM Press, 233 – 242.</ref>
          <ref rid="R40" class="deo:BibliographicReference" id="732" confidence="possible" page="52" column="1">Cline, M. P. (1996). The Pros and Cons of Adopting and Applying Design Patterns in the Real World. Communications of the ACM 39 (10) 47 – 49.</ref>
          <ref rid="R41" class="deo:BibliographicReference" id="733" page="52" column="1">Coad, P. (1992). Object-Oriented Patterns. Communications of the ACM, 35(9), pp. 152 – 159.</ref>
          <ref rid="R42" class="deo:BibliographicReference" id="736" page="53" column="1">Coad, P., &amp; Mayfield, M. (1993). Addendum to the Proceedings of OOPSLA ’92. Workshop Report: Patterns. OOPS Messenger 4(2), pp. 93 - 95.</ref>
          <ref rid="R43" class="deo:BibliographicReference" id="738" page="53" column="1">Coldewey J. (1998). User Interface Software. Presented at PLoP ’98. Available from: <ext-link ext-link-type="uri" href="http://jerry.cs.uiuc.edu/" id="737">http://jerry.cs.uiuc.edu/</ext-link>~plop/plop98/final_submissions/P13.pdf</ref>
          <ref rid="R44" class="deo:BibliographicReference" id="739" page="53" column="1">Coplien, J. O. (1992). Advanced C++ programming styles and idioms. Reading MA. USA, Addison-Wesley.</ref>
          <ref rid="R45" class="deo:BibliographicReference" id="740" page="53" column="1">Coplien, J. O. (1998). Multi-paradigm design for C++. Addison-Wesley, Reading MA. USA.</ref>
          <ref rid="R46" class="deo:BibliographicReference" id="742" page="53" column="1">Coplien, J. O. (2001). Writers Workshop Patterns. Available from: <ext-link ext-link-type="uri" href="http://c2.com/cgi/wiki?WritersWorkshopPatterns" id="741">http://c2.com/cgi/wiki?WritersWorkshopPatterns</ext-link></ref>
          <ref rid="R47" class="deo:BibliographicReference" id="743" page="53" column="1">Coplien, J., &amp; Schmidt, D. (1995). Pattern Languages of Program Design. Reading MA. USA, Addison-Wesley.</ref>
          <ref rid="R48" class="deo:BibliographicReference" id="744" page="53" column="1">Dearden A, Finlay, J., Allgar, E., &amp; McManus, B. (2002a). Evaluating Patterns in Participatory Design. In Adjunct Proceedings of CHI 2002, pp. 664 – 665. ACM Press, New York, USA.</ref>
          <ref rid="R49" class="deo:BibliographicReference" id="745" page="53" column="1">Dearden A, Finlay, J., Allgar, E., &amp; McManus, B. (2002b). Using Pattern Languages in Participatory Design. In Binder, T., Gregory, J., &amp; Wagner, I. (Eds.) Proceedings of PDC 2002. CPSR: Palo Alto, CA.</ref>
          <ref rid="R50" class="deo:BibliographicReference" id="746" page="53" column="1">Dearden, A. M., &amp; Harrison, M. D., (1997). Abstract Models for HCI. International Journal of Human-Computer Studies, 46 (1), 151 - 177.</ref>
          <ref rid="R51" class="deo:BibliographicReference" id="747" page="53" column="1">Denning, P., &amp; Dargan, P., (1996). Action Centred Design. In, Winograd, T. (Ed.) Bringing Design to Software. ACM Press. ISBN 0-201-85491-0. pp. 105 – 120.</ref>
          <ref rid="R52" class="deo:BibliographicReference" id="748" page="53" column="1">Dorst, K. (2003). Understanding Design: 150 Ways of Looking at Design. Book Industry Services, Amsterdam.</ref>
          <ref rid="R53" class="deo:BibliographicReference" id="749" page="53" column="1">Dovey, K. (1990). The pattern language and its enemies. Design Studies 11(1), 3 - 9.</ref>
          <ref rid="R54" class="deo:BibliographicReference" id="750" confidence="possible" page="53" column="1">Du, M., &amp; England, D. (2001). Temporal Patterns for Complex Interaction Design. In Johnson, C. (Ed.): Interactive Systems: Design, Specification, and Verification, 8th International Workshop, DSV-IS 2001, Lecture Notes in Computer Science 2220, London: Springer. 114-127</ref>
          <ref rid="R55" class="deo:BibliographicReference" id="751" page="53" column="1">Dyson, P., &amp; Anderson, B. (1997). State Patterns. In Martin et al. (Eds.) 1997, 125 – 142.</ref>
          <ref rid="R56" class="deo:BibliographicReference" id="752" page="53" column="1">Ehn, P., &amp; Kyng, M., (1991). Cardboard Computers: Mocking-it-up or Hands-on the Future. In Greenbaum, J., &amp; Kyng, M. (Eds.), Design at Work. pp. 169-196, Lawrence Erlbaum Associates, Hillsdale, NJ.</ref>
          <ref rid="R57" class="deo:BibliographicReference" id="755" page="54" column="1">Ehn, P. &amp; Sjőgren, D., (1991). From System Descriptions to Scripts for Action, In Greenbaum, J., &amp; Kyng, M. (Eds.), Design at Work. pp. 241 – 268. Lawrence Erlbaum Associates, Hillsdale, NJ.</ref>
          <ref rid="R58" class="deo:BibliographicReference" id="756" page="54" column="1">Erickson, T. (2000a). Lingua Francas for Design: Sacred Places and Pattern Languages. In The Proceedings of DIS 2000 (Brooklyn, NY, August 17-19, 2000). New York: ACM Press, 357-368.s</ref>
          <ref rid="R59" class="deo:BibliographicReference" id="758" page="54" column="1">Erickson, T. (2000b). Making Sense of Computer-Mediated Communication (CMC): Conversations as Genres, CMC Systems as Genre Ecologies. In Nunamaker, J. F. Jr. and Sprague, R. H. Jr (Eds.) Proceedings of the Thirty-Third Hawaii International Conference on Systems Science HICSS-33. IEEE Press. p3011. A longer version of this paper is available from: <ext-link ext-link-type="uri" href="http://www.pliant.org/personal/Tom_Erickson/genreEcologies.html" id="757">http://www.pliant.org/personal/Tom_Erickson/genreEcologies.html</ext-link></ref>
          <ref rid="R60" class="deo:BibliographicReference" id="760" page="54" column="1">Fernández, A., Holmer, T., Rubart, J., &amp; Schűmmer, T. (2002). Three Groupware Patterns from the Activity Awareness Family. Presented at EuroPLoP 2002. Available at: <ext-link ext-link-type="uri" href="http://hillside.net/patterns/EuroPLoP2002/papers/Fernandez_Holmer_Rubart_Schuemme" id="759">http://hillside.net/patterns/EuroPLoP2002/papers/Fernandez_Holmer_Rubart_Schuemme</ext-link> r.zip</ref>
          <ref rid="R61" class="deo:BibliographicReference" id="761" page="54" column="1">Fincher, S. (1999). Analysis of Design: An Exploration of Patterns and Pattern Languages for Pedagogy. Journal of Computers in Mathematics and Science Teaching: Special Issue on Computer Science Education, 18 (3), pp. 331-348.</ref>
          <ref rid="R62" class="deo:BibliographicReference" id="763" page="54" column="1">Fincher, S. (2000a). “Capture of Practice": Is it obvious? BCS HCI Group/IFIP WG 13.2 Workshop on HCI Patterns, November 2000. Available at <ext-link ext-link-type="uri" href="http://www.cs.kent.ac.uk/people/staff/saf/patterns/bcs.pdf" id="762">http://www.cs.kent.ac.uk/people/staff/saf/patterns/bcs.pdf</ext-link></ref>
          <ref rid="R63" class="deo:BibliographicReference" id="765" page="54" column="1">Fincher, S. (2000b). The Pattern Gallery. Available at <ext-link ext-link-type="uri" href="http://www.cs.ukc.ac.uk/people/staff/saf/patterns/gallery.html" id="764">http://www.cs.ukc.ac.uk/people/staff/saf/patterns/gallery.html</ext-link></ref>
          <ref rid="R64" class="deo:BibliographicReference" id="767" page="54" column="1">Fincher. S. (2002). Patterns for HCI and Cognitive Dimensions: two halves of the same story? In Kuljis, J., Baldwin, L., &amp; Scoble, R. (eds.), Proceedings of the Fourteenth Annual Workshop of the Psychology of Programming Interest Group, Brunel University, UK, June 2002, pp. 156-172. Available at: <ext-link ext-link-type="uri" href="http://www.ppig.org/papers/14th-fincher.pdf" id="766">http://www.ppig.org/papers/14th-fincher.pdf</ext-link></ref>
          <ref rid="R65" class="deo:BibliographicReference" id="768" page="54" column="1">Fincher, S. (2003). PLML: Pattern Language Markup Language. Interfaces, 56, British HCI Group. Report of Workshop held at CHI2003, pp. 26-28</ref>
          <ref rid="R66" class="deo:BibliographicReference" id="769" page="54" column="1">Fincher, S., &amp; Utting, I. (2002). Pedagogical patterns, their place in the genre. In Proceedings of ITiCSE. June 24 th – 26 th Aarhus, Denmark. ACM Press.</ref>
          <ref rid="R67" class="deo:BibliographicReference" id="771" page="54" column="1">Fincher, S., &amp; Windsor, P. (2000). Why patterns are not enough: some suggestions concerning an organising principle for patterns of UI design, CHI’2000 Workshop on Pattern Languages for Interaction Design: Building Momentum. Available at <ext-link ext-link-type="uri" href="http://www.cs.kent.ac.uk/people/staff/saf/patterns/chi00.pdf" id="770">http://www.cs.kent.ac.uk/people/staff/saf/patterns/chi00.pdf</ext-link></ref>
          <ref rid="R68" class="deo:BibliographicReference" id="774" page="55" column="1">Fincher, S., Finlay, J., Greene, S., Jones, L., Matchen, P., Thomas, J., &amp; Molina, P. (2003). Perspectives on HCI patterns: concepts and tools, CHI '03 extended abstracts on Human factors in computer systems, April 05-10, 2003, Ft. Lauderdale, Florida, USA, pp. 1044- 1045</ref>
          <ref rid="R69" class="deo:BibliographicReference" id="775" page="55" column="1">Finlay, J., Allgar, E., Dearden, A., &amp; McManus, B. (2002). Pattern Languages in Participatory Design, in Faulkner, X., Finlay, J., &amp; Detienne, F. (eds.), People and Computers XVI Memorable yet Invisible, Proceedings of HCI2002, pp. 159-174, Springer Verlag: London.</ref>
          <ref rid="R70" class="deo:BibliographicReference" id="776" page="55" column="1">Fowler, M. (1997). Analysis Patterns: Reusable Object Models. Addison Wesley, Menlo Park, CA., USA. ISBN: 0-20189542-0.</ref>
          <ref rid="R71" class="deo:BibliographicReference" id="777" page="55" column="1">Fraser, S., Beck, K., Booch, G., Johnson, R., &amp; Opdyke, B. (1997). Beyond the Hype: Do Patterns and Frameworks Reduce Discovery Costs? Proceedings of the 1997 ACM SIGPLAN Conference on Object-Oriented Programming Systems, Languages &amp; Applications (OOPSLA '97) SIGPLAN Notices 32 (10) 342-344.</ref>
          <ref rid="R72" class="deo:BibliographicReference" id="778" page="55" column="1">Gabriel R. (1996a). Introduction to Pattern Languages of Program Design 2, Vlissides et al. (Eds.) 1996.</ref>
          <ref rid="R73" class="deo:BibliographicReference" id="779" page="55" column="1">Gabriel R. P. (1996b). Patterns of Software: tales from the software community. Oxford University Press. ISBN 019510269X.</ref>
          <ref rid="R74" class="deo:BibliographicReference" id="780" page="55" column="1">Gamma, E., Helm, R., Johnson, R., &amp; Vlissides, J. (1993). Design Patterns: Abstraction and Reuse of Object-Oriented Design. In Proceedings of the 7 th European OO Programming conference ECOOP 93, LNCS 707. Springer, Berlin, Germany. 406 – 431.</ref>
          <ref rid="R75" class="deo:BibliographicReference" id="781" page="55" column="1">Gamma, E., Helm, R., Johnson, R., &amp; Vlissides, J. 1995. Design Patterns: Elements of Reusable Object-Oriented Software. Addison-Wesley, Reading, MA.</ref>
          <ref rid="R76" class="deo:BibliographicReference" id="782" page="55" column="1">Garlan, D., &amp; Delisle, N. (1990). Formal specifications as reusable frameworks. In Bjorner, B. Hoare, C. A. R., &amp; Langmaack H. (Eds.) VDM and Z: Formal Methods in Software Development. LNCS 428, Springer-Verlag, 150 – 163.</ref>
          <ref rid="R77" class="deo:BibliographicReference" id="783" page="55" column="1">Garlan, D., &amp; Notkin, D. (1991). Formalising design spaces: Implicit invocation mechanisms. In, Prehn, S. &amp; Toetenel, W. J. (Eds.) VDM ’91: Formal Software Development Methods.. LNCS 551, Springer-Verlag, 31 – 44.</ref>
          <ref rid="R78" class="deo:BibliographicReference" id="784" page="55" column="1">Garlan, D., &amp; Shaw, M. (1993). An Introduction to Software Architecture. In Ambriola, V., &amp; Tortora, G. (Eds.), Advances in Software Engineering and Knowledge Engineering, Series on Software Engineering and Knowledge Engineering, Vol 2, World Scientific Publishing Company, Singapore, pp. 1-39.</ref>
          <ref rid="R79" class="deo:BibliographicReference" id="786" confidence="possible" page="55" column="1">GNOME Project, (2003). The GNOME Human Interface Guidelines. <ext-link ext-link-type="uri" href="http://developer.gnome.org/projects/gup/hig/1.0" id="785">http://developer.gnome.org/projects/gup/hig/1.0</ext-link></ref>
          <ref rid="R80" class="deo:BibliographicReference" id="789" page="56" column="1">Goldfedder, B., &amp; Rising, L. (1996). A Training Experience with Patterns. Communications of the ACM 39(10) 60 – 64.</ref>
          <ref rid="R81" class="deo:BibliographicReference" id="790" page="56" column="1">Grabow, S. (1983). Christopher Alexander. The search for a new paradigm in architecture. Stocksfield, Northumberland, UK: Oriel Press.</ref>
          <ref rid="R82" class="deo:BibliographicReference" id="791" page="56" column="1">Graham, I. (2003). A Pattern Language for Web Usability. Addison Wesley: London.</ref>
          <ref rid="R83" class="deo:BibliographicReference" id="792" page="56" column="1">Granlund, A., Lafreniere, D., &amp; Carr, D. A. (2001). PSA: A pattern supported approach to the user interface design process. In Proceedings of HCI International 2001, vol. 1, Mahwah, NJ: Lawrence Erbaum Associates pp. 282-286.</ref>
          <ref rid="R84" class="deo:BibliographicReference" id="794" page="56" column="1">Granlund, A., &amp; Lafreniere, D. (1999). A pattern-supported approach to the user interface design process. Workshop report, UPA'99 Usability Professionals' Association Conference (Scottsdale, AZ, June 29-July 2, 1999). Available from: <ext-link ext-link-type="uri" href="http://www.upassoc.org/conf99reg/ws6.shtml" id="793">http://www.upassoc.org/conf99reg/ws6.shtml</ext-link></ref>
          <ref rid="R85" class="deo:BibliographicReference" id="795" page="56" column="1">Greenbaum, J., &amp; Kyng, M. (Eds.) (1991). Design at Work. pp. 169-196, Lawrence Erlbaum Associates, Hillsdale, NJ, USA.</ref>
          <ref rid="R86" class="deo:BibliographicReference" id="797" page="56" column="1">Griffiths, R., Pemberton, L., &amp; Borchers, J. (1999). Usability Pattern Language: Creating a community. In Brewster, S., Cawsey, A., &amp; Cockton, G. (Eds.) Human-Computer Interaction – Interact 99 (Volume II). British Computer Society, ISBN: 1-902505-19-0, p. 135. Outputs from workshop are available at <ext-link ext-link-type="uri" href="http://www.it.bton.ac.uk/staff/rng/UPLworkshop99/" id="796">http://www.it.bton.ac.uk/staff/rng/UPLworkshop99/</ext-link></ref>
          <ref rid="R87" class="deo:BibliographicReference" id="798" page="56" column="1">Griffiths, R., Pemberton, L., Borchers, J., &amp; Stork, A. (2000). Pattern languages for interaction design: Building momentum. CHI2000 Extended Abstracts, p. 363. ACM Press, 2000.</ref>
          <ref rid="R88" class="deo:BibliographicReference" id="799" page="56" column="1">Griffiths, R. N., &amp; Pemberton, L. (2001). 'Patterns in Human-Computer Interaction Design' (panel session) In, J. Vanderdonckt, A. Blandford, &amp; A. Derycke, (Eds.) Proceedings of IHM-HCI 2001, volume II, Toulouse, France, Cépaduès-Éditions.</ref>
          <ref rid="R89" class="deo:BibliographicReference" id="800" page="56" column="1">Hall, P. A. V., Lawson, C. J., &amp; Minocha, S. (2003). Design Patterns as a Guide to the Cultural Localisation of Software. In Proceedings of the 5 th International Workshop on Internationalisation of Products and Systems, Berlin, 17 th – 19 th July, 2003, pp. 79 – 88.</ref>
          <ref rid="R90" class="deo:BibliographicReference" id="802" page="56" column="1">Hanmer, R. S. (2000). Real Time and Resource Overload Language. Presented at PLoP 2000. Available at: <ext-link ext-link-type="uri" href="http://jerry.cs.uiuc.edu/" id="801">http://jerry.cs.uiuc.edu/</ext-link>~plop/plop2k/proceedings/Hanmer/Hanmer.pdf</ref>
          <ref rid="R91" class="deo:BibliographicReference" id="803" page="56" column="1">Harrison, N., Foote, B., &amp; Rohnert, H. (Eds.) (1999). Pattern Languages of Program Design 4. Reading, MA., USA, Addison Wesley.</ref>
          <ref rid="R92" class="deo:BibliographicReference" id="804" page="56" column="1">Hartson, H. R., Siochi, A. C., &amp; Hix, D. (1990). The UAN: A user-oriented representation for direct manipulation. ACM Trans. on Information Systems 8(3): 181 – 203.</ref>
          <ref rid="R93" class="deo:BibliographicReference" id="805" page="56" column="1">Henninger, S. (2001). An Organizational Learning Method for Applying Usability Guidelines and Patterns. In Little, M.R. &amp; Nigay, L. (Eds.) Engineering Human-Computer Interaction. LNCS 2254. Springer, Berlin, Germany 141 – 156.</ref>
          <ref rid="R94" class="deo:BibliographicReference" id="808" page="57" column="1">Holtzblatt, K., &amp; Beyer, H. (1997). Contextual Design. Morgan Kaufman, San Fransisco, CA, USA.</ref>
          <ref rid="R95" class="deo:BibliographicReference" id="809" page="57" column="1">Hussey, A. (1999). Patterns for safer human-computer interfaces. In M. Felici, K. Kanoun &amp; A. Pasquini, editors, Computer Safety, Reliability and Security: SAFECOMP'99, 103-112. Springer-Verlag.</ref>
          <ref rid="R96" class="deo:BibliographicReference" id="810" page="57" column="1">Hussey, A., &amp; Mahemoff, M. (1999). Safety-Critical Usability: Pattern-based Reuse of Successful Design Concepts. In M. McNicol (ed.), 4th Australian Workshop on Industrial Experience with Safety Critical Systems and Software (SCS) 99, Canberra, Australia, pages 19-34, ACS</ref>
          <ref class="deo:BibliographicReference" id="812" page="57" column="1">International Standards Organisation (no date) ISO International Standard 9241 (Ergonomic requirements for office work with visual display terminals) Available from <ext-link ext-link-type="uri" href="http://www.iso.org/" id="811">http://www.iso.org/</ext-link></ref>
          <ref rid="R97" class="deo:BibliographicReference" id="813" page="57" column="1">Johnson, R. (1992). Documenting Frameworks using Patterns. In Proceedings of OOPSLA’92 pp 63 – 76. ACM Press.</ref>
          <ref rid="R98" class="deo:BibliographicReference" id="814" page="57" column="1">Johnson, R., &amp; Cunningham, W. (1995). Introduction to Coplien &amp; Schmidt, 1995.</ref>
          <ref rid="R99" class="deo:BibliographicReference" id="816" page="57" column="1">Judkins, T. V., &amp; Gill, C. D. G. (2000). Synthesizer A Pattern Language for Designing Digital Modular Synthesis Software. Paper presented at PLOP 2000, available from <ext-link ext-link-type="uri" href="http://jerry.cs.uiuc.edu/" id="815">http://jerry.cs.uiuc.edu/</ext-link>~plop/plop2k/proceedings/Judkins/Judkins.pdf</ref>
          <ref rid="R100" class="deo:BibliographicReference" id="817" page="57" column="1">Kafura, D., Lavender, G., &amp; Schmidt, D. (1995). Workshop on Design Patterns for Concurrent, Parallel and Distributed Object Oriented Systems. In Addendum to the proceedings of OOPSLA ’95 OOPS Messenger 6(4) 128 – 131.</ref>
          <ref rid="R101" class="deo:BibliographicReference" id="818" page="57" column="1">Kendall E. A., Murali Krishna, P. V., Pathak, C. V., &amp; Suresh, C. B. (1998). Patterns of Intelligent and Mobile Agents. In, Proceedings of the Second International Conference on Autonomous Agents. 92 – 99. ACM Press.</ref>
          <ref rid="R102" class="deo:BibliographicReference" id="819" page="57" column="1">King, I. (1993). Christopher Alexander and Contemporary Architecture. Special issue of Architecture and Urbanism, August 1993.</ref>
          <ref rid="R103" class="deo:BibliographicReference" id="821" page="57" column="1">Laakso, S. (2003). User Interface Design Patterns, Available at <ext-link ext-link-type="uri" href="http://www.cs.helsinki.fi/u/salaakso/patterns/" id="820">http://www.cs.helsinki.fi/u/salaakso/patterns/</ext-link></ref>
          <ref rid="R104" class="deo:BibliographicReference" id="822" page="57" column="1">Landay, J.A., &amp; Borriello, G. (2003). Design Patterns for Ubiquitous Computing. Computer 36(8), 93 – 95.</ref>
          <ref rid="R105" class="deo:BibliographicReference" id="823" confidence="possible" page="57" column="1">Lane, T. G. (1990). Studying Software Architecture through Design Spaces and Rules. Technical Report CMU/ SEI-90-TR-18. Software Engineering Institute, Carnegie Mellon University.</ref>
          <ref rid="R106" class="deo:BibliographicReference" id="824" page="57" column="1">Lea, D. (1994). Christopher Alexander: An Introduction for Object-Oriented Designers, Software Engineering Notes, 19 (1) 39-46.</ref>
          <ref rid="R107" class="deo:BibliographicReference" id="828" page="58" column="1">Leacock, M., Malone, E., &amp; Wheeler C. (2005). Implementing a Pattern Library in the Real World: A Yahoo! Case Study. Presented at the American Society for Information Science and Technology Information Architecture Summit, Montréal, Québec, Canada, 3 rd – 7 th March, 2005. Available at: <ext-link ext-link-type="uri" href="http://leacock.com/patterns/" id="827">http://leacock.com/patterns/</ext-link></ref>
          <ref rid="R108" class="deo:BibliographicReference" id="829" page="58" column="1">Lin, J., &amp; Landay, J. A. (2002). Damask: A Tool for Early-Stage Design and Prototyping of Multi-Device User Interfaces. In Proceedings of The 8th International Conference on Distributed Multimedia Systems (2002 International Workshop on Visual Computing), San Francisco, CA, September 26-28, 2002, pp. 573-580.</ref>
          <ref rid="R109" class="deo:BibliographicReference" id="830" page="58" column="1">Light, A., Blandford, A., Cockton, G., Dearden, A., &amp; Finlay, J. (2004). Values in HCI: What drives our Practice. Panel in, Dearden, A., &amp; Watts L. (Eds) Proceedings of HCI 2004: Volume 2, pp211 - 212, British HCI Group.</ref>
          <ref rid="R110" class="deo:BibliographicReference" id="831" page="58" column="1">Maclean, A., Young, R. M., Bellotti, V. M. E., &amp; Moran, T. P. (1991). Questions, Options &amp; Criteria: elements of design space analysis. Human-Computer Interaction, 6 (3 &amp; 4) 201 – 250.</ref>
          <ref rid="R111" class="deo:BibliographicReference" id="832" page="58" column="1">Mahemoff, M. J., &amp; Johnston, L. J. (1998). Principles for a Usability-Oriented Pattern Language In Calder, P., &amp; Thomas, B. (Eds.), OZCHI '98 Proceedings , Los Alamitos, CA IEEE Press. 132-139.</ref>
          <ref rid="R112" class="deo:BibliographicReference" id="834" page="58" column="1">Mai, Y., &amp; de Champlain, M. (2001). A Pattern Language to Visitors. Presented at PLoP 2001. Available from: <ext-link ext-link-type="uri" href="http://jerry.cs.uiuc.edu/" id="833">http://jerry.cs.uiuc.edu/</ext-link>~plop/plop2001/accepted_submissions/PLoP2001/ymai0/PLoP20 01_ymai0_1.pdf</ref>
          <ref rid="R113" class="deo:BibliographicReference" id="835" page="58" column="1">Mapelsden, D. Hosking, J., &amp; Grundy, J. (2002). Design Pattern Modelling and Instantiation using DPML. In, Noble, J., &amp; Potter, J. (Eds.) Proceedings of the 40 th International Conference on Technology of Object-Oriented Languages and Systems (TOOLS Pacific 2002), 3 – 11. ACM Press.</ref>
          <ref rid="R114" class="deo:BibliographicReference" id="837" page="58" column="1">Marick, B. (2000). Using Ring Buffer Logging to Help Find Bugs. Presented at PLoP 2000. Available from: <ext-link ext-link-type="uri" href="http://jerry.cs.uiuc.edu/" id="836">http://jerry.cs.uiuc.edu/</ext-link>~plop/plop2k/proceedings/Marick/Marick.pdf</ref>
          <ref rid="R115" class="deo:BibliographicReference" id="838" page="58" column="1">Martin, D., Rodden, T., Rouncefield, M., Sommerville, I &amp; Viller, S. (2001). Finding Patterns in the Fieldwork. In Prinz, W., Jarke, M., Rogers, Y, Schmidt, K., &amp; Wulf, V. (Eds.): Proceedings of the Seventh European Conference on Computer Supported Cooperative Work, Kluwer 2001 ISBN: 0-7923-7162-3, pp.39-58</ref>
          <ref rid="R116" class="deo:BibliographicReference" id="839" page="58" column="1">Martin, D., Rouncefield, M., &amp; Sommerville, I. (2002). Applying patterns of cooperative interaction to work (re)design: e-government and planning. In Proceedings of CHI 2002. ACM Press, 235-242</ref>
          <ref rid="R117" class="deo:BibliographicReference" id="840" page="58" column="1">Martin, R. C., Riehle, D., &amp; Buschmann, F. (Eds.) (1997). Pattern Languages of Program Design 3. Addison Wesley, Reading MA., USA etc. ISBN: 0201310112.</ref>
          <ref rid="R118" class="deo:BibliographicReference" id="841" page="58" column="1">Maslow, A. 1970. Motivation and Personality, Third Edition, Harper and Row, London, UK.</ref>
          <ref rid="R119" class="deo:BibliographicReference" id="844" page="59" column="1">May, D., &amp; Taylor, P. (2003). Knowledge Management with Patterns, Communications of the ACM, 46(7) 94-99</ref>
          <ref rid="R120" class="deo:BibliographicReference" id="845" confidence="possible" page="59" column="1">McKenney, P. E. (1996). Selecting Locking Primitives for Parallel Programming. Communications of the ACM, 39(10), October 1996, pp. 75 - 82.</ref>
          <ref rid="R121" class="deo:BibliographicReference" id="846" page="59" column="1">Meijler, T., D., Demeyer, S., &amp; Engel, R. (1997). Making Design Patterns Explicit in FACE: a Framework Adaptive Composition Environment. In, Jazayeri, M., &amp; Schauer, H. (Eds.) Proceedings of the 6th European Software Engineering Conference. Springer-Verlag, New York, NY., USA. ISBN: 3-540-63531-9, pp. 94–110.</ref>
          <ref rid="R122" class="deo:BibliographicReference" id="847" page="59" column="1">Meszaros, G. (1996). Patterns for Decision Making in Architectural Design. In Addendum to the proceedings of OOPSLA ’95 OOPS Messenger 6(4) 132 – 137.</ref>
          <ref rid="R123" class="deo:BibliographicReference" id="848" page="59" column="1">Meszaros, G., &amp; Doble, J. (1998). A Pattern Language for Pattern Writing. In, Martin et al. 1997, 529 – 574.</ref>
          <ref rid="R124" class="deo:BibliographicReference" id="850" confidence="possible" page="59" column="1">Microsoft Corporation (2003). Windows XP Visual Guidelines. Available at: <ext-link ext-link-type="uri" href="http://www.microsoft.com/hwdev/windowsxp/downloads/" id="849">http://www.microsoft.com/hwdev/windowsxp/downloads/</ext-link></ref>
          <ref rid="R125" class="deo:BibliographicReference" id="851" page="59" column="1">Mikkonen, T. (1998). Formalising Design Patterns. In Proceedings of the 20th International Conference on Sofware Engineering. IEEE Press, Los Alamitos, CA., USA.</ref>
          <ref rid="R126" class="deo:BibliographicReference" id="853" page="59" column="1">Molina, P.J., Torres, I., &amp; Pastor, O. (2003). User Interface Patterns for Object-Oriented Navigation upgrade IV, 1, February 2003. Available at: <ext-link ext-link-type="uri" href="http://www.upgrade-cepis.org/issues/2003/1/upgrade-vIV-1.html" id="852">http://www.upgrade-cepis.org/issues/2003/1/upgrade-vIV-1.html</ext-link></ref>
          <ref rid="R127" class="deo:BibliographicReference" id="854" page="59" column="1">Muller, M. J., Haslwanter, J. H., &amp; Dayton, T. (1997). Participatory Practices in the Software Lifecycle. In Helander, M., Laundauer, T. K., &amp; Prabhu, P. (Eds.) Handbook of Human- Computer Interaction, Second Edition. Elsevier Science, BV, Amsterdam.</ref>
          <ref rid="R128" class="deo:BibliographicReference" id="856" confidence="possible" page="59" column="1">Mullet, K. 2002. Structuring pattern languages to facilitate design. CHI2002 Patterns in Practice: A Workshop for UI Designers Available at <ext-link ext-link-type="uri" href="http://www.welie.com/patterns/chi2002-workshop/Mullet.pdf." id="855">http://www.welie.com/patterns/chi2002-workshop/Mullet.pdf.</ext-link></ref>
          <ref rid="R129" class="deo:BibliographicReference" id="857" page="59" column="1">Nanard, M., Nanard, J., &amp; Kahn, P. (1998). Pushing Reuse in Hypermedia Design: Golden Rules, Design Patterns and Constructive Templates. In Proceedings of the Ninth ACM conference on Hypertext, pp. 11- 20.</ref>
          <ref rid="R130" class="deo:BibliographicReference" id="858" page="59" column="1">Nielsen, J. (1994). Heuristic Evaluation. In Nielsen, J., &amp; Mack, R. L. (Eds.) Usability Inspection Methods, New York: John Wiley &amp; Sons.</ref>
          <ref rid="R131" class="deo:BibliographicReference" id="859" page="59" column="1">Nielsen, J. (1993). Usability Engineering. Morgan Kaufmann. San Fransisco, CA, USA.</ref>
          <ref rid="R132" class="deo:BibliographicReference" id="860" page="59" column="1">Norman, D., &amp; Draper, S. (Eds.) (1986). User Centered System Design: New Perspectives on Human-Computer Interaction. Lawrence Erlbaum Associates, Hillsdale, NJ.</ref>
          <ref rid="R133" class="deo:BibliographicReference" id="861" confidence="possible" page="59" column="1">Norman, D. (1988). The Psychology of Everyday Things. Basic Books. New York.</ref>
          <ref rid="R134" class="deo:BibliographicReference" id="864" page="60" column="1">O’Neill, E. (1998). User-developer co-operation in software development. Building common ground and usable systems. PhD Thesis, Queen Mary &amp; Westfield College, University of London.</ref>
          <ref rid="R135" class="deo:BibliographicReference" id="865" page="60" column="1">Paternò, F. (2000). Model-Based Design and Evaluation of Interactive Applications, Berlin: Spinger-Verlag.</ref>
          <ref rid="R136" class="deo:BibliographicReference" id="867" page="60" column="1">Pemberton, L. (2000). The Promise of Pattern Languages for Interaction Design. Article based on presentation at HF2000, Loughborough. Available from <ext-link ext-link-type="uri" href="http://www.it.bton.ac.uk/staff/lp22/HF2000.html" id="866">http://www.it.bton.ac.uk/staff/lp22/HF2000.html</ext-link></ref>
          <ref rid="R137" class="deo:BibliographicReference" id="869" confidence="possible" page="60" column="1">PLoP (1998). Proceedings of Pattern Languages of Programs ’98. Technical Report, WUCS-98- 25. Department of Computer Science, Washington University, WA. USA. Available from: <ext-link ext-link-type="uri" href="http://jerry.cs.uiuc.edu/" id="868">http://jerry.cs.uiuc.edu/</ext-link>~plop/plop98/final_submissions/</ref>
          <ref rid="R138" class="deo:BibliographicReference" id="871" confidence="possible" page="60" column="1">PLoP (1999). On-line Proceedings of Pattern Languages of Programs '99. Available from <ext-link ext-link-type="uri" href="http://jerry.cs.uiuc.edu/" id="870">http://jerry.cs.uiuc.edu/</ext-link>~plop/plop99/proceedings/</ref>
          <ref rid="R139" class="deo:BibliographicReference" id="873" confidence="possible" page="60" column="1">PLoP (2000). Proceedings of PLoP 2000. Technical Report, WUCS-00-29, Department of Computer Science, Washington University, WA. USA. Available from <ext-link ext-link-type="uri" href="http://jerry.cs.uiuc.edu/" id="872">http://jerry.cs.uiuc.edu/</ext-link>~plop/plop2k/proceedings/proceedings.html</ref>
          <ref rid="R140" class="deo:BibliographicReference" id="875" confidence="possible" page="60" column="1">PLoP (2001). On-line Proceedings of the 8th Conference on Pattern Languages of Programs. Available from <ext-link ext-link-type="uri" href="http://jerry.cs.uiuc.edu/" id="874">http://jerry.cs.uiuc.edu/</ext-link>~plop/plop2001/accepted_submissions/accepted- papers.html</ref>
          <ref rid="R141" class="deo:BibliographicReference" id="877" confidence="possible" page="60" column="1">PLoP (2002). On-line Proceedings of the 9th Conference on Pattern Languages of Programs. Available at: <ext-link ext-link-type="uri" href="http://jerry.cs.uiuc.edu/" id="876">http://jerry.cs.uiuc.edu/</ext-link>~plop/plop2002/proceedings.html</ref>
          <ref rid="R142" class="deo:BibliographicReference" id="878" page="60" column="1">Rheinfrank, J., &amp; Evenson, S. (1996). Design Languages. In, Winograd, T. (Ed.) Bringing Design to Software. ACM Press. ISBN 0-201-85491-0. pp. 63 – 80.</ref>
          <ref rid="R143" class="deo:BibliographicReference" id="880" page="60" column="1">Richardson, C. (2001). A Pattern Language for J2EE Web Component Development. Presented at PLoP 2001. Available at: <ext-link ext-link-type="uri" href="http://jerry.cs.uiuc.edu/" id="879">http://jerry.cs.uiuc.edu/</ext-link>~plop/plop2001/accepted_submissions/PLoP2001/crichardson0/P LoP2001_crichardson0_3.pdf</ref>
          <ref rid="R144" class="deo:BibliographicReference" id="881" page="60" column="1">Riehle, D., &amp; Zullighoven, H. (1995). A Pattern Language for Tool Construction and Integration based on the Tools &amp; Materials Metaphor. In Coplien &amp; Schmidt, 1995, 9–42.</ref>
          <ref rid="R145" class="deo:BibliographicReference" id="882" page="60" column="1">Rossi, G., Schwabe, D., &amp; Garrido, A. (1997). Design Reuse in Hypermedia Applications Development. In, Proceedings of the eighth ACM conference on Hypertext. ACM Press, ISBN: 0-89791-866-5, pp. 57 – 66.</ref>
          <ref rid="R146" class="deo:BibliographicReference" id="883" page="60" column="1">Rossi, G., Lyardet, F. D., &amp; Schwabe, D. (1999). Developing Hypermedia Applications with Methods and Patterns. ACM Computing Surveys, 31(4es) Electronic Symposium on Hypertext and Hypermedia, December 1999.</ref>
          <ref rid="R147" class="deo:BibliographicReference" id="886" page="61" column="1">Rossi, G., Schwabe, D., &amp; Lyardet, F. (2000). User Interface Patterns for Hypermedia Applications. In, Proceedings of the Working Conference on Advanced Visual Interfaces. ACM Press, ISBN: 1-58113-252-2, 136 – 142.</ref>
          <ref rid="R148" class="deo:BibliographicReference" id="887" page="61" column="1">Roth, J. (2002). Patterns of Mobile Interaction Personal and Ubiquitous Computing 6 (4) 282- 289.</ref>
          <ref rid="R149" class="deo:BibliographicReference" id="889" page="61" column="1">Sandu, D. (2001). Collection Patterns. Presented at PLoP 2001. Available from: <ext-link ext-link-type="uri" href="http://jerry.cs.uiuc.edu/" id="888">http://jerry.cs.uiuc.edu/</ext-link>~plop/plop2001/accepted_submissions/PLoP2001/dsandu0/PLoP2 001_dsandu0_1.pdf</ref>
          <ref rid="R150" class="deo:BibliographicReference" id="890" confidence="possible" page="61" column="1">Saunders, W. S. (2002). A Pattern Language. Harvard Design Magazine, 16, Winter / Spring 2002, pp 74 - 78. MIT Press.</ref>
          <ref rid="R151" class="deo:BibliographicReference" id="891" page="61" column="1">Schmidt, D. C. (1995). Using design patterns to develop reusable object-oriented communications software. Communications of the ACM 38(10) 65 – 74.</ref>
          <ref rid="R152" class="deo:BibliographicReference" id="892" page="61" column="1">Schmidt, D. C. (1996). Using Design Patterns to Guide the Development of Reusable Object- Oriented Software. ACM Computing Surveys 28(4es), December 1996.</ref>
          <ref rid="R153" class="deo:BibliographicReference" id="893" page="61" column="1">Schmidt, D. C., Fayad, M., &amp; Johnson, R.E. (1996). Editorial. Communications of the ACM 39 (10). Special issue on Software Patterns. pp. 36 – 39.</ref>
          <ref rid="R154" class="deo:BibliographicReference" id="895" page="61" column="1">Schuler, D. (2002). A Pattern Language for Living Communication. In Binder, T., Gregory, J., &amp; Wagner, I. (Eds.) Proceedings of the Participatory Design Conference 2002. CPSR Press. ISBN 0-9667818-2-1. pp. 51 – 62. See also: <ext-link ext-link-type="uri" href="http://www.scn.org/sphere/patterns/" id="894">http://www.scn.org/sphere/patterns/</ext-link></ref>
          <ref rid="R155" class="deo:BibliographicReference" id="896" page="61" column="1">Schuler, D., &amp; Namioka, A. (Eds.) (1993). Participatory Design: principles and practice. Hillsdale, New Jersey, NJ. USA.</ref>
          <ref rid="R156" class="deo:BibliographicReference" id="898" page="61" column="1">Schümmer, T., Borchers, J., Thomas, J., &amp; Zdun, U. (2004). Human-Computer-Human Interaction Patterns: A Workshop on the human role in HCI Patterns, In CHI '04 extended abstracts on Human factors in computer systems (CD). Also available at <ext-link ext-link-type="uri" href="http://www.hcipatterns.org/CHI2004Workshop.html" id="897">http://www.hcipatterns.org/CHI2004Workshop.html</ext-link></ref>
          <ref rid="R157" class="deo:BibliographicReference" id="899" page="61" column="1">Seffah, A. (2003). Learning the Ropes: Human-Centred Design Skills and Patterns for Software Engineers’ Education. Interactions, X(5)</ref>
          <ref rid="R158" class="deo:BibliographicReference" id="900" page="61" column="1">Sharp, H, Manns, M. L., &amp; Eckstein, J. (2003). Evolving Pedagogical Patterns: The Work of the Pedagogical Patterns Project. Computer Science Education, 13 (4), pp. 315-330</ref>
          <ref rid="R159" class="deo:BibliographicReference" id="902" page="61" column="1">Smith, S. L., &amp; Mosier, J. N. (1986). Guidelines for designing user interface software. Mitre Corporation Report MTR 9240, Mitre Corporation. Available at : <ext-link ext-link-type="uri" href="http://hcibib.org/sam" id="901">http://hcibib.org/sam</ext-link></ref>
          <ref rid="R160" class="deo:BibliographicReference" id="904" page="61" column="1">Souza, J., Matwin, S., &amp; Japkowicz, N. (2002). Evaluating Data Mining Models: A Pattern Language. Presented at PLoP 2002. Available at: <ext-link ext-link-type="uri" href="http://jerry.cs.uiuc.edu/" id="903">http://jerry.cs.uiuc.edu/</ext-link>~plop/plop2002/final/PLoP2002_jtsouza0_1.pdf</ref>
          <ref rid="R161" class="deo:BibliographicReference" id="907" page="62" column="1">Sutcliffe, A., &amp; Carroll, J. M. (1999). Designing claims for reuse in interactive systems design. International Journal of Human-Computer Studies 50(3) 213 – 241.</ref>
          <ref rid="R162" class="deo:BibliographicReference" id="908" page="62" column="1">Sutcliffe, A., (2000). On the Effective Use and Reuse of HCI Knowledge. ACM Transactions on Computer-Human Interaction 7(2). 197 – 221.</ref>
          <ref rid="R163" class="deo:BibliographicReference" id="909" page="62" column="1">Tahara , Y., Ohsuga , A., &amp; Honiden, S. 1999. Secure and efficient mobile agent application reuse using patterns. Proceedings of the 21st International Conference on Software Engineering May 1999. IEEE Computer Society Press. 356 - 367</ref>
          <ref rid="R164" class="deo:BibliographicReference" id="910" page="62" column="1">Tahara , Y., Toshiba , N., Ohsuga, A., &amp; Honiden, S. (2001). Agent system development method based on agent patterns. ACM SIGSOFT Software Engineering Notes 26 (3), 78 – 85</ref>
          <ref rid="R165" class="deo:BibliographicReference" id="911" page="62" column="1">Thimbleby, H. (1990). User Interface Design. ACM Press, New York, NY., USA</ref>
          <ref rid="R166" class="deo:BibliographicReference" id="913" page="62" column="1">Thomas, J. (2003). A socio-technical pattern language proposal. Available from: <ext-link ext-link-type="uri" href="http://www.truthtable.com/A_Sociotechnical_Pattern_Language.html" id="912">http://www.truthtable.com/A_Sociotechnical_Pattern_Language.html</ext-link></ref>
          <ref rid="R167" class="deo:BibliographicReference" id="915" page="62" column="1">Tidwell, J. (1998). Interaction Patterns. Presented at PLoP 1998. Available from: <ext-link ext-link-type="uri" href="http://jerry.cs.uiuc.edu/" id="914">http://jerry.cs.uiuc.edu/</ext-link>~plop/plop98/final_submissions/P29.pdf</ref>
          <ref rid="R168" class="deo:BibliographicReference" id="917" page="62" column="1">Tidwell, J. (1999a). Common Ground: A Pattern Language for Human-Computer Interface Design. Available from: <ext-link ext-link-type="uri" href="http://www.mit.edu/" id="916">http://www.mit.edu/</ext-link>~jtidwell/interaction_patterns.html</ref>
          <ref rid="R169" class="deo:BibliographicReference" id="919" page="62" column="1">Tidwell, J. (1999b). The Gang of Four are Guilty. Available from: <ext-link ext-link-type="uri" href="http://www.mit.edu/" id="918">http://www.mit.edu/</ext-link>~jtidwell/gof_are_guilty.html</ref>
          <ref rid="R170" class="deo:BibliographicReference" id="921" page="62" column="1">Tidwell, J. (2003). UI Patterns and Techniques. Available at <ext-link ext-link-type="uri" href="http://time-tripper.com/uipatterns/index.php" id="920">http://time-tripper.com/uipatterns/index.php</ext-link></ref>
          <ref rid="R171" class="deo:BibliographicReference" id="923" page="62" column="1">Towell, D. (1998). Display Maintenance. Presented at PLoP 1998. Available from: <ext-link ext-link-type="uri" href="http://jerry.cs.uiuc.edu/" id="922">http://jerry.cs.uiuc.edu/</ext-link>~plop/plop98/final_submissions/P15.pdf</ref>
          <ref rid="R172" class="deo:BibliographicReference" id="924" page="62" column="1">Van Duyne, D.K., Landay, J. A., &amp; Hong, J. I. (2003). The Design of Sites. Addison Wesley, Boston MA.</ref>
          <ref rid="R173" class="deo:BibliographicReference" id="926" page="62" column="1">van Welie, M. (2002 - 2005). Interaction Design Patterns. Available from: <ext-link ext-link-type="uri" href="http://www.welie.com/patterns/index.html" id="925">http://www.welie.com/patterns/index.html</ext-link></ref>
          <ref rid="R174" class="deo:BibliographicReference" id="927" page="62" column="1">van Welie, M., van der Veer, G.C., Eliëns, A. (2000). Patterns as Tools for User Interface Design. In, Farenc, Ch., &amp; Vanderdonckt, J. (Eds.) Tools for Working with Guidelines, Springer-Verlag, London, 313-324.</ref>
          <ref rid="R175" class="deo:BibliographicReference" id="928" page="62" column="1">van Welie, M., Mullet, M., &amp; McInerney, M. (2002). Patterns in practice: a workshop for UI designers. In, CHI '02 extended abstracts on Human factors in computer systems. ACM Press ISBN: 1-58113-454-1, 908 – 909.</ref>
          <ref rid="R176" class="deo:BibliographicReference" id="931" page="63" column="1">van Welie, M., &amp; van der Veer, G. (2003). Pattern Languages in Interaction Design: Structure and Organization. In: Proceedings of Interact '03, 1-5 September, Zürich, Switserland, Eds: Rauterberg, Menozzi, Wesson, p527-534, ISBN 1-58603-363-8, IOS Press, Amsterdam, The Netherlands</ref>
          <ref rid="R177" class="deo:BibliographicReference" id="932" page="63" column="1">Vlissides, J. M., Coplien, J. O., &amp; Kerth, N. L. (Eds.) (1996). Pattern Languages of Program Design 2. Addison Wesley, Reading MA. USA etc. ISBN 0-201-60734-4.</ref>
          <ref rid="R178" class="deo:BibliographicReference" id="933" confidence="possible" page="63" column="1">Wake W. C., Wake, B. D., &amp; Fox, E. A. (1996). Improving Responsiveness in Interactive Applications Using Queues. In Vlissides et al, 1996, 563 –573.</ref>
          <ref rid="R179" class="deo:BibliographicReference" id="934" page="63" column="1">Walldius, Å. (2001). Patterns of Recollection: The Documentary Meets Digital Media. Aura Förlag, Stockholm.</ref>
          <ref rid="R180" class="deo:BibliographicReference" id="936" page="63" column="1">Weiss, M. (2001). Patterns for e-Commerce Agent Architectures: Using Agents as Delegates. Paper presented at PLoP 2001, available from: <ext-link ext-link-type="uri" href="http://jerry.cs.uiuc.edu/" id="935">http://jerry.cs.uiuc.edu/</ext-link>~plop/plop2001/accepted_submissions/PLoP2001/mweiss0/PLoP 2001_mweiss0_2.pdf</ref>
          <ref rid="R181" class="deo:BibliographicReference" id="938" confidence="possible" page="63" column="1">Weir, C., &amp; Noble, J. (2003). A Window in Your Pocket. In Proceedings of the Eighth European Conference on Pattern Languages of Program Design (EuroPLoP). Irsee. Universitäts Verlag Konstanz. 2003. Available at: <ext-link ext-link-type="uri" href="http://www.charlesweir.com/WindowInYouPocket.pdf" id="937">http://www.charlesweir.com/WindowInYouPocket.pdf</ext-link></ref>
          <ref rid="R182" class="deo:BibliographicReference" id="939" page="63" column="1">Wild, P., Dearden, A., Light, A., &amp; Muller, M. (2005). Quality, Values &amp; Choice in HCI. Workshop at CHI 2005, Portland OR., USA, 4 th – 8 th April, 2005.</ref>
          <ref rid="R183" class="deo:BibliographicReference" id="940" page="63" column="1">Windsor, P. (2000). A Project Pattern Language for User Interface Design. Presentation at BCS HCI Group/IFIP WG 13.2 Workshop on HCI Patterns, London, UK, November 2000.</ref>
          <ref rid="R184" class="deo:BibliographicReference" id="941" page="63" column="1">Winn, T &amp; Calder, P. (2002). Is this a Pattern? IEEE Software, January/February 2002, pp.59-65.</ref>
          <ref rid="R185" class="deo:BibliographicReference" id="942" page="63" column="1">Wirfs-Brock, A., Vlissedes, J., Cunningham, W., Johnson, R., &amp; Bollette, L. (1991). Designing Reusable Designs (panel session): Experiences Designing Object Oriented Frameworks. In Proceedings of OOPSLA / ECOOP 90, Addendum: systems, languages, and applications, ACM Press, New York, pp. 19 - 24.</ref>
          <ref rid="R186" class="deo:BibliographicReference" id="943" confidence="possible" page="63" column="1">Wright, P., &amp; McCarthy, J. (2004). Technology as Experience. MIT Press, Cambridge, MA.</ref>
          <ref rid="R187" class="deo:BibliographicReference" id="944" page="63" column="1">Wynn, E., &amp; Novick, D.G. (1995). Conversational Conventions and Participation in Cross- Functional Design Teams. In Proceedings of COOCS, 95, ACM Press, pp. 250 -257.</ref>
          <ref rid="R188" class="deo:BibliographicReference" id="946" page="63" column="1">Yacoub, S. M., &amp; Ammar, H. H. (1998). A Pattern Language of Statecharts. Presented at PLoP 1998. Available from: <ext-link ext-link-type="uri" href="http://citeseer.nj.nec.com/yacoub98pattern.html" id="945">http://citeseer.nj.nec.com/yacoub98pattern.html</ext-link></ref>
        </ref-list>
        <outsider class="DoCO:TextBox" type="footer" id="695" page="50" column="1">- 49 -</outsider>
        <outsider class="DoCO:TextBox" type="header" id="696" page="51" column="1">Published in Human Computer Interaction, 21(1), January 2006</outsider>
        <outsider class="DoCO:TextBox" type="footer" id="715" page="51" column="1">- 50 -</outsider>
        <outsider class="DoCO:TextBox" type="header" id="716" page="52" column="1">Published in Human Computer Interaction, 21(1), January 2006</outsider>
        <outsider class="DoCO:TextBox" type="footer" id="734" page="52" column="1">- 51 -</outsider>
        <outsider class="DoCO:TextBox" type="header" id="735" page="53" column="1">Published in Human Computer Interaction, 21(1), January 2006</outsider>
        <outsider class="DoCO:TextBox" type="footer" id="753" page="53" column="1">- 52 -</outsider>
        <outsider class="DoCO:TextBox" type="header" id="754" page="54" column="1">Published in Human Computer Interaction, 21(1), January 2006</outsider>
        <outsider class="DoCO:TextBox" type="footer" id="772" page="54" column="1">- 53 -</outsider>
        <outsider class="DoCO:TextBox" type="header" id="773" page="55" column="1">Published in Human Computer Interaction, 21(1), January 2006</outsider>
        <outsider class="DoCO:TextBox" type="footer" id="787" page="55" column="1">- 54 -</outsider>
        <outsider class="DoCO:TextBox" type="header" id="788" page="56" column="1">Published in Human Computer Interaction, 21(1), January 2006</outsider>
        <outsider class="DoCO:TextBox" type="footer" id="806" page="56" column="1">- 55 -</outsider>
        <outsider class="DoCO:TextBox" type="header" id="807" page="57" column="1">Published in Human Computer Interaction, 21(1), January 2006</outsider>
        <outsider class="DoCO:TextBox" type="footer" id="825" page="57" column="1">- 56 -</outsider>
        <outsider class="DoCO:TextBox" type="header" id="826" page="58" column="1">Published in Human Computer Interaction, 21(1), January 2006</outsider>
        <outsider class="DoCO:TextBox" type="footer" id="842" page="58" column="1">- 57 -</outsider>
        <outsider class="DoCO:TextBox" type="header" id="843" page="59" column="1">Published in Human Computer Interaction, 21(1), January 2006</outsider>
        <outsider class="DoCO:TextBox" type="footer" id="862" page="59" column="1">- 58 -</outsider>
        <outsider class="DoCO:TextBox" type="header" id="863" page="60" column="1">Published in Human Computer Interaction, 21(1), January 2006</outsider>
        <outsider class="DoCO:TextBox" type="footer" id="884" page="60" column="1">- 59 -</outsider>
        <outsider class="DoCO:TextBox" type="header" id="885" page="61" column="1">Published in Human Computer Interaction, 21(1), January 2006</outsider>
        <outsider class="DoCO:TextBox" type="footer" id="905" page="61" column="1">- 60 -</outsider>
        <outsider class="DoCO:TextBox" type="header" id="906" page="62" column="1">Published in Human Computer Interaction, 21(1), January 2006</outsider>
        <outsider class="DoCO:TextBox" type="footer" id="929" page="62" column="1">- 61 -</outsider>
        <outsider class="DoCO:TextBox" type="header" id="930" page="63" column="1">Published in Human Computer Interaction, 21(1), January 2006</outsider>
        <outsider class="DoCO:TextBox" type="footer" id="947" page="63" column="1">- 62 -</outsider>
        <outsider class="DoCO:TextBox" type="header" id="948" page="64" column="1">Published in Human Computer Interaction, 21(1), January 2006</outsider>
        <region class="unknown" id="949" page="64" column="1">FIGURE CAPTIONS A comparison of different perspectives on the essential characteristics of patterns.</region>
        <region class="DoCO:FigureBox" id="F2">
          <caption class="deo:Caption" id="951" page="64" column="1">Figure 2: Illustration of Step-by-Step Instructions. From Tidwell, 1999. Figure 3: DTD showing structure of pattern in PLML (<xref ref-type="bibr" rid="R65" id="950" class="deo:Reference">Fincher, 2003</xref>).</caption>
        </region>
        <outsider class="DoCO:TextBox" type="footer" id="952" page="64" column="1">- 63 -</outsider>
        <outsider class="DoCO:TextBox" type="header" id="953" page="65" column="1">Published in Human Computer Interaction, 21(1), January 2006</outsider>
        <region class="unknown" id="962" page="65" column="1">FIGURES (IT’S BEST TO PUT ONE FIGURE PER PAGE) Characteristic &amp; Winn Calder2002 al. et <xref ref-type="bibr" rid="R17" id="954" class="deo:Reference">Bayle 1998</xref> et <xref ref-type="bibr" rid="R174" id="955" class="deo:Reference">Welie 2000</xref> van al. et <xref ref-type="bibr" rid="R83" id="956" class="deo:Reference">Granlund 2001</xref> al. <xref ref-type="bibr" rid="R87" id="957" class="deo:Reference">Borchers 2000</xref> al. et <xref ref-type="bibr" rid="R69" id="958" class="deo:Reference">Finlay 2002</xref> &amp; Fincher 2002 Utting <xref ref-type="bibr" rid="R58" id="959" class="deo:Reference">Erickson 2000a</xref> et <xref ref-type="bibr" rid="R172" id="960" class="deo:Reference">Duyne 2003</xref> van al. <xref ref-type="bibr" rid="R167" id="961" class="deo:Reference">Tidwell 1998</xref>, 1999a 1. A pattern implies an artefact ● ? ? ● ? ? ? ● ? 2. A pattern bridges many levels ● ? ? of abstraction 3. A pattern includes its rationale ● ? ● ? ● ? ? ? ● ? 4. A pattern is manifest in a ● solution 5. A pattern captures system hot ● spots 6. A pattern is part of a language ● ? ● ● ● ● ● ● ? 7. A pattern is validated by use ● ? ● ? ● ? ● 8. A pattern is grounded in a ● ? ? ● ● ? ● ● domain 9. A pattern captures a big idea ● ● 10. Patterns support a „lingua franca‟ ● ? ? ● ● ● ● ? ● problems 11. Different at different patterns „scales‟ deal with ● ● ● ● ? ? ● ● ● 12. Patterns reflect design values ● ? ● ● ● ● ? ● 13. Patterns capture design ● ● ? ? ? ● ● ? practice</region>
        <region class="DoCO:FigureBox" id="F1">
          <caption class="deo:Caption" id="963" page="65" column="1">Figure 1: A comparison of different perspectives on the essential characteristics of patterns</caption>
        </region>
        <outsider class="DoCO:TextBox" type="footer" id="964" page="65" column="1">- 64 -</outsider>
        <outsider class="DoCO:TextBox" type="header" id="965" page="66" column="1">Published in Human Computer Interaction, 21(1), January 2006</outsider>
        <region class="DoCO:FigureBox" id="F2">
          <image class="DoCO:Figure" src="62lv.page_066.image_02.png" thmb="62lv.page_066.image_02-thumb.png"/>
          <caption class="deo:Caption" id="967" confidence="possible" page="66" column="1">Figure 2: Illustration of Step-by-Step Instructions. Based on Tidwell, 1999.</caption>
        </region>
        <outsider class="DoCO:TextBox" type="footer" id="968" page="66" column="1">- 65 -</outsider>
        <outsider class="DoCO:TextBox" type="header" id="969" page="67" column="1">Published in Human Computer Interaction, 21(1), January 2006</outsider>
        <region class="unknown" id="970" page="67" column="1">. PLML v1.1 &lt;!ELEMENT pattern (name?, alias*, illustration?, problem?, context?, forces?, solution?, synopsis?, diagram?, evidence?, confidence?, literature?, implementation?, related-patterns?, pattern-link*, management?)&gt; &lt;!ATTLIST pattern patternID CDATA #REQUIRED&gt; &lt;!ELEMENT name (#PCDATA)&gt; &lt;!ELEMENT alias (#PCDATA)&gt; &lt;!ELEMENT illustration ANY&gt; &lt;!ELEMENT problem (#PCDATA)&gt; &lt;!ELEMENT context ANY&gt; &lt;!ELEMENT forces ANY&gt; &lt;!ELEMENT solution ANY&gt; &lt;!ELEMENT synopsis (#PCDATA)&gt; &lt;!ELEMENT diagram ANY&gt; &lt;!ELEMENT evidence (example*, rationale?)&gt; &lt;!ELEMENT example ANY&gt; &lt;!ELEMENT rationale ANY&gt; &lt;!ELEMENT confidence (#PCDATA)&gt; &lt;!ELEMENT literature ANY&gt; &lt;!ELEMENT implementation ANY&gt; &lt;!ELEMENT related-patterns ANY&gt; &lt;!ELEMENT pattern-link EMPTY&gt; &lt;!ATTLIST pattern-link type CDATA #REQUIRED patternID CDATA #REQUIRED collection CDATA #REQUIRED label CDATA #REQUIRED&gt; &lt;!ELEMENT management (author?, credits?, creation-date?, last-modified?, revision-number?)&gt; &lt;!ELEMENT author (#PCDATA)&gt; &lt;!ELEMENT credits (#PCDATA)&gt; &lt;!ELEMENT creation-date (#PCDATA)&gt; &lt;!ELEMENT last-modified (#PCDATA)&gt; &lt;!ELEMENT revision-number (#PCDATA)&gt;</region>
        <region class="DoCO:FigureBox" id="F3">
          <caption class="deo:Caption" id="972" page="67" column="1">Figure 3: DTD showing structure of pattern in PLML (<xref ref-type="bibr" rid="R65" id="971" class="deo:Reference">Fincher, 2003</xref>)</caption>
        </region>
        <outsider class="DoCO:TextBox" type="footer" id="973" page="67" column="1">- 66 -</outsider>
        <outsider class="DoCO:TextBox" type="header" id="974" page="68" column="1">Published in Human Computer Interaction, 21(1), January 2006</outsider>
        <region class="DoCO:TextChunk" id="978" confidence="possible" page="68" column="1">FOOTNOTES (Make a copy of all footnotes on a separate page here. This only has to be done for the final submission for production. During the review process, it is okay to just have footnotes at the bottom of pages.) 1. The gallery is available at: www.cs.kent.ac.uk/people/staff/saf/patterns/gallery.html.xxx 2. It should be noted that the term invariant here refers to a set of shared characteristics of the recommended solution, but that the solution will need to be adapted to the specific circumstances in which it is applied. Hence, there is variability in the way that the solution is instantiated in individual applications, but the pattern describes the invariant core of solutions to the (recurrent) problem. 3. <ext-link ext-link-type="uri" href="http://www.co.umist.ac.uk/hci_design/appc.htm" id="975">http://www.co.umist.ac.uk/hci_design/appc.htm</ext-link> offers one approach to presenting claims. <ext-link ext-link-type="uri" href="http://ucs.ist.psu.edu" id="976">http://ucs.ist.psu.edu</ext-link> which can be searched for examples of claims in the context of various projects (e.g. <ext-link ext-link-type="uri" href="http://ucs.ist.psu.edu/dbitemview.asp?id=43&amp;section=" id="977">http://ucs.ist.psu.edu/dbitemview.asp?id=43&amp;section=</ext-link>\Garden- com\Activity+Design\Rationale)</region>
        <outsider class="DoCO:TextBox" type="footer" id="979" page="68" column="1">- 67 -</outsider>
      </section>
    </body>
  </article>
</pdfx>
