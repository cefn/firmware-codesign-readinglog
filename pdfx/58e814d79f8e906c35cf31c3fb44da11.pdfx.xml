<?xml version='1.0' encoding='UTF-8'?>
<pdfx xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://pdfx.cs.man.ac.uk/static/article-schema.xsd">
  <meta>
    <job>557ab6c20daeb53e22059376fd15ba66a4ab9caa9146da00b6343fe1c539033c</job>
    <base_name>62nc</base_name>
    <doi>http://dx.doi.org/10.3727/108812897792458281</doi>
  </meta>
  <article>
    <front class="DoCO:FrontMatter">
      <title-group>
        <article-title class="DoCO:Title" id="1">Domain-Oriented Design Environments: Knowledge-Based Systems for the Real World</article-title>
      </title-group>
      <region class="DoCO:TextChunk" id="4" confidence="possible">Gerhard Fischer Center for LifeLong Learning and Design (L3D) Department of Computer Science and Institute of Cognitive Science Campus Box 430, University of Colorado Boulder, CO 80309-0430 USA Phone: (303) 492-1502 or (303) 492-1592 Fax: (303) 492-2844 E-mail: <email id="2">gerhard@cs.colorado.edu</email> WWW: <ext-link ext-link-type="uri" href="http://www.cs.colorado.edu/" id="3">http://www.cs.colorado.edu/</ext-link>~gerhard/</region>
      <abstract class="DoCO:Abstract" id="7">Over the last ten years we have created a theoretical framework for domain-oriented design environments (DODEs), developed several prototypes and assessed them in real-world settings. DODEs are knowledge-based systems that emphasize a human-centered and domain-oriented approach. Used as intelligent support systems, they facilitate collaboration and communication among humans as well as between humans and their computational environments to create more useful and usable artifacts. In this paper, we discuss a component architecture (the multifaceted architecture) and a process model (the seeding, evolutionary growth, reseeding model) underlying DODEs by focusing specifically on their support for evolution. We describe two of the applications developed for voice dialog and computer network design, and we discuss our experience with the DODE approach derived from real- world uses in collaboration with companies and communities of practice. <marker type="block"/> Keywords: domain-oriented design, domain-oriented design environments, end-user modification, evolution, organizational learning and organizational memory<marker type="block"/> Acknowledgments. The author would like to thank the members of the Center for LifeLong Learning and Design at the University of Colorado who have made major contributions to the conceptual framework and systems described in this paper. The research was supported by (1) the National Science Foundation, Grant REC-9553371, (2) the ARPA HCI program, Grant N66001-94-C-6038, (3) NYNEX, Science and Technology Center, and (4) U S WEST Advanced Technologies.</abstract>
      <contrib-group class="DoCO:ListOfAuthors">
        <contrib contrib-type="author">
          <name id="8">Gerhard Fischer</name>
        </contrib>
      </contrib-group>
      <outsider class="DoCO:TextBox" type="page_nr" id="9">1</outsider>
    </front>
    <body class="DoCO:BodyMatter">
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="10" page="2" column="1">Table of Contents</h1>
        <region class="DoCO:TextChunk" id="11" confidence="possible" page="2" column="1">Why Real-World Knowledge-Based Systems Have to Evolve........................................................................................ 3 Domain-Oriented Design Environments............................................................................................................................ 3 Examples of Domain-Oriented Design Environments ..................................................................................................... 4 Example1 of a DODE: Voice Dialog Design ........................................................................................................ 5 Example2 of a DODE: Computer Network Design .......................................................................................... 6 The Multifaceted Architecture: A Domain-Independent Architecture for DODEs ..................................................... 7 Seeding, Evolutionary Growth, Reseeding: The SER Process Model for DODEs ........................................................ 9 Assessment of DODEs......................................................................................................................................................... 10 Knowledge-Based Systems Must Support the Integration of Working and Learning................................ 10 Knowledge-Based Systems Must be Open, Rather Than Closed Systems.................................................... 11 Knowledge-Based Systems Need to Evolve ...................................................................................................... 12 Experiences with DODEs ..................................................................................................................................... 13 Conclusions ........................................................................................................................................................................... 14 References.............................................................................................................................................................................. 14</region>
        <region class="DoCO:FigureBox" id="F1">
          <caption class="deo:Caption" id="16" confidence="possible" page="2" column="1">Figure 1: The Voice Dialog Design Environment. ............................................................................................................. 5 <xref ref-type="fig" rid="F2" id="12" class="deo:Reference">Figure 2</xref>: A DODE for Computer Network Design........................................................................................................... 7 <xref ref-type="fig" rid="F3" id="13" class="deo:Reference">Figure 3</xref>: The Multifaceted Architecture............................................................................................................................. 8 <xref ref-type="fig" rid="F4" id="14" class="deo:Reference">Figure 4</xref>: The SER Model: A process model for the development and evolution of DODEs ............................................................................................................................... 10 <xref ref-type="fig" rid="F5" id="15" class="deo:Reference">Figure 5</xref>: Duality of Learning (through Knowledge Delivery) and Extending Knowledge-Based Systems (through End-user Modifiability) ............................................................. 12</caption>
        </region>
        <outsider class="DoCO:TextBox" type="footer" id="17" page="2" column="1">Gerhard Fischer</outsider>
        <outsider class="DoCO:TextBox" type="page_nr" id="18" page="2" column="1">2</outsider>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="19" page="3" column="1">Why Real-World Knowledge-Based Systems Have to Evolve</h1>
        <region class="DoCO:TextChunk" id="29" page="3" column="1">We live in a world characterized by evolution—i.e., by ongoing processes of development, formation, or growth in both natural [<xref ref-type="bibr" rid="R7" id="20" class="deo:Reference">Dawkins 1987</xref>] and human-created systems [<xref ref-type="bibr" rid="R35" id="21" class="deo:Reference">Simon 1981</xref>]. Biology tells us that complex, natural systems are not created all at once but instead must evolve over time. We are becoming increasingly aware that evolutionary processes are ubiquitous and critical for complex software systems, such as real-world knowledge-based systems, because these systems do not necessarily exist in a technological context alone but instead are embedded within dynamic human organizations. Our research efforts over the last decade have conceptualized the design of complex software systems as an evolutionary process in which system requirements and functionality are determined through an iterative process of collaboration among multiple stakeholders [<xref ref-type="bibr" rid="R5" id="22" class="deo:Reference">CSTB 1990</xref>; <xref ref-type="bibr" rid="R21" id="23" class="deo:Reference">Greenbaum, Kyng 1991</xref>]. Our theoretical work builds upon on theories of knowledge [Polanyi 1966; <xref ref-type="bibr" rid="R28" id="24" class="deo:Reference">Popper 1965</xref>], design and design processes [<xref ref-type="bibr" rid="R32" id="25" class="deo:Reference">Rittel 1984</xref>; <xref ref-type="bibr" rid="R35" id="26" class="deo:Reference">Simon 1981</xref>], and empirical findings providing support for the theoretical orientation [<xref ref-type="bibr" rid="R3" id="27" class="deo:Reference">Buchanan, Shortliffe 1984</xref>; <xref ref-type="bibr" rid="R6" id="28" class="deo:Reference">Curtis, Krasner, Iscoe 1988</xref>]. Our theories are instantiated and assessed through the initial development and evolution of a domain-oriented design environment (DODE). In this paper we present DODEs, give a brief discussion of the theory behind them, describe the multifaceted architecture and the process model underlying them, and discuss our experience of using them in real-world environments.</region>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="30" page="3" column="1">Domain-Oriented Design Environments</h1>
        <region class="DoCO:TextChunk" id="55" page="3" column="1">DODEs are software systems that support design activities within a particular domain. They are examples of complex software systems that need to evolve. Design within a particular domain typically involves several stakeholders whose knowledge can be elicited only within the context of a particular design problem. Different stakeholders include the developers of a DODE (environment developers), the users of a DODE (domain designers), and the people for whom the design is being created (clients). A major assumption behind our work is that to effectively support design activities, DODEs that address authentic design need to increase communication between the different stakeholders and anticipate and encourage evolution at the hands of domain designers. DODEs integrate the capture of design rationale, end-user modifiability, and increased communication between end users and system designers so that system change can occur through an evolutionary process. <marker type="block"/> Understanding the Problem Is the Problem. The predominant activity in designing complex systems is the participants teaching and instructing each other [<xref ref-type="bibr" rid="R6" id="32" class="deo:Reference">Curtis, Krasner, Iscoe 1988</xref>; <xref ref-type="bibr" rid="R21" id="33" class="deo:Reference">Greenbaum, Kyng 1991</xref>]. Because complex problems require more knowledge than any single person possesses, communication and collaboration among all the involved stakeholders are necessary. Domain experts understand the practice and system designers know the technology. To overcome this “symmetry of ignorance” [<xref ref-type="bibr" rid="R32" id="34" class="deo:Reference">Rittel 1984</xref>] (i.e., none of these carriers of knowledge can guarantee that their knowledge is superior or more complete compared to other people's knowledge), as much knowledge from as many stakeholders as possible should be activated with the goal of achieving mutual education and shared understanding.<marker type="block"/> Integrating Problem Framing and Problem Solving. Design methodologists (e.g., [<xref ref-type="bibr" rid="R32" id="36" class="deo:Reference">Rittel 1984</xref>; <xref ref-type="bibr" rid="R33" id="37" class="deo:Reference">Schoen 1983</xref>] demonstrate with their work the strong interrelationship between problem framing and problem solving. They argue convincingly that (1) one cannot gather information meaningfully unless one has understood the problem, but one cannot understand the problem without information about it;<marker type="page" number="4"/><marker type="block"/> and (2) professional practice has at least as much to do with defining a problem as with solving a problem. New requirements emerge during development because they cannot be identified until portions of the system have been designed or implemented. The conceptual structures underlying complex software systems are too complicated to be specified accurately in advance, and too complex to be built faultlessly. Specification and implementation have to co-evolve, requiring the owners of the problems to be present in the development.<marker type="block"/> Communication and Coordination. Because designing complex systems is an activity involving many stakeholders, communication and coordination are of crucial importance. The types of communication and coordination processes that can be differentiated are those between (1) designers and users/clients, (2) members of design teams, and (3) designers and their computational knowledge- based design environment. By emphasizing design as a collaborative activity, domain-oriented design environments support three types of collaboration: (1) collaboration between domain-oriented designers (e.g., professional kitchen designers) and clients (owners of the kitchen to be built), (2) collaboration between domain-oriented designers and design environment builders (software designers), and (3) long-term indirect collaboration among designers (creating a virtual collaboration between past, present, and future designers). Design environments provide representations that serve as “languages of doing” [<xref ref-type="bibr" rid="R9" id="42" class="deo:Reference">Ehn 1988</xref>] and therefore help increase the “shared context” [<xref ref-type="bibr" rid="R31" id="43" class="deo:Reference">Resnick, Levine, Teasley 1991</xref>] necessary for collaboration.<marker type="block"/> The Need for Change. Knowledge-based systems model parts of our world. Our world evolves in numerous dimensions as new artifacts appear, new knowledge is discovered, and new ways of doing business are developed. Successful software systems need to evolve. Maintaining and enhancing systems need to become “first class design activities,” extending system functionality in response to the needs of its users. There are numerous fundamental reasons why systems cannot be done “right.” Designers are people, and people's imagination and knowledge are limited.<marker type="block"/> Evolution. There is growing agreement (and empirical data to support it) that the most critical software problem is the cost of maintenance and evolution [<xref ref-type="bibr" rid="R5" id="46" class="deo:Reference">CSTB 1990</xref>]. Studies of software costs indicate that about two-thirds of the costs of a large system occur after the system is delivered. Much of this cost is due to the fact that a considerable amount of essential information (such as design rationale [<xref ref-type="bibr" rid="R18" id="47" class="deo:Reference">Fischer et al. 1991b</xref>]) is lost during development and must be reconstructed by the designers who maintain and evolve the system. In order to make maintenance and enhancements “first class” activities in the lifetime of an artifact, (1) the reality of change needs to be accepted explicitly and (2) increased up- front costs have to be acknowledged and dealt with. We learned the first point in our work on end-user modifiability [<xref ref-type="bibr" rid="R15" id="48" class="deo:Reference">Fischer, Girgensohn 1990</xref>], which demonstrated that there is no way to modify a system without detailed programming knowledge unless modifiability was an explicit goal in the original design of the system. The second point results from the fact that “design for redesign” requires efforts beyond designing for what is desired and known at the moment. It requires that changes be anticipated and structures be created that will support these changes. The evolution of a software system is driven by breakdowns [<xref ref-type="bibr" rid="R14" id="49" class="deo:Reference">Fischer 1994b</xref>] experienced by the users of a system. In order to support evolutionary processes, domain designers need to be able, willing, and rewarded to change systems, thereby providing a potential solution to the maintenance and enhancement problems in software design. Users of a system are knowledgeable in the application domain and know best which enhancements are needed. An end-user modification component supports users in adding enhancements to the system without the help of the system developers. End-user modifiable systems will take away from system developers some of the burden of anticipating all potential uses at the original design time [<xref ref-type="bibr" rid="R23" id="50" class="deo:Reference">Henderson, Kyng 1991</xref>].<marker type="page" number="5"/><marker type="block"/> Reinventing the Wheel. The design of knowledge-based systems is a new design discipline relative to other more established disciplines. I claim that software designers can learn a lot by studying other design disciplines such as architectural design, engineering design, organizational design, musical composition, and writing. For example, the limitations and failures of design approaches that rely on directionality, causality, and a strict separation between analysis and synthesis have been recognized in architecture for a long time [<xref ref-type="bibr" rid="R32" id="54" class="deo:Reference">Rittel 1984</xref>]. A careful analysis of these failures could have saved knowledge engineers the effort expended in finding out that waterfall-type models can at best be an impoverished and oversimplified model of real design activities. Assessing the successes and failures of other design disciplines does not mean that they have to be taken literally (because software artifacts are different from other artifacts), but that they can be used as an initial framework for software design.</region>
        <outsider class="DoCO:TextBox" type="footer" id="39" page="3" column="1">Gerhard Fischer</outsider>
        <outsider class="DoCO:TextBox" type="page_nr" id="40" page="3" column="1">3</outsider>
        <outsider class="DoCO:TextBox" type="footer" id="52" page="4" column="1">Gerhard Fischer</outsider>
        <outsider class="DoCO:TextBox" type="page_nr" id="53" page="4" column="1">4</outsider>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="56" page="5" column="1">Examples of Domain-Oriented Design Environments</h1>
        <region class="DoCO:TextChunk" id="58" page="5" column="1">Over the last eight years we have created DODEs for user interface design, COBOL programming, lunar habitat design, graphics design, multimedia design, voice dialog design, and computer network design (for details, see [<xref ref-type="bibr" rid="R13" id="57" class="deo:Reference">Fischer 1994a</xref>]). Here we briefly describe the DODEs for voice dialog and computer network design.</region>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="59" page="5" column="1">Example1 of a DODE: Voice Dialog Design</h1>
        <region class="DoCO:TextChunk" id="71" page="5" column="1">The Voice Dialog Design Environment (VDDE) [ <xref ref-type="bibr" rid="R30" id="60" class="deo:Reference">Repenning, Sumner 1995</xref>; Sumner 1995] is a DODE developed in collaboration with US W EST Advanced Technologies over the last four years. The objective of the VDDE system was to improve the design practice of voice dialog designers by supporting an environment in which (1) they could focus on the task rather than on the computer, (2) they were assisted in the construction of the artifact (e.g., with critics and simulations) and (3) the evolving design could serve as an “object-to-think-with” and an “object-to-talk-about” for all stakeholders. VDDE (see <xref ref-type="fig" rid="F1" id="61" class="deo:Reference">Figure 1</xref>) provides a construction kit that allows designers to quickly sketch the flow of an audio interface by arranging domain-oriented design units such as voice menus and prompts into a flow chart-style representation. Designers can hear what their audio interface design sounds like by attaching<marker type="page" number="6"/><marker type="block"/> audio recordings to components in the interface and simulating the design. Computational design critics [<xref ref-type="bibr" rid="R17" id="67" class="deo:Reference">Fischer et al. 1991a</xref>] embedded in the system watch designers' actions and comment on potentially problematic aspects of the design under construction. In the development and use of the system we observed the following evolutionary processes: Innovations in the voice dialog design domain arose both from within a particular design group and from the introduction of new design groups and new voice dialog products into the V DDE collaboration. To address these changes in the domain, we continually evolved what should be represented in VDDE and how it should be represented. To determine the appropriate level of abstractions, we employed a system design approach that was both problem-centered and participatory. A collaborative process was followed in which voice dialog designers and system developers worked together to design and evolve domain-specific abstractions through use. VDDE evolved through repeated attempts at solving real voice dialog design problems. Overall, its “domain-orientation” was the result of analyses of existing design tools and representations, analyses of voice dialog products in the marketplace, and collaborative design sessions over the course of the project. As breakdowns in VDDE’s abstractions were encountered, new design units were added or existing design units were modified or removed. In this manner, both the design units shown in the gallery (see <xref ref-type="fig" rid="F1" id="68" class="deo:Reference">Figure 1</xref>) and the representation of conditional actions in the worksheet underwent substantial evolution over the course of the VDDE project. The development provided strong support for the adequacy as well as the need for future development of DODEs. In <xref ref-type="fig" rid="F1" id="69" class="deo:Reference">Figure 1</xref>, designers select building blocks from the gallery (top window) and arrange them in a worksheet (left window) to create a graphic representation of the audio interface design. A critiquing component analyzes the design for compliance with interface guidelines and product consistency. Possible problems are signaled in the critic message pane (lower window). The designer can select a critic message and elect to see the rationale behind the rule. The designer can also add more arguments into the hypermedia knowledge-base (right window). In addition to developing a working system used by domain designers, careful assessment studies of all the processes and work products developed in the context of this major design effort were conducted (for details see [<xref ref-type="bibr" rid="R37" id="70" class="deo:Reference">Sumner 1995</xref>]), resulting in the following: (a) VDDE helped to gain a deeper understanding of the strength and limitations of our component architecture and the process model described below, and (b) the system (including the substrates used, the application family of voice dialog designs, and individual artifacts) truly evolved over a period of four years.</region>
        <region class="DoCO:FigureBox" id="F1">
          <image class="DoCO:Figure" src="62nc.page_005.image_01.png" thmb="62nc.page_005.image_01-thumb.png"/>
          <caption class="deo:Caption" id="64" page="5" column="1">Figure 1: The Voice Dialog Design Environment</caption>
        </region>
        <outsider class="DoCO:TextBox" type="footer" id="65" page="5" column="1">Gerhard Fischer</outsider>
        <outsider class="DoCO:TextBox" type="page_nr" id="66" page="5" column="1">5</outsider>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="72" page="6" column="1">Example2 of a DODE: Computer Network Design</h1>
        <region class="DoCO:TextChunk" id="104" page="6" column="1">We have developed several DODEs in the domain of computer network design [ <xref ref-type="bibr" rid="R29" id="73" class="deo:Reference">Reeves 1993</xref>; <xref ref-type="bibr" rid="R34" id="74" class="deo:Reference">Shipman 1993</xref>; <xref ref-type="bibr" rid="R36" id="75" class="deo:Reference">Sullivan 1994</xref>]. Similar to VDDE, these DODEs include the following domain-oriented components (see <xref ref-type="fig" rid="F2" id="76" class="deo:Reference">Figure 2</xref>): • a palette containing objects of the domain (see <xref ref-type="fig" rid="F2" id="77" class="deo:Reference">Figure 2</xref>, (2)) • a work sheet supporting the construction of a network (see <xref ref-type="fig" rid="F2" id="78" class="deo:Reference">Figure 2</xref>, (3)) • a specification sheet allowing the articulation of design goals and constraints so that the system understands more about particular design situations and gives guidance and suggestions relevant to those situations (see <xref ref-type="fig" rid="F2" id="79" class="deo:Reference">Figure 2</xref>, (4)) • an argumentation component supporting the capture of design rationale in a WWW-based group memory system (see <xref ref-type="fig" rid="F2" id="80" class="deo:Reference">Figure 2</xref>, (1)), and • a catalog of existing designs enabling design by modification rather than from scratch (see <xref ref-type="fig" rid="F2" id="81" class="deo:Reference">Figure 2</xref>, (5)).<marker type="page" number="8"/><marker type="block"/> Design information repositories are provided in the form of argumentation [<xref ref-type="bibr" rid="R26" id="95" class="deo:Reference">Moran, Carroll 1996</xref>] and catalogs [<xref ref-type="bibr" rid="R24" id="96" class="deo:Reference">Kolodner 1993</xref>]. The argumentative hypermedia component contains design rationale that users can annotate and add to as it emerges during the design process. The catalog component provides a collection of previously constructed designs and is intended to support reuse and case-based reasoning. The knowledge-based linking mechanisms integrate different facets of the DODE architecture (for details see [<xref ref-type="bibr" rid="R13" id="97" class="deo:Reference">Fischer 1994a</xref>]): • A specification matcher compares a specified design profile to a particular artifact design. This can be achieved by critics [<xref ref-type="bibr" rid="R17" id="98" class="deo:Reference">Fischer et al. 1991a</xref>] that comment on the given design with respect to both stored arguments and the desired profile of the design as described in the specification. • A construction analyzer is a critiquing system that analyzes the design construction for compliance with a set of rules that are yet another representation of domain knowledge. When such a critic fires, it provides a pointer to an entry of the argumentative hypermedia component. This entry explains the domain knowledge represented by the critic. It is left up to the designer to choose whether to modify the design in response to a critic message. • An argumentation illustrator helps users understand the information given in the argumentation- base by finding relevant catalog examples that illustrate possibly abstract concepts. • A catalog explorer helps users search the catalog space according to the task at hand by retrieving design examples similar to the current construction and specification situation. Integration. The multi-faceted architectures derives its essential value from the integration of its components. Used individually, the components are unable to achieve their full potential. Used in combination, each component augments the values of the others, forming a synergistic whole. At each stage in the design process, the partial design embedded in the design environment serves as a stimulus to users, and suggests what they should attend to next. Links among the components of the architecture<marker type="page" number="9"/><marker type="block"/> are supported by various mechanisms (see <xref ref-type="fig" rid="F3" id="102" class="deo:Reference">Figure 3</xref>). The construction analyzer is a critiquing system [<xref ref-type="bibr" rid="R17" id="103" class="deo:Reference">Fischer et al. 1991a</xref>] that provides access to relevant information in the argumentative issue base. The firing of a critic signals a breakdown to users and provides them with an entry into the exact place in the argumentative hypermedia system where the corresponding argumentation is located. The explanation given in argumentation is often highly abstract and very conceptual. Concrete design examples that match the explanation help users to understand the concept. The argumentation illustrator helps users to understand the information given in the argumentative hypermedia by finding a catalog example that illustrates the concept. The catalog explorer helps users to search the catalog space according to the task at hand. It retrieves design examples similar to the current construction situation, and orders a set of examples by their appropriateness to the current specification.</region>
        <outsider class="DoCO:TextBox" type="footer" id="83" page="6" column="1">Gerhard Fischer</outsider>
        <outsider class="DoCO:TextBox" type="page_nr" id="84" page="6" column="1">6</outsider>
        <region class="DoCO:FigureBox" id="F2">
          <image class="DoCO:Figure" src="62nc.page_007.image_02.png" thmb="62nc.page_007.image_02-thumb.png"/>
          <caption class="deo:Caption" id="90" confidence="possible" page="7" column="1">Figure 2: A DODE for Computer Network DesignThe Multifaceted Architecture: A Domain- Independent Architecture for DODEs We have developed a domain-independent architecture for DODEs based on our theoretical and conceptual framework, which contains the essential components of DODEs. The links between the components are crucial for the synergy of the environment. Through domain-oriented instantiation, our architecture provides the foundation for design support tools and information repositories that reflect the real-world contexts of the design processes. This conceptual framework is explained in detail in [<xref ref-type="bibr" rid="R13" id="86" class="deo:Reference">Fischer 1994a</xref>]. The architecture (see <xref ref-type="fig" rid="F3" id="87" class="deo:Reference">Figure 3</xref>) contains design creation tools in the form of a construction component and a specification component. The construction component is the principal medium for modeling a design. Design includes composition using elements from the palette and modification of previous design from the catalog (see Figures 1 and 2). The specification component [<xref ref-type="bibr" rid="R20" id="88" class="deo:Reference">Fischer, Nakakoji 1991</xref>; <xref ref-type="bibr" rid="R36" id="89" class="deo:Reference">Sullivan 1994</xref>] allows designers to describe abstract characteristics of the design they have in mind (e.g., low cost, supports email). The specification provides the system with an explicit and computationally tractable representation of the user's goals.</caption>
        </region>
        <outsider class="DoCO:TextBox" type="footer" id="91" page="7" column="1">Gerhard Fischer</outsider>
        <outsider class="DoCO:TextBox" type="page_nr" id="92" page="7" column="1">7</outsider>
        <region class="unknown" id="93" page="8" column="1">Specification Matcher Specification Construction Construction Catalog Analyzer Explorer Catalog Specification Explorer Matcher Catalog Argumentation Argumentation Illustrator</region>
        <region class="DoCO:FigureBox" id="F3">
          <caption class="deo:Caption" id="94" confidence="possible" page="8" column="1">Figure 3: The Multifaceted Architecture</caption>
        </region>
        <outsider class="DoCO:TextBox" type="footer" id="100" page="8" column="1">Gerhard Fischer</outsider>
        <outsider class="DoCO:TextBox" type="page_nr" id="101" page="8" column="1">8</outsider>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="105" page="9" column="1">Seeding, Evolutionary Growth, Reseeding: The SER Process Model for DODEs</h1>
        <region class="DoCO:TextChunk" id="122" page="9" column="1">Design in real-world situations deals with complex, unique, uncertain, conflicted, and unstable situations of practice. Design knowledge as embedded in DODEs will never be complete because design knowledge is tacit (i.e., competent practitioners know more than they can say) [Polanyi 1966], and additional knowledge is triggered and activated by actual use situations leading to breakdowns. Because these breakdowns [ <xref ref-type="bibr" rid="R14" id="106" class="deo:Reference">Fischer 1994b</xref>; <xref ref-type="bibr" rid="R39" id="107" class="deo:Reference">Winograd, Flores 1986</xref>] are experienced by the users and not by the developers, computational mechanisms that supporting end-user modifiability are required as an intrinsic part of a DODE. We distinguish three intertwined levels; the interaction of these levels forms the essence of our seeding, evolutionary growth, reseeding model: • On the conceptual framework level, the multifaceted, domain-independent architecture constitutes a framework for building evolvable complex software systems. • When this architecture is instantiated in a domain (e.g., voice dialog design, computer network design), a domain-oriented design environment (representing an application family) is created on the domain level. • On the artifact level, individual artifacts in the domain are developed by exploiting the information contained in the generic DODE. <xref ref-type="fig" rid="F4" id="108" class="deo:Reference">Figure 4</xref> illustrates the interplay of those three layers in the context of our seeding, evolutionary growth, reseeding model. Darker gray indicates knowledge domains close to the computer, whereas white emphasizes closeness to the design work in a domain. The figure illustrates the role of different professional groups in the evolutionary design: the environment developer (close to the computer) provides the domain-independent framework and instantiates it into a DODE in collaboration with the domain designers (knowledgeable domain workers who use the environment to design artifacts). The evolution of complex systems in the context of this model can be characterized by the following major processes (details can be found in [<xref ref-type="bibr" rid="R19" id="109" class="deo:Reference">Fischer et al. 1994</xref>]): A seed will be created through a participatory design process between environment developers (software designers) and domain designers (voice dialog or network professionals). It will evolve in response to its use in new design projects because requirements fluctuate, change is ubiquitous, and design knowledge is tacit. Postulating the objective of a seed (rather then a complete domain model or a complete knowledge base) sets our approach apart from other approaches in knowledge-based systems development and emphasizes evolution as the central design concept.<marker type="page" number="10"/><marker type="block"/> Evolutionary growth takes place as domain designers use the seeded environment to undertake specific projects for clients. During these design efforts, new requirements may surface, new components may come into existence, and additional design knowledge not contained in the seed may be articulated. During the evolutionary growth phase, the environment developers are not present, thus making end-user modification a necessity rather than a luxury (at least for small-scale evolutionary changes). We have addressed this challenge with end-user modifiability [<xref ref-type="bibr" rid="R10" id="113" class="deo:Reference">Eisenberg, Fischer 1994</xref>; <xref ref-type="bibr" rid="R15" id="114" class="deo:Reference">Fischer, Girgensohn 1990</xref>], and end-user programming [<xref ref-type="bibr" rid="R1" id="115" class="deo:Reference">Ambach, Perrone, Repenning 1995</xref>; <xref ref-type="bibr" rid="R27" id="116" class="deo:Reference">Nardi 1993</xref>].<marker type="block"/> Reseeding, a deliberate effort of revision and coordination of information and functionality, brings the environment developers back to collaborate with domain designers to organize, formalize, and generalize knowledge added during the evolutionary growth phases. Organizational concerns [<xref ref-type="bibr" rid="R22" id="120" class="deo:Reference">Grudin 1991</xref>; <xref ref-type="bibr" rid="R38" id="121" class="deo:Reference">Terveen, Selfridge, Long 1993</xref>] play a crucial role in this phase. For example, decisions have to be made as to which of the extensions created in the context of specific design projects should be incorporated in future versions of the generic design environment. Drastic and large-scale evolutionary changes occur during the reseeding phase.</region>
        <outsider class="DoCO:TextBox" type="footer" id="111" page="9" column="1">Gerhard Fischer</outsider>
        <outsider class="DoCO:TextBox" type="page_nr" id="112" page="9" column="1">9</outsider>
        <region class="DoCO:FigureBox" id="F4">
          <image class="DoCO:Figure" src="62nc.page_010.image_03.png" thmb="62nc.page_010.image_03-thumb.png"/>
          <caption class="deo:Caption" id="119" page="10" column="1">Figure 4: The SER Model: A process model for the development and evolution of DODE S</caption>
        </region>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="123" page="10" column="1">Assessment of DODEs Knowledge-Based Systems Must Support the Integration of Working and Learning Problems Of Skilled Domain Workers In Evolving, High Functionality, Technological Domains.</h1>
        <region class="DoCO:TextChunk" id="134" page="10" column="1">Technologically oriented design fields are growing and changing at an alarming rate. Learning everything in advance in high functionality applications as embedded in knowledge-based systems is impossible because there are too many things to learn. The rapidly changing nature of available design objects (especially in all fields related to information technology such as computer network design) poses the problem that our knowledge needs to be updated constantly. The large and growing <marker type="page" number="11"/><marker type="block"/> discrepancy between the amount of potentially relevant knowledge and the amount users can know and remember makes support for learning on demand one of the most important activities. In high functionality systems “absolute experts” (in the sense of people who know everything) no longer exist [<xref ref-type="bibr" rid="R8" id="127" class="deo:Reference">Draper 1984</xref>; <xref ref-type="bibr" rid="R36" id="128" class="deo:Reference">Sullivan 1994</xref>]. The rapidly evolving nature of high functionality systems implies that being expert at time x does not mean one is an expert at a later time y. Systems that allow learning to take place within the context of real problem-solving situations must avoid the “production paradox” [<xref ref-type="bibr" rid="R4" id="129" class="deo:Reference">Carroll, Rosson 1987</xref>], in which learning is inhibited by lack of time and working is inhibited by lack of knowledge. Learners must regard the time and effort invested in learning to be immediately worthwhile for the task at hand—not merely for some putative long-term gain.<marker type="block"/> Beyond Tool-Knowledge: Domain-Orientation. Domain-orientation provides a context, or grounding, so that learning can take place. Without domain-orientation, the user faces only abstract tools, and there are considerable problems when trying to apply those tools to a particular problem. Domain-oriented environments allow the user to apply newly learned knowledge in a manner that clarifies technical abstractions or ambiguities.<marker type="block"/> Supporting Designers in their Own Doing. System-building efforts in support of learning on demand [<xref ref-type="bibr" rid="R20" id="132" class="deo:Reference">Fischer 1991</xref>] face the challenge of how a system can relinquish control of task selection yet maintain knowledge of users' goals, plans, and background knowledge. How can such systems be designed to function effectively in large solution spaces? By modeling problem domains with design environments. rather than representing solutions to individual problems, design environments support contextualized information access, which has as its goal to deliver the right knowledge in the context of a problem or service at the right moment for a human professional to consider. A partial understanding of the task at hand (as expressed by a partial specification and a partial construction) allows the system to prioritize information spaces in support of learning on demand.<marker type="block"/> Learning Embedded in the Context of Working. Embedding learning in the context of working is a promising approach for addressing such problems information overload, high functionality systems, and the rapid change of our world because: (1) it contextualizes learning by allowing it to be integrated into work rather than relegating it to a separate phase; (2) it lets learners see for themselves the usefulness of new knowledge for actual problem situations, thereby increasing the motivation for learning new things; and (3) it makes new information relevant to the task at hand, thereby leading to more informed decision making, better products, and improved performance.</region>
        <outsider class="DoCO:TextBox" type="footer" id="125" page="10" column="1">Gerhard Fischer</outsider>
        <outsider class="DoCO:TextBox" type="page_nr" id="126" page="10" column="1">10</outsider>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="135" page="11" column="1">Knowledge-Based Systems Must be Open, Rather Than Closed Systems</h1>
        <region class="DoCO:TextChunk" id="140" page="11" column="1">Design environments deal with complex and open-ended domains in which long-term users build extensive catalogs of personalized creative work. In contrast, non-programmable systems—systems in which users are forced to make choices by selection among fixed sets of alternatives (e.g., via menus or dialog boxes)—are rarely capable of providing users with the means for achieving their work; users’ tasks eventually outstrip the capabilities provided by such systems. As a result, DODEs need means by which users can extend the functionality of their applications, building progressively more complex vocabularies and “languages of design.” We have only scratched the surface of what would be possible if end users could freely program their own applications [<xref ref-type="bibr" rid="R27" id="136" class="deo:Reference">Nardi 1993</xref>]. DODEs need be equipped with an end-user programming language This, in turn, implies certain desiderata for such an environment: interactivity, learnability, and expressiveness co-adaptivity [<xref ref-type="bibr" rid="R25" id="137" class="deo:Reference">Mackay 1992</xref>] and malleable (adaptable and adaptive) systems [<xref ref-type="bibr" rid="R12" id="138" class="deo:Reference">Fischer 1993</xref>] within the domain of the application. <xref ref-type="fig" rid="F5" id="139" class="deo:Reference">Figure 5</xref> illustrates the duality that users of knowledge-based systems can learn from these systems but at the time need to be able to contribute new knowledge to a system.</region>
        <outsider class="DoCO:TextBox" type="footer" id="141" page="11" column="1">Gerhard Fischer</outsider>
        <outsider class="DoCO:TextBox" type="page_nr" id="142" page="11" column="1">11</outsider>
        <region class="DoCO:FigureBox" id="F5">
          <image class="DoCO:Figure" src="62nc.page_012.image_04.png" thmb="62nc.page_012.image_04-thumb.png"/>
          <caption class="deo:Caption" id="144" confidence="possible" page="12" column="1">Figure 5: Duality of Learning (through Knowledge Delivery) and Extending Knowledge-Based Systems (through End-user Modifiability)</caption>
        </region>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="145" page="12" column="1">Knowledge-Based Systems Need to Evolve</h1>
        <region class="DoCO:TextChunk" id="151" page="12" column="1">Evolution of complex systems is a ubiquitous phenomenon. Design approaches based on the assumption of complete and correct requirements do not correspond to the realities of the world [<xref ref-type="bibr" rid="R5" id="146" class="deo:Reference">CSTB 1990</xref>; <xref ref-type="bibr" rid="R6" id="147" class="deo:Reference">Curtis, Krasner, Iscoe 1988</xref>]. Substantial costs are due to the fact that a considerable amount of essential information (such as design rationale [<xref ref-type="bibr" rid="R18" id="148" class="deo:Reference">Fischer et al. 1991b</xref>]) is lost during development and must be reconstructed by the designers who maintain and evolve the system. Design methodologists (e.g., [<xref ref-type="bibr" rid="R32" id="149" class="deo:Reference">Rittel 1984</xref>; <xref ref-type="bibr" rid="R33" id="150" class="deo:Reference">Schoen 1983</xref>]) demonstrate with their work that the design of complex systems requires the integration of problem framing and problem solving, and they argue convincingly that one cannot gather information meaningfully unless one has understood the problem, but one cannot understand the problem without information about it. New requirements emerge during development because they cannot be identified until portions of the system have been designed and implemented. The conceptual structures underlying knowledge-based systems are too complicated to be specified accurately in advance and too complex to be built faultlessly. Specification and implementation have to co-evolve, requiring the owners of the problems to be present in the development. Evolution in DODEs. Our experience with DODEs clearly indicates that DODEs themselves as well as the artifacts created with them need to evolve. The ability of a DODE to coevolve with the artifacts created within it makes the DODE architecture the ideal candidate for creating evolvable application families. We believe that reseeding is critical to sustain evolutionary development. With design rationale captured, communication enhanced, and end-user modification available, developers have a rich source of information to evolve the system in the way users really need it. Our research provides theoretical and empirical evidence that requirements for such systems cannot be completely specified before system development occurs. Our experience can be summarized in the following principles: • Software systems must evolve—they cannot be completely designed prior to use. Design is a process that intertwines problem solving and problem framing. Software users and designers will not fully determine a system’s desired functionality until that system is put to use.</region>
        <outsider class="DoCO:TextBox" type="footer" id="152" page="12" column="1">Gerhard Fischer</outsider>
        <outsider class="DoCO:TextBox" type="page_nr" id="153" page="12" column="1">12</outsider>
        <region class="DoCO:TextChunk" id="154" confidence="possible" page="13" column="1">• Software systems must evolve at the hands of the users. End users experience a system’s deficiencies; subsequently, they have to play an important role in driving its evolution. Software systems need to contain mechanisms that allow end-user modification of system functionality. • Software systems must be designed for evolution. Through our previous research in software design, we have discovered that systems need to be designed a priori for evolution. Software architectures need to be developed for software that is designed to evolve.</region>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="155" page="13" column="1">Experiences with DODEs</h1>
        <region class="DoCO:TextChunk" id="158" page="13" column="1">Domain Orientation: Situated Breakdowns and Design Rationale. Complex systems evolve faster if they can build on stable subsystems [<xref ref-type="bibr" rid="R35" id="156" class="deo:Reference">Simon 1981</xref>]. Domain-oriented systems are rooted in the context of use in a domain. Although the DODE approach itself is generic, each of its applications is a particular domain-oriented system. Our emphasis on domain-oriented design environments acknowledges the importance of situated and contextualized communication and design rationale as the basis for effective evolutionary design. There is ample evidence in our work that human knowledge is tacit [Polanyi 1966] and that some of it will be activated only in actual problem situations. In early knowledge-based system-building efforts, there was a distinct knowledge acquisition phase that was assumed to lead to complete requirements — contrary to our assumption of the SER model (see <xref ref-type="fig" rid="F3" id="157" class="deo:Reference">Figure 3</xref>). The notion of a “seed” in the SER model emphasizes our interpretation of the initial system as a catalyst for evolution — evolution that is in turn supported by the environment itself.</region>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="159" page="13" column="1">End-User Modification and Programming for Communities: Evolution at the Hands of Users.</h1>
        <region class="DoCO:TextChunk" id="171" page="13" column="1">Because end users experience breakdowns and insufficiencies of a DODE in their work, they should be able to report, react to, and resolve those problems. Mechanisms for end-user modification and programming are therefore a cornerstone of evolvable systems. At the core of our approach to evolutionary design lies the ability of end users (in our case, domain designers) to make significant changes to system functionality, and to share those modifications within a community of designers. DODEs make end-user modifications feasible because they support interaction at the domain level. We don’t assume that all domain designers will be willing to make or even be interested in making, system changes, but within local communities of software use there often exist local developers and power users [ <xref ref-type="bibr" rid="R27" id="160" class="deo:Reference">Nardi 1993</xref>] who are interested in and capable of performing these tasks. Assessment of the Multifaceted Architecture. The multifaceted architecture derives its essential value from the integration of its components. Used individually, the components are unable to achieve their full potential. Used in combination, each component augments the values of the others, forming a synergistic whole to support evolutionary design. At each stage in the design process, the partial design embedded in the design environment serves as a stimulus to users, focuses their attention, and enriches the “back-talk” of a design situation [<xref ref-type="bibr" rid="R33" id="161" class="deo:Reference">Schoen 1983</xref>] by signaling breakdowns and by making task-relevant argumentation and catalog examples available [<xref ref-type="bibr" rid="R18" id="162" class="deo:Reference">Fischer et al. 1991b</xref>]. Breakdowns occur when domain designers cannot carry out the design work with the existing DODE. Extensions and criticism drive the evolution on all three levels: Domain designers directly modify the artifacts when they build them (artifact evolution), they feed their modifications back into the environment (domain evolution), and — during a reseeding phase — even the architecture may be revised (conceptual framework evolution). The support of DODEs for long-term, indirect communication [<xref ref-type="bibr" rid="R16" id="163" class="deo:Reference">Fischer et al. 1992</xref>] between original developers and designers who need to evolve the generic DODE as well as the individual artifacts created within a DODE [<xref ref-type="bibr" rid="R16" id="164" class="deo:Reference">Fischer et al. 1992</xref>] is critical and of particular importance in situations for which (1) direct communication is impossible, impractical, or undesirable; (2) communication is shared<marker type="page" number="14"/><marker type="block"/> around artifacts; or (3) designed artifacts continue to evolve over long periods of time (e.g., over months or years). DODEs provide essential mechanisms of which designers are informed within the context of their work. Assessment of the SER Model. The SER model is motivated by how large software systems, such as Emacs, Symbolics' Genera, Unix, and the X Window System, have evolved over time. In such systems, users develop new techniques and extend the functionality of the system to solve problems that were not anticipated by the system's initial authors. New releases of the system often incorporate ideas and code produced by users. In the same way that these software systems are extensible by programmers who use them, DODEs need to be extended by domain designers who are neither interested in nor trained in the (low-level) details of computational environments. Beyond Knowledge Acquisition. Knowledge acquisition is a crucial issue in the creation of effective information systems of all types (including expert systems, hypermedia systems, and design environments). There have been two extreme approaches: one is to input information in advance of use, typified by expert systems [<xref ref-type="bibr" rid="R3" id="168" class="deo:Reference">Buchanan, Shortliffe 1984</xref>], and the other is to start with an empty system and allow its information base to grow and become structured as a consequence of use, characterized by initial proposals for argumentative hypertext [<xref ref-type="bibr" rid="R26" id="169" class="deo:Reference">Moran, Carroll 1996</xref>]. Neither approach is adequate for the information needs of designers. The “put-all-the-knowledge-in-at-the-beginning” approach fails for numerous reasons. It is inadequate for domains in which the domain knowledge undergoes rapid changes (the computer network domain being a prime example). Traditional knowledge acquisition approaches, which require domain designers to articulate their knowledge outside the context of problem solving or during an initial knowledge acquisition phase, fail to capture tacit knowledge. The “just-provide-an-empty-framework” approach requires too much work of designers in the context of a specific project. The difficulties of capturing design knowledge from design projects are well known [<xref ref-type="bibr" rid="R18" id="170" class="deo:Reference">Fischer et al. 1991b</xref>]. The act of documenting interferes with the thinking process itself, disrupting design and requiring substantial time and effort that designers would rather invest in design. Designers typically find it difficult to structure their thoughts in a given format, regardless of the format used. In addition, domain designers often lack the knowledge and the interest to formalize knowledge so it can be computationally interpreted. The SER model explores interesting new ground between the two extremes of “put-all-the-knowledge- in-at-the-beginning” and “just-provide-an-empty-framework.” Designers are more interested in their design task at hand than in maintaining the knowledge base. At the same time, important knowledge that should be captured is produced during daily design activities. Rather than expect designers to spend extra time and effort to maintain the knowledge base as they design, we provide tools to help designers record information quickly and without regard for how the information should be integrated with the seed. Knowledge base maintenance is periodically performed during the reseeding phases by environment developers and domain designers in a collaborative activity.</region>
        <outsider class="DoCO:TextBox" type="footer" id="166" page="13" column="1">Gerhard Fischer</outsider>
        <outsider class="DoCO:TextBox" type="page_nr" id="167" page="13" column="1">13</outsider>
      </section>
      <section class="deo:Conclusion">
        <h1 class="DoCO:SectionTitle" id="172" page="14" column="1">Conclusions</h1>
        <region class="DoCO:TextChunk" id="177" page="14" column="1">The DODE approach is not just an experience report on one system. It challenges many assumptions and provides an alternative to other existing approaches to the design of knowledge-based systems [ <xref ref-type="bibr" rid="R2" id="173" class="deo:Reference">Bobrow 1991</xref>]. The domain orientation of a design environment enriches (1) the amount of support that a knowledge- based system can provide, and (2) the shared understanding among stakeholders. Design knowledge<marker type="page" number="15"/><marker type="block"/> includes domain concepts, argumentation, case-based catalogs, and critiquing rules. The appeal of the DODE approach lies in its compatibility with an emerging methodology for design, views of the future as articulated by practicing software engineering experts, reflections about the success of the expert system approach, findings of empirical studies, and the integration of many recent efforts to tackle specific issues in software design (e.g., recording design rationale, supporting case-based reasoning, or creating artifact memories).</region>
        <outsider class="DoCO:TextBox" type="footer" id="175" page="14" column="1">Gerhard Fischer</outsider>
        <outsider class="DoCO:TextBox" type="page_nr" id="176" page="14" column="1">14</outsider>
      </section>
      <section class="DoCO:Bibliography">
        <h1 class="DoCO:SectionTitle" id="178" page="15" column="1">References</h1>
        <ref-list class="DoCO:BiblioGraphicReferenceList">
          <ref rid="R1" class="deo:BibliographicReference" id="179" page="15" column="1">[Ambach, Perrone, Repenning 1995] J. Ambach, C. Perrone, and A. Repenning, Remote Exploratoriums: Combining Networking and Design Environments, Computers and Education, Vol. 24, No. 3, pp. 163-176.</ref>
          <ref rid="R2" class="deo:BibliographicReference" id="180" page="15" column="1">[Bobrow 1991] D.G. Bobrow, Dimensions of Interaction, AI Magazine, Vol. 12, No. 3, pp. 64-80.</ref>
          <ref rid="R3" class="deo:BibliographicReference" id="181" page="15" column="1">[Buchanan, Shortliffe 1984] B.G. Buchanan, and E.H. Shortliffe, Rule-Based Expert Systems: The MYCIN Experiments of the Stanford Heuristic Programming Project, Addison-Wesley Publishing Company, Reading, MA.</ref>
          <ref rid="R4" class="deo:BibliographicReference" id="182" page="15" column="1">[Carroll, Rosson 1987] J.M. Carroll, and M.B. Rosson, Paradox of the Active User, in J.M. Carroll (ed.), Interfacing Thought: Cognitive Aspects of Human-Computer Interaction, The MIT Press, Cambridge, MA, pp. 80-111.</ref>
          <ref rid="R5" class="deo:BibliographicReference" id="183" page="15" column="1">[CSTB 1990] Computer Science and Technology Board, Scaling Up: A Research Agenda for Software Engineering, Communications of the ACM, Vol. 33, No. 3, pp. 281-293.</ref>
          <ref rid="R6" class="deo:BibliographicReference" id="184" page="15" column="1">[Curtis, Krasner, Iscoe 1988] B. Curtis, H. Krasner, and N. Iscoe, A Field Study of the Software Design Process for Large Systems, Communications of the ACM, Vol. 31, No. 11, pp. 1268-1287.</ref>
          <ref rid="R7" class="deo:BibliographicReference" id="185" page="15" column="1">[Dawkins 1987] R. Dawkins, The Blind Watchmaker, W.W. Norton and Company, New York London.</ref>
          <ref rid="R8" class="deo:BibliographicReference" id="186" page="15" column="1">[Draper 1984] S.W. Draper, The Nature of Expertise in UNIX, in Proceedings of INTERACT’84, IFIP Conference on Human-Computer Interaction, Elsevier Science Publishers, Amsterdam, pp. 182- 186.</ref>
          <ref rid="R9" class="deo:BibliographicReference" id="187" page="15" column="1">[Ehn 1988] P. Ehn, Work-Oriented Design of Computer Artifacts, Almquist &amp; Wiksell International, Stockholm, Sweden.</ref>
          <ref rid="R10" class="deo:BibliographicReference" id="188" page="15" column="1">[Eisenberg, Fischer 1994] M. Eisenberg, and G. Fischer, Programmable Design Environments: Integrating End-User Programming with Domain-Oriented Assistance, in Human Factors in Computing Systems, CHI’94 Conference Proceedings (Boston, MA), pp. 431-437.</ref>
          <ref rid="R11" class="deo:BibliographicReference" id="189" page="15" column="1">[Fischer 1991] G. Fischer, Supporting Learning on Demand with Design Environments, in L. Birnbaum (ed.), Proceedings of the International Conference on the Learning Sciences 1991 (Evanston, IL), Association for the Advancement of Computing in Education, Charlottesville, VA, pp. 165-172.</ref>
          <ref rid="R12" class="deo:BibliographicReference" id="190" page="15" column="1">[Fischer 1993] G. Fischer, Shared Knowledge in Cooperative Problem-Solving Systems - Integrating Adaptive and Adaptable Components, in M. Schneider-Hufschmidt, T. Kuehme and U. Malinowski (eds.), Adaptive User Interfaces - Principles and Practice, Elsevier Science Publishers, Amsterdam, pp. 49-68.</ref>
          <ref rid="R13" class="deo:BibliographicReference" id="191" page="15" column="1">[Fischer 1994a] G. Fischer, Domain-Oriented Design Environments, Automated Software Engineering, Vol. 1, No. 2, pp. 177-203.</ref>
          <ref rid="R14" class="deo:BibliographicReference" id="192" page="15" column="1">[Fischer 1994b] G. Fischer, Turning Breakdowns into Opportunities for Creativity, Knowledge-Based Systems, Special Issue on Creativity and Cognition, Vol. 7, No. 4, pp. 221-232.</ref>
          <ref rid="R15" class="deo:BibliographicReference" id="195" page="16" column="1">[Fischer, Girgensohn 1990] G. Fischer, and A. Girgensohn, End-User Modifiability in Design Environments, in Human Factors in Computing Systems, CHI’90 Conference Proceedings (Seattle, WA), New York, pp. 183-191.</ref>
          <ref rid="R16" class="deo:BibliographicReference" id="196" page="16" column="1">[Fischer et al. 1992] G. Fischer et al., Supporting Indirect, Collaborative Design with Integrated Knowledge-Based Design Environments, Human Computer Interaction, Special Issue on Computer Supported Cooperative Work, Vol. 7, No. 3, pp. 281-314.</ref>
          <ref rid="R17" class="deo:BibliographicReference" id="197" page="16" column="1">[Fischer et al. 1991a] G. Fischer et al., The Role of Critiquing in Cooperative Problem Solving, ACM Transactions on Information Systems, Vol. 9, No. 2, pp. 123-151.</ref>
          <ref rid="R18" class="deo:BibliographicReference" id="198" page="16" column="1">[Fischer et al. 1991b] G. Fischer et al., Making Argumentation Serve Design, Human Computer Interaction, Vol. 6, No. 3-4, pp. 393-419.</ref>
          <ref rid="R19" class="deo:BibliographicReference" id="199" page="16" column="1">[Fischer et al. 1994] G. Fischer et al., Seeding, Evolutionary Growth and Reseeding: Supporting Incremental Development of Design Environments, in Human Factors in Computing Systems, CHI’94 Conference Proceedings (Boston, MA), pp. 292-298.</ref>
          <ref rid="R20" class="deo:BibliographicReference" id="200" page="16" column="1">[Fischer, Nakakoji 1991] G. Fischer, and K. Nakakoji, Making Design Objects Relevant to the Task at Hand, in Proceedings of AAAI-91, Ninth National Conference on Artificial Intelligence, AAAI Press/The MIT Press, Cambridge, MA, pp. 67-73.</ref>
          <ref rid="R21" class="deo:BibliographicReference" id="201" page="16" column="1">[Greenbaum, Kyng 1991] J. Greenbaum, and M. Kyng, Design at Work: Cooperative Design of Computer Systems, Lawrence Erlbaum Associates, Inc., Hillsdale, NJ.</ref>
          <ref rid="R22" class="deo:BibliographicReference" id="202" page="16" column="1">[Grudin 1991] J. Grudin, Interactive Systems: Bridging the Gaps Between Developers and Users, Computer, Vol. 24, No. 4, pp. 59-69.</ref>
          <ref rid="R23" class="deo:BibliographicReference" id="203" page="16" column="1">[Henderson, Kyng 1991] A. Henderson, and M. Kyng, There’s No Place Like Home: Continuing Design in Use, in J. Greenbaum and M. Kyng (eds.), Design at Work: Cooperative Design of Computer Systems, Lawrence Erlbaum Associates, Inc., Hillsdale, NJ, pp. 219-240.</ref>
          <ref rid="R24" class="deo:BibliographicReference" id="204" page="16" column="1">[Kolodner 1993] J.L. Kolodner, Case-Based Reasoning, Morgan Kaufmann Publishers, Inc., San Mateo, CA.</ref>
          <ref rid="R25" class="deo:BibliographicReference" id="205" page="16" column="1">[Mackay 1992] W.E. Mackay, Co-adaptive Systems: Users as Innovators, in CHI’92 Basic Research Symposium,</ref>
          <ref rid="R26" class="deo:BibliographicReference" id="206" page="16" column="1">[Moran, Carroll 1996] T.P. Moran, and J.M. Carroll, Design Rationale: Concepts, Techniques, and Use, Lawrence Erlbaum Associates, Inc., Hillsdale, NJ.</ref>
          <ref rid="R27" class="deo:BibliographicReference" id="207" page="16" column="1">[Nardi 1993] B.A. Nardi, A Small Matter of Programming, The MIT Press, Cambridge, MA. [Polanyi 1966] M. Polanyi, The Tacit Dimension, Doubleday, Garden City, NY.</ref>
          <ref rid="R28" class="deo:BibliographicReference" id="208" page="16" column="1">[Popper 1965] K.R. Popper, Conjectures and Refutations, Harper &amp; Row, New York, Hagerstown, San Francisco, London.</ref>
          <ref rid="R29" class="deo:BibliographicReference" id="209" page="16" column="1">[Reeves 1993] B.N. Reeves, Supporting Collaborative Design by Embedding Communication and History in Design Artifacts, Ph.D. Thesis, Department of Computer Science, University of Colorado at Boulder.</ref>
          <ref rid="R30" class="deo:BibliographicReference" id="210" page="16" column="1">[Repenning, Sumner 1995] A. Repenning, and T. Sumner, Agentsheets: A Medium for Creating Domain-Oriented Visual Languages, in Computer, IEEE Computer Society, Los Alamitos, CA, pp. 17-25.</ref>
          <ref rid="R31" class="deo:BibliographicReference" id="211" page="16" column="1">[Resnick, Levine, Teasley 1991] L.B. Resnick, J.M. Levine, and S.D. Teasley, Perspectives on Socially Shared Cognition, American Psychological Association, Washington, D.C.</ref>
          <ref rid="R32" class="deo:BibliographicReference" id="212" page="16" column="1">[Rittel 1984] H. Rittel, Second-Generation Design Methods, in N. Cross (ed.), Developments in Design Methodology, John Wiley &amp; Sons, New York, pp. 317-327.</ref>
          <ref rid="R33" class="deo:BibliographicReference" id="215" page="17" column="1">[Schoen 1983] D.A. Schoen, The Reflective Practitioner: How Professionals Think in Action, Basic Books, New York.</ref>
          <ref rid="R34" class="deo:BibliographicReference" id="216" page="17" column="1">[Shipman 1993] F. Shipman, Supporting Knowledge-Base Evolution with Incremental Formalization, Ph.D. Thesis, Department of Computer Science, University of Colorado at Boulder.</ref>
          <ref rid="R35" class="deo:BibliographicReference" id="217" page="17" column="1">[Simon 1981] H.A. Simon, The Sciences of the Artificial, The MIT Press, Cambridge, MA.</ref>
          <ref rid="R36" class="deo:BibliographicReference" id="218" page="17" column="1">[Sullivan 1994] J. Sullivan, A Proactive Computational Approach for Learning While Working, Ph.D. Thesis, Department of Computer Science, University of Colorado.</ref>
          <ref rid="R37" class="deo:BibliographicReference" id="219" page="17" column="1">[Sumner 1995] T. Sumner, Designers and Their Tools: Computer Support for Domain Construction, Ph.D. Thesis, University of Colorado at Boulder.</ref>
          <ref rid="R38" class="deo:BibliographicReference" id="220" page="17" column="1">[Terveen, Selfridge, Long 1993] L.G. Terveen, P.G. Selfridge, and M.D. Long, From Folklore to Living Design Memory, in Human Factors in Computing Systems, INTERCHI’93 Conference Proceedings, pp. 15-22.</ref>
          <ref rid="R39" class="deo:BibliographicReference" id="221" page="17" column="1">[Winograd, Flores 1986] T. Winograd, and F. Flores, Understanding Computers and Cognition: A New Foundation for Design, Ablex Publishing Corporation, Norwood, NJ.</ref>
        </ref-list>
        <outsider class="DoCO:TextBox" type="footer" id="193" page="15" column="1">Gerhard Fischer</outsider>
        <outsider class="DoCO:TextBox" type="page_nr" id="194" page="15" column="1">15</outsider>
        <outsider class="DoCO:TextBox" type="footer" id="213" page="16" column="1">Gerhard Fischer</outsider>
        <outsider class="DoCO:TextBox" type="page_nr" id="214" page="16" column="1">16</outsider>
        <outsider class="DoCO:TextBox" type="footer" id="222" page="17" column="1">Gerhard Fischer</outsider>
        <outsider class="DoCO:TextBox" type="page_nr" id="223" page="17" column="1">17</outsider>
      </section>
    </body>
  </article>
</pdfx>
