<?xml version='1.0' encoding='UTF-8'?>
<pdfx xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://pdfx.cs.man.ac.uk/static/article-schema.xsd">
  <meta>
    <job>f45ca48bb36d052cc39efaf9c44db63f6a05bc7e8f64f18d398c225d43bb38d0</job>
    <base_name>62h6</base_name>
    <doi confidence="possible">http://dx.doi.org/10.1145/2445196.2445286</doi>
  </meta>
  <article>
    <front class="DoCO:FrontMatter">
      <title-group>
        <article-title class="DoCO:Title" id="1">APP INVENTOR FOR ANDROID WITH STUDIO-BASED</article-title>
      </title-group>
      <region class="unknown" id="2">LEARNING *</region>
      <contrib-group class="DoCO:ListOfAuthors">
        <contrib contrib-type="author">
          <name id="3">Paul Gestwicki</name>
        </contrib>
        <contrib contrib-type="author">
          <name id="4">Khuloud Ahmad Computer Science Department Ball State University Muncie</name>
        </contrib>
        <contrib contrib-type="author">
          <name id="5">IN 47306 765-285-8668 (Gestwicki) pvgestwicki@bsu.edu</name>
        </contrib>
        <contrib contrib-type="author">
          <name id="6">knahmad@bsu.edu</name>
        </contrib>
      </contrib-group>
      <abstract class="DoCO:Abstract" id="7">App Inventor for Android allows people with little or no programming experience to create smart phone applications on the Android platform. This is accomplished by using drag-and-drop UI design and blocks-oriented visual programming. We offered an experimental section during the closed beta testing of App Inventor for Android in which we used Studio-Based Learning to foster positive learning experiences. Studio-Based Learning is a pedagogical approach in which students build their own representations of their knowledge and share these, formally and informally, with both experts and peers. Our students worked in teams on several projects, with the sixteen students creating over thirty Android applications while learning fundamentals of Computer Science. In this paper, we provide the background and inspiration for this work, including a review of literature on Studio-Based Learning and a comparison of App Inventor for Android to other modern visual programming environments. An overview of our semester goals and course design are provided. From our experience and based on the literature, we conclude that App Inventor for Android and Studio-Based Learning make for a powerful combination to introduce non-CS majors to concepts of Computer Science-not just programming, but also ideas that tend not to be covered in conventional CS1 courses such as human-computer interaction, incremental and iterative design processes, collaboration, evaluation, and quality assurance. This paper</abstract>
      <region class="DoCO:TextChunk" id="8" confidence="possible">___________________________________________ * Copyright Â© 2011 by the Consortium for Computing Sciences in Colleges. Permission to copy without fee all or part of this material is granted provided that the copies are not made or distributed for direct commercial advantage, the CCSC copyright notice and the title of the publication and its date appear, and notice is given that copying is by permission of the Consortium for Computing Sciences in Colleges. To copy otherwise, or to republish, requires a fee and/or specific permission.</region>
      <outsider class="DoCO:TextBox" type="page_nr" id="9">55</outsider>
      <outsider class="DoCO:TextBox" type="header" id="10">JCSC 27, 1 (October 2011)</outsider>
      <region class="DoCO:TextChunk" id="11" confidence="possible">complements the eponymous Web site at https://sites.google.com/site/appinventorsbl.</region>
    </front>
    <body class="DoCO:BodyMatter">
      <section class="deo:Introduction">
        <h1 class="DoCO:SectionTitle" id="12" page="2" column="1">INTRODUCTION</h1>
        <region class="DoCO:TextChunk" id="18" page="2" column="1">Many undergraduates enter a university experience with little or no computer science knowledge. However, the explosion of the smart phone market means that many students carry phenomenal computational power in their pockets. Most are simply users of these devices, with the associated loss of agency [<xref ref-type="bibr" rid="R4" id="13" class="deo:Reference">4</xref>, <xref ref-type="bibr" rid="R7" id="14" class="deo:Reference">7</xref>]. Computer Science majors and minors can learn the intricacies of industrial-strength mobile application development tools such as Java, Eclipse, Objective-C, and XCode [e.g. 3, 5, 6]. The tools and techniques of professional mobile application development require too much background knowledge to introduce in a one-semester introduction to computer science concepts. Google has helped address this gap by developing App Inventor for Android, a programming environment that allows non-CS students to develop smart phone applications and thereby explore fundamental computer science concepts. It uses a visual programming language similar to Scratch 1 or GameMaker 2 that allows developers to focus on the higher-level behavior of their programs rather than fiddle with semicolons and parentheses. This makes it an excellent candidate for introducing students to concepts in computer science. App Inventor for Android is free and publicly available, and students without Android phones can use an integrated emulator. <xref ref-type="fig" rid="F1" id="15" class="deo:Reference">Figure 1</xref> shows two screenshots show design view, in which a user assembles visible and non-visible components into screens, and blocks view, in which a user adds behavior through blocks-style programming. In order to maximize the effectiveness of our approach, we adopted studio-based learning, a pedagogical approach shown to work in Computer Science courses [<xref ref-type="bibr" rid="R2" id="16" class="deo:Reference">2</xref>, <xref ref-type="bibr" rid="R10" id="17" class="deo:Reference">10</xref>]. Studio-based learning is a pedagogic model used extensively in art and architecture. It is based on principles of constructionist educational philosophy. The name is chosen to conjure images of students working on real projects in a studio room, in plain sight of other students and instructors. The model works best with a dedicated studio space, but this is not a necessary component: many benefits of studio-based learning can be gleaned by adapting the model to other environments. There are two defining characterstics of studio-based learning: students create their own representations of their learning; and these representations are shared with peers and experts, in both formal and informal contexts. In the context of App Inventor for Android and introductory computing classes, this means that students create their own smart phone applications, demonstrating them to each other and to their instructors. Abstract principles such as iteration and sequencing are made concrete through practice, and both understanding and retention are improved by formal and informal presentation.</region>
        <region class="DoCO:TextChunk" id="21" confidence="possible" page="2" column="1">1 <ext-link ext-link-type="uri" href="http://scratch.mit.edu" id="19">http://scratch.mit.edu</ext-link> 2 <ext-link ext-link-type="uri" href="http://www.yoyogames.com/gamemaker" id="20">http://www.yoyogames.com/gamemaker</ext-link></region>
        <outsider class="DoCO:TextBox" type="page_nr" id="22" page="2" column="1">56</outsider>
        <outsider class="DoCO:TextBox" type="header" id="23" page="3" column="1">CCSC: Midwestern Conference</outsider>
        <region class="DoCO:FigureBox" id="F1">
          <image class="DoCO:Figure" src="62h6.page_003.image_01.png" thmb="62h6.page_003.image_01-thumb.png"/>
          <caption class="deo:Caption" id="25" page="3" column="1">Figure 1: App Inventor for Android</caption>
        </region>
        <outsider class="DoCO:TextBox" type="page_nr" id="26" page="3" column="1">57</outsider>
        <outsider class="DoCO:TextBox" type="header" id="27" page="4" column="1">JCSC 27, 1 (October 2011)</outsider>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="28" page="4" column="1">COURSE STRUCTURE</h1>
        <region class="DoCO:TextChunk" id="30" page="4" column="1">An overview of the course structure is provided in <xref ref-type="table" rid="T1" id="29" class="deo:Reference">Table 1</xref>. During the first four weeks of the course, students focused on fundamentals of Android and App Inventor. Computer Science concepts such as iteration, sequencing, selection, variables, and lists were introduced as necessary to scaffold students' progression through a series of tutorials. Some of the tutorials were taken from the official App Inventor site 3 and others were created to fill in the gaps. Week Content 1 Introduction to the Course and to AndroidTutorials 2-4 Tutorials 5-8 One-Week Projects 9-10 Two-Week Project 11-14 Final Project 15 Showcase</region>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="32" confidence="possible" page="4" column="1"> <xref ref-type="table" rid="T1" id="31" class="deo:Reference">Table 1</xref>: Course Structure</h2>
          <region class="DoCO:TextChunk" id="33" page="4" column="1">The remaining eleven weeks of the semester were devoted to team-based, project-oriented learning, following the studio-based learning model. The projects increased in scale and scope throughout the semester. During the one-week projects, teams were formed by the instructors using different methods which were opaque to the students: random assignment, by major, by gender, and by cumulative GPA. This maximized interstudent collaboration and also allowed us to observe how different groups interacted for a concurrent qualitative study for which data analysis is ongoing. Our class met three times per week (Monday, Wednesday, and Friday) within a computer lab, fifty minutes per meeting. For the purpose of designing and executing our course, we defined the critical SBL components that could be arranged into assignments of different scales: The Pitch, The Studio, and The Presentation. During The Pitch, students form teams and spend the majority of the meeting discussing project ideas. During this time, they may sketch paper prototypes, explore pertinent App Inventor features, and consult with instructors. The instructor's role can vary, but it includes providing themes, encouraging sketching and prototyping, and suggesting computer science ideas and App Inventor features. Each team is given a few minutes at the end of class to present their pitch, during which time the other teams can provide feedback as well. In the earliest projects, the students chose projects that were similar to the tutorials. For example, after a tutorial in which students created an app for choosing random menu items, there was a proliferation of projects in the "choose random element from list" genre, such as restaurant selectors, music selectors, Magic 8-Ball, and Mash 4 . To help foster creativity among the teams, we followed these with themed projects. Themes that proved successful were service, education, entertainment, and entrepreneurship.</region>
          <region class="DoCO:TextChunk" id="35" confidence="possible" page="4" column="1">3 <ext-link ext-link-type="uri" href="http://appinventor.googlelabs.com/about" id="34">http://appinventor.googlelabs.com/about</ext-link> 4 Mash is a game commonly played by young children to predict one's future.</region>
          <outsider class="DoCO:TextBox" type="page_nr" id="36" page="4" column="1">58</outsider>
          <outsider class="DoCO:TextBox" type="header" id="37" page="5" column="1">CCSC: Midwestern Conference</outsider>
          <region class="DoCO:TextChunk" id="39" page="5" column="1">The Studio days are times for the students to work on their teams in a controlled environment. As with pitch days, the studio is an opportunity for the instructor to practice just-in-time instruction. It can be a challenge for those who experienced purely didactic instruction to adopt the behaviors and perspectives of constructionism. That is, it can be hard to formulate pedagogy as a "guide on the side" if one has only ever been a "sage on the stage." Environments like App Inventor can help faculty with the transition because: they are easy to learn for both faculty and students; due to their expert mental models, faculty will learn them faster; and students' high level of motivation will keep them interested and active. For the students, the studio is an opportunity for continuous formative evaluation. In order to take full advantage of the studio days, teams should be collocated. Even if the teams are working on superficially different projects, one can leverage the fact that humans are good at collecting osmotic communication [<xref ref-type="bibr" rid="R1" id="38" class="deo:Reference">1</xref>]: by having the teams near each other, they can learn from and contribute to each others' work. At the end of the project, students present their results to the class. The Presentation usually consists of two parts: the features and the architecture. In the feature presentation, the students introduce the problem they were trying to solve-which may have been modified from the original pitch-and demonstrate how their application works, from a user's perspective. Then, they show the implementation in App Inventor, illustrating what components were used to implement the solution.</region>
        </section>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="40" confidence="possible" page="5" column="1">Small Project Format</h2>
          <region class="DoCO:TextChunk" id="41" page="5" column="1">One-week projects were conducted in a Pitch-Studio-Presentation format. These projects served to help students learn App Inventor for Android while also learning how to work together and in a studio environment. The first two projects were open-ended, and students tended to reuse features from the tutorials with minor alterations. Once the students became more comfortable with the tools and ideas-and more comfortable with learning by exploration and collaboration-we used project themes to steer their creative energies in new directions. Themes we explored during the semester include service, entertainment, entrepreneurship, and education. The two-week project provided students with an opportunity to experience development in multiple deliverables. In the first week, we had the Pitch followed by one Studio day and a progress report, which was a shortened version of a Presentation day. The following week contained two Studio days and the final Presentation day. By the time the students were in the two-week projects, a majority of the students had shown proficiency with App Inventor for Android, both in terms of covered material and in their ability to discover new features. The pitch and presentations were also more clear and concise, as the students had built a better understanding of what was expected in each of these, and they also had a more advanced vocabulary for describing their ideas and implementations.</region>
        </section>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="42" confidence="possible" page="5" column="1">Final project and Showcase</h2>
          <region class="DoCO:TextChunk" id="46" page="5" column="1">Students knew, from early in the semester, that there would be a month-long final project. On the first day of the final project, students were given sufficient time to form <marker type="page" number="6"/><marker type="block"/> their teams and to discuss each person's idea for the final project. In fact, the teams seemed to form around the people who had the most interesting final project ideas, and these people became de facto team leaders. The pitch for the final project had an additional requirement: students had to provide an outline of what features would be complete by the halfway point and those that would be addressed in the second half. Most of the class meetings during this period were studio days. The one midpoint progress report was designed for students to get feedback from their peers, since the instructors had already been able to give significant feedback on design and implementation issues through the studio days. A few meetings during these four weeks were used for additional tutorials, but only when a majority of the class agreed that this was more valuable than studio time. As one might expect, many teams overestimated what they could deliver in four weeks. Students were cautioned about this during the pitch, although few took this advice. Guidance during studio time helped students to cut some planned features, and the public progress report also helped students to gain input on how to re-think their solution strategies. Every team presented their own projects during class meeting times, but the end-of-semester Showcase was another important part of the final projects. At the end of the semester, we were able to offer students an opportunity to showcase their work to the university. This was a highlight of the semester. Students voted on each others' final projects to determine which would be shown during the formal presentation, and then the rest had theirs installed on devices for attendees to try afterwards. The knowledge that they would have to present to the public helped students maintain focus and raised their expectations for themselves.</region>
          <outsider class="DoCO:TextBox" type="page_nr" id="44" page="5" column="1">59</outsider>
          <outsider class="DoCO:TextBox" type="header" id="45" page="6" column="1">JCSC 27, 1 (October 2011)</outsider>
        </section>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="47" page="6" column="1">STUDENT ASSESSMENT</h1>
        <region class="DoCO:TextChunk" id="48" page="6" column="1">The distinction between formative and summative assessment was explained to students so that they could see that the formative assessments were designed to help them improve their skills. Note that continuous formative assessment-both formal and informal-is intrinsic to the structure of studio-based learning. By and large, the students were unfamiliar with the concept of formative evaluation. I suspect that their assumption was that all graded work "counted" somehow toward a final grade. Several of them seemed legitimately intrigued by the notion of purely formative assessment, which suggests that we need to get a lot more of the science of teaching and learning transparently into the classroom.</region>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="49" confidence="possible" page="6" column="1">Formative Assessment of Students</h2>
          <region class="DoCO:TextChunk" id="53" page="6" column="1">Many of the opportunities for formative assessment are evident in the course structure: the pitch, the studio, and the presentation all provide opportunities for formal and informal feedback and conversation. In addition to the studio-oriented formative assessments, we also used mid-semester interviews. To prepare for this, we agreed on the grades to be assigned each student as if it were the end of semester; these were based on our observations and a few reflective essays. We also developed a sample application that we expected students to be able to interpret. <marker type="page" number="7"/><marker type="block"/> Each student scheduled an out-of-class meeting with one of us. The meetings consisted of two parts. First, we discussed our observations and explained the grade that we would give the student, giving them the opportunity to discuss differences of opinion. Second, we showed them the sample application and asked them to "think aloud" to explain its functionality and divine its purpose. This provided insight into not just student capability, but also their approach. If students were unable to complete the task satisfactorily, we provided some specific tips on how to practice, based on the mistakes discovered.</region>
          <outsider class="DoCO:TextBox" type="page_nr" id="51" page="6" column="1">60</outsider>
          <outsider class="DoCO:TextBox" type="header" id="52" page="7" column="1">CCSC: Midwestern Conference</outsider>
        </section>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="54" confidence="possible" page="7" column="1">Summative Assessment of Students</h2>
          <region class="DoCO:TextChunk" id="57" page="7" column="1">At a few points during the semester, we asked students to write reflective essays about their experience in the course. This was a way for students to discuss how they approached problems, how they dealt with difficulties both technical and social, and to critically analyze their own work. These essays were designed to foster metacognition, and so they were graded on authenticity rather than any specific insight or content. That is, there was no particular truth we expected students to discover, but rather for them to show evidence of discovering the process of reflective practice [<xref ref-type="bibr" rid="R8" id="55" class="deo:Reference">8</xref>, <xref ref-type="bibr" rid="R9" id="56" class="deo:Reference">9</xref>]. For each project, the instructors took notes and indicated a tentative grade for it, using a coarse-grained scale. Because the learning objectives of the course were tuned to programming aptitude-as opposed to design, human-computer interaction, business, etc.-we focused on correct use and explanation of programming constructs. The students were aware that this was the primary emphasis of the course. About halfway through the semester, once the students were comfortable with some of the vocabulary of Computer Science and App Inventor for Android, we provided a list of concepts in which we expected competency by mid-semester and by the end of semester. This was to be the list that we used to evaluate the later projects, and with which we reminded students of the concepts they needed to explore. By mid-semester, the students had to show competency in: block sequencing; responding to user and sensor events; managing multimedia assets; conditionals; and arithmetic, including generating and processing random numbers. By the end of the semester, students needed to additionally show proficiency in using loops and in functional decomposition. At the end of the semester, we discussed the grades we felt were appropriate for each student, and these were emailed along with brief justifications. The students had the opportunity to appeal, although none did.</region>
        </section>
      </section>
      <section class="deo:Conclusion">
        <h1 class="DoCO:SectionTitle" id="58" page="7" column="1">CONCLUSIONS</h1>
        <region class="DoCO:TextChunk" id="62" page="7" column="1">App Inventor and studio-based learning were a synergistic combination: they are valuable independently, but together they provide for a motivating, fun, and rigorous introduction to computer science through smart phone application development. The students were further motivated by the public nature of the course: we were partnered with Google-a big name even for non-CS majors!-and the students showed their work to each other, in a public showcase, and for the world on a course Web site. <marker type="page" number="8"/><marker type="block"/> The informal interactions during a pitch meeting provide insight to aid in designing just-in-time interventions: the best time to introduce a new concept is when students realize that there is something they need to learn to accomplish their goals. For example, after having some experience with the TinyWebDB component-an App Inventor block that allows a program to communicate with a simple AppEngine data store-some of the students wanted to create a Web site to showcase a high score list stored in the database, and they wanted the entries to be sorted. I explained that the best way I knew how to do this was to do some server-side scripting with Python using AppEngine, and when I asked if this was something they wanted to learn about, the vote was a unanimously positive. I prepared a tutorials session on Python scripting for AppEngine, and the students did a great job with it. Perhaps most importantly, they were able to interpret the Python code constructs (specifically methods, loops, iteration, and conditionals) in terms of the App Inventor for Android components that they knew. Many software engineering concepts normally found in upper-level courses were able to be infused into the one-semester experience. For example, estimation was a recurring theme of the course, and estimation is difficult even for professional developers. Hence, one can expect student groups to frequently misjudge the effort required to complete a project. In longer projects, this can be remedied by using multiple deliverables. In smaller projects, it's simply a good opportunity to talk about the challenges of estimation and the importance of clear communication with stakeholders about failed estimates. These kinds of lessons provide the students with a broader perspective of computer science and an understanding that programming is not the only interesting and challenging part of the field. One complication of shuffling the teams was that it was challenging for students to set up out-of-class meeting times. It was clear that this worked better in some teams than others. However, by having the studio day in the middle, this ensured that there was communication among team members even if some were more active than others with their out-of-class time commitment. The combination of App Inventor and Studio-Based Learning provided us with good introductions to constructionist pedagogies. Neither instructor had previous experience with SBL: one had attended a workshop on the topic, which was the inspiration for its use in the experimental class. We learned along with the students, and the positive experience convinced us to use this technique again. This suggests that this combination may be useful for other instructors who are looking to expand their own horizons as they introduce students to exciting new technologies.</region>
        <outsider class="DoCO:TextBox" type="page_nr" id="60" page="7" column="1">61</outsider>
        <outsider class="DoCO:TextBox" type="header" id="61" page="8" column="1">JCSC 27, 1 (October 2011)</outsider>
      </section>
      <section class="DoCO:Bibliography">
        <h1 class="DoCO:SectionTitle" id="63" page="8" column="1">REFERENCES</h1>
        <ref-list class="DoCO:BiblioGraphicReferenceList">
          <ref rid="R1" class="deo:BibliographicReference" id="64" page="8" column="1">[1] Alistair Cockburn. Agile Software Development: The Cooperative Game, 2nd ed. Addison-Wesley, 2007.</ref>
          <ref rid="R2" class="deo:BibliographicReference" id="65" page="8" column="1">[2] Christopher D. Hundhausen, N. Hari Narayanan, and Martha E. Crosby. Exploring studio-based instructional models for computing education. In Proceedings of the 39th SIGCSE technical symposium on Computer science education, 392-396, 2008.</ref>
          <ref rid="R3" class="deo:BibliographicReference" id="68" page="9" column="1">[3] Stan Kurkovsky. Engaging students through mobile game development. In Proceedings of the 40th ACM technical symposium on Computer science education, 44-48, 2009.</ref>
          <ref rid="R4" class="deo:BibliographicReference" id="69" page="9" column="1">[4] Jaron Lanier. You Are Not A Gadget: A Manifesto. Knopf, 2010.</ref>
          <ref rid="R5" class="deo:BibliographicReference" id="70" page="9" column="1">[5] Quasy H. Mahmoud and Allan Dyer. Integrating blackberry wireless devices into computer programming and literacy courses. In Proceedings of the 45th annual southeast regional conference, 495-500, 2007.</ref>
          <ref rid="R6" class="deo:BibliographicReference" id="71" page="9" column="1">[6] Quasy H. Mahmoud and Allan Dyer. Mobile devices in an introductory programming course. Computer, 41(6):108-107, 2008.</ref>
          <ref rid="R7" class="deo:BibliographicReference" id="72" page="9" column="1">[7] Douglas Rushkoff. Program or be Programmed: Ten Commands for the Digital Age. O/R Books, 2010.</ref>
          <ref rid="R8" class="deo:BibliographicReference" id="73" page="9" column="1">[8] Donald A. Schon. The Reflective Practitioner: How Professionals Think in Action. Basic Books, 1983.</ref>
          <ref rid="R9" class="deo:BibliographicReference" id="74" page="9" column="1">[9] Donald A. Schon. Educating the Reflective Practitioner: Toward a New Design for Teaching and Learning in the Professions. Jossey-Bass, 1986.</ref>
          <ref rid="R10" class="deo:BibliographicReference" id="75" page="9" column="1">[10] Michael Woodly and Samuel N. Kamin. Programming studio: a course for improving programming skills in undergraduates. In Proceedings of the 38th SIGCSE technical symposium on Computer science education, 531-535, 2007.</ref>
        </ref-list>
        <outsider class="DoCO:TextBox" type="page_nr" id="66" page="8" column="1">62</outsider>
        <outsider class="DoCO:TextBox" type="header" id="67" page="9" column="1">CCSC: Midwestern Conference</outsider>
        <outsider class="DoCO:TextBox" type="page_nr" id="76" page="9" column="1">63</outsider>
      </section>
    </body>
  </article>
</pdfx>
