<?xml version='1.0' encoding='UTF-8'?>
<pdfx xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://pdfx.cs.man.ac.uk/static/article-schema.xsd">
  <meta>
    <job>b7c4ebe1ac167e038d1fcde1ac9a8fc5e6e6dbf4ec9716e448d3473a5bdcc68c</job>
    <base_name>62mc</base_name>
    <doi>http://dx.doi.org/10.1016/0950-7051(94)90033-7</doi>
    <warning>Original PDF was found to be an image-based/possible OCR document. Output quality may be degraded.</warning>
  </meta>
  <article>
    <front class="DoCO:FrontMatter">
      <region class="DoCO:TextChunk" id="1" confidence="possible">~universitY of Colorado at Boulder Center for lifeLong Learning Department of Computer Science ECar 717 EnglDeenng Center Campus Box 430 Boulder, Colorado 8(B09-{)430</region>
      <disp-formula class="DoCO:FormulaBox" id="F303">
        <label class="DoCO:Label" id="2">303</label>
        <content class="DoCO:Formula" id="3">492-1592, FAX: (303) 492-2844</content>
      </disp-formula>
      <contrib-group class="DoCO:ListOfAuthors">
        <contrib contrib-type="author">
          <name id="4">Department of Computer Science</name>
        </contrib>
        <contrib contrib-type="author">
          <name id="5">Institute of Cognitive Science University of Colorado Campus Box 430 Boulder</name>
        </contrib>
        <contrib contrib-type="author">
          <name id="6">CO 80309 gerhard@cs.colorado.edu</name>
        </contrib>
      </contrib-group>
      <region class="unknown" id="7">Knowledge-Based Systems, Vol. 7, No.4 December 1994, pp. 221-232</region>
      <region class="DoCO:TextChunk" id="8" confidence="possible">and Design (l3D)</region>
      <title-group>
        <article-title class="DoCO:Title" id="9">Turning Breakdowns into Opportunities for Creativity</article-title>
      </title-group>
      <contrib-group class="DoCO:ListOfAuthors">
        <contrib contrib-type="author">
          <name id="10">Gerhard Fischer</name>
        </contrib>
      </contrib-group>
      <region class="unknown" id="11">Turning breakdowns into opportunities for creativity</region>
      <region class="unknown" id="12">Gerhard Fischer</region>
      <region class="DoCO:TextChunk" id="13" confidence="possible">Design is a creative activity. Computational artifacts change the way people design. The author's research in design and design support systems has been firmly rooted in a cooperative problem solving approach that tries to amplify the creativity of designers by the use of domain-oriented design environments. Evolving design artifacts represented within the environment are able to 'talk back' to both system builders and future users, and act as representations for mutual understanding between various stakeholders. The domain orientation allows design activities to be conversations with the materials of the design situation. However, in many situations, artifacts do not speak for themselves. To address this problem, the environments were augmented with computational agents that identified hreak- dOlt"ns which might have remained unnoticed without them. These breakdowns provide opportunities for enhancing the creativity of designers by giving them support in reframing problems, attempting alternative design solutions, and exploring relevant unknown background knowledge.</region>
      <region class="unknown" id="14">Keywords: human creativity, cooperative problem solving, domain-oriented design environments</region>
      <region class="DoCO:TextChunk" id="20">One of our primary research goals is to design and develop computational artifacts that empower humans, rather than to build expert systems that replace them [<xref ref-type="bibr" rid="R10" id="15" class="deo:Reference">Fischer 90</xref>; <xref ref-type="bibr" rid="R13" id="16" class="deo:Reference">Fischer, Nakakoji 92</xref>]. We have pursued this approach not only because automation approaches have failed in many domains and serious doubts have been articulated about 'in principle' limitations of expert systems [<xref ref-type="bibr" rid="R51" id="17" class="deo:Reference">Suchman 87</xref>; <xref ref-type="bibr" rid="R52" id="18" class="deo:Reference">Winograd, Flores 86</xref>], but also, primarily. because we are convinced that humans enjoy doing, deciding, and learning and that people's creativity unfolds in response to experiencing breakdowns in their activities. There is overwhelming evidence that we learn from our mistakes, whether as learners [Pa pert 80], as skilled domain workers [Fischer 91], as scientific communities [<xref ref-type="bibr" rid="R42" id="19" class="deo:Reference">Popper 65</xref>]. or as humankind as a whole [Lee 92].</region>
      <region class="DoCO:TextChunk" id="21" confidence="possible">Department of Computer Science and Institute of Cognitive Science. University of Colorado, Campus Box Boulder, CO 80309, USA . Pllper reailed I Decem;'er 1993. Rel'ised P"PI!!' ree!'il'cd 23 Mill' /994. Acccplcd It) JUlie 1994 .</region>
      <region class="DoCO:TextChunk" id="22" confidence="possible">0950-7051/94/04/0221-12 © 1994 Butterworth-Heinemann Ltd</region>
      <region class="DoCO:FigureBox" id="Fx23">
        <image class="DoCO:Figure" src="62mc.page_002.image_02.png" thmb="62mc.page_002.image_02-thumb.png"/>
      </region>
      <region class="DoCO:TextChunk" id="51">Petroski [Petroski 85] observed that 'the colossal disasters that do occur are ultimately failures of design, but the lessons learned from those disasters can do more to advance engineering knowledge than all the successful machines and structures in the world'. We hope that our ongoing research efforts in designing, building, and evaluating design environments will increase the benefits of these environments for the amplification of human creativity. Beyond trying to understand creative processes in general and the importance of breakdowns in particular, we have focused our work on creating instrumental versions of computational domain-oriented design environments (DODEs) [ <xref ref-type="bibr" rid="R13" id="24" class="deo:Reference">Fischer 92</xref>], which assist humans in noticing and understanding breakdowns and exploiting them as sources for creative explorations. Our interest is in understanding how designers and hence how computational systems can best support them. (We are not pursuing the question of how computers can be made creative [Boden 91].) As is the case with any cognitive artifact, the existence of design support systems signifi- cantly influences and changes design [<xref ref-type="bibr" rid="R36" id="25" class="deo:Reference">Norman 93</xref>], illustrating the fact that human activities and thinking are dependent upon interchanges with the world. Our approach builds upon the claim that creativity is signifi- cantly influenced by people reacting and making sense out of breakdowns as they occur in the creation and evolution of artifacts and in reflection about them. In this paper, we will first characterize the nature of breakdowns in design, provide a brief characterization of methods and support mechanisms to amplify designers' creativity, and illustrate the specific roles of breakdowns in this context. A concrete example (a specific design environment and a brief scenario) is presented to illustrate how our theoretical framework guides the development of computational artifacts, and how the existence of these artifacts creates the breakdowns used to further refine our conceptual framework.<marker type="block"/> Design is creative, dealing with ill defined and wicked problems [Simon 81; Rittel 84J. Each design problem is unique in some aspect, and therefore each solution or solution attempt provides room for creativity. Partial but critical feedback in design is provided by the 'back-talk<marker type="page" number="3"/><marker type="column" number="1"/><marker type="block"/> of the situation' [<xref ref-type="bibr" rid="R48" id="33" class="deo:Reference">Schoen 83</xref>]. While engaging in 'a conversation with the design material', designers can become aware of a breakdown. This awareness is triggered by evaluation and appreciation of the current design stage (artifact) in tenns of the task at hand (goal). The evaluation is done either by the designers themselves. or by outside agents such as design teachers. colleagues or computational agents (e.g. critics) in DODEs (<xref ref-type="bibr" rid="R3" id="34" class="deo:Reference">Fischer e! af. 9I</xref>a]. The occurrence of a breakdown will not only change the solution (e.g. the artifact under construction), but also challenge the framing of the problem in the same way (thereby contributing to the integration of problem framing and problem solving (RittcI 84]. Defining breakdowns in this way is related to but not identical to Heidegger's notion that objects and properties are not inherent in the world, but arise only in the event of breaking down, in which case they change from 'ready- to-hand' to 'present-at-hand' (Winograd. Flores 86]. Seen in this way, breakdowns reveal to us the nature of our understanding, our practices. and our tools. By providing opportunities for reflection and sources for disco- very, they function in a positive rather than negative way.<marker type="block"/> A first objective in many design activities is to incremen- tally establish a shared understanding between all stakeholders (i.e. clients, skilled domain workers, software developers and users (see <xref ref-type="fig" rid="F5" id="37" class="deo:Reference">Figure 5</xref> further below». To overcome the 'symmetry of ignorance' (<xref ref-type="bibr" rid="R46" id="38" class="deo:Reference">Rittel 84</xref>] between the stakeholders. design activities are under- taken to produce explicit design representations (e.g. scenarios, mock ups, partial specifications. prototypes. seeds) that ground communication of design intent and design critiques [<xref ref-type="bibr" rid="R37" id="39" class="deo:Reference">Ostwald. Nakakoji 94</xref>]. There are numerous callses for breakdowns. Slips or oversights (implementation errors) occur when designers act differently from their intentions, whereas mistakes (specification errors) are based on inappropriate intentions [Lewis, Norman 86]. In most computational environments, support mechanisms to identify and signal breakdowns are restricted to violations Irilhin the computational environment. Error messages generated by a compiler are the most straightforward breakdowns to identify, because the syntax and semantics of programming languages can be precisely defined. Systems such as LISP-CRITIC [<xref ref-type="bibr" rid="R27" id="40" class="deo:Reference">Fischer 87</xref>] can identify breakdown situations with respect to the use (according to style. and cognitive and machine efficiency criteria) of the programming language (the LISP-CRITIC system plays a role with LISP programs that is similar to that played by a human technical editor with a paper or book). The domain orientation of our environments allows us to capture breakdowns as they occur in the problem domain in which designers may violate design principles by over- looking them or being unaware of them, or may violate unknown and un articulated constraints [Lee 92J.<marker type="block"/> In cooperative problem solving systems, breakdowns are not as detrimental as in expert systems. because humans are part of the overall system and can step in if necessary.<marker type="column" number="2"/><marker type="block"/> One can never anticipate or 'design away' all of the misunderstandings and problems that may arise during the use of these systems. We need to recognize and develop system resources for dealing with the unexpected. 'The problem is not that communicative trouble arises that does not arise in human-to-human communication. but rather that when these inevitable troubles do arise, there are not the same resources available for their detec- tion and repair' [<xref ref-type="bibr" rid="R51" id="45" class="deo:Reference">Suchman 87</xref>]. A cooperative agent needs to understand the nature of open problems, the intentions of the problem solver, and the fact that goals are modified during the problem solving process. Breakdowns in computational design environments are not primarily experienced by the designers of the systems (i.e. the software designers), but by their users (i.e. the domain designers, such as kitchen designers [<xref ref-type="bibr" rid="R6" id="46" class="deo:Reference">Fischer et al. 91 b</xref>], computer network designers [<xref ref-type="bibr" rid="R13" id="47" class="deo:Reference">Fischer 1'1 al. 92</xref>], user interface designers [<xref ref-type="bibr" rid="R24" id="48" class="deo:Reference">Lemke, Fischer 90</xref>]. or voice dialog designers [<xref ref-type="bibr" rid="R44" id="49" class="deo:Reference">Repenning, Summer 92</xref>; <xref ref-type="bibr" rid="R15" id="50" class="deo:Reference">Harstad 93</xref>]). It is impossible to avoid breakdowns for numerous reasons. Design for an 'ideal situation' is impossible; for example, work-oriented design (Ehn 88] stresses that it is essential to design for the work that people do rather than for a disembodied, idealized description of the work process. Human knowledge is tacit [Polanyi 66], and it surfaces only in concrete problem situations (these observations have led us to the development of the 'seeding- evolutionary-growth-reseeding' model described later in the paper). Various resources may be available to deal with breakdowns as they occur. The breakdown may just be noted and explained by a brief descriptive message. Beyond this. mechanisms may exist to allow designers to access argumentation, design rationale, design principles, and previous design cases to reflect. analyze and explore a breakdown situation. It is important that these information structures are contextualized with respect to the task the designer is pursuing.</region>
      <region class="unknown" id="27">BREAKDOWNS IN DESIGN</region>
      <outsider class="DoCO:TextBox" type="footer" id="29">Knowledge-Based Systems Volume 7 Number 4 December</outsider>
      <outsider class="DoCO:TextBox" type="page_nr" id="30">1994</outsider>
      <outsider class="DoCO:TextBox" type="footer" id="31">221</outsider>
      <outsider class="DoCO:TextBox" type="header" id="32">Turning breakdowns into opportunities for creativity: G Fischer</outsider>
      <region class="unknown" id="36">Description of various breakdown situations</region>
      <region class="unknown" id="42">Breakdowns in cooperative problem solving systems</region>
      <region class="DoCO:FigureBox" id="Fx44">
        <image class="DoCO:Figure" src="62mc.page_003.image_03.png" thmb="62mc.page_003.image_03-thumb.png"/>
      </region>
    </front>
    <body class="DoCO:BodyMatter">
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="52" page="3" column="2">AMPLIFYING THE CREATIVITY OF DESIGNERS</h1>
        <region class="DoCO:TextChunk" id="69" page="3" column="2">Numerous researchers have stressed the critical role of breakdowns, especially in design activities. Our thinking and our work have been influenced by the work of Ehn [ <xref ref-type="bibr" rid="R26" id="53" class="deo:Reference">Ehn 88</xref>], Nonnan [<xref ref-type="bibr" rid="R36" id="54" class="deo:Reference">Norman 93</xref>], Polanyi [Polanyi 66]. Rittel <xref ref-type="bibr" rid="R46" id="55" class="deo:Reference">Rittel [Rittel 84</xref> Schoen [<xref ref-type="bibr" rid="R48" id="56" class="deo:Reference">Schoen 83</xref>], Simon [<xref ref-type="bibr" rid="R50" id="57" class="deo:Reference">Simon 81</xref>]. Suchman [<xref ref-type="bibr" rid="R51" id="58" class="deo:Reference">Suchman 87</xref>]. and Winograd and Flores (Winograd, Flores 86]. The major design principles der- ived from the frameworks that shape our own research are summarized in the following sections. They are par- ticularly influenced by the following characterization of design activities by Schoen ([<xref ref-type="bibr" rid="R48" id="59" class="deo:Reference">Schoen 83</xref>], p 79):<marker type="block"/> We operationalized this principle hy creating DODEs in support of human problem-domain communication<marker type="page" number="4"/><marker type="column" number="1"/><marker type="block"/> [Fischer, Lemke 88}. The 'materials' of the design situation are not low-level computer abstractions but objects with which domain workers are familiar that are part of the practice of their specific communities. DODEs allow designers to focus on the task rather than on the medium. They are an attempt to turn the proportion of effort around. Most humans using computers spend 80% of their time 'fighting the machine', and 20% on their task. The objective of DO DEs is to allow people to spend at least 80% of their time on the task by establishing a common preunderstanding which lets users communicate with a minimum of words and conscious effort.<marker type="block"/> Our ability to notice the shortcomings by (visual) inspec- tion and careful analysis is limited. A certain amount of 'back talk' will be provided by the design situation itself (especially by environments supporting human problem- domain communication). However, the 'back talk' can be and needs to be greatly enriched by additional mechanisms:</region>
        <region class="unknown" id="61" page="3" column="2">The designer shapes the situation in accordance with his initial appreciation of it. the situation. 'talks back'. and he responds to the situation's back-talk. In a good process of design, this conversation with the situation is reflective. In answer to the situation's back·talk the designer reflects-in-action on the construction of the problem. '</region>
        <region class="unknown" id="62" page="3" column="2">Design is a conversation with the materials of a design situation</region>
        <outsider class="DoCO:TextBox" type="footer" id="64" page="3" column="2">222</outsider>
        <outsider class="DoCO:TextBox" type="footer" id="65" page="3" column="2">Knowledge-Based Systems Volume 7 Number 4 December 1994</outsider>
        <outsider class="DoCO:TextBox" type="header" id="66" page="4" column="1">Turning breakdowns into opportunities for creativity: G Fischer</outsider>
        <region class="unknown" id="68" page="4" column="1">Situations need to talk back</region>
        <region class="DoCO:TextChunk" id="72" confidence="possible" page="4" column="1">• feedback from other stakeholders involved 111 the design process and human critics, • computational critics [<xref ref-type="bibr" rid="R6" id="70" class="deo:Reference">Fischer et al. 91 a], simulation components which illustrate the b</xref>ehavior • of an artifact [<xref ref-type="bibr" rid="R44" id="71" class="deo:Reference">Repenning, Sumner 92</xref>].</region>
        <region class="DoCO:TextChunk" id="86" page="4" column="1">In providing additional feedback, it is important that the 'back talk' is relevant to the actual design situation and that it is articulated in a way the designer can understand [ <xref ref-type="bibr" rid="R8" id="73" class="deo:Reference">Fischer et al. 93</xref>]. Specification components [<xref ref-type="bibr" rid="R34" id="74" class="deo:Reference">Nakakoji 93</xref>] can increase the relevance of feedback to the task at hand by providing mechanisms for a partial characterization of the particular design situation.<marker type="block"/> Action (as construction) and reflection (as argumentation) is integrated by the critiquing component in our systems [<xref ref-type="bibr" rid="R32" id="77" class="deo:Reference">McCall, Fischer, Morch 90</xref>; <xref ref-type="bibr" rid="R6" id="78" class="deo:Reference">Fischer et at. 91 b</xref>]. This integration is important because (a) it creates a context-sensitive mechanism that provides entry into an issue base where argumentation relevant to the construc- tive design situation can be found, and (b) it makes designers aware that they may need additional information. Whereas reflective processes are triggered by violations of principles of design, our systems support reflection on the principles of design themselves as well. Our work has shown that the value of stand-alone design rationale systems which are isolated from the artif;ct under construction (such as gIBIS) [Conklin, Begeman 88) and DesignRationale [MacLean, Young, Moran 89]) can be greatly enhanced by integrating construction and argumentation with a critiquing component [<xref ref-type="bibr" rid="R6" id="79" class="deo:Reference">Fischer et al. 91 b</xref>].<marker type="block"/> The hardest and most important problem in design is not that of solving a given problem, but that of figuring out<marker type="column" number="2"/><marker type="block"/> what problem to solve. The strong intertwining between problem framing and problem solving provides one of the major sources and challenges for creativity. This view denies the objective existence of problems. It focuses our efforts on searching for a problem space rather than just wiThin a problem space, and it questions all design methodologies which are founded on a separation of analysis and synthesis (e.g. the specification driven approaches used in software engineering). It also emphasizes the importance of putting problem owners in charge, because they have the authority and the knowledge to redefine the problem on the fly [<xref ref-type="bibr" rid="R20" id="84" class="deo:Reference">Lave 88</xref>]. To gain a deeper understanding of the integration of problem framing and problem solving, we have con- ducted an empirical study of a success model of cooperative problem solving between people in a large hardware store [<xref ref-type="bibr" rid="R13" id="85" class="deo:Reference">Fischer, Reeves 92</xref>]. The following dialog shows an interaction in which a customer wanted to buy heaters. Through a collaborative problem solving effort with a sales agent, the problem was reconceptualized from one of ·adding heat' to one of 'retaining heat'. This appears to be a trivial reframing and hardly worthy of notice, but understanding this kind of reframing is crucial to the understanding and amplification of creativity; the problem itse/jwas redefined.</region>
        <region class="unknown" id="76" page="4" column="1">Reflection in action</region>
        <region class="unknown" id="81" page="4" column="1">Integration of problem framing and problem solving</region>
        <region class="DoCO:FigureBox" id="Fx83">
          <image class="DoCO:Figure" src="62mc.page_004.image_04.png" thmb="62mc.page_004.image_04-thumb.png"/>
        </region>
        <region class="unknown" id="87" page="4" column="2">Customer:</region>
        <region class="DoCO:TextChunk" id="88" confidence="possible" page="4" column="2">'I want to get a couple of heaters for a downstairs hallway.'</region>
        <region class="unknown" id="89" page="4" column="2">Sales agent:</region>
        <region class="DoCO:TextChunk" id="90" confidence="possible" page="4" column="2">'What are you doing? What are you trying to heatT</region>
        <region class="DoCO:TextChunk" id="91" confidence="possible" page="4" column="2">Customer: 'I'm trying to heat a downstairs hallway.'</region>
        <region class="DoCO:TextChunk" id="92" confidence="possible" page="4" column="2">Sales agent: 'How high are the ceilingsT</region>
        <region class="DoCO:TextChunk" id="93" confidence="possible" page="4" column="2">ClI.Itolller: 'Normal, about eight feet.'</region>
        <region class="DoCO:TextChunk" id="94" confidence="possible" page="4" column="2">S'ales agent: 'Okay, how about these hereT</region>
        <region class="DoCO:TextChunk" id="95" confidence="possible" page="4" column="2">(***They proceed to agree on two heaters.***)</region>
        <region class="unknown" id="96" page="4" column="2">CUSTomer:</region>
        <region class="DoCO:TextChunk" id="97" confidence="possible" page="4" column="2">'Well, the reason it gets so cold is that there's a staircase at the end of the hallway.'</region>
        <region class="DoCO:TextChunk" id="98" confidence="possible" page="4" column="2">Sales agent: 'Where do the stairs leadT</region>
        <region class="unknown" id="99" page="4" column="2">Customer:</region>
        <region class="DoCO:TextChunk" id="100" confidence="possible" page="4" column="2">'They go up to a landing with a cathedral ceiling.'</region>
        <region class="unknown" id="101" page="4" column="2">Sales agent."</region>
        <region class="DoCO:TextChunk" id="102" confidence="possible" page="4" column="2">'OK, maybe you can just put a door across the stairs, or put a ceiling fan up to blow the hot air back down.'</region>
        <region class="unknown" id="103" page="4" column="2">Design knowledge is tacit</region>
        <region class="DoCO:TextChunk" id="106" page="4" column="2">Competent practitioners usually know more than they can say [Polanyi 66]. Their tacit knowledge is triggered by new design situations and by breakdowns that occur as they engage in a design process. This implies that design worlds are not closed but open-ended, and they require support for end-user modifiability [<xref ref-type="bibr" rid="R10" id="104" class="deo:Reference">Fischer, Gir- gensohn 90</xref>: Candy, <xref ref-type="bibr" rid="R25" id="105" class="deo:Reference">Edmonds, O'Brien 94</xref>] and the evolution of design environments (starting with seeded</region>
        <outsider class="DoCO:TextBox" type="footer" id="107" page="4" column="2">Knowledge-Based Systems Volume 7 Number 4 Decemh~r 1~N4</outsider>
        <outsider class="DoCO:TextBox" type="footer" id="108" page="4" column="2">??'&lt;</outsider>
        <region class="unknown" id="109" page="5" column="1">Turning breakdowns into opportunities for creativity: G Fischer</region>
        <region class="DoCO:TextChunk" id="110" confidence="possible" page="5" column="1">environments) in response to new design problems [Fischer e{ al. 94J.</region>
        <region class="unknown" id="111" page="5" column="1">Saying the 'right' thing at the 'right' time in the 'right' way</region>
        <region class="DoCO:TextChunk" id="115" confidence="possible" page="5" column="1">The challenge of building computational environments is primarily not just to provide more information. but to say the 'right' thing at the 'right' time [<xref ref-type="bibr" rid="R8" id="112" class="deo:Reference">Fischer £'1 al. 93</xref>1. There is a spectrum of how accurately and closely related the information presented should be to the designer's task at hand. At one end of the spectrum is information retrieved on the basis of precise queries formed by designers. At the other end of the spectrum is arbitrary information (related only in the most general terms) presented to the designer [<xref ref-type="bibr" rid="R38" id="113" class="deo:Reference">Owen 86</xref>]. Creative design should be both innovative and valllah/e. If designers are given arbitrary information, they are likely to get innovative ideas as a result of the information, but the ideas may not be valuable. While this may be true in the overriding number of cases, we should not overlook the value of serendipity and especially pseudoserendipity [<xref ref-type="bibr" rid="R47" id="114" class="deo:Reference">Roberts 89</xref>]. By recognizing the importance of background knowledge for ill defined design problems, the unexpected and unintended encounters one has in browsing can at times be of much greater importance than efficient precise recall.</region>
        <region class="unknown" id="116" page="5" column="1">Distributed cognition</region>
        <region class="DoCO:TextChunk" id="120" confidence="possible" page="5" column="1">Design environments embed the design activities in rich information spaces and provide mechanisms to contex- tualize these information spaces to the task at hand. This approach contrasts sharply with many other approaches which model design and creativity purely in terms of cognition by focusing on only (a) the disembodied mind and (b) knowledge in the head rather than on the mutual exploitation of knowledge in the head with knowledge in the world [<xref ref-type="bibr" rid="R36" id="117" class="deo:Reference">Norman 93</xref>). We externalize (by acting) to find out what is in our head [<xref ref-type="bibr" rid="R50" id="118" class="deo:Reference">Simon 81</xref>; <xref ref-type="bibr" rid="R25" id="119" class="deo:Reference">Edmonds 94</xref>]. We need our artifacts to talk back to us - and this back talk needs to be as rich and as task-relevant as possible. Systems that support distributed cognition are desir- able for the following reasons: (a) they support mutual intelligibility (reciprocal recognizability of our actions, enabled by common conventions for the expression of intent, and shared knowledge about typical situations), (b) they support communicative economy (the premises or rationale of an action can be assumed to be shared. and they can be left unspoken), and (c) they allow tools and artifacts to become ready-to-hand and invisible. allowing users to communicate more directly with the task.</region>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="121" page="5" column="1">COMPUTATIONAL ENVIRONMENTS THAT SUPPORT TURNING BREAKDOWNS INTO OPPORTUNITIES FOR CREATIVITY</h1>
        <region class="DoCO:TextChunk" id="122" confidence="possible" page="5" column="1">Domain-oriented design environments have emerged in our research work as computational environments that support turning breakdowns into opportunities for creativity. They are semiformal systems that integrate</region>
        <region class="DoCO:FigureBox" id="Fx123">
          <image class="DoCO:Figure" src="62mc.page_005.image_05.png" thmb="62mc.page_005.image_05-thumb.png"/>
        </region>
        <region class="DoCO:TextChunk" id="124" confidence="possible" page="5" column="2">object-oriented hierarchies of domain objects, rule-based critiquing systems, case-based catalog components, and argumentative hypermedia systems. They are representa- tional media that support communications and negotia- tions between all the stakeholders and between the designers and their work in progress. They do limited reasoning and interpretations, trigger breakdowns, deliver information, and support the exploration of the rationale behind the artifact. To ground the discussion, this section first presents a scenario with a specific design environment, followed by a description of the domain-independent architecture underlying DODEs. Next, a process model for the evolution of DODEs will be described, and some of the specific contributions and challenges created by DODEs will be mentioned.</region>
        <region class="unknown" id="125" page="5" column="2">Scenario</region>
        <region class="unknown" id="126" page="5" column="2">The Voice Dialog Design Environment (VDDE) (see</region>
        <region class="DoCO:FigureBox" id="F1">
          <caption class="deo:Caption" id="129" confidence="possible" page="5" column="2">Figure 1 [<xref ref-type="bibr" rid="R44" id="127" class="deo:Reference">Repenning, Sumner 92</xref>]) will be used to illustrate our conceptual framework. Voice dialog interfaces consist of a series of voice prompted menus. Users press buttons on a telephone keypad and the system responds with appropriate voice instructions. Current interface design technologies for voice dialog systems are based on flowcharts. It is difficult for designers, customers and end users of these systems to anticipate what the (audio) interaction will sound like by simply looking at a static visual diagram. For breakdowns to be experienced, simulations are needed which can serve as representations for mutual understanding by allowing designers. customers and end users to 'experience' the actual audio interface. Earlier versions of VDDE did not contain a critiquing component, limiting the 'back talk' to the designers. Voice dialog design is complicated by the fact that there are different rule sets which should be obeyed by a design. VDDE-Critics [Harstad 931 is a development effort to add critics to VDDE to signal additional breakdowns for the designers. <xref ref-type="fig" rid="F2" id="128" class="deo:Reference">Figure 2</xref> shows the user interface of the system which allows designers to tailor the 'breakdown' characteristics of the system to their personal needs by</caption>
        </region>
        <region class="DoCO:TextChunk" id="130" confidence="possible" page="5" column="2">• selecting the rule set and the associated argumentation to be used, • determining the intrusiveness of the critiquing mechanisms with the critiquing thermometer, • determining the design component to be critiqued (a conceptual unit versus the overall design).</region>
        <region class="DoCO:TextChunk" id="132" confidence="possible" page="5" column="2"> <xref ref-type="fig" rid="F3" id="131" class="deo:Reference">Figure 3</xref> shows the argumentation behind the artifact that empowers designers to agree or disagree with the specific design choices and their associated design rationale. VDDE supports (a) a reflective practice for the designer through a critiquing enhanced conversation with the situations and (b) the relation between designers and their clients by providing artifacts which increase mutual understanding by the identification of breakdowns. In summary, the scenario illustrates the following specific breakdown situations captured within DODEs:</region>
        <outsider class="DoCO:TextBox" type="footer" id="133" page="5" column="2">224</outsider>
        <outsider class="DoCO:TextBox" type="footer" id="134" page="5" column="2">Knowledge-Based Systems Volume 7 Number 4 December 1994</outsider>
        <outsider class="DoCO:TextBox" type="header" id="135" page="6" column="1">Turning breakdowns into opportunities for creativity : G Fischer</outsider>
        <region class="DoCO:FigureBox" id="Fx136">
          <image class="DoCO:Figure" src="62mc.page_006.image_06.png" thmb="62mc.page_006.image_06-thumb.png"/>
        </region>
        <region class="DoCO:TextChunk" id="137" confidence="possible" page="6" column="1">USWfST: key I In M.i. 104 . . . i. r •• er .... tbe fURCtl •• 'Ii,t . . ' USIIEST: keg 1 in t~nona' Optiont ~eftu i. retenrelll tlae function ',eter" .aMe' Generic: 'Ca.cel' .beu'~ be a.tigned tlte "'keg, ift acce,t .r (a Ree l Ergumentatlo31 ( Specification ) ( Disable RUle]</region>
        <region class="DoCO:FigureBox" id="FI">
          <caption class="deo:Caption" id="138" page="6" column="1">Figure I Voice Dialog D esign Environment IThe VDDE allo ws d o ma in desig ners to crea te gra phic specifica tio ns. The to p window is a gallery o f domain-o riented co mponent s. The middle wind ow is a work sheet where designe rs crea te a specific design . The beha vior of the desig n ca n be simulated at a ny time. Desi gn simulati o n consists of a visua l trace o r the exec ution pa lh combi ned with audio reedback of a ll prompts and messages encountered. The bottom windo w displa vs the critiquin g message ror the design under constructi on .]</caption>
        </region>
        <region class="unknown" id="139" page="6" column="1">UddeStacl(</region>
        <region class="DoCO:FigureBox" id="Fx140">
          <image class="DoCO:Figure" src="62mc.page_006.image_08.png" thmb="62mc.page_006.image_08-thumb.png"/>
        </region>
        <region class="unknown" id="141" page="6" column="1">II you to viE'W your dE'sign from multiplE' pE'rspE'ctivE's. Click on thE' button to thE' :i lE'n to E'nablE' thE' rulE' SE't . Click on E'xplain to list all thE' rulE'S which bE'longs to :! thE' SE'lE'ctE'd standard. You can disablE' and E'nablE' individual critic rulE'S within :: E'3ch standard from this oYE'rviE'w . To changE' priority, disablE' thE' rulE' SE't, thE'n ,I ",bI. " 'g';' 1: Pr i or i ty Enab I e /D i sob leSe t Exp I onat i on . [iJ @ USWEST Rule Set Argumentation [QJ o UMUIF Rule Set Argumentation W @ I nternational Rule Set Argumentation [QJ o Consistent with: Argumentation ~ ~ -' .'. , . ' ,' . .. . .. . . . . ..... ... . . ........... . ... ,'. ' ... ' ..................... ' ......... ' .. , .... ' ......... ......... .</region>
        <region class="DoCO:FigureBox" id="F2">
          <image class="DoCO:Figure" src="62mc.page_006.image_09.png" thmb="62mc.page_006.image_09-thumb.png"/>
          <caption class="deo:Caption" id="143" page="6" column="1">Figure 2</caption>
        </region>
        <region class="DoCO:TextChunk" id="144" confidence="possible" page="6" column="1">Srccit\,ing breakdown cha ractcri ,t ics oj' VDDF.</region>
        <region class="unknown" id="145" page="6" column="1">:1 0 Conceptual Unit Critiquing '. .-;. .</region>
        <region class="unknown" id="146" page="6" column="1">• th e domain-orientation en han ces th e co nversation wit h the materials of a d es ign situati o n, • simulations let stakehold ers exrcrience behavi o r and see (he con sequcnces of their ass lImrti o ns,</region>
        <region class="DoCO:FigureBox" id="Fx147">
          <image class="DoCO:Figure" src="62mc.page_006.image_07.png" thmb="62mc.page_006.image_07-thumb.png"/>
        </region>
        <region class="DoCO:TextChunk" id="148" confidence="possible" page="6" column="2">[ Delete MS9 . ] [Delete All Msg.]</region>
        <region class="unknown" id="149" page="6" column="2">Critiquing Thenlonetel</region>
        <region class="unknown" id="150" page="6" column="2">RctiLJe 4~ 3 6 9 12 -I- 15 -'PassiLJe</region>
        <region class="unknown" id="151" page="6" column="2">(Critique RII) .</region>
        <region class="unknown" id="152" page="6" column="2">• critiquing signa ls vio la tion or rules a nd cOlltrO\'Cfsial desi gn deci sio ns. • argumentati on provides the arguments hehind rules and a rtifact s (0 cmrower designers to di sagree .</region>
        <outsider class="DoCO:TextBox" type="footer" id="153" page="6" column="2">Knowledae-Rrl serl Svste ms \/" llIm &lt;&gt; 7 t\1"rnh or A n Drc.~hAr 100A</outsider>
        <outsider class="DoCO:TextBox" type="footer" id="154" page="6" column="2">"""</outsider>
        <outsider class="DoCO:TextBox" type="header" id="155" page="7" column="1">Turning breakdowns into opportunities for creativity : G Fischer</outsider>
        <region class="unknown" id="156" page="7" column="1">The Menu ons are shcrw'n beloW' . Whether the functtons are mandatory (M) and/or Re$erved on is sho'wn in parathe$es . If M or R is not displayed, then the fUnction Is Optional and/or ot-Reserved.</region>
        <region class="unknown" id="157" page="7" column="1">Erase</region>
        <region class="DoCO:FigureBox" id="Fx158">
          <image class="DoCO:Figure" src="62mc.page_007.image_10.png" thmb="62mc.page_007.image_10-thumb.png"/>
        </region>
        <region class="unknown" id="159" page="7" column="1">Bkwd o</region>
        <region class="unknown" id="160" page="7" column="1">Fwd • Terminate</region>
        <region class="unknown" id="161" page="7" column="1">Paspect:ives</region>
        <region class="DoCO:FigureBox" id="F3">
          <image class="DoCO:Figure" src="62mc.page_007.image_11.png" thmb="62mc.page_007.image_11-thumb.png"/>
          <caption class="deo:Caption" id="163" page="7" column="1">Figure 3 Argumentatio n component of VDDE</caption>
        </region>
        <region class="DoCO:FigureBox" id="Fx164">
          <image class="DoCO:Figure" src="62mc.page_007.image_12.png" thmb="62mc.page_007.image_12-thumb.png"/>
        </region>
        <region class="DoCO:TextChunk" id="165" confidence="possible" page="7" column="1">Construction I Construction " Analyzer "" t Catalog Argumentation Explorer Illustrator \ Catalog ~ Catalog ~ Explorer</region>
        <region class="DoCO:FigureBox" id="F4">
          <caption class="deo:Caption" id="166" page="7" column="1">Figure 4</caption>
        </region>
        <region class="DoCO:TextChunk" id="167" confidence="possible" page="7" column="1">Multira(~tcd architecture for DODEs [The various DOD Es which we have developed over th e last few years do not always comain a ll co mpo nents. The VDDE system illustrated with the scenario contains the cnns truction, simulation and argumen· tation co mponent. A DODE for kitchen design lFischer. Nakakoji 92J co ntains all co mponent s except a simula tion componcnl.J</region>
        <region class="DoCO:TextChunk" id="170" confidence="possible" page="7" column="1">Domain-oriented design em'ironments DODEs [<xref ref-type="bibr" rid="R13" id="168" class="deo:Reference">Fischer 92</xref>] have been evolved in our research over several years to instantiate the conceptual frame· vyork outlined in the previous sections. They contain the following major components (see <xref ref-type="fig" rid="F4" id="169" class="deo:Reference">Figure 4</xref>):</region>
        <region class="DoCO:TextChunk" id="178" confidence="possible" page="7" column="2">• A construction component (see the gallery in Figurc 1) is the principal medium for implementing design. It provides a gallery of domain abstraction s and supports the construction of artifacts using direct manipulation and other interaction styles. • a specification component [<xref ref-type="bibr" rid="R34" id="171" class="deo:Reference">Nakakoji 93</xref>] a llows designers to describe some required characteristics of the design a t a high level of abstraction and assigns weights of the importance to each specified item. Specifications are expected to be modified and augmented during the whole design process, rather than to be fully articulated before the design is started. They a re used to prioritize the information spaces in the system with respect to the emerging task a t hand . • An issuc-hascd argumentative hypermedia sys tem (see <xref ref-type="fig" rid="F3" id="172" class="deo:Reference">Figure 3</xref>) captures the design rationale. Information fragments in the hypermedia issue ba se are based on issue-based information systems [<xref ref-type="bibr" rid="R31" id="173" class="deo:Reference">McCall 91</xref>] and are linked according to what information serves to resolve an issue relevant to a partial construction [<xref ref-type="bibr" rid="R6" id="174" class="deo:Reference">Fischer ct (I/. 9 1b</xref>; <xref ref-type="bibr" rid="R33" id="175" class="deo:Reference">Morch 94</xref>]. • A catalog provides a collection of presto red design objects which illustrates the space of possible designs in the domain [<xref ref-type="bibr" rid="R13" id="176" class="deo:Reference">Fischer, Nakakoji 92</xref>]. Catalog examples are sources of information as reminders for amplifying designers' creativity by bringing the designers new idea s and perspectives for their design [Ricsbcck , Schank 89; <xref ref-type="bibr" rid="R18" id="177" class="deo:Reference">Kolodner 93</xref>]. • A simulatio/1 component allows the stakeholders to experience the behavior of an artifact (c.g. the audio feedback of promrts and messages in VDDE). It supports 'what-if' games to let designers simulate usage scenarios with the artifact being designed.</region>
        <outsider class="DoCO:TextBox" type="footer" id="179" page="7" column="2">;&gt;;&gt;6</outsider>
        <outsider class="DoCO:TextBox" type="footer" id="180" page="7" column="2">Knowl edae -B ase d SYs tems Volume 7 Number 4 Dece mber 1994</outsider>
        <outsider class="DoCO:TextBox" type="header" id="181" page="8" column="1">Turning breakdowns into opportunities for creativity: G Fischer</outsider>
        <region class="DoCO:TextChunk" id="182" confidence="possible" page="8" column="1">Simulation complements the argumentative component.</region>
        <region class="DoCO:TextChunk" id="184" page="8" column="1">The architecture derives it essential value from the integration of its components and links between the components. Used individually, the components cannot achieve their full potential. Used in combination, each component augments the value of the others, forming a syner- gistic whole. Links among the components of the architecture are supported by various mechanisms (see <xref ref-type="fig" rid="F4" id="183" class="deo:Reference">Figure 4</xref>). The major mechanisms include the following:</region>
        <region class="DoCO:TextChunk" id="186" confidence="possible" page="8" column="1">• The Construction Analyzer is a critiquing component [Fischer et al. 91aJ that detects and critiques partial solutions constructed by designers on the basis of domain knowledge of design principles (see <xref ref-type="fig" rid="F1" id="185" class="deo:Reference">Figure 1</xref>). The firing of a critic signals a breakdown to designers, warns them of potential problems in the current construction, and provides them with an entry into the neighborhood of relevant information in the argumentative hypermedia system in which the corresponding argumentation lies (thereby supporting the requirement to say the 'right' thing at the 'right' time in the 'right' way). • The Argumentation Illustrator [Fischer et al. 9lbJ helps designers to understand the information given in argumentative hypermedia by using a catalog design example as a source of concrete realization. Explanations given as argumentation are often highly abstract and conceptual. Concrete design examples that illustrate the explanations in context help designers to understand the concept. • The Catalog Explorer [Fischer, Nakakoji 92J helps designers to search the catalog space according to the task at hand. It retrieves design examples that are similar to the current construction situation and orders a set of design examples chosen for their appropriateness to the current specification.</region>
        <region class="DoCO:TextChunk" id="222" page="8" column="1">Design, as supported by the multifaceted architecture, iterates through cycles of specification, construction, evaluation, and reuse in the working content. At each stage in the design process, the partial design embedded in the design environment serves as a stimulus for sug- gesting what users should attend to next. The direction to new subgoals permits new information to be extracted from memory and reference sources, and leads to new steps toward the development of the design. The integration of various aspects of design enables the situation to ·talk back' to users [ <xref ref-type="bibr" rid="R48" id="187" class="deo:Reference">Schoen 83</xref>]. Critiquing and simulation components are necessary to increase the 'back talk' of the situation. 'Artifacts do not speak for themselves' [<xref ref-type="bibr" rid="R46" id="188" class="deo:Reference">Rittel 84</xref>], because designers have insufficient knowledge and experience to fully understand the conversation with the materials of the situation. Critiquing mechanisms [Fischer et al. 91 a] serve as 'interpreters' that support designers in seeing and understanding the 'back talk' of the situation. When a critic fires, reflection does not occur simply on the basis of the message. Designers 'listen to' the design material with the help of the interpreter in the form of a critic. Critics provide a computational mechanism that allows designers to think about what they are doing while this thinking can still make a difference. Relevancy to the<marker type="column" number="2"/><marker type="block"/> task at hand (saying the 'right' thing at the 'right' time) plays an important role here, because the more given information is relevant to the current problem situation, the more understandable the information is for a human.<marker type="block"/> Our work on creating DODEs has indicated that a promising model for creating these environments involves three major phases (see <xref ref-type="fig" rid="F5" id="194" class="deo:Reference">Figure 5</xref>) and [<xref ref-type="bibr" rid="R9" id="195" class="deo:Reference">Fischer el al. 94</xref>]: seeding, evolutionary growth, and reseeding. A for a domain-oriented design environment is created through a participatory design process between environment developers and domain designers by incorporating domain-specific knowledge into a domain-independent architecture for design environments. Evolutionary growth takes place as domain designers use the seeded environment to undertake specific projects in response to clients' needs. Reseeding is a process that reinvolves the environment developers in helping domain designers to better organize, formalize, and generalize knowledge added during the use phases.<marker type="block"/> A seed is built by customizing the domain-independent design environment architecture (see <xref ref-type="fig" rid="F4" id="198" class="deo:Reference">Figure 4</xref>) to a particular domain through a process of knowledge construction. Although the goal is to construct as much knowledge as possible during seed building, for complex and changing domains complete coverage is not possible. In addition, design knowledge is tacit and design worlds are open-ended [Polanyi 66], users of design environments must be able to extend them in response to breakdowns. Domain designers and environment developers bring to their encounter a body of understanding which they can only very partially communicate to one another, much of which they cannot describe to themselves. Therefore, the seed is explicitly designed for redesign by capturing design knowledge during use [Girgensohn 92J. Domain designers must participate in the seeding process because they have the expertise to determine when a seed can support their work practices. Rather than expecting designers to articulate precise and complete system requirements prior to seed building, we view seed building as knowledge construction (in which knowledge structures are collaboratively designed and built), rather than as knowledge acquisition (in which knowledge is transferred from domain experts to an environment developer and finally expressed in formal rules and procedures). New seed requirements are elicited by con- structing and evaluating domain-oriented knowledge structures. A seed is a collection of knowledge and procedures that is capable of growing through interaction with domain designers during day-to-day use. It stimulates, focuses, and mediates discussion during the incremental growth phase. The seed must be capable of capturing the information elicited from the use of the system. There is no absolute requirement for the completeness, correct- ness. or specificity of the information in the seed. In fact, it is often its shortcomings in these respects that provoke input from designers.<marker type="page" number="9"/><marker type="column" number="1"/><marker type="block"/> Evolutionary growth through use The seed will evolve in response to its extensive use in new design projects where the new design projects will create breakdowns, illustrating the limitations of the existing environment. 'Usc' is not just use, because requirements fluctuate, change is ubiquitous, design knowledge is tacit, and design environments need to evolve [<xref ref-type="bibr" rid="R16" id="210" class="deo:Reference">Henderson, Kyng 91</xref>J. This evolution is primarily driven by using the existing environment to develop new designs that uncover its limitations through breakdowns. Examples of such breakdowns which we have observed in the domain of kitchen design [<xref ref-type="bibr" rid="R13" id="211" class="deo:Reference">Fischer, Nakakoji 92</xref>] are (a) an appliance (e.g. a microwave) is missing from the gallery, and (b) a critiquing rule is too general (e.g, appliances should be against the wall, which is not applicable for island kitchens). These breakdowns are perceived by the people who use the programs, not by the professionals who have developed them in the first place. Integrating this knowledge into the system requires support for end- user modifiability and end-user programming [<xref ref-type="bibr" rid="R10" id="212" class="deo:Reference">Fischer, Girgensohn 90</xref>; <xref ref-type="bibr" rid="R35" id="213" class="deo:Reference">Nardi 93</xref>; <xref ref-type="bibr" rid="R2" id="214" class="deo:Reference">Eisenberg, Fischer 94</xref>; Eisen- berg 94J. Our approach to this challenge is to view the design environment seed as a medium for communication as well as design. Our critique of current design systems is that they function as 'keepers of the artifact', in which one deposits representations of the artifact being designed, However, our experience has shown that designers integrate designing and discussing in such a way as to make separate interpretation difficult [<xref ref-type="bibr" rid="R43" id="215" class="deo:Reference">Reeves 93</xref>]. Talking ahout an artifact requires talking with the artifact. Therefore, later interpretation of the discussion requires that the discussion be embedded in the context in which it was originally elicited, requiring that design artifacts must not be artificially separated from the communication about them.<marker type="column" number="2"/><marker type="block"/> Evolutionary growth during system use is a process of adding information related directly or indirectly to the artifact being designed. The artifact is the foundation for e\'olutionary growth. During the growth phase, the designers who use the system are primarily focused on their task at hand. Information input is highly situation specific: tied to a specific artifact and stated in particular rather than in general. For a while, information grows in an orderly manner, but eventually order breaks down and the system begins to degrade in usefulness.<marker type="block"/> Reseeding Acquiring design knowledge is of little benefit unless it can be delivered to designers when it is relevanL Periodi- cally, the growing information space must be structured, generalized, and formalized in a reseeding process, which increases the computational support the system is able to provide to designers [Shipman, McCall 94J. The task of reseeding involves environment developers working with domain designers. After a period of use, the information space can be a jumble of annotations, partial designs, and discussions mixed in with the original seed and any modifications performed by the domain designers. To make this information useful, the environment developers work with the domain designers in a process of organizing, generalizing, and formalizing the new information and updating the initial seed. Reseeding is necessary when evolutionary growth stops proceeding smoothly. During reseeding, the system's information is restructured, generalized and formalized to serve future design tasks. The reseeding process creates a forum to discuss what design information captured in the context of specific design projects should be incorporated into the extended seed to support the next cycle of evolutionary growth and reseeding. Tools contained in design environments support reseeding by</region>
        <region class="DoCO:FigureBox" id="Fx190">
          <image class="DoCO:Figure" src="62mc.page_008.image_13.png" thmb="62mc.page_008.image_13-thumb.png"/>
        </region>
        <region class="unknown" id="192" page="8" column="2">Process model for creation of DODEs</region>
        <region class="unknown" id="193" page="8" column="2">seed</region>
        <region class="unknown" id="197" page="8" column="2">Seeding</region>
        <outsider class="DoCO:TextBox" type="footer" id="200" page="8" column="2">Knowledge-Based Systems Volume 7 Number 4 Decemhpr 1qq4</outsider>
        <outsider class="DoCO:TextBox" type="footer" id="201" page="8" column="2">??7</outsider>
        <outsider class="DoCO:TextBox" type="header" id="202" page="9" column="1">Turning breakdowns into opportunities for creativity: G Fischer Envlrontrl#nt DctrWn</outsider>
        <region class="unknown" id="203" page="9" column="1">OewIopefW DHlgners</region>
        <region class="unknown" id="204" page="9" column="1">Seeding</region>
        <region class="unknown" id="205" page="9" column="1">Evolutionary Growth of Deslgn Environment</region>
        <region class="unknown" id="206" page="9" column="1">New DomaIn Knowledge</region>
        <region class="unknown" id="209" page="9" column="1">TmM <xref ref-type="fig" rid="F5" id="207" class="deo:Reference">Figure 5</xref> Seeding, evolutionary growth, and reseeding: a process model for DODEs [During seeding, environment developers and domain designers collaborate to create a design environment seed. The seed should contain a mechanism for all the components shown in <xref ref-type="fig" rid="F4" id="208" class="deo:Reference">Figure 4</xref>. During evolutionary growth, domain designers create artifacts in response to the needs of clients that add new domain knowledge to the seed. In the reseeding phase. environment developers again collaborate with domain designers to organize. formalize, and generalize new knowledge.]</region>
        <region class="DoCO:FigureBox" id="Fx217">
          <image class="DoCO:Figure" src="62mc.page_009.image_14.png" thmb="62mc.page_009.image_14-thumb.png"/>
        </region>
        <region class="unknown" id="218" page="9" column="2">EnvirontrNnt {HveI"".rw</region>
        <region class="unknown" id="219" page="9" column="2">Doltlllin Du/flMfW</region>
        <region class="unknown" id="220" page="9" column="2">Reseeding</region>
        <outsider class="DoCO:TextBox" type="footer" id="223" page="9" column="2">228</outsider>
        <outsider class="DoCO:TextBox" type="footer" id="224" page="9" column="2">Knowledqe-Based Systems Volume 7 Number 4 December 1994</outsider>
        <outsider class="DoCO:TextBox" type="header" id="225" page="10" column="1">furnlng breaKdowns Il1to opportUl1ltles for creativity: G Fischer</outsider>
        <region class="DoCO:TextChunk" id="226" confidence="possible" page="10" column="1">making suggestions about how the information can be formalized.</region>
        <region class="DoCO:TextChunk" id="227" confidence="possible" page="10" column="1">Impact of DODEs on design and creativity</region>
        <region class="DoCO:TextChunk" id="230" confidence="possible" page="10" column="1">Representations for mutual understanding Our DODEs serve as representations for mutual understanding for environment developers, domain designers and end users (see <xref ref-type="fig" rid="F5" id="228" class="deo:Reference">Figure 5</xref>) and 'languages of doing' [<xref ref-type="bibr" rid="R26" id="229" class="deo:Reference">Ehn 88</xref>] in which an evolving artifact is embedded. By externalizing goals and plans in concrete artifacts, 'objects-to-think-with' and 'objects-to-point-to' are created that (a) allow mutual understanding of the domain as well as computing concepts, (b) ground and focus discussion, and (c) talk back to both software designers (system builders) and domain workers (future users). Breakdowns experienced by fUlure users include the following situations: (a) the prototype does not per- form as specified (this is caused by communication difficulties between designers and users), (b) the prototype performs as specified, but not as expected (this is caused by the inability of users to articulate their goals and needs), and (c) there is a possibility that new insights are triggered by the evolving artifact itself (demonstrating that specifications are never complete). Breakdowns experienced by software designers may be caused as follows: (a) the interpretation of partial specifications leads to breakdowns, showing insufficient mutual understanding. as well as incompleteness and inconsis- tency of the specifications, and (b) the existing design environment is found inadequate for the new task at hand, leading to potential extensions and insights for evolving the design environment.</region>
        <region class="DoCO:TextChunk" id="235" confidence="possible" page="10" column="1">Evolution and end-user modifiability Design is more often modification than innovation [<xref ref-type="bibr" rid="R17" id="231" class="deo:Reference">Basalla 88</xref>]. Breakthroughs and fundamentally new approaches are rare, because designers are people, and people's imaginations and knowledge are limited and knowledge is evolutionary [<xref ref-type="bibr" rid="R42" id="232" class="deo:Reference">Popper 65</xref>]. Obeying general rules and design standards is necessary but not sufficient for good design. DODEs must support the designer in seeing the situation at hand as unique. Domain standards can help constrain designs, but at the same time standards alone do not determine a design solution. For interesting design domains. generic design rules can only play a part in determining the desIgn. A critiquing system that criticizes all designs based on the same standards is based on standard crilics [<xref ref-type="bibr" rid="R8" id="233" class="deo:Reference">Fischer el 01. 93</xref>]. Design domains often have a basic set of rules that all artifacts in that domain should follow. Standards that apply to all designs in a domain are important for designers to understand and follow. Although standard critics are good at enforcing a set of rules that may be applied to all designs for a domain, they do not fuIly support design processes. Condilional crilics allow a design environment to evaluate design ,iwations in accordance with partial [<xref ref-type="bibr" rid="R8" id="234" class="deo:Reference">Fischer 1'1 al. 93</xref>]. The partial specification represents a set of goals articulated by the user. Each specification Item corresponds to a set of critics. which detect desi£l:n situations relevant to that specification item. The set</region>
        <region class="DoCO:FigureBox" id="Fx236">
          <image class="DoCO:Figure" src="62mc.page_010.image_15.png" thmb="62mc.page_010.image_15-thumb.png"/>
        </region>
        <region class="DoCO:TextChunk" id="237" confidence="possible" page="10" column="2">specification items chosen by the designer determines which critics are active. Only active critics participate in the evaluation of design situations. The partial specification is a resource for both the system and the designer (and is thereby an important part of the shared k;ow- ledge): (a) it aIlows the system to generate design-specific (rather than domain-specific) critiquing, and (b) it allows the designer to understand the design in terms of its unique characteristics rather than its common ones.</region>
        <region class="DoCO:TextChunk" id="246" confidence="possible" page="10" column="2">Breakdowns as a driving force in the evolution from programming languages to end-user modifiable design eO\'ironments Our current conceptual framework and prototypes of design environments have a long history. Their evolution was driven by breakdowns uncovered by (a) a more elaborate conceptual framework, (b) the use of the environments, and (c) assessment and evaluation studies. The work started several years ago in an effort to support human problem-domain communication with domain- oriented construction kits [<xref ref-type="bibr" rid="R11" id="238" class="deo:Reference">Fischer, Lemke 88</xref>]. Construction kits enable designers to create artifacts quickly, but they provide no feedback on the quality of a design. Augmenting construction kits with a critiquing component turned them into design environments. Critics [<xref ref-type="bibr" rid="R6" id="239" class="deo:Reference">Fischer er al. 91 a] identify potential prob</xref>lems in the artifact being designed. Their knowledge is based on design principles of the domain. (Designers might violate these principles by believing in different arguments, out of Ignorance or because of a temporary oversight.) Our original assumption was that designers would ha\e no difficulty in understanding these critic messages. User experiments [<xref ref-type="bibr" rid="R24" id="240" class="deo:Reference">Lemke, Fischer 90</xref>] demonstrated that the short messages the critics presented to designers did not reflect the complex reasoning behind the corresponding design issues. To overcome this shortcoming, we initiaIly developed a static explanation component for the critic messages based on the assumption that there is a 'right' answer to a problem. However. the explanation component proved unable to account for the deliberative nature of design problems [<xref ref-type="bibr" rid="R46" id="241" class="deo:Reference">Rittel 84</xref>; <xref ref-type="bibr" rid="R31" id="242" class="deo:Reference">McCall 91</xref>]. Bv combining construction and argumentation, design environments support 'reflection-in-action' as a fundamental process underlying design activities [<xref ref-type="bibr" rid="R48" id="243" class="deo:Reference">Schoen 83</xref>: <xref ref-type="bibr" rid="R13" id="244" class="deo:Reference">Fischer. Nakakoji 92</xref>]. However. even integrated design environments have their shortcomings. Design in real-world situations deals with complex, unique, uncertain, conflicted. unstable situations in practice. Design knowledge as embedded in design environments will never be complete because design knowledge is tacit (i.e competent practitioners know more than they can say [Polanyi 66]), and additional knowledge is triggered and activated bv situations and breakdowns. These observations computational mechanisms in support of end-user modifiabilitr [<xref ref-type="bibr" rid="R10" id="245" class="deo:Reference">Fischer, Girgensohn 90</xref>]. .</region>
        <region class="unknown" id="247" page="10" column="2">ASSESSl\IENT</region>
        <region class="DoCO:TextChunk" id="249" confidence="possible" page="10" column="2">Our approach is in line with the framework outlined by Basalla [<xref ref-type="bibr" rid="R17" id="248" class="deo:Reference">Basalla 88</xref>]. in which an artifact is the fundamental unit for the srudy of technology, and that continuity</region>
        <outsider class="DoCO:TextBox" type="footer" id="250" page="10" column="2">Knowledge-Based Systems Volume 7 Number 4 December 1994</outsider>
        <outsider class="DoCO:TextBox" type="footer" id="251" page="10" column="2">229</outsider>
        <outsider class="DoCO:TextBox" type="header" id="252" page="11" column="1">Turning breakdowns into opportunities for creativity: G Fischer</outsider>
        <region class="DoCO:TextChunk" id="271" page="11" column="1">prevails throughout the made world. How can novelty then appear in the midst of the continuous? Basalla argues for human imagination, socioeconomic and cul- tural forces, diffusion of technology, and the advance- ment of science as different sources of novelty. In our own work, we have focused on the creation of partial external representations of domains in DODEs. Stakeholders in design processes are engaged in a conversation about possibilities, where individuals overcome their 'blindness' through interactions with others. The creativity of the individual (or of a specific group) is transcended by engaging in a participatory design effort [ <xref ref-type="bibr" rid="R19" id="253" class="deo:Reference">Brown, Duguid 91</xref>]. Challenges for creativity are the 'unpredictabilities' of real world situations, where the existing systems and the designers' preconceived notions break down in actual use situations [<xref ref-type="bibr" rid="R16" id="254" class="deo:Reference">Henderson, Kyng 91</xref>]. As articulated in our process model (see <xref ref-type="fig" rid="F5" id="255" class="deo:Reference">Figure 5</xref>), the development of DODEs proceeds in a cycle from design to experience and back again. It is impossible to anticipate all of the relevant breakdowns and their domains during a seeding process. They emerge grad- ually in practice. System development methodologies supporting creativity must empower stakeholders to act in response to breakdowns.<marker type="block"/> Critics [<xref ref-type="bibr" rid="R5" id="258" class="deo:Reference">Fischer et al. 91a</xref>] have the potential to make designers conform to the established 'wisdom of the trade'. Some people may argue that this may limit creativity. However, our own experiences and numerous other investigations [<xref ref-type="bibr" rid="R42" id="259" class="deo:Reference">Popper 65</xref>; Petroski 85; <xref ref-type="bibr" rid="R17" id="260" class="deo:Reference">Basalla 88</xref>] indi- cate that creativity and new solutions result from over- coming the shortcomings in existing solutions. By making these shortcomings explicit (e.g. through the process of using existing design environments to achieve new tasks), we strongly believe that opportunities for creativity are created. Our user studies [<xref ref-type="bibr" rid="R34" id="261" class="deo:Reference">Nakakoji 93</xref>] have repeatedly demonstrated that designers (amateurs as well as experts) do not agree with the advice or complaints of the computational critics. The critiquing messages were used by designers as a starting point for reflective processes (activating tacit knowledge [Polanyi 66]), leading to an articulation of their own arguments. Therefore, critiquing is more than just reminding; it provides a starting point for the articulation of additional knowledge, and can lead to new insights. Few of the standard 'principles of design' are inviol- able. They are merely rules of thumb whose appropriateness must be judged by the designer in each new situation. In other words, the designer must not merely reflect on how to apply principles, but also on whether the principles should be applied as is, modified for the particular situation, or simply abandoned.<marker type="block"/> In noncomputational environments, 'seeing' can be enhanced by training or supported by a human. Computational environments create the unique opportunity to<marker type="column" number="2"/><marker type="block"/> put some of the subjective 'seeing' burden on the compu- tation. The environments need to remediate for the per- ceptually untrained, by engaging them in reflective conversation at the level they can handle, and teaching them to ·see'. Beyond remediation for lack of perceptual training, there are many facts about designs that even the most well trained can never see directly, but that compu- tation can visualize for them. If designers are willing to annotate their work products, computers can deliver this additional information to future designers [Fischer el af. 9Ib].<marker type="block"/> Creativity requires an intense concern and personal involvement with some domain. It also requires enough self-confidence and immunity to peer pressure (whether this pressure is presented in personal interactions or in computational mechanisms such as critics and argumentation) to break the grip of standard practice.<marker type="block"/> Our research work itself is based on the conceptual framework outlined in this paper: the integration of action, assessment, and reflection. We acted for many years by building prototype systems. We create breakdowns in our thinking by assessing and evaluating the strengths and weaknesses of our prototypes, leading us to reflect about our work. This reflection has created a large number of interesting questions to be pursued in the future [<xref ref-type="bibr" rid="R13" id="270" class="deo:Reference">Fischer, Nakakoji 92</xref>]:</region>
        <region class="unknown" id="257" page="11" column="1">Do critics enhance or hinder creativity?</region>
        <region class="unknown" id="263" page="11" column="1">Exploiting the unique possibilities of computers as a medium</region>
        <region class="DoCO:FigureBox" id="Fx265">
          <image class="DoCO:Figure" src="62mc.page_011.image_16.png" thmb="62mc.page_011.image_16-thumb.png"/>
        </region>
        <region class="unknown" id="267" page="11" column="2">Motivation</region>
        <region class="unknown" id="269" page="11" column="2">Future work</region>
        <region class="DoCO:TextChunk" id="274" confidence="possible" page="11" column="2">• Are there differences in the performance, quality, and creativeness of the product when the system is used with and without critics, the catalog, and the simulation components? • What is the tradeoff between running the system in a critiquing mode and running it in a constraint mode, when the latter would prevent certain problems from arising (e.g. by enforcing building codes), whereas the former would provide designers with opportunities to deal with breakdowns? • What is the tradeoff between various intervention strategies, such as the balance between displaying enough information and disrupting the work process? When are designers willing to suspend the construction process to access relevant information? How can both modes of operation be integrated? • Are mechanisms such as checklists and task agendas [<xref ref-type="bibr" rid="R24" id="272" class="deo:Reference">Lemke, Fischer 90</xref>] needed and useful to address breakdowns occurring in the process rather than in the product? • Does 'making information relevant to the task at hand' prevent serendipity [<xref ref-type="bibr" rid="R47" id="273" class="deo:Reference">Roberts 89</xref>]7 • If an environment can always supply the information that the situation demands, why would designers bother to learn the information [Fischer 9IJ? • Under what conditions will designers challenge or extend the knowledge represented in the sy;tem? How can they be motivated to do so [Fischer el 01.</region>
        <region class="unknown" id="275" page="11" column="2">92]?</region>
        <outsider class="DoCO:TextBox" type="header" id="276" page="12" column="1">Turning breakdowns into opportunities for creatiVity: G Fischer</outsider>
        <ref-list class="DoCO:BiblioGraphicReferenceList">
          <ref rid="R1" class="deo:BibliographicReference" id="277" page="12" column="1">[Eisenberg 94J M Eisenberg 'Programmable applications for the arts: computational tools for hand, eye and mind' Knowledge-Based Systems Vol 7 No 4 (1994) pp 239--246</ref>
          <ref rid="R2" class="deo:BibliographicReference" id="278" page="12" column="1">[Eisenberg, Fischer 94] M Eisenberg, G Fischer 'Programmable design environments: integrating end-user programming with domain- oriented assistance' Human Factors in Computing Systems CHJ'94 Con- /ermCl' Proceedillgs ACM (1994) pp 431-437</ref>
          <ref rid="R3" class="deo:BibliographicReference" id="282" page="12" column="1">[Fischer 9I] G Fischer 'Supporting learning on demand with design environments' Proceedings International Conference on the Learning Sciences Association for the Advancement of Computing in Education, USA (1991) pp 165-172</ref>
          <ref rid="R4" class="deo:BibliographicReference" id="284" page="12" column="1">[Fischer 92] G Fischer 'Domain-oriented design environments' Pro- ceedil1gs 7th Allnual Knowledge-Based Software Engineering (KBSE- 92) Conference IEEE Computer Society Press, USA (1992) pp 204--213</ref>
          <ref rid="R5" class="deo:BibliographicReference" id="285" page="12" column="1">[Fischer et at. 91a] G Fischer, A C Lemke, T Mastaglio, A Morch 'The role of critiquing in cooperative problem solving' ACM Transactions In/ormation Srstems Vol9 No 2 (1991) pp 123-151</ref>
          <ref rid="R6" class="deo:BibliographicReference" id="286" page="12" column="1">[Fischer e/ at. 91 b] G Fischer, A C Lemke,R McCalL A Morch 'Making argumentation serve design' Human Computer Interaction Vol 6 No 3- 4 (1991) pp 393-419</ref>
          <ref rid="R7" class="deo:BibliographicReference" id="288" page="12" column="1">[Fischer e/ a/. 92] G Fischer, J Grudin, A C Lemke, R McCall, J Ostwald, B N Reeves, F Shipman 'Supporting indirect, collaborative design with integrated knowledge-based design environments' Human Computer 1I1IeraCiiOil Vol 7 No 3 (1992) pp 281-314 (special issue on</ref>
          <ref class="deo:BibliographicReference" id="289" confidence="possible" page="12" column="1">computer supported cooperative work)</ref>
          <ref rid="R8" class="deo:BibliographicReference" id="290" page="12" column="1">[Fischer et at. 93] G Fischer. K Nakakoji, J Ostwald, G Stahl, T Sumner 'Embedding computer-based critics in the contexts of design' HU!1lall FaclOrs ill Computing Srstems INTERCHf'93 Conference Proceedillgs ACM (1993) pp 157--164</ref>
          <ref rid="R9" class="deo:BibliographicReference" id="291" page="12" column="1">[Fischer e/ at. 94] G Fischer. R McCall, J Ostwald, B Reeves, F Shipman 'Seeding, evolutionary growth and reseeding: supporting incremental de\e1opment of design environments' Human Factors in COIllPlllillg Slsrellls CH f'94 Conlerence Proceedings ACM (1994) pp 292-298</ref>
          <ref rid="R10" class="deo:BibliographicReference" id="293" page="12" column="1">[Fischer. Girgemohn 90] G Fischer, A Girgensohn 'End-user modifiability in design environments' Human Factors in Computing 51's/ems CHf'9() ConjiTellc!' Proceedings ACM, USA (1990) pp 183-191</ref>
          <ref rid="R11" class="deo:BibliographicReference" id="295" page="12" column="1">[Fischer, Lemke 88] G Fischer, A C Lemke 'Construction kits and design environments: steps toward human problem-domain communication' HWllll11-CO/llpJilcr Imcraction Vol 3 No 3 (1988) pp 179--222</ref>
          <ref rid="R12" class="deo:BibliographicReference" id="296" page="12" column="1">[Fischer. Nakakoji 92J G Fischer, K Nakakoji 'Beyond the macho approach of artificial intelligence: empower human designers do not replace them' Allolr/cdgc-Based Sl'S/CIIlS Vol 5 No I (1992) pp 15-30</ref>
          <ref rid="R13" class="deo:BibliographicReference" id="297" page="12" column="1">[Fischer. Ree,"s 92] G Fischer. B N Reeves 'Beyond intelligent inler- faces: exploring, analyzing and creating success models of cooperative problem sol\ing' Applied Intelligence Vol I (1992) pp 311-332 (special</ref>
          <ref class="deo:BibliographicReference" id="298" confidence="possible" page="12" column="1">issue intelligent interfaces)</ref>
          <ref rid="R14" class="deo:BibliographicReference" id="299" page="12" column="1">[Girgensohn 92] A Girgensohn 'End-user modifiability in knowledge- based design environments' PhD Dissenalion Department of Computer Science. University of Colorado, USA (1992) (also available</ref>
          <ref class="deo:BibliographicReference" id="301" confidence="possible" page="12" column="1">as TcchRcporr (,[,-CS-595-92)</ref>
          <ref rid="R15" class="deo:BibliographicReference" id="302" page="12" column="1">[Harstad 93] B Harstad 'New approaches for critiquing systems: plura- listic critiquing. consistency critiquing, and multiple intervention strategies' Tcchl1Icul Report CU-CS-685-93 Department of Computer Science. University of Colorado, USA (1993)</ref>
          <ref rid="R16" class="deo:BibliographicReference" id="304" page="12" column="1">[Henderson. Kyng 91] A Henderson, M Kyng 'There's no place like home: continuing design in use' in J Greenbaum, M Kyng (Eds,) Design 01 fVork Coupera/il'l' Desigll o/Cofllpulcr S)'stems Lawrence Erlbaum. USA (1991) pp 219-240</ref>
          <ref rid="R17" class="deo:BibliographicReference" id="305" page="12" column="1">[Basalla 88] G Basalla TiTe EI'ollllioll of Tcdlllolof{l' Cambridge University Press, USA (l9X8) IBoden 91] M Boden lire ('remil'!' Milld Ml'rhs &amp; Mechanisms Basic Books(1991) .</ref>
          <ref rid="R18" class="deo:BibliographicReference" id="306" page="12" column="1">[Kolodner 93] J L Kolodner Case-Based Reasoning Morgan Kaufmann. USA (1993)</ref>
          <ref rid="R19" class="deo:BibliographicReference" id="307" page="12" column="1">[Brown. Duguid 91] J S Brown, P Duguid 'Organizational learning and toward a unified view of working. learning. and innovation' Sci('ltce Vol :2 No I (1991) pp 40 57</ref>
          <ref rid="R20" class="deo:BibliographicReference" id="308" page="12" column="1">[Lave 88] J La\e Cogllition ill Pral'licl! Cambridge University Press, UK ( 1988)</ref>
          <ref rid="R21" class="deo:BibliographicReference" id="309" page="12" column="1">[Lee 921 L Lee The Dal rhe Phones Stopped Donald I Fine Inc.. USA (1992)</ref>
          <ref rid="R22" class="deo:BibliographicReference" id="310" page="12" column="1">[Candy, Edmonds. O'Brien 94J L Candy, E Edmonds, S O'Brien 'End user knowledge manipulation and creativity' ill T Darlnall (Ed.) Arli/I- (w/ln/cl/igmce and Crcillit'ill' Kluwer (to he pUblished) .</ref>
          <ref rid="R23" class="deo:BibliographicReference" id="311" page="12" column="1">[Cunklin. Begeman 8X] J Conklin. M Begeman 'gIBIS: a hypertext tool Il)f exploratory policy discussion' Trull.lactions Of lice In/iJl'll/arion SI'I/I'IIII Vol 6 No 4 (19XX) pp 303 -\3 I .</ref>
          <ref rid="R24" class="deo:BibliographicReference" id="312" page="12" column="1">[Lemke. Fischer 90] A C Lemke, G Fischer 'A cooperative problem solVing system for user interface design' Proct!edings AAAI-90 Eighth National COIl/ercl/Cc Ani/i"ial Intelligence AAAI PressrMIT Press, USA (1990) pp 479 -4X4</ref>
          <ref rid="R25" class="deo:BibliographicReference" id="314" page="12" column="2">[Edmonds 94] E Edmonds 'Cybernetic serendipity revisited' in T Dart- nail (Ed,) Artificial Intelligence and Creativity Kluwer (to be pUblished)</ref>
          <ref rid="R26" class="deo:BibliographicReference" id="315" page="12" column="2">[Ehn 88] P Ehn Work-Oriented Design o/Computer Artifacts Almquist &amp; Wikscll, Sweden (1988)</ref>
          <ref rid="R27" class="deo:BibliographicReference" id="316" page="12" column="2">[Fischer 87] G Fischer 'A critic for LISP' Proceedings 10th International Join/ Conference 011 Arti/ieal intelligence Morgan Kaufmann, USA (1987) pp 177184</ref>
          <ref rid="R28" class="deo:BibliographicReference" id="317" page="12" column="2">[Fischer 90] G Fischer 'Communications requirements for cooperative problem solving systems' International Journal 0/ Information Syslems Vol 15 No I (1990) pp 21-36 (special issue on knowledge engineering)</ref>
          <ref rid="R29" class="deo:BibliographicReference" id="321" page="13" column="1">[lewis, Norman 86\ C H Lewis, D A Norman 'Designing for error' in D A Norman, S W Draper (Eds.) User Centered System Design, Ne ... Perspectil'es on Human-Computer Interaction lawrence Erlbaum, USA (1986) pp 411432</ref>
          <ref rid="R30" class="deo:BibliographicReference" id="322" page="13" column="1">[Maclean, Young, Moran 89] A Maclean, R Young, T Moran 'Design rationale: the argument behind the artifact' HIII11,m Factors ill Computing Sl'stems C H 1'89 Conference Proceedings ACM, USA (1989) pp 247 252</ref>
          <ref rid="R31" class="deo:BibliographicReference" id="323" page="13" column="1">[McCall 91] R McCall 'PHI: a conceptual foundation for design hypermedia' Design Studies Vol 12 No I (1991) pp 3041</ref>
          <ref rid="R32" class="deo:BibliographicReference" id="324" page="13" column="1">[McCall, Fischer, Moreh 90] R M(.'Call, G Fischer, A Morch 'Supporting reflection-in-action in the Janus design environment' in M McCul- lough el al. (Eds.) The Eleclronic Design Siudio MIT Press, USA (1990) pp 247-259</ref>
          <ref rid="R33" class="deo:BibliographicReference" id="325" page="13" column="1">[Morch 94] A I Morch 'Designing for radical tailorability: coupling artifact and rationale' Kno ... le(~f!,e-Based Systems Vol 7 No 4 (1994) pp 253264</ref>
          <ref rid="R34" class="deo:BibliographicReference" id="326" page="13" column="1">[Nakakoji 93] K Nakakoji 'Increasing shared understanding of a design task between designers and design environments: the role of a specification component' PhD Dissertation Department of Computer Science, University of Colorado, USA (1993) (also available as TechReporl CT- CS-65 1-93)</ref>
          <ref rid="R35" class="deo:BibliographicReference" id="327" page="13" column="1">[Nardi 93] B A Nardi A Small Matter of Prograll1millg MIT Press, USA ( 1993)</ref>
          <ref rid="R36" class="deo:BibliographicReference" id="328" page="13" column="1">[Norman 93] D A Norman Things Thai Make Us SnuJr{ Addison- Wesley, USA (1993)</ref>
          <ref rid="R37" class="deo:BibliographicReference" id="329" page="13" column="1">[Ostwald, Nakakoji 94] J Ostwald, K Nakakoji 'EVA: a medium for conceptual coordination in software development'</ref>
          <ref rid="R38" class="deo:BibliographicReference" id="330" page="13" column="1">[Owen 86] D Owen 'Answers first, then questions' in D A Norman, S W Draper (Eds.) User Centered System Design, New Perspectives on Human--Computer Interaction lawrence Erlhaum, USA (1986) pp 361--</ref>
          <ref class="deo:BibliographicReference" id="331" confidence="possible" page="13" column="1">375</ref>
          <ref rid="R39" class="deo:BibliographicReference" id="332" page="13" column="1">[papert 80] S Papert Mindstorms: Children, Computers and Powerful Ideas Basic Books, USA (1980)</ref>
          <ref rid="R40" class="deo:BibliographicReference" id="334" page="13" column="2">[Petroski 85J H Petroski To Engineer Is Human.- The Role of Failure in Successful Design St Martin's Press, USA (1985)</ref>
          <ref rid="R41" class="deo:BibliographicReference" id="335" page="13" column="2">[Polanyi 66J M Polanyi The Tacit Dimension Doubleday, USA (1966)</ref>
          <ref rid="R42" class="deo:BibliographicReference" id="336" page="13" column="2">[Popper 65] K R Popper Conjectures and Re/iJtaliolls Harper &amp; Row, USA (1965)</ref>
          <ref rid="R43" class="deo:BibliographicReference" id="337" page="13" column="2">[Reeves 93] B N Reeves 'The role of embedded communication and artifact history in collaborative design' PhD Dissertation CU-CS-694- 93 Department of Computer Science, University of Colorado, USA (1993)</ref>
          <ref rid="R44" class="deo:BibliographicReference" id="338" page="13" column="2">[Repenning, Sumner 92] A Repenning, T Sumner 'Using agentsheets to create a voice dialog design environment' Proceedings 1992 ACMI SIGAPP Symposium Applied Computing ACM Press (1992) pp 1199~ 1207</ref>
          <ref rid="R45" class="deo:BibliographicReference" id="339" page="13" column="2">[Riesbeck, Schank 89] C Riesbeck. R C Schank Inside Case-Based Reasoning lawrence Erlbaum, USA (1989)</ref>
          <ref rid="R46" class="deo:BibliographicReference" id="340" page="13" column="2">[Ritte! 84] H W J Rittel 'Second-generation design methods' in N Cross (Ed.) Developl11ellts in Design Methodolog.\' John Wiley, USA (1984) pp 317-317</ref>
          <ref rid="R47" class="deo:BibliographicReference" id="341" page="13" column="2">[Roberts 89] R M Roberts Serendipity.' Accidental Discoveries ill SciCllcc John Wiley, USA (1989)</ref>
          <ref rid="R48" class="deo:BibliographicReference" id="342" page="13" column="2">[Schoen 83] D A Schoen The Reflective Practitioner. HoII' Professional.l· Thin/.: ill AClioll Basic Books, USA (1983)</ref>
          <ref rid="R49" class="deo:BibliographicReference" id="343" page="13" column="2">[Shipman. McCall 94] F Shipman, R McCall 'Supporting knowledge- base evolution with incremental formalization' Human Factors in COII!- puting S.\'stems INTERCHf'94 Conference Proceedings ACM (1994) pp</ref>
          <ref class="deo:BibliographicReference" id="344" confidence="possible" page="13" column="2">285-291</ref>
          <ref rid="R50" class="deo:BibliographicReference" id="345" page="13" column="2">[Simon 81] H A Simon The Sciences of the Artificial MIT Press, USA (1981)</ref>
          <ref rid="R51" class="deo:BibliographicReference" id="346" page="13" column="2">[Suchman 87] L A Suchman Plans and Situaled Actions Cambridge University Press, UK (1987)</ref>
          <ref rid="R52" class="deo:BibliographicReference" id="347" page="13" column="2">[Winograd, Flores 86] T Winograd. F Flores Understanding Computers and Cognition' A New Foundation for Design Ablex, USA (1986)</ref>
        </ref-list>
        <region class="DoCO:TextChunk" id="281" confidence="possible" page="12" column="1">• To what extent can the 'back talk' be embedded directly into the artifact, or does it need to be han- dled by a separate discourse, such as feedback from critiquing and simulation components? • To what extent are situations and reflective'conver- sations controlled by media properties? • How can we achieve a balance between technical rationality (e.g. using plans and rules) and reflective action [<xref ref-type="bibr" rid="R26" id="279" class="deo:Reference">Ehn 88</xref>; <xref ref-type="bibr" rid="R51" id="280" class="deo:Reference">Suchman 87</xref>]? People do use plans. such as milestone charts and business plans. In particular, people working in teams might profit from systematic agreements. Even if one agrees that 'design is more than the application of standard principles', one cannot infer that principles cannot be useful.</region>
      </section>
      <section class="deo:Conclusion">
        <h1 class="DoCO:SectionTitle" id="283" page="12" column="1">CONCLUSIONS</h1>
        <region class="unknown" id="287" page="12" column="1">The way in which knowledge progresses. and especially our scientific knowledge, is by justified (and unjustifiable) anticipations, by guesses, by tentative solutions to our problems, by cOlljectllres. These conjectures are controlled by criticism; that is, by attempted rejiaations, which include severely critical tests ... Criticism of our conjectures is of decisive importance: by bringing out our mistakes it makes us understand the difficulties of the problem which we are trying to solve [popper 65],</region>
        <region class="DoCO:TextChunk" id="292" page="12" column="1">Learning from mistakes is in the center of a theory of knowledge and of its growth, the essential elements of creativity. Although Popper's thinking is primarily focused on historical creativity (i.e. ideas that are fundamentally novel with respect to the whole of human history), his arguments are equally relevant to psycholo- gical creativity (i.e. ideas that are fundamentally novel with respect to the individual mind that had the idea) [Boden 91]. Breakdowns generated by human and computational critics are opportunities to increase our creativity in our thinking as well as in the artifacts that we design,</region>
      </section>
      <section class="deo:Acknowledgements">
        <h1 class="DoCO:SectionTitle" id="294" page="12" column="1">ACKNOWLEDGEMENTS</h1>
        <region class="DoCO:TextChunk" id="300" page="12" column="1">The author would like to thank the members of the Human-Computer Communication Group at the University of Colorado, USA, who contributed to the conceptual framework and the systems discussed in this paper. The research was supported by the US National Science Foundation under grant MDR-9253425, by the HCI program of ARPA, and by grants from the NYNEX Science and Technology Center. and from Software Research Associates,</region>
      </section>
      <section class="DoCO:Bibliography">
        <h1 class="DoCO:SectionTitle" id="303" page="12" column="1">REFERENCES</h1>
        <region class="DoCO:FigureBox" id="Fx313">
          <image class="DoCO:Figure" src="62mc.page_012.image_17.png" thmb="62mc.page_012.image_17-thumb.png"/>
        </region>
        <outsider class="DoCO:TextBox" type="footer" id="318" page="12" column="2">Knowledge-Based Systems Volume 7 Number 4 December 1994</outsider>
        <outsider class="DoCO:TextBox" type="footer" id="319" page="12" column="2">231</outsider>
        <outsider class="DoCO:TextBox" type="header" id="320" page="13" column="1">Turning breakdowns into opportunities for creativity: G Fischer</outsider>
        <region class="DoCO:FigureBox" id="Fx333">
          <image class="DoCO:Figure" src="62mc.page_013.image_18.png" thmb="62mc.page_013.image_18-thumb.png"/>
        </region>
        <outsider class="DoCO:TextBox" type="footer" id="348" page="13" column="2">232</outsider>
        <outsider class="DoCO:TextBox" type="footer" id="349" page="13" column="2">Knowledqe-8ased Systems Volume 7 Number 4 December 1994</outsider>
      </section>
    </body>
  </article>
</pdfx>
