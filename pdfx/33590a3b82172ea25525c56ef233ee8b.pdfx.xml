<?xml version='1.0' encoding='UTF-8'?>
<pdfx xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://pdfx.cs.man.ac.uk/static/article-schema.xsd">
  <meta>
    <job>beccb3eb586acd1158ac159b495ef3d6ec61fe2dd24efdd4a783272250f9d2c6</job>
    <base_name>62fv</base_name>
    <doi>http://dx.doi.org/10.1145/291224.291233</doi>
  </meta>
  <article>
    <front class="DoCO:FrontMatter">
      <contrib-group class="DoCO:ListOfAuthors">
        <contrib contrib-type="author">
          <name id="1">JONAS LÖWGREN AND ERIK STOLTERMAN</name>
        </contrib>
      </contrib-group>
      <title-group>
        <article-title class="DoCO:Title" id="2">methods &amp; tools</article-title>
      </title-group>
      <region class="DoCO:FigureBox" id="Fx3">
        <image class="DoCO:Figure" src="62fv.page_001.image_01.png" thmb="62fv.page_001.image_01-thumb.png"/>
      </region>
      <region class="unknown" id="4">Design Methodology and Design Practice</region>
    </front>
    <body class="DoCO:BodyMatter">
      <section class="deo:Introduction">
        <h1 class="DoCO:SectionTitle" id="5" page="1" column="1">INTRODUCTION</h1>
        <region class="DoCO:TextChunk" id="6" confidence="possible" page="1" column="1">For several decades, the field of design methodology has addressed design processes, epistemological considerations, and work practices in the design disciplines [2, 10, 11, F 13]. is discipline primarily not There well architecture, [7, are known 14]. good Design in reasons our engineering methodology discipline for considering design, but as appears a and general the industrial to development field be highly has design. developed relevant. of This software body In across this of as knowledge disciplines, article, a design we introduce a number of design methods from other design disciplines and the literature design methodology. We hope that they will prove useful for software designers.</region>
        <region class="unknown" id="7" page="1" column="2">Don Bishop ©1997 Artville, LLC</region>
        <outsider class="DoCO:TextBox" type="sidenote" id="8" page="1" column="2">on</outsider>
        <outsider class="DoCO:TextBox" type="footer" id="9" page="1" column="2">interactions...january + february 1999</outsider>
        <outsider class="DoCO:TextBox" type="page_nr" id="10" page="1" column="2">13</outsider>
        <outsider class="DoCO:TextBox" type="sidenote" id="11" page="2" column="1">Art</outsider>
        <outsider class="DoCO:TextBox" type="sidenote" id="12" page="2" column="1">205</outsider>
        <region class="unknown" id="14" page="2" column="1">Jonas Löwgren and Communication Malmö University College 06 Malmö, Sweden <email id="13">Jonas.Lowgren@kk.mah.se</email></region>
        <outsider class="DoCO:TextBox" type="sidenote" id="15" page="2" column="1">Erik</outsider>
        <outsider class="DoCO:TextBox" type="sidenote" id="16" page="2" column="1">01</outsider>
        <region class="unknown" id="18" page="2" column="1">Stolterman Department of Informatics Umeå University 87 Umeå, Sweden <email id="17">erik@informatik.umu.se</email></region>
        <region class="DoCO:TextChunk" id="20" page="2" column="1">First, a word on our view of methods. Some argue that the way to get better systems is to concentrate on developing and dissemi- nating better methods. A good example is Butler [1], who summarizes 10 years of development in usability engineering (UE) as follows: “UE provides systematic tools and methods for the complex task of designing user interfaces that can be readily compre- hended, quickly learned and reliably oper- ated.” To us, it seems clear that the result of any process will never be better than the people who participate in the process. The implication for software design is that the skills and abilities of the designer determine the quality of the final system. It follows that methods should be seen as tools for developing the designer’s abilities. By describing a particular work practice that has proved useful to other designers, we provide the reader with opportunities to develop his or her own practice. The choice of a particular method can never be made in a general way; instead, it must always be related to the situation at hand and the people involved. John Christopher Jones published the first edition of his milestone design book Design Methods: Seeds of Human Futures in 1970 [4]. In the introduction, he writes about different views on the designer and on design methods. If the designer is seen as a black box, gener- ating creative solutions without being able to explain or illustrate how the solutions came about, then the methods will be focused on facilitating and supporting the inexplicable creative processes. The other extreme is to view the designer as a glass box where every step in the design process is rational and eli- gible for description and transfer. Glass box methods tend to be systematic and assume sequential processes with hierarchical decom- position of problems into subproblems. A third view is to think of the designer as a self- organizing system with the abilities to search for ideas and solutions, combined with the assessment of its own processes. The corre- sponding methods have strong traits of meta- thinking and support the designer’s reflection on work processes and design strategies. <marker type="column" number="2"/><marker type="block"/> In the terms of Jones’s taxonomy, we would adhere to the view of designers as self-organizing systems with constructive as well as reflective skills. To describe a method is a way to provide designers with access to a way of working that they perhaps did not know before. The designer must assume the full responsibility for assessing the applicability and effects of the method in question, assimi- late it with his current “toolbox” and use it independently and creatively in appropriate situations. Hence, we provide rather brief descriptions of the methods used to facilitate initial assessment and full references for the further studies that are needed for assimila- tion. Since our purpose here is to argue that software design could benefit from other, more traditional design disciplines, we have chosen to be brief in presenting our methods. Instead, we close with a discussion on how we believe designers should relate to methods when the purpose is not only to produce results effec- tively and efficiently, but also to develop and improve their design ability.</region>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="21" confidence="possible" page="2" column="2">Examples of the Methods</h2>
          <region class="DoCO:TextChunk" id="26" page="2" column="2">The three methods we present here are all oriented toward early phases of the design process, where concepts and ideas are the main currencies. The reason is simply that the later phases—including detailed design, implementation, and evaluation—are already addressed more extensively in the literature and are perhaps also less problematic. Our choice of methods is not meant to be compre- hensive, perhaps not even the best possible. Instead we present examples of methods that can be tried out very simply without putting too much effort into the learning process. The three methods are (1) function analysis, (2) why-why-why, and (3) innovation by boundary shifting. The sidebar gives brief introductions to another handful of methods with references. <marker type="block"/> Function Analysis Participatory design, contextual design, and many other software design methods are fun- damentally based on knowing the intended<marker type="page" number="3"/><marker type="column" number="1"/><marker type="block"/> users and use contexts of the system to be developed. When a product is planned for a broad market, it is often much harder to find intended users and involve them in the design process. It is, of course, not impossible, as examples such as Kyng [5] demonstrate, but still not always feasible. The foundation on which to develop concepts is instead often a compilation of information from many different sources: studies of competing products, market research by ourselves, market research by others, interviews with people from the target population, interviews with application domain specialists, field studies of intended use situations, and so on. Landqvist [6] describes the method of function analysis from the field of industrial design. Its purpose is to summarize and structure the available information and to decide where more information is needed. The main idea of a function analysis is to express what the future product should do (i.e., what functions it should have), but not how. Functions are expressed in two words each: a verb and a noun. There are four types of functions. There is always one main func- tion—the essential idea or purpose of the product. Other functions that are required for the product to fulfill its purpose are called necessary. Functions that are nice to have but not necessary are desirable. Finally, functions that have been proposed but later ruled out are classified as unnecessary. Unnecessary functions are not taken out of the analysis, because they serve as a record of what went on earlier and may facilitate inter-project learning. To illustrate a simple function analysis, imagine that we have initiated discussions</region>
          <outsider class="DoCO:TextBox" type="page_nr" id="24" page="2" column="2">14</outsider>
          <outsider class="DoCO:TextBox" type="footer" id="25" page="2" column="2">interactions...january + february 1999</outsider>
          <region class="DoCO:FigureBox" id="F1">
            <caption class="deo:Caption" id="27" page="3" column="1">Figure 1. Transcript from a preliminary function analysis.</caption>
          </region>
          <region class="unknown" id="28" page="3" column="1">Functions Classification Provide X-ray images Main function Search for X-ray images Necessary Enhance X-ray images Desirable Store new X-ray images Necessary Manage image archive Necessary</region>
          <region class="DoCO:TextChunk" id="30" confidence="possible" page="3" column="2">with a local hospital where the administra- tion of X-ray images appears to be a source of problems. The existing image archive is similar to a library where all the images are kept. Doctors and other authorized staff fill out request forms and the images arrive in a day or two through in-house mail, unless someone else has borrowed them. We put together a simple function analysis in order to structure the problem and to learn what we need to find out more about. The basis for our analysis is a handful of short conversations with people at the hospital, and a demo of a commer- cial teleradiology product. The transcript in <xref ref-type="fig" rid="F1" id="29" class="deo:Reference">Figure 1</xref> shows our first take on the situation. Even though the example is simple, the idea of concentrating on the “whats” of the planned system should be clear. Landqvist [6] further recommends that the function analysis be combined with the results from subsequent how-oriented activities. For instance, if a brainstorming session (see the sidebar) is used to generate a number of design concepts and product ideas, a matrix can be constructed in which the functions from the function analysis are placed in the rows and the different design concepts in the columns. Each cell in the matrix corresponds to an assessment of how well the design concept in the column responds to the functional need in the row. If the assessments are made numerically, each column can be added up and a quan- titative ranking of the design concepts is obtained; however, it might be difficult to assign numbers to complex and context-</region>
          <region class="unknown" id="31" page="3" column="2">Notes The essential purpose of the product Edge detection, contrast, brightness, etc; may be permanent operations or different for each session</region>
          <outsider class="DoCO:TextBox" type="footer" id="32" page="3" column="2">interactions...january + february 1999</outsider>
          <outsider class="DoCO:TextBox" type="page_nr" id="33" page="3" column="2">15</outsider>
          <region class="DoCO:TextChunk" id="46" page="4" column="1">dependent assessments. The main benefit of the combination matrix may well lie in the systematic cross-check of all concepts against all functions. The idea of using verbs and nouns as drivers of early analysis work can be found in many object-oriented analysis methods, where they typically correspond to methods and objects in subsequent system design. The classification of functions is a standard technique in requirement analysis within information systems development. The combination matrix sug- gested by Landqvist is similar to the QFD A-1 matrix that, for example, Lundell and Williams [9] report using in the same way. The main reason for presenting function analysis here is Landqvist’s experience that it helps creative and concept-oriented industrial designers spend some time on the whats before diving into the hows. We believe that it can yield the same benefits in certain software design contexts. <marker type="block"/> Why-Why-Why? It is nearly always good design practice to look beyond the problem as stated. In early phases, it is a way to direct the attention to areas where potentially powerful design concepts might be found, before any commitments are made. One way to do this is to ask a series of why questions and build a chain of connec- tions backwards from the initial formulation [4]. To illustrate how this works, assume that the X-ray image project we mentioned earlier originated from a doctor’s dissatisfaction with the current means for obtaining specific images. We create a hypothetical conversation as follows. — I am not happy with the way X-ray images are handled today. — Why? — Because I have to request images several days before I need them.<marker type="column" number="2"/><marker type="block"/> — Why? — There is no way to know in advance how long it is going to take to get the images. — Why? — If somebody else has borrowed the images I want, then I have to wait until they are returned. — Why? — There is only one copy of each image. Note that the why-chains can stretch in many different directions, depending on how the whys are interpreted and whose perspec- tive is assumed in providing answers. — I am not happy with the way X-ray images are handled today. — Why? — Because I get the wrong pictures sometimes. — Why? — The people at the image archive make mistakes. — Why? — Don’t know. I suppose they are over- worked. Why-chains like these can be used to spawn different design concepts, depending on which part of the chain is used for entry and which values are brought to the design work. The preceding examples could motivate a focus on improving the conditions in the image archive: improved procedures, rapid feedback on image requests, different modes of communication between clients and archive, several copies of each image, and so on. For a software designer, it might be nat- ural to envision a support system for the image archive staff, dealing with digital request forms and information about the images, such as where they are stored in the archive and who has checked them out. Such a system could even notify the client automat- ically if all copies of the requested image are on loan. The result would be a bit like a library system. It is important to note that the why-why- why method is merely a way of broadening the design possibilities. Formulating fruitful why-chains requires the ability to distinguish promising paths from dead ends.<marker type="page" number="5"/><marker type="column" number="1"/><marker type="block"/> — I am not happy with the way X-ray images are handled today. — Why? — Because I am in a terrible mood. — Why? — Because my spouse and I had a fight before I left home this morning. The why-chains are simpler versions of the means-ends hierarchies elaborated by Rasmussen and associates in the method called ecological interface design (see, e.g., [12]). They also correspond to common design sense: do not only try to solve the problem, but also question it. The reason for elevating why- why-why to method status is that it can serve as a tool in learning the healthy practice of tra- versing abstraction levels in design.<marker type="block"/> Innovation by Boundary Shifting One of the most critical stages in the design process is when the fuzzy and incomplete design concepts have to start being refined and elaborated into more tangible representa- tions. The danger of getting locked into a specific way of regarding the problem is imminent as the time for hard commitments comes up. Many important design decisions are made, sometimes implicitly and without reflection. Jones [4] describes innovation by boundary shifting as a way to move the exploration outside the problem boundaries that are implicitly taken for granted and to apply knowledge from new fields to the problem. The method has four steps; we illustrate them using the X-ray image example. 1. Identify the essential functions of any device that would achieve the desired objective. The desirable objective in our case is to improve the handling of X-ray images to remove the doctors’ and other clients’ dissatisfaction and problems. The essential function can be described as giving the clients access to the images they need, when they need them. 2. Identify conflicts between existing means of achieving these functions within the assumed problem boundaries. The foremost conflict is that we cannot guarantee delivery of the proper images, even if the image archive is given a digital support<marker type="column" number="2"/><marker type="block"/> system. A robot archive is not economically feasible. 3. Identify resources outside the assumed problem boundaries that might be made available by transforming the problem. There are, of course, many potentially M ETHODS &amp; T OOLS useful resources. Three of the most promising C OLUMN E DITORS ones are that (a) doctors and other clients rec- Michael Muller ognize the proper images when they see them, Lotus Development Corp. (b) clients spend time today filling out request 55 Cambridge Parkway forms and that time could be used for some- Cambridge, MA 02142 thing else, and (c) there are good routines in +1-617-693-4235 place for managing other patient information fax: +1-617-693-1407 in the form of journals. <email id="41">mullerm@acm.org</email> 4. Seek compatible solutions that would provide channels for the use of some or all of Finn Kensing these resources. Computer Science A possible solution using resource 3(c) Roskilde University would be to dismantle the central image P.O. Box 260 archive and keep X-ray images in the patient DK-4000 Roskilde journals. Resources 3(a) and 3(b) can be com- Denmark bined in a different solution where clients use +45-4675-7781-2548 the time they spend today filling out request fax: +45-4674-3072 forms to do their own searching in a database <email id="42">kensing@dat.ruc.dk</email> of digitized X-ray images. The example illustrates how the method can be used to shift the problem boundaries that were previously taken for granted; that is, that the role of the image archive is to manage and provide photographic copies of X-ray images. The possible solutions move in different directions; the first is oriented toward organizational intervention, whereas the second proposes a new storage medium for the images with a host of new implications. We can also note that the consequences of the two ideas are quite far-reaching, even to the point that the whole design concept must be rethought. We are no longer thinking about a support system for the image archive, but rather a change in the larger system in which image providers (archive) and image consumers (clients) both take part. Innovation by boundary shifting is a way to support “thinking outside the box” and to draw on knowledge from other fields and other perspectives when faced with a hard design problem. In this aim, it is clearly related to de Bono’s notion of “lateral thinking” and the methods that are based thereupon (see [3]<marker type="page" number="6"/><marker type="column" number="1"/><marker type="block"/> and the sidebar for examples). All three methods can be used as learning tools, maybe even without trying them out. It is possible to read them just to be able to formulate questions on our current practice. For instance, in what way do I approach situations described in the methods? And what are the pros and cons of my own thinking—struc- tured or not—compared with the methods?</region>
          <outsider class="DoCO:TextBox" type="page_nr" id="37" page="4" column="2">16</outsider>
          <outsider class="DoCO:TextBox" type="footer" id="38" page="4" column="2">interactions...january + february 1999</outsider>
          <outsider class="DoCO:TextBox" type="footer" id="44" page="5" column="2">interactions...january + february 1999</outsider>
          <outsider class="DoCO:TextBox" type="page_nr" id="45" page="5" column="2">17</outsider>
        </section>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="47" confidence="possible" page="6" column="1">Design and Method</h2>
          <region class="DoCO:TextChunk" id="55" page="6" column="1">What is the role of methods in design? As stated in the introduction, the answer depends on how we regard the designers themselves. Of course, situations occur when a systematic and structured approach can relieve a designer from time-consuming and difficult tasks. This is especially the case when the purpose is straightforward production of already designed functions or systems. But in early design phases and with the view of the designer as a self-organizing system we want to advocate the idea of methods as primarily learning tools. The learning that takes place <marker type="column" number="2"/><marker type="block"/> can help a designer in different ways. By learning a new method, you extend your language and your repertoire of tools for different design situations. Even more powerful is learning a method to the level where you can go beyond the method as stated. This requires understanding why the different steps in the method are performed, adapting the method to the situation at hand, and exchanging a technique prescribed by the method for another one yielding a better result. At that level of method use, methods need not be confining or overly prescriptive. This means that what the use of methods really contribute to is the development of the designer’s design ability and skills. Another reason for using design methods, and primarily systematic methods, is that design work is always carried out in a social context. The method can serve as a common ground for more successful communication between the stakeholders in a design process. Support for coordination and planning are also benefits stemming from the social use of<marker type="page" number="7"/><marker type="column" number="1"/><marker type="block"/> methods. But it is important to remember that this purpose may easily become counter- productive in early design phases if creativity and boundary expansion are in focus. Methods are bearers of historical knowledge and professional skill. Even if you do not follow a particular method to the letter in your own work, studying it can give valuable knowledge on how other designers formulate their experiences. To read and reflect upon a method description—and most of all to reinvent the underlying rationale—is a way to challenge and develop your own views and assumptions on design. This is best done if you try the method at hand in a serious way. It is in the struggle with the complexity of design situations that the real value of a method can be reflected on. When this happens, your assumptions are chal- lenged and have to be re-evaluated and re-for- mulated. Donald Schön [13] presents the idea of a “reflective practicum” as an approach to reach this situation. As a consequence, the main strength of design methods as discussed here is not in<marker type="column" number="2"/><marker type="block"/> their contribution to quality assurance or repeatability. The idea of detailed method pre- scriptions leading to a repeatable, measurable and in some sense objective design processes is sometimes advocated in our discipline. In our view, the quality of the work in any design process can never be better than the designers and the design context, irrespective of which method is used. The case studies in Löwgren [7] provide examples of this. A method may appear comfortable and secure, and perhaps seem to take part of the responsibility off your shoulders. Unfortunately, this security is not guaranteed. Sooner or later, you will find yourself in a situation in which the method is inadequate. A better mindset is to aim for being always prepared to act, by con- stantly developing your creative and analytical skills, assessment skills and values, rationality and communicativity, expressive and composi- tional skills, and knowledge of technology and of use situations. In this ongoing process, design methods are wielded as one type of tools among many others.</region>
          <region class="unknown" id="49" page="6" column="1">More Method Examples FUTURE WORKSHOPS can be used in short amounts of time when the intended users and stakeholders need to clarify common problems in their current situation, create visions of what future work could be like, and discuss how to realize the visions. Participants switch between small-group and whole-group work in going through phases of critique, imagination, and implementation. An example of future work- shops in software design is Kensing , F., and Madsen, K. (Generating Visions: Future Workshops and Metaphorical Design. In Greenbaum, J., Kyng, M. (eds). Design at Work: Cooperative Design of Computer Systems, Lawrence Erlbaum, Hillsdale, NJ, 1991, 155–168). BRAINSTORMING is probably the best known example of a creative design method and unfortunately also one of the most misused words in professional settings. Its proper use is a three-step method whereby a group of participants is selected, ideas are generated without criticism or analysis, and the results are structured to make them available for subsequent use. METHOD 635 is a variation in which six participants get well acquainted with the problem and each write down three rough ideas for solutions. The ideas are passed on to the next participant, who revises, extends, and modifies them. After five rounds of passing notes, all participants have worked on all the ideas. Brainstorming is well described in Jones, J. C. (Design Methods. 2nd ed. Van Nostrand Reinhold, New York, 1992). Method 635 is described by Pahl and Beitz, who attribute it to Rohrbach (Pahl, G., and Beitz, W. Engineering Design: A Systematic Approach. The Design Council, London, 1988). Edward de Bono has presented many methods concerning general creativity and productivity. Some of them seem clearly relevant for software design as well. A fairly well-known example is THE SIX THINKING HATS. The idea is to make explicit different perspectives that are needed in a design process and to create more unambiguous communication. The white hat is neutral and focused on information and data. The red hat is about feelings and intuition. The black hat is for critical assessment. The yellow is optimistic and positive, and the green is for creativity and growth. The blue hat is the process facilitator.</region>
          <outsider class="DoCO:TextBox" type="page_nr" id="51" page="6" column="2">18</outsider>
          <outsider class="DoCO:TextBox" type="footer" id="52" page="6" column="2">interactions...january + february 1999</outsider>
          <region class="unknown" id="54" page="7" column="1">Another suggestion from de Bono is the RANDOM INPUT method. The problem, or creative focus, where new ideas are needed is simply juxtaposed with a randomly selected word. The new associations that emerge from the surprising combination can lead to new and useful ideas. Both the six thinking hats and random input are described in de Bono, E. (Serious Creativity: Using the Power of Lateral Thinking To Create New Ideas. Fontana, London, 1993). ARGUMENTATIVE TECHNIQUES were originally conceived as consequences of viewing design as a negoti- ation, where there are no right answers but rather a number of more or less valuable solutions supported by more or less well-founded arguments. The issue-based information system (IBIS) notation is based on issues, positions, and arguments. Its aim was to make design more democratic by explicating and documenting the negotiations behind design decisions. Horst Rittel was the main proponent of this view of design and the originator of IBIS in the 1960s. The hypertext adaptation gIbis is described in Conklin, J., and Begeman, M. (gIbis: A Hypertext Tool for Policy Discussion. ACM Transactions on Office Information Systems 6,4: 303–331). More recent examples of argumentative techniques have largely downplayed the ideological aspects of argumentative design to focus instead on documenting the exploration of different ideas and solution alternatives during a design process. The questions, options, criteria (QOC) notation is a well-known example, whereby design decisions are described in terms of Questions, Options for answering the questions, and Criteria by which to assess all the proposed options. QOC clusters can be joined as options spawn new questions, and the resulting network becomes a map of the design space traversed in the design process. The notation and underlying ideas are introduced in Maclean, A. et al. [Questions, Options, and Criteria: Elements of Design Space Analysis. Human-Computer Interaction 6, 3–4 (1991): 201–250].</region>
          <outsider class="DoCO:TextBox" type="footer" id="56" page="7" column="2">interactions...january + february 1999</outsider>
          <outsider class="DoCO:TextBox" type="page_nr" id="57" page="7" column="2">19</outsider>
        </section>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="58" confidence="possible" page="8" column="1">Acknowledgments</h2>
          <region class="DoCO:TextChunk" id="59" page="8" column="1">The article is based on a chapter from Löwgren and Stolterman [8]. The X-ray image example is purely fictitious and used only for purposes of illustration.</region>
        </section>
      </section>
      <section class="DoCO:Bibliography">
        <h1 class="DoCO:SectionTitle" id="60" confidence="possible" page="8" column="1">References</h1>
        <outsider class="DoCO:TextBox" type="sidenote" id="61" page="8" column="1">P HARD</outsider>
        <outsider class="DoCO:TextBox" type="sidenote" id="62" page="8" column="1">USE</outsider>
        <outsider class="DoCO:TextBox" type="sidenote" id="63" page="8" column="1">FULL T O TO</outsider>
        <ref-list class="DoCO:BiblioGraphicReferenceList">
          <ref rid="R1" class="deo:BibliographicReference" id="64" confidence="possible" page="8" column="1">ERMISSION TO MAKE DIGITAL OR COPIES OF ALL OR PART OF THIS WORK FOR PERSONAL OR CLASSROOM IS GRANTED WITHOUT FEE PROVIDED THAT COPIES ARE NOT MADE OR DISTRIBUTED FOR PROFIT OR COMMERCIAL ADVANTAGE AND THAT COPIES BEAR THIS NOTICE AND THE CITATION ON THE FIRST PAGE . COPY OTHERWISE , TO REPUBLISH , POST ON SERVERS OR TO REDIS TRIBUTE TO LISTS , REQUIRES PRIOR SPECIFIC PERMISSION AND / OR A FEE . ACM 1072-5220/99/0100 $5.00</ref>
        </ref-list>
        <outsider class="DoCO:TextBox" type="sidenote" id="65" page="8" column="1">©</outsider>
        <region class="DoCO:TextChunk" id="66" confidence="possible" page="8" column="1">1. Butler, K. Usability Engineering Turns 10. interactions, iii.1, (January 1996), 59–75. 2. Cross, N. Developments in Design Methodology. Wiley, Chichester, UK, 1984. 3. de Bono, E. Serious Creativity: Using the Power of Lateral Thinking To Create New Ideas. Fontana, London, 1993. 4. Jones, J. C. Design Methods. 2nd ed. Van Nostrand Reinhold, New York, 1992. 5. Kyng, M. Scandinavian Design: Users in Product Development. In Proceedings of CHI’94: Human Factors in Computing Systems. ACM Press, New York, 1994, 3–9. 6. Landqvist, J. Vilda idéer och djuplodande analys: Om designmetodikens grunder. (Crazy Ideas and Penetrating Analysis: On the Foundations of Design Methodology.) Carlsson, Stockholm, 1994. In Swedish. 7. Löwgren, J. Design for Use Quality in Professional Software Development. In Proceedings of the Second</region>
        <region class="unknown" id="67" page="8" column="1">PSST. have you heard? ACM has a digital library. The Ultimate online resource www.acm.org / dl</region>
        <region class="DoCO:TextChunk" id="69" confidence="possible" page="8" column="2">Conference of the European Academy of Design (Stockholm, April 1997). See <ext-link ext-link-type="uri" href="http://www.svid.se/ead-" id="68">http://www.svid.se/ead-</ext-link> programme.htm. 8. Löwgren, J., Stolterman, E. Design av informationste- knologi: Materialet utan egenskaper. (Designing Information Technology: The Material without Properties.) Studentlitteratur, Lund, Sweden, 1998. In Swedish. 9. Lundell, J., Williams, D. Integrating QFD into Software Development: A Case Study. In Proceedings of the Fifth International Conference on Human-Computer Interaction (HCI International ’93), North-Holland, Amsterdam, 404–409. 10. Margolin, V., ed. Design Discourse: History, Theory, Criticism. University of Chicago Press, Chicago, 1989. 11. Margolin, V., Buchanan, R., eds. The Idea of Design. MIT Press, Cambridge, MA, 1995. 12. Rasmussen, J., Goodstein, L. Information Technology and Work. In Helander, M., (ed.) Handbook of Human-Computer Interaction, Elsevier, Amsterdam, 175–201. 13. Schön, D. Educating the Reflective Practitioner. Jossey-Bass Publishers, San Francisco, 1987. 14. Winograd, T., Bennett, J., De Young, L., and Hartfield, B., eds. Bringing Design to Software. ACM Press, New York, 1996.</region>
      </section>
    </body>
  </article>
</pdfx>
