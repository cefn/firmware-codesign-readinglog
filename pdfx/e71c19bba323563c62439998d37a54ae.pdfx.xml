<?xml version='1.0' encoding='UTF-8'?>
<pdfx xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://pdfx.cs.man.ac.uk/static/article-schema.xsd">
  <meta>
    <job>a426e058ef0d86afac4806ce587e30750b5a596dc9bfa00f92f7f93a46c08255</job>
    <base_name>62gj</base_name>
    <doi>http://dx.doi.org/10.1145/800045.801579</doi>
    <warning>Original PDF was found to be an image-based/possible OCR document. Output quality may be degraded.</warning>
  </meta>
  <article>
    <front class="DoCO:FrontMatter">
      <region class="DoCO:TextChunk" id="1" confidence="possible">RESEARCH CONTRBUTIONS</region>
      <region class="DoCO:TextChunk" id="2" confidence="possible">Human Aspects of Computing Henry Ledgard Editor</region>
      <title-group>
        <article-title class="DoCO:Title" id="3">Designing for Usability: Key Principles and What Designers Think</article-title>
      </title-group>
      <contrib-group class="DoCO:ListOfAuthors">
        <contrib contrib-type="author">
          <name id="4">JOHN D. GOULDand CLAYTON LEWIS</name>
        </contrib>
      </contrib-group>
      <abstract class="DoCO:Abstract" id="5">ABSTRACT: This article is both theoretical and empirical. Theoretically, it describes three principles of system design which we believe must be followed to produce a useful and easy to use computer system. These principles are: early and continual focus on users; empirical measurement of usage; and iterative design whereby the system (simulated, prototype, and real) is modified, tested, modified again, tested again, and the cycle is repeated again and again. This approach is contrasted to other principled design approaches, for example, get it right the first time, reliance on design guidelines. Empirically, the article presents data which show that our design principles are not always intuitive to designers; identifies the arguments which designers often offer for not using these principles-and answers them; and provides an example in which our principles have been used successfully. Any system designed for people to use should be easy to learn (and remember], useful, that is, contain functions people really need in their work, and be easy and pleasant to use. This article is written for people who have the responsibility and/or interest in creating computer systems (or any other systems) with these characteristics. In the first section of this article we briefly mention three principles for system design which we believe can be used to attain these goals. Our principles may seem intuitive, but system designers do not gener- ally recommend them, as results of surveys reported in Section 2 show. The recommendations of actual designers suggest that they may sometimes think they are doing what we recommend when in fact they are not. In Section 3 we contrast some of their responses with what we have in mind to provide a fuller and clearer description of our principles. In Section 4 we consider why designers might not actually be using our design</abstract>
      <region class="unknown" id="6">0 1985 ACM 0001.0782,‘85/0300-0300 750</region>
      <region class="DoCO:TextChunk" id="7" confidence="possible">principles. In Section 6 we elaborate on the three principles, showing how they form the basis for a general methodology of design. In Section 6 we describe a suc- cessful example of using our recommended methodology in actual system design, IBM’s Audio Distribution System (ADS), and the advantages that accrued as a result. 1. THE PRINCIPLES We recommend three principles of design. Early Focus on Users and Tasks First, designers must understand who the users will be. This understanding is arrived at in part by directly studying their cognitive, behavioral, anthropometric, and attitudinal characteristics, and in part by studying the nature of the work expected to be accomplished. Empirical Measurement Second, early in the development process, intended users should actually use simulations and prototypes to carry out real work, and their performance and reactions should be observed, recorded, and analyzed. Iterative Design Third, when problems are found in user testing, as they will be, they must be fixed. This means design must be iterative: There must be a cycle of design, test and measure, and redesign, repeated as often as necessary. 2. WHAT SYSTEM DESIGNERS AND PROGRAMMERS ACTUALLY SAY We began recommending these principles in the 1970’s. Often the reaction is that they are obvious. Neverthe- less, they are not usually employed in system design. Why? We wondered whether or not these principles were really obvious, or whether or not they just</region>
      <outsider class="DoCO:TextBox" type="page_nr" id="8">300</outsider>
      <outsider class="DoCO:TextBox" type="footer" id="9">Communications of the ACM</outsider>
      <outsider class="DoCO:TextBox" type="footer" id="10">March 198.5 Volume 28 Number 3</outsider>
      <outsider class="DoCO:TextBox" type="header" id="11">ResearchContributions</outsider>
      <region class="DoCO:TextChunk" id="13">seemed obvious once presented. To find out, during 1981-1982 we asked five groups of systems planners, designers, programmers, and developers to write down the sequence of five (or so) major steps one should go through in developing and evaluating a new computer system for end users. These people were attending a human factors talk, and did this just prior to its beginning. We suggested that they use an office system or point-of-sale terminal as an example. These 447 participants provide a particularly good test of how intuitive, obvious, regularly advocated, or regularly practiced our design principles are, for they are among the very people who design computer systems for people to use. Further, since they were attending a human factors talk, they would likely be biased to mention human factors issues. Each person’s responses were graded in- dependently by three or more judges (only one of whom was a human factors person), and disagreements were settled jointly.’ Grading was very liberal: we gave credit for even the simplest mention relating to any one of our four principles, regardless how impoverished or incomplete the thought was. <xref ref-type="table" rid="TI" id="12" class="deo:Reference">Table I</xref> shows the key result. Most participants did not mention most of our four design principles. Twenty-six percent did not mention any of the four principles, and another 35 percent mentioned only one. Just 2 percent made any mention of all four. These percentages would have been much lower had we used a more stringent grading procedure. As to the specific principles mentioned, 62 percent mentioned something about early focus on users; 40 percent mentioned something about empirical measurement, that is, behaviorally testing the system (or a simulation or prototype of it) on people (regardless of their characteristics); and 20 percent mentioned something about iterative design, that is, modifying the system based on these results. The intent here is not to single out as “bad folks” all those people responsible for the creation of a system, whom we will collectively refer to as “designers.” Principles of design are arguable, of course. Ours are not universal truths. Had human factors people, for example, been asked the same questions, the percents mentioning each principle might not have differed from those observed. Indeed, some other human factors people recommend design approaches that have little in common with what we recommend. This can be seen in several papers in recent conference proceedings cov- ering the human factors of system design, for example,</region>
      <region class="unknown" id="14">of</region>
      <region class="DoCO:TextChunk" id="15" confidence="possible">1301and of</region>
      <section class="DoCO:Section">
        <h2 class="DoCO:SectionTitle" id="16" confidence="possible" page="2" column="1">The Proceedings the Human Factors Society Meetings The Proceedings CH183 Human Factors in Computing Systems Meetings [29].</h2>
        <region class="DoCO:TextChunk" id="17" confidence="possible" page="2" column="1">Of course these survey results cannot be assumed to indicate what designers actually do, or would do, with real design tasks. They do show, however, that our principles ire not obvious (at least before they are presented), consistent with the observation that they are</region>
        <region class="unknown" id="18" page="2" column="1">’ For helping us grade these surveys. we thank Lizette Alfaro. Art Benjamin. Steve Corsaro. and Jennifer Stolarz.</region>
        <region class="DoCO:FigureBox" id="Fx19">
          <image class="DoCO:Figure" src="62gj.page_002.image_02.png" thmb="62gj.page_002.image_02-thumb.png"/>
        </region>
        <region class="DoCO:TableBox" id="TI">
          <caption class="deo:Caption" id="20" page="2" column="2">TABLE I.</caption>
        </region>
        <region class="unknown" id="21" page="2" column="2">Summary of Six Surveys in Which 447 People Attending Classes for Systems Planners, Programmers, Designers, and Developers Briefly Wrote the Key Steps One Should Go Through in Developing and Evaluating a Computer System for End Users Pe&amp;ent of respondents mentioning a given numberof principles: Number of principles 0 1 2 3 Respondents (%) 26 35 24 16 I 1</region>
        <region class="DoCO:TableBox" id="Tx22">
          <content>
            <h1 class="table"> Percentof respondents mentioning each principle:</h1>
            <table class="DoCO:Table" number="I" page="2">
              <thead class="table"/>
              <tbody>
                <tr class="table">
                  <td class="table"> Early focus</td>
                  <td class="table"> Empirical</td>
                  <td class="table"> Iterative</td>
                </tr>
                <tr class="table">
                  <td class="table"> on users</td>
                  <td class="table"> measurement</td>
                  <td class="table"> design</td>
                </tr>
                <tr class="table">
                  <td class="table"> 62</td>
                  <td class="table"> 40</td>
                  <td class="table"> 30</td>
                </tr>
                <tr class="table.strange">
                  <td class="table.strange"> applied. Our</td>
                  <td class="table.strange"> experience is that</td>
                  <td class="table.strange"> even after hear-</td>
                </tr>
                <tr class="table.strange">
                  <td class="table.strange"> them, people often</td>
                  <td class="table.strange"> do’not understand</td>
                  <td class="table.strange"> their</td>
                </tr>
                <tr class="table.strange">
                  <td class="table.strange"></td>
                  <td class="table.strange"></td>
                  <td class="table.strange"></td>
                </tr>
                <tr class="table.strange">
                  <td class="table.strange"></td>
                  <td class="table.strange"></td>
                  <td class="table.strange"></td>
                </tr>
              </tbody>
            </table>
          </content>
          <region class="TableInfo" id="23" confidence="possible" page="2" column="2">Percentof respondents mentioning each principle: Early focus Empirical Iterative on users measurement design 62 40 30</region>
          <region class="TableInfo" id="24" confidence="possible" page="2" column="2">rarely applied. Our experience is that even after hearing them, people often do’not understand their full force.</region>
          <region class="TableInfo" id="25" confidence="possible" page="2" column="2">3.</region>
        </region>
      </section>
    </front>
    <body class="DoCO:BodyMatter">
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="26" page="2" column="2">CONTRASTS BETWEEN WHAT WE MEAN AND WHAT WAS SAID</h1>
        <region class="DoCO:TextChunk" id="27" page="2" column="2">A closer look at the survey responses reinforces the conclusion that these “common sense” design principles are not fully understood by many designers, even when they mention them. It is our experience that people sometimes lack the ability to differentiate between what we recommend and what they do. . With respect to our survey results, there are instructive distinctions between comments which we gave credit for and what we actually recommend. In many cases, these comments may appear similar, but they differ significantly in intent, how they would be carried out, and, presumably, in their impact. Thus, at the risk of appearing overly harsh, we point out some of these distinctions to clarify what we have in mind. These distinctions are often overlooked, sometimes leading designers to believe they are following the principles that we recommend when in fact they are not.</region>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="28" confidence="possible" page="2" column="2">Early Focus on Users</h2>
          <region class="DoCO:TextChunk" id="34" page="2" column="2">The design team should be user driven. We recommend understanding potential users, versus “identifying,” “de- scribing,” “ stereotyping,” and “ascertaining” them, as respondents suggested. We recommend bringing the design team into direct contact with potential users, as opposed to hearing or reading about them through human intermediaries, or through an “examination of user profiles.” We recommend interviews and discus- sions with potential users, and actual observations, by the design team, of users on the present version of a system. Perhaps users could try to train designers to use an existing system, and thereby designers could learn a lot about the users. (Occasionally, a proposed system will be so radical that a “present system” may not exist. We still recommend talking to the intended users, and understanding how they go about their work and what their problems are.) These interviews should be conducted prior to system design, instead of first designing the system and then subsequently “presenting,” “reviewing,” and “verifying” the design with users, or “getting users to agree” to, or to “sign off” on the design. <marker type="page" number="3"/><marker type="column" number="1"/><marker type="block"/> As part of understanding users, this knowledge must be played against the tasks that users will be expected to perform. Other disciplines have also become aware of the absence of user involvement in design. For example, the American Association for the Advancement of Science and the National Science Foundation have established a project to address the fact that too often technologies are developed for the disabled with no input from the disabled [31]. One way to increase the saliency and importance of usability issues in designers’ minds is to have a panel of expected users (e.g., secretaries) work closely with them during early formulation stages. Almost no one recommended this, not even for only brief periods of time. We call this “interactive design,” and we recommend that typical users (e.g., bank tellers) be used, as opposed to a “group of a variety of experts” (e.g., super- visors, industrial engineers, and programmers). We recommend that these potential users become part of the design team from the very outset when their perspectives can have the most influence, rather than using them post hoc as part of an “analysis team (of) end user representatives.” Another value of this approach, especially for the design of an in-house system, is that it allows potential users to participate in the design of a system that they will ultimately use (sometimes called “participatory design”). Some respondents recommended that potential users “review, ” “sign off on,” or “a,gree” to the design before it is coded. This can be useful, but does not have the full shaping force on designers’ views which an earlier asso- ciation would have had. Our notion is not merely “to get users to agree” to a system design, which smacks of post hoc legalese, but to create a situation in which potential users can instill their knowledge and concern into the design process from the very beginning. Being concerned about the “human factors of noise and light levels and safety” is important, but designers must go beyond this, understanding cognitive and emo- tional characteristics of users as they relate to a proposed system. Often designers build upon previous releases (e.g., of computer systems, washing machines, cars) or add a part to an existing system. Thus, there should be little difficulty in identifying users and talking with them. We have been told that when one is at the very earliest stages of design in a new area, however, it may be hard to understand who the users will be or to interact with them. When this is so, it strengthens the arguments for empirical measurement and iterative design.</region>
          <outsider class="DoCO:TextBox" type="footer" id="30" page="2" column="2">March 1985 Volume 28 Number 3</outsider>
          <outsider class="DoCO:TextBox" type="footer" id="31" page="2" column="2">Communicationsof the ACM</outsider>
          <outsider class="DoCO:TextBox" type="page_nr" id="32" page="2" column="2">301</outsider>
          <outsider class="DoCO:TextBox" type="header" id="33" page="3" column="1">Research Contributions</outsider>
        </section>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="35" confidence="possible" page="3" column="1">Empirical Measurement</h2>
          <region class="DoCO:TextChunk" id="38" page="3" column="1">Here we emphasize two factors: actual behavioral measurements of learnability and usability, and conducting these experimental and empirical studies very early in the development process. We gave credit for any mention of a user test-whether or not it was early or appropriately conceived, and even if it was suggested by context alone. Several participants who received credit for mentioning “test” seemed to have in mind a <marker type="column" number="2"/><marker type="block"/> systemtest rather than a user test, for example, “test for system response, . . , swapping time.” “Build(ing) a prototype to study it (emphasis ours) experimentally” (e.g., to study memory access speed, system reliability) is different from building a protytype to study how people will use and react to it and the training approaches and materials. It is not a question of “using a prototype to match against user require- ments,” but rather a question of finding out how easily people can learn and use that prototype. The first is an analytic question; the second is an empirical question. “Test(ing) the (completed) system-use it by ourselves” is good, but is not a substitute for testing it (and a series of previous prototypes) on the actual user audience. “Reviewing” or “demonstrating” a prototype system for typical users and getting their reaction to it can result in misleading conclusions. What is required is a usability test, not a selling job. People who have developed a system think differently about its use [25], do not make the same mistakes, and use it differently from novices. Users should be given simple tasks to carry out, and their performance, thoughts, and attitudes should be recorded and analyzed.</region>
          <region class="DoCO:FigureBox" id="Fx37">
            <image class="DoCO:Figure" src="62gj.page_003.image_03.png" thmb="62gj.page_003.image_03-thumb.png"/>
          </region>
        </section>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="39" confidence="possible" page="3" column="2">Iterative Design</h2>
          <region class="DoCO:TextChunk" id="40" page="3" column="2">The person who wrote “make trial run of prototype and incorporate changes” makes no reference to behavioral evaluation and improvements. “Build prototype, code software, write documentation, and review” does not explicitly acknowledge the need to incorporate results of behavioral testing into the next version of the system. Finally, “if time permits, iterate the design . . .I’ is not sufficient or acceptable as a design philosophy. Even where iterative design was mentioned, many people seemed to feel that a single iteration or revision would be sufficient. In answer to our question about the key steps in the development process,some people wrote goals for a system. Making a system “easy to use,” “user friendly,” “easy to operate,” “simple,” “responsive,” and “flexible” are goals, indeed very difficult goals to reach. What is needed is a process to ultimately ensure meeting these goals. Almost no one mentioned establishing testable behavioral specifications (see below) early in the development process to see if, in fact, general behavioral goals are being met. A Comment. One might think that it has been nit- picking or even unfair to draw upon distinctions between comments that the respondents wrote rather hastily and the points that we are trying to make. However, our experience is that these comments provide a representation of how designers of all kinds of systems (whether they are programmers of computer systems, planners of educational curriculum, authors of text- books, architects of buildings, builders of cars, or lec- turers) often think and how they view ultimate users in relation to their work. They are consistent with what other designers of computer systems say when asked how they think about design [22]. But does knowing this give us greater ability to design better systems? We</region>
          <outsider class="DoCO:TextBox" type="page_nr" id="41" page="3" column="2">302</outsider>
          <outsider class="DoCO:TextBox" type="footer" id="42" page="3" column="2">Communications of the ACM</outsider>
          <outsider class="DoCO:TextBox" type="footer" id="43" page="3" column="2">March 1985 Volume 28 Number 3</outsider>
          <outsider class="DoCO:TextBox" type="header" id="44" page="4" column="1">Research Contributions</outsider>
          <region class="DoCO:TextChunk" id="45" confidence="possible" page="4" column="1">think it does because we can describe another way to do it and ask why this other way is not followed.</region>
          <region class="unknown" id="46" page="4" column="1">4.</region>
        </section>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="47" page="4" column="1">WHY THE PRINCIPLES ARE UNDERVALUED</h1>
        <region class="DoCO:TextChunk" id="48" page="4" column="1">Why do these principles seem obvious once you hear them, but do not seem to be recommended or followed in practice? The survey responses indicate that these principles are not regularly suggested and that they are not really obvious. Our experience is that they are sel- dom applied. In this section we try to answer this question by identifying five categories of reasons. First, the principles may not be worth following. Second, there is con- fusion with similar but critically different ideas. Third, the value of interaction with users is misestimated. Fourth, competing approaches make more sense. Fifth, the principles are impractical. We see weaknesses in these reasons or objections, and we suggest ways of addressing them.</region>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="49" confidence="possible" page="4" column="1">Not Worth Following</h2>
          <region class="DoCO:TextChunk" id="50" page="4" column="1">As we said earlier, principles of design are arguable, including these, and a variety of other design approaches have been recommended. Some designers, no doubt, understand our recommendations but question their value. Such objections will be resolved one way or the other as the recommendations are more fully tested in practice.</region>
        </section>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="51" confidence="possible" page="4" column="1">Confusion with Similar but Critically Different Ideas</h2>
          <region class="DoCO:TextChunk" id="52" page="4" column="1">It is our experience that designers often have difficulty differentiating between what we recommend and similar but critically different ideas. The survey results are consistent with this experience. Sometimes designers believe they are following what we recommend when in fact they are not. Sometimes designers confuse the intention to carry out user testing with the testing itself. We hope these problems will resolve themselves over time. If designers have more interaction with users, and if they carry out more empirical evaluations of their work, we expect the value of these approaches, and their relationship to other methods, to become clearer.</region>
        </section>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="53" confidence="possible" page="4" column="1">The Value of Interaction with Users is Misestimated</h2>
          <region class="DoCO:TextChunk" id="56" page="4" column="1">User Diversity Is Underestimated. Because most designers have only limited contact with users (and this is often centered on topics of the designers own expertise and not that of the users), they simply do not realize how widely users differ, and, especially, how different many users are from most designers. If dashing off a few lines of code is trivial for a designer, then that designer is not likely to imagine that this can be extremely difficult for someone else. When users do have trouble, designers are sometimes tempted to think they are “stupid.” It is difficult to give fair weight to the years of training and experience that underlie one’s own ability. But more important, it is almost impossible to think about whether or not someone else will haire trouble if you never encounter any yourself. In observ- <marker type="column" number="2"/><marker type="block"/> ing complete novices learning to use text editors [25] or messagesystems [19], we have often been amazed as they encounter major problems that we did not antici- pate, or when problems that seemed simple to us were impossible for them to recover from. User Diversity Is Overestimated. Sometimes we are told that people are so different that it makes no sense to conduct tests with only a few people. One would have to test hundreds of people and then the result would be so variable as to be useless. It is true that testing only a small sample, as is often necessary for practical reasons, cannot reveal all the problems that will arise with a design. But it is much better to identify some of the problems that some users will have than not to identify any. Further, our experience is that problems are not as idiosyncractic as is sometimes thought. The same problem, even a completely unanticipated one, often crops up for user after user.</region>
          <region class="DoCO:FigureBox" id="Fx55">
            <image class="DoCO:Figure" src="62gj.page_004.image_04.png" thmb="62gj.page_004.image_04-thumb.png"/>
          </region>
        </section>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="57" confidence="possible" page="4" column="2">Belief That Users Do Not Know What They Need.</h2>
          <region class="DoCO:TextChunk" id="58" page="4" column="2">This objection points up a genuine problem: Getting useful design information from prospective users is not just a matter of asking. Many users have never consid- ered alternate or improved ways of performing their tasks and are unaware of the options available for a new design. Further, in trying to communicate, designers may unwittingly intimidate users, and users may unfortunately become unresponsive. One way around this is to present new ideas in a way that makes it easy for users to relate them to their concerns. One approach, used with a text-editing system at Wang Laboratories (personal commur)ication, 1980), is to write a user manual and get reactions to it, as the first stage in design. Another method is to construct detailed scenarios showing exactly how key tasks would be performed with the new system, as was done for IBM’s ADS [19]. Another approach is to simulate the user interface of a proposed system [21, 231. These approaches are valuable even if no user reaction is sought: It is extremely difficult for anybody even its own designers, to understand an interface proposal, without this level of description. Putting the design in intelligible form is not the only difficulty in getting user reaction. Users may endorse a proposal uncritically, presuming that the technical “ex- perts” know more than they do about their needs. In the course of extended give-and-take with designers, users may come to know too much: They may understand the technical issues so well that they can no longer detect the difficulties in comprehension that others users, who do not have the benefit of weeks of dialogue with the designers, will face. The effect of these problems is that interacting with users during design cannot in itself ensure a good design. But at least some design issues will be defined and dealt with sooner and more effectively if user knowledge is brought to bear from the start.</region>
        </section>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="59" confidence="possible" page="4" column="2">Belief That My Job Does Not Require It or Permit It.</h2>
          <region class="DoCO:TextChunk" id="60" confidence="possible" page="4" column="2">Sometimes organizational arrangements isolate designers from contact with users, or place the responsibility</region>
          <outsider class="DoCO:TextBox" type="footer" id="61" page="4" column="2">March 1985 Volume 28 Number 3</outsider>
          <outsider class="DoCO:TextBox" type="footer" id="62" page="4" column="2">Communications of the ACM</outsider>
          <outsider class="DoCO:TextBox" type="page_nr" id="63" page="4" column="2">303</outsider>
          <outsider class="DoCO:TextBox" type="header" id="64" page="5" column="1">Resealvh Contributions</outsider>
          <region class="DoCO:TextChunk" id="65" page="5" column="1">for usability entirely elsewhere, with no role for others. Designers find themselves preoccupied with meeting a schedule for their individual system ingredient. There is no time for contact with users until their work is finished-which never quite happens. A rigid development process leaves no room for new approaches. We have been told by a designer that it is sometimes difficult to get customers to commit productive users to spend sufficient time interacting on the design of a future system. When this is the case, designers can use techniques mentioned in thi.s article that may require less time, for example, get reactions to an early user manual, help-line service, o:r printed scenarios of how the user interface might work. Competitive necessity will eventually break down these obstacles and traditions. Good user-oriented systems cannot be built from local optimization of individual system ingredients. In the meantime, other ways to do the needed work can often be found. Small-scale usability evaluations can often be carried out without requiring much additional resource. Marketing or planning people are often eager to have development people participate in customer visits where their technical skills can be very helpful.</region>
        </section>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="66" confidence="possible" page="5" column="1">Competing Approaches</h2>
          <region class="DoCO:TextChunk" id="69" page="5" column="1">Belief in the Power of Reason. If system design were fundamentally a rational analysis of how a task should be done, then there would be no need to involve users. Why muddy the waters by getting information about existing, and probably irrational, practices? There are two problems with rational analysis as the sole basis of design. First, it leaves things out: Rational analysis does not tell you what you have to analyze. Here is an illustration. Some designers have been puzzled that word processing systems have not driven out the typewriter. Why do many offices have a typewriter and a word processor side by side? Does a word processor not han- dle all “document creation”? Just thinking logically about document creation is unlikely to reveal the key facts. But a few minutes of observation of real office work shows some of the things that document creation leaves out. Filling in forms is much easier with a typewriter. For very short documents, such as buck slips or telephone messages,the overhead of a typical word processor is unacceptable. One cannot discover the ex- istence of these critical cases by armchair reflection on office work. A second problem with relying only on reason is that systems almost always have to interact with preexisting work methods, and mismatc:hes can be major problems. Even if a new system is intended to entirely replace former methods, there is still the problem of relating peoples’ comprehension of the new ways to their established habits of thought. The problems surrounding this process are not subject to a priori rational analysis, but must be explored empirically, that is, by having actual users try out the new system under realistic conditions. Listening to users’ comments is a good way to do this. <marker type="column" number="2"/><marker type="block"/> Rational analysis is, of course, important, for without it we are unlikely to create new innovative systems. Analytic approaches should be used when they are ap- plicable, but they cannot be seen as a substitute for empirical methods.</region>
          <region class="DoCO:FigureBox" id="Fx68">
            <image class="DoCO:Figure" src="62gj.page_005.image_05.png" thmb="62gj.page_005.image_05-thumb.png"/>
          </region>
        </section>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="70" confidence="possible" page="5" column="2">Belief That Design Guidelines Should Be Sufficient.</h2>
          <region class="DoCO:TextChunk" id="71" page="5" column="2">There is no handbook of operating characteristics for the human mind. Guidelines for user interface design do exist (e.g., [g]), and they can be useful. Certainly, for many designers, guidelines can help get the first version of a prototype system closer to the final desired version than if they were not used. However, they provide only general constraints on design. No matter how conscientious a designer is in finding and following this distilled wisdom, the resulting design may be very good or very bad. One limitation of guidelines is that they cannot deal with choices that are highly dependent on context, as many of the important choices in interface design are. For example, a guideline cannot recommend that spe- cial purpose keys be used instead of typed commands because the choice depends on whether or not users are touch typists, whether or not it is possible for the system to distinguish commands from other entries if they are typed, whether or not the command set is extensible, and many other aspects of the situation. Ex- isting guidelines are often based on informed opinion rather than data or established principles. Very few design choices have been investigated in a controlled way. Research cannot solve either of these problems in the foreseeable future. Cognitive psychologists agree that human performance adapts strongly to the details of the task environ- ment. We do not understand this adaptation well enough to predict the effects of most design choices in any one given situation, let alone form general conclusions about them. The same ignorance argues against conducting experiments to validate existing guidelines about which there is doubt. Feasible experiments could only investigate a choice in a few contexts, probably not increasing our confidence in generalizing about it very much. Psychology is not close to being able to develop significantly improved guidelines to overcome these limitations. Human factors can provide a process by which usable and useful systems can be designed, but cannot provide design guidelines in enough detail to determine how a system should ultimately appear to users. We feel, at present, that guidelines should be viewed as an informal collection of suggetions, rather than as distilled science. Designers will have to make many choices on their own, and be prepared to test their work empirically.</region>
        </section>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="72" confidence="possible" page="5" column="2">Belief That Good Design Means Getting It Right the</h2>
          <region class="DoCO:TextChunk" id="80" page="5" column="2">First Time. “Getting it right the first time” seems like a laudable goal, and is, in fact, an alternative design philosophy to our own: but experience shows it is not achievable in user interface design. Certainly careful design work pays off, and the need to iterate is not a license to be sloppy. Assuming that iteration will not be <marker type="page" number="6"/><marker type="column" number="1"/><marker type="block"/> needed, when laying out a schedule and choosing implementation methods, is asking for disaster in user interface design. Even the “zero defects” approach, developed by Crosby [6] for general quality control, advo- cates the need for evaluative testing and empirical measurement. It does not simply assert that one can, from the outset, create a design for zero defects. “Getting it right the first time” plays a very different role in software design which does not involve user interfaces than it does in user interface design. This may explain, in part, the reluctance of designers to, relinquish it as a fundamental aim. In the design of a compiler module, for example, the exact behavior of the code is or should be open to rational analysis. Even those factors which cannot be predicted exactly, such as frequencies of data with particular characteristics, may be amenable to statistical treatment. The choice of algorithms can and should be anchored securely in a reliable analysis of the data, the transformations to be carried out, and the performance characteristics of the system. Good design in this context is highly analytic, and emphasizes careful planning. Designers know this., Adding a human interface to the system disrupts this picture fundamentally. A coprocessor of largely unpredictable behavior (i.e., a human user) has been added, and the system’s algorithms have to mesh with it. There is no data sheet on this coprocessor, so one is forced to abandon the idea that one can design one’s algorithms from first principles. An empirical approach is essential. The involvement of human users escalates the need for an empirical approach well above the usual requirements for testing to make sure a system works. When large diverse groups are involved in developing a system, we have observed a practice of “freezing the user interface” early in the development process (even prior to coding it). Apparently this reflects the need to have some aspect of the system fixed or stable as the various groups then proceed somewhat indepen- dently with their own work. But the user interface is exactly that part of the system which should be open to change. The best this approach can achieve is that a system can get programmed in an error-free manner, not that the resulting interface will be of high quality. It is impossible to design the system right the first time because this is based on the assumption of a perfect fore- cast of the best user interface-something which can only be determined empirically. Further, fixing the user interface early assumes nothing will be learned over the next two years, or so, of development. When one is an outside contractor (rather than in an internal system development organization), it is often difficult to get a customer to sign a contract that includes the flexibility required in iterative design. There is, typically, insistence, we are told, on a two-stage, “preliminary design” and “final design” hierarchy, with schedule rigidity that often precludes proper accommo- dation of usability tests results. Ignoring the need for iterative design is perhaps even more disastrous here since geographic remoteness may further reduce re-<marker type="column" number="2"/><marker type="block"/> quired communication and observations needed to attain good usability. Our system design philosophy is neutral vis-a-vis some other well-known strategies for program design, for example, top-down design [7], top-down testing, or structured programming [8]. Yourdon and Constantine [35] have reviewed these and other programming design strategies. The small group aspect of chief programmer teams [l] is important, we believe, in providing consistency and simplicity in overall system usage.</region>
          <outsider class="DoCO:TextBox" type="page_nr" id="74" page="5" column="2">304</outsider>
          <outsider class="DoCO:TextBox" type="footer" id="75" page="5" column="2">Communications of the ACM</outsider>
          <outsider class="DoCO:TextBox" type="footer" id="76" page="5" column="2">March 1985 Volume 28 Number 3</outsider>
          <outsider class="DoCO:TextBox" type="header" id="77" page="6" column="1">Research Contributions</outsider>
          <region class="DoCO:FigureBox" id="Fx79">
            <image class="DoCO:Figure" src="62gj.page_006.image_06.png" thmb="62gj.page_006.image_06-thumb.png"/>
          </region>
        </section>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="81" confidence="possible" page="6" column="2">Impractical Belief That the Development Process Will Be</h2>
          <region class="DoCO:TextChunk" id="87" page="6" column="2">Lengthened. In a competitive world, products are always developed under time pressure. Schedules are critical. Designers sometimes fear that their schedules will not be met if behavioral testing is done. Will the development process not be lengthened by creating a prototype? Will the development process not be lengthened further by doing user tests with it? Will the development process not be lengthened even further by redesigning on the basis of the user results? We feel that these questions reflect two underlying assumptions. The first is that usability work must be added to the end of the development cycle, as opposed to over- lapped with it. The second is that responding to tests must be time consuming. With respect to this first assumption, one can do user testing before a system is built, and continue this work throughout the development process. One can create paper and pencil tasks that test critical features of the interface such as the syntax of commands. IBM’s “Query-by-Example” [36] was evaluated by asking users to write down the queries they would construct to answer questions given to them in English [88]. This was done before a single line of code was written. It was therefore done without the benefit of system feedback [33] which was studied in later experiments [3, 51. More comprehensive testing can be done by construct- ing a simulated system. For example Gould, Conti, and Hovanyecz [21] did extensive testing of a “listening typewriter,” a device that would use speech recognition to give real-time visual feedback during dictation, by using a human typist in the computer feedback loop. Kelley [23] used a computerized simulation of a calen- daring system in which the experimenter could invisi- bly enter the user-system dialogue whenever the computerized system would not give an appropriate response. Here, again, both of these simulations were done before a line of code was written for the real systems. Once a running prototype exists, experimental tests with real users can be conducted, followed by empirical (field) studies of training, user interface, and reading materials used together. It is our personal experience and observation that building simulated or informal prototypes, rather than delaying or lengthening system development, actually helps get a new project off the ground, gives it something tangible for others to see, and stimulates thought and progress. <marker type="page" number="7"/><marker type="column" number="1"/><marker type="block"/> We have been told that with some new systems the main issue is sometimes one of technical feasibility or capability of the technology to perform in a certain way. “How can this be explored without building a box?” we have been asked. The answer is that is exactly what was done in the Thomas and Gould [33], the Gould, Conti, and Hovanyecz [Zl], and the Kelley [23] simulation studies. While some aspects of new technology may be difficult to simulate we have never encoun- tered a design problem in which at least some important aspects could not be uslefully simulated. With respect to the second assumption, that responding to the user test results must be time consuming and expensive, it is possible to build a system so that one can do this quickly and easily. The implementation is structured so that the user interface can be changed without changing the implementation of underlying services. In a sense, the system becomes its own prototype, in that it is easy to construct and evaluate alternative designs. IBM’s ADS, discussed in more detail below, has this structure. Even when these approaches are taken, there is no denying that user testing still has a price. It is nowhere near as high as is commonly supposed, however, and it is a mistake to imagine that one can save by not paying this price. User testing will bappen anyway: If it is not done in the developer’s lab, it will be done in the cus- tomer’s office. Brooks [4] has pointed out that everyone builds a prototype. The only question is whether or not, in the case of vendors, they also market it as a product, or in the case of in-house development, they give it to their users. The price iS poor quality, extra (unanticipated) customer expense, and extra (and unanticipated) vendor costs. Changes that must be made after the product is delivered are, of course, much more expensive than those made even late in development. They must be done piecemeal, and under pore constraints of compatibility, in that changes have to be minimized to avoid disrupting users. Fixes are likely to be superficial, and quality will continue to suffer. Heavy reliance on initial customer feedback, rather than early empirical simulations, prevents innovation because too many constraints then exist, making fresh substantially different approaches impossible.</region>
          <outsider class="DoCO:TextBox" type="footer" id="83" page="6" column="2">March 1985 Volume 28 Number 3</outsider>
          <outsider class="DoCO:TextBox" type="footer" id="84" page="6" column="2">Communications of the ACM</outsider>
          <outsider class="DoCO:TextBox" type="page_nr" id="85" page="6" column="2">305</outsider>
          <outsider class="DoCO:TextBox" type="header" id="86" page="7" column="1">Research Contributions</outsider>
        </section>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="88" confidence="possible" page="7" column="1">Belief That Iteration Is Just Expensive Fine-Tuning.</h2>
          <region class="DoCO:TextChunk" id="89" page="7" column="1">Our philosophy is not just a trivial expensive matter of “fine-tuning,” but a basic design philosophy to be contrasted with other principled design philosophies. An iterative design philosophy may seem expensive, but with the present state of understanding about user interface design, it is the only way to ensure excellent systems. The three principles we outlined can be extended and coordinated to form an overall approach to user interface development, as is partially done in the next section.</region>
          <region class="DoCO:TextChunk" id="90" confidence="possible" page="7" column="1">Belief in the Power of Techrrology to Succeed. We have been told that technical people have a lot of faith in the “power of technology” to succeed. People will buy it in spite of the user interface. This has been true</region>
          <region class="DoCO:FigureBox" id="Fx91">
            <image class="DoCO:Figure" src="62gj.page_007.image_07.png" thmb="62gj.page_007.image_07-thumb.png"/>
          </region>
          <region class="DoCO:TextChunk" id="92" page="7" column="2">at the high end of computer systems, and was true in the case of the automobile industry. But as the American automobile industry found out, other manufac- turers will make the necessary accommodations to users. We belive the same thing will happen in the computer industry. Just because there is a speech recognition system, a touch screen, a wireless terminal, or a picture phone is no longer a guarantee that these will succeed. Increasingly, with computer systems the product is the user interface. This reinforces the points we are trying to make. More and better students are be- coming involved with the human factors of computer systems, and they will be developing new methodologies and providing a stream of findings on usability, which may very well exert powerful effects in the mar- ketplace.</region>
        </section>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="93" page="7" column="2">5. AN ELABORATION OF THE PRINCIPLES</h1>
        <region class="DoCO:TextChunk" id="94" confidence="possible" page="7" column="2">To carry out our suggestions, we roughly divide the activities required in explaining our recommended principles into an initial design phase and an iterative development phase, although there is no sharp dividing line separating them.</region>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="95" confidence="possible" page="7" column="2">Initial Design Phase</h2>
          <region class="DoCO:TextChunk" id="103" page="7" column="2">Preliminary Specification of the User Interface. This is only one of several activities that need to be attacked early. Here are others. Collect Critical Information About Users. Some of what is needed, such as literacy level or how long users stay at one job [both of which affect training requirements), can sometimes be gathered second-hand, from surveys or consultants. But direct contact with potential users is essential to flesh out the basics. Reluctance or willingness on the part of the users to read manuals, tolerance for delay or effort, and expectations about what a new system should provide are examples of factors that are unlikely to come through in second- hand descriptions of users but which designers need a feel for. Perhaps more important, one does not know what one needs to know about a user until one sees the user in person. These contacts are almost always full of surprises. Sometimes there is a (understandable) tendency for designers to want to look up in a book what the characteristics of a class of users (e.g., bank tellers) are (an extension of the guidelines approach), and build a system from these. We have tried to find an example of a system whose user set is so narrow and so well specified that general user characteristics, such as reading level, age, and so forth, would be an adequate basis for design. We have not found any. To the extent that the scope of users and tasks becomes broader, understanding the user becomes all of psychology (cognitive, behavioral, anthropometric, attitudinal, etc. characteristics), and general descriptive data will be of even less value. As noted earlier, one of the surprises may be how difficult seemingly easy operations may really be for users. Direct contact with users, both in this phase and <marker type="page" number="8"/><marker type="column" number="1"/><marker type="block"/> in later behavioral testing, can make designers aware of just where these difficulties are cropping up. There is an analogy between the sort of insight into users and their needs that a designer must have and the sort of insight into the needs of a particular industry that a software developer must have. Just as “insider” knowledge is essential to develop really useful software for banking, say, or insurance applications, so an “inside” view of user requirements is essential to create a superior user interface. For most designers the only way to get this inside view is by close consultation with users. Such consultation is greatly facilitated if the users can see and react to a real “users’-eye-view” of the proposed system. This can be done by preparing a users manual for review, as has been done at Wang for a word processor (personal communication, 1980), by presenting detailed usage scenarios, as was done for ADS [19], or possibly by presenting a description of how a user would interact with the system, as was done at Apple for the Lisa computer system [34]. Even if it is not used in user consultations, preparing such a users view can be helpful in focusing design energy on interface issues. It can also form the basis for behavioral specifications and tests. Develop Behavioral Goals. The plan for a new system always includes performance and capacity targets for the hardware and software, for example, memory size and access rates, and calculation times. These need to be supplemented by targets which specify how well the user must be able to perform using the system. For example, one might specify that 80 percent of a sample of representative users must be able to master specified basic operations on a word processor in half an hour. With such goals in place it is possible to consider whether or not proposed design features or design changes will contribute to the goals. Without such goals, it is easy for such issues as implementation con- venience or memory requirements to dominate the design to the detriment of usability. Thus, when viewed properly, a major reason for behavioral targets is that they provide a management tool to assure that system development proceeds properly. Behavioral goals should be testable, that is, there should be a clear procedure for determining whether or not a design meets the goals. This will mean that the statement of the goals must cover at least the following points. 1. A description of the intended users must be given, and the experimental participants to be used to repre- sent these users in tests should be agreed upon: for example, typists supplied by temporary employment agencies in Los Angeles (30 percent of whom have English as a second language]. 2. The tasks to be performed, and the circumstances in which they should be performed, must be given. For example, a test scenario might specify that the partici- pant will be given a manuscript and asked to use a prototype copier to make five copies on legal size paper<marker type="column" number="2"/><marker type="block"/> (not presently in the copier), collated and stapled. No assistance would be available except a telephone “hot line.” 3. The measurements of interest, such as learning time, errors, number of requests for help, or attitude, and the criterion values to be achieved for each, must be given. Most systems are improvements on older ones, and in these cases it is relatively easy to specify the behavioral criteria, for example, learning time. But it is harder to establish the appropriate values these criteria must take on, and this may have to be done iteratively. In the case of an altogether new system, where the functions have not previously been implemented, specifying the criteria correctly the first time may also be hard, and iteration will be required. Any specifications, including behavioral goals, influence the design process in complicated ways. Rigid en- forcement of specifications is often impossible, but even when they are violated, specifications help to focus design attention and effort in the right places. The process of creating and agreeing on a good set of specifications can be valuable in itself. This process can help clarify the validity of various measures of usability. Organize the Work. The user interface of a system is a complex entity with diverse parts. The software, the workstation from which the software is operated, the training procedure (if any) in which users participate, the referepce manuals or materials, all work or fail to work together to create the conception with which the user ultimately deals. Unfortunately these interacting pieces are usually designed separately. Definers, designers, implementers, application writers, and manual writers constitute large groups in themselves, and are often separated by geography or organization. They often become part of the development process at different times, and thus must accept what earlier participants have already solidified. The picture can be even worse when significant work, such as writing user manuals, is vended out to third parties. It appears that superior quality can be attained only when the entire user interface, including software, manuals, etc., can be designed by a single group, in a way that reflects users’ needs, and then evaluated and tuned as an integrated whole. This approach was followed with ADS, as discussed below.</region>
          <outsider class="DoCO:TextBox" type="page_nr" id="97" page="7" column="2">306</outsider>
          <outsider class="DoCO:TextBox" type="footer" id="98" page="7" column="2">Communications of fhe ACM</outsider>
          <outsider class="DoCO:TextBox" type="footer" id="99" page="7" column="2">March 1985 Volume 28 Number 3</outsider>
          <outsider class="DoCO:TextBox" type="header" id="100" page="8" column="1">Research Contributions</outsider>
          <region class="DoCO:FigureBox" id="Fx102">
            <image class="DoCO:Figure" src="62gj.page_008.image_08.png" thmb="62gj.page_008.image_08-thumb.png"/>
          </region>
        </section>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="104" confidence="possible" page="8" column="2">Iterative Development Phase</h2>
          <region class="DoCO:TextChunk" id="110" page="8" column="2">With testable behavioral goals, and ready access to user feedback, continuous evaluation and modification of the interface can be undertaken. But it will only be feasible if an implementation strategy that permits early testing of design features and cheap modification of the evolving implementation has been planned. Such a strategy has to include fast flexible prototyping and highly modular implementation. These virtues can be combined: The ADS system was essentially self-proto- typing, in that the final implementation, in fact, has the structure of a prototyping tool, with table-driven interface specification. This approach solved two problems often associated with prototyping. First, little work was <marker type="page" number="9"/><marker type="column" number="1"/><marker type="block"/> invested in a separate prototyping system that was then discarded. Second, once design features were proto- typed there was no further work needed to incorporate them in the final implementation since the prototype and final implementation were the same. Experience shows that iterative design should not be thought of as a luxury tuniag method that puts finish- ing touches on a design (at great expense]. Rather, it is a way of confronting the reality of unpredictable user needs and behaviors that can lead to sweeping and fundamental changes in a design. User testing will often show that even carefully thought out design ideas are simply inadequate. This means that the flexibility of the implementation approach has to extend as far into the system as possible. It also means that designers have to be prepared for evaluation results that dictate radical change, and must have the commitment to abandon old ideas and pursue new ones. Prototype testing can identify system problems with reliability and responsiveness. These two factors are absolutely necessary for a good user interface and interact with other usability factors. We have already mentioned methods to determine whether or not behavioral targets are being met. When behavioral targets are not being met, how does one find a remedy? This is usually a very tough problem. Often user comments are the best source of ideas since they may reveal why particular terrors are occurring. For example, user comments can quickly show that particular wording on a screen or in a manual is unfamiliar and is being misinterpreted. It may be desirable to col- lect comments while the user is working with the system since impressions given after a task is complete are often sketchy and may gloss over difficulties that were eventually overcome. The “thinking-aloud” technique, borrowed from cognitive psychology [lo, 24, 271 can be useful in such cases. Of course such methods may not be appropriate in assessing whether or not a behavioral goal is being met since the process of collecting comments may interfere with or artificially improve users’ performance with the system. But the problem of determining whether or not behavioral goals are being met is different from deciding why they are not being met, and what to do about it. Different methods are needed for these two aspects of the evaluation process. A Comment. Some readers may feel that our recommendations are “not science.” They may be disap- pointed that we do not, for example, enthusiastically describe recent developments in cognitive psychology as being able to predict design details for a new user interface or for user reading material. However, design by its very nature is not just science, but also involves engineering, history and custom, art, and invention. Our recommended approach is the best way to develop the scientific aspects of the human factors of system design. This is so for two reasons. First, the methodologies available are sufficiently rigorous and conform to the traditional scientific approach. Within the frame- work we outline, the methodologies range from the pure observation, analysis, and hypothesis testing of</region>
          <outsider class="DoCO:TextBox" type="footer" id="106" page="8" column="2">March 1985 Volume 28 Number 3</outsider>
          <outsider class="DoCO:TextBox" type="footer" id="107" page="8" column="2">Communications of the ACM</outsider>
          <outsider class="DoCO:TextBox" type="page_nr" id="108" page="8" column="2">307</outsider>
          <outsider class="DoCO:TextBox" type="header" id="109" page="9" column="1">Research Contributions</outsider>
          <region class="DoCO:FigureBox" id="Fx111">
            <image class="DoCO:Figure" src="62gj.page_009.image_09.png" thmb="62gj.page_009.image_09-thumb.png"/>
          </region>
          <region class="DoCO:TextChunk" id="112" confidence="possible" page="9" column="2">ethologists to psychophysics so precise that no man- made system can measure as accurately. Second, the approach we recommend ensures that real situations and problems will be studied, in their full complexity. This enables talented designers, human factors people, and management to identify and concentrate on the critical problems that must be solved to produce superior usability.</region>
          <region class="unknown" id="113" page="9" column="2">6.</region>
        </section>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="114" page="9" column="2">A CASE STUDY-IBM’S AUDIO DISTRIBUTION SYSTEM</h1>
        <region class="DoCO:TextChunk" id="115" page="9" column="2">As compared to the methods of science, much less is known and written about the processes of technology development [ll]. Generally, the development process for most systems is (understandably) kept confidential, or at least not often written about. The exceptions, such as the interviews with designers of Lisa [26] can be very instructive. We offer here a short summary of the development of the IBM Audio Distribution System, called ADS, emphasizing the action of the design principles we have presented. In practice, actual development of a system follows any design philosophy only approximately, regardless of how formal or precisely mandated it is. Goals evolve as new ways of doing things are figured out and new useful functions are identified. ADS was no exception. ADS is a computer-based message system that allows users to send and receive messagesusing a touch-tone phone as a terminal [lg, 201. Such functions as review- ing previously received messages,creating and using distribution lists, inquiring as to whether or not a message has been heard by the recipient, and changing passwords are all performed by choices and commands entered on the pushbutton telephone. ADS was intended to be used by people with no other exposure to computers, with minimal training. Ease of learning and use were paramount among design goals. Evidence to date indicates that it is very easy to learn. Customers report new users are often able to learn ADS with no training. The principles presented in this article partially evolved from the experience gained in meeting these goals.</region>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="116" confidence="possible" page="9" column="2">Early Focus on Users</h2>
          <region class="DoCO:TextChunk" id="122" page="9" column="2">The target population was identified very early: man- agers and professional people. It was known that these people typically do not use computers themselves and do not have computer terminals. They travel fre- quently, and work in many different places, so access to the system away from the office is important. These considerations led to an emphasis on the use of an ordinary pushbutton telephone as a terminal, even though it was clear that restricted keypad and lack of visual output would be tough constraints. It was also recognized that these people would be discretionary users, in that they would not be required to use ADS, but would only use it if it seemed sufficiently easy and useful to do so. They indicated that they would spend little time or effort learning a system. This led to very great effort directed toward making the <marker type="page" number="10"/><marker type="column" number="1"/><marker type="block"/> user interface as self-explanatory as possible, and matching the functions as closely as possible to user needs. The initial set of functions designed into ADS were quite different from those which eventually emerged [19, 201. Initially the system was thought of mainly as an enhanced dictation system, in which dictated memos could be filed and retrieved, and routed to a transcription center. Secondarily, ADS was initially thought of as an “electronic mail” communication system for relatively brief spoken messages.Laboratory experiments began to indicate that dictating was not as efficient a composition system as originally thought, and that speaking was a potentially superior composition method [12, 13, 15, 16, 19, 201. Only after a prototype was in use was it determined that the spoken messagecommunication features of the system were the really useful ones, however. The dictation transcription feature was then deemphasized. This example illustrates several points we have tried to make. First, initial interaction with users did not start as early with ADS as we would now suggest it should. As a result, the first command language was cumbersome. Second, even when early interactions with users did take place, they often could not say what would be useful new functions for them. Almost no one envisioned how useful noninteractive voice communication would be. Third, giving potential users simulations and prototypes to work with enhanced the quality of feedback they gave. Empirical prototype studies identified, for example, which functions were actually used. Fourth, the architecture (or programming technology), and the designers’ motivation, was flexible enough to allow iterative design. The prototype system led to extensive interaction between users and designers. Users were free with suggestions about what they did not like (such as pushing a lot of keys to accomplish basic functions, having to remember the digits for specific commands, for example, 71 to Record, the necessity to read documentation or spend time for training, and what they thought should be added). Having a Pending Message Box to remind the sender and recipient that an action is needed was based on a user suggestion.</region>
          <outsider class="DoCO:TextBox" type="footer" id="118" page="9" column="2">March 1985 Volume 28 Number 3</outsider>
          <outsider class="DoCO:TextBox" type="page_nr" id="119" page="9" column="2">308</outsider>
          <outsider class="DoCO:TextBox" type="footer" id="120" page="9" column="2">Communications of the ACM</outsider>
          <outsider class="DoCO:TextBox" type="header" id="121" page="10" column="1">Research Contributions</outsider>
        </section>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="123" confidence="possible" page="10" column="1">Empirical Measurement</h2>
          <region class="DoCO:TextChunk" id="127" page="10" column="1">Throughout the development of the system, a great many different forms of user testing were used. Most concentrated on the ability or inability of test users to learn to perform a given set of functions with a given form of training or prompting. Some tests used simple paper-and-pencil methods, in which users had to write down the keys they would use to perform a task. Other tests involved watching users use a keypad, writing down and video-taping what they did; still others involved memorization and recall studies of various command possibilities; laboratory experiments on spoken messagequality [28]; and experiments on impression formation [32]. Studies of new users almost always evaluated a combination of training, reading materials, <marker type="column" number="2"/><marker type="block"/> and user interface. Versions of prototype systems in actual usage were demonstrated to visitors and at technical meetings for several years. This provided useful feedback. This work was carried out by Stephen Boies, John Conti, John Gould, Nancy Grischkowsky, Don Nix, and John Thomas. These tests led directly to many changes in the wording of messages,the organization of commands, the style of training, and other aspects of the system [19]. Later, a simple but flexible simulation tool in which a subset of keys on a computer terminal modeled the pushbutton telephone keypad was developed. Prompts and messageswere automatically shown on a screen where an experimenter could read them to the test user. The action of the simulator was easily changed without programming. The experimenter could edit a set of tables that determined what would happen when a given key was pressed in a given state of the system. These tables were designed and implemented by Stephen Boies and John Richards, and an illustration is given in <xref ref-type="table" rid="TII" id="126" class="deo:Reference">Table II</xref>.</region>
          <region class="DoCO:FigureBox" id="Fx125">
            <image class="DoCO:Figure" src="62gj.page_010.image_10.png" thmb="62gj.page_010.image_10-thumb.png"/>
          </region>
        </section>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="128" confidence="possible" page="10" column="2">Iterative Design</h2>
          <region class="DoCO:TextChunk" id="129" page="10" column="2">This simulator proved so useful that it was eventually incorporated as the actual user interface of the system itself. That is, the operation of the ADS system now marketed by IBM is controlled by tables identical to those used in “programming” the simulator. This means that sweeping changes to the user interface of the actual system can be made with no reprogramming what- soever, simply by editing the control tables. Once in place, this feature of the system was ex- ploited to the full. When the system was prepared for release as an IBM product, user testing was continued until very late in the development cycle since changes were so easy to incorporate. It proved possible to include three separate user interfaces, designed for different user classes, in the product, since specifying an interface was so well isolated from the rest of the product. What were some of the changes that all this flexibility made possible? One is a good example of the small but critical corrections that are so hard to spot in ad- vance of testing. In one well-tested version, R (the 7- key] was used for RECORD and T (the a-key) was used for TRANSMITting a message. This was satisfactory, and was in general use for over a year. As part of a major redesign to add new functions, it was felt that S (the T-key) for SEND and T (the a-key) for TALK provided a more natural-sounding command set. What could be more natural? Several months of informal user testing revealed a problem: When using this new command set users tried to SEND a message before TALK- ing it. (In the other case, users almost never tried to TRANSMIT a messagebefore RECORDing it.) “I want to SEND a messageto Smith,” a user would reason. It was not clear that they had to TALK a message before SENDing it because SEND seemed to mean the whole action of composing and transmitting a message, at least for many novice users. Changing S for SEND to T for</region>
          <outsider class="DoCO:TextBox" type="footer" id="130" page="10" column="2">March 1985 Volume 28 Number 3</outsider>
          <outsider class="DoCO:TextBox" type="footer" id="131" page="10" column="2">Communications of the ACM</outsider>
          <outsider class="DoCO:TextBox" type="page_nr" id="132" page="10" column="2">309</outsider>
          <outsider class="DoCO:TextBox" type="header" id="133" page="11" column="1">Research Contributions</outsider>
          <region class="DoCO:TableBox" id="TII">
            <caption class="deo:Caption" id="134" page="11" column="1">TABLE II. An Example of a “Standard Table”</caption>
          </region>
        </section>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="135" confidence="possible" page="11" column="1">Ei 1, 0, NONE, EMP?Y, 0,6</h2>
        </section>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="136" page="11" column="1">TNEUT HEAD LVLI + LVLO, TNEUT, 0.0,3000 0, 0, NONE, EMPTY, 0,O LINE 2,0, COSLINE, TCUST, 0, 12 LINE 3,0, NONE, TDISC, 0,O LINE 4.0, COSLINE, XGET, 0,O LINE $0, COSUNE, XLIST, 0,O LINE 6,O. NONE, EMPTY, 0,6 LINE 7.0, COSLINE, XRECD, 0.0</h1>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="137" confidence="possible" page="11" column="1">LlNE 6,0, COSLINE, XXMIT, 0,O LINE 9,0, NONE, EMPTY, 0,O LINE *, 0, NONE, EMPTY, 0,5</h2>
        </section>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="138" confidence="possible" page="11" column="1">LINE DELAY, 0, NONE, ONEUf, 0,O</h2>
        </section>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="139" page="11" column="1">LINE OPER, 0, NONE, EMPTY, 0,6 LINE #, 0, NONE, QNEUT, 0,O LINE EOM, 0, NONE, EMPTY, 0,O</h1>
        <region class="unknown" id="140" page="11" column="1">Note: Lines beginning with LINE 1 through LINE # correspond to the keys on a pushbutton telephone. If a user presses one of these keys, the corresponding LINE is executed in the table. For example, if a user presses 2 (i.e., the C-key) to customize his or her profile, LINE 2 is executed. That is, system message 12 is played out (“Customize”), a routine called COSLINE is called to initialize some variables, and control is transferred to a table called TCUST. If the user fails to push any key within 30 seconds (Le., the 3000 centisecon~ds specified in HEAD) after arriving in this table, then LINE DELAY is executed. This will transfer control to a table called QNELJT which in turn will select a helpful prompt for the user, based on what is appropriate for the user to do</region>
        <region class="DoCO:TextChunk" id="141" page="11" column="1">TRANSMIT fixed the problem. Note that TRANSMIT is a less common, more technical term: Guidelines would probably rule against it (although some recent evidence is consistent with it; [z]). But the empirical method made the right call over our rational analysis. Another example had to do with users making modifications to a message they were listening to. ADS asked users whether or not they wanted to add a comment at the beginning of the message, add a comment where they had stopped listening, or erase the message and start over. Some new users had trouble with this con- cept. For example, the wording “add a comment . . .” made sense if they were listening to a message from someone else, but not if they were listening to a message they were composing themselves. On the other hand, “. . . start over” made sense for messagesthey were composing themselves. Yet all three alternatives were important for both cases, for example, users needed to “insert” in their own messages(rather than “annotate” or “comment”). After testing many alternative wordings on many first-time users (which gave insight into the problem), ADS tables were “repro- grammed” to play out a slightly different prompt de- pending on whether users were listening to a message from someone else or one that they had composed themselves. This was easy to do at the level of the tables but required a fundarnental algorithm modification so that ADS would distinguish between these two types of messages. In the earliest stages of ADS, there were no specific behavioral goals. It was intended that the system be “easy to use,” “ useful,” etc. We had not yet developed the principled type of thinking outlined in this article. With time, however, one be:havioral goal was to create</region>
        <region class="DoCO:FigureBox" id="Fx142">
          <image class="DoCO:Figure" src="62gj.page_011.image_11.png" thmb="62gj.page_011.image_11-thumb.png"/>
        </region>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="143" confidence="possible" page="11" column="2">kEY</h2>
        </section>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="144" page="11" column="2">NEUTRAL MODE NOT USED IN THIS TABLE NOT USED IN THIS TABLE CUSTOMIZE MODE FAST DISCONNECT GET MODE LISTEN AND EDIT UNDEFINED RECORD MODE TRANSMIT MODE NOT USED IN THIS TABLE STAYS IN NEUTRAL: OK NOT USED IN THIS TABLE TELL USER WHAT TO DO TELL USER WHAT TO DO NOT</h1>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="145" confidence="possible" page="11" column="2">USED IhJTHIS TABLE</h2>
          <region class="DoCO:TextChunk" id="146" page="11" column="2">a system which required no user training. For several years, informal tests on possible user interface changes were motivated by this goal, and each major prototype revision reflected this goal The command language was reorganized and emphasis on documentation was modified greatly. Informal feedback from customers and users indicates that a majority of new users learn ADS with no training, which is radically different from what was found for the earliest ADS prototype and for new users of most computer systems today.</region>
        </section>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="147" confidence="possible" page="11" column="2">Beyond ADS</h2>
          <region class="DoCO:TextChunk" id="153" page="11" column="2">It may seem that ADS is an unfair example of the application of our design ideas. The very simple terminal, with limited input and output, lent itself very well to table-driven design, with the flexibility that it provides. It was developed by a small group of people, several of whom had behavioral expertise. Could the same approaches work with a more typical system? We believe they can. The key lesson of the ADS experience is not the implementation strategy-that is the secondary lesson. The most important lesson is the un- predictability of good design: The large number of features of the final design that were not and could not have been anticipated in the initial design. These features were only discovered and incorporated because of the focus on users and user testing in the design process. The implementation strategy played a supporting role: It made it possible to respond to user feedback quickly and cheaply. Further, it gave real control of the user interface to the people who had responsibility for usability. No longer did they have to get systems experts to devote extensive time to making simple <marker type="page" number="12"/><marker type="column" number="1"/><marker type="block"/> changes in the user interface. While table-driven implementation may not be possible in some cases, the underlying idea can still be used. One approach is to identify the system functions and a set of high-level interface services that control such things as the positioning of information on a screen, collecting user responses, and the like. All these are embodied in a set of routines or macros. The interface designer can now program the interface at a high level and make changes freely without reprogramming any of the underlying services.</region>
          <outsider class="DoCO:TextBox" type="page_nr" id="149" page="11" column="2">310</outsider>
          <outsider class="DoCO:TextBox" type="footer" id="150" page="11" column="2">Communications of the ACM</outsider>
          <outsider class="DoCO:TextBox" type="footer" id="151" page="11" column="2">March 1985 Volume 28 Number 3</outsider>
          <outsider class="DoCO:TextBox" type="header" id="152" page="12" column="1">Research Contributions</outsider>
          <region class="unknown" id="154" page="12" column="1">7.</region>
        </section>
      </section>
      <section class="deo:Conclusion">
        <h1 class="DoCO:SectionTitle" id="155" page="12" column="1">CONCLUSIONS</h1>
        <region class="DoCO:TextChunk" id="156" page="12" column="1">Computer systems are hard for most people to learn and use today. We believe that if systems were designed using the three principles we have mentioned, they would receive much higher usability marks. Sur- vey data show that these principles (early focus on users, empirical measurement, and iterative design) are not intuitive. There is one case history, and parts of others, which indicate that the principles lead to usable systems.</region>
        <region class="DoCO:TextChunk" id="158" confidence="possible" page="12" column="1">AcknowZedggments. For their comments on an earlier version of this manuscript, we thank Karen Assunto, Dick Berry, Stephen Boies, Jack Carroll, Robin Davies, John Hughes, John Karat, Jeff Kelley, Emmett McTeague, John Richards, Bob Taylor, and John Thomas. Some of our ideas were developed as a result of working on the ADS project and were influenced by Stephen Boies. Others were developed or sharpened while conducting a study group on human factors at <xref ref-type="bibr" rid="R32" id="157" class="deo:Reference">IBM in 1979</xref>. Other members of that group were Jack Carroll, Web Howard, John Morrisey, and Phylis Reis- ner.</region>
      </section>
      <section class="DoCO:Bibliography">
        <h1 class="DoCO:SectionTitle" id="159" confidence="possible" page="12" column="1">REFERENCES</h1>
        <ref-list class="DoCO:BiblioGraphicReferenceList">
          <ref rid="R1" class="deo:BibliographicReference" id="160" confidence="possible" page="12" column="1">NOTE: References14.17, and 18 are unreferenced in the text. 1. Baker, F.T., and Mills, H.D. Chief programmer teams. Dafamation, (Dec. 1973). 58-61.</ref>
          <ref rid="R2" class="deo:BibliographicReference" id="161" confidence="possible" page="12" column="1">2. Black, J.. and Moran, T. Learning and remembering command names. In Proceedings of the Human Factors in Computer SystemsMeet- irtgs. (Gaithersburg, Md.), ACM, Washington, DC., 1982. 8-11.</ref>
          <ref rid="R3" class="deo:BibliographicReference" id="162" confidence="possible" page="12" column="1">3. Boyle, J.M., Bury, K.F.. and Evey. R.J.Two studies evaluating learning and use of QBE and SQL. Tech. Rep. HFC-39. IBM GPD Human Factors Center, San Jose,Calif., 1981.</ref>
          <ref rid="R4" class="deo:BibliographicReference" id="163" confidence="possible" page="12" column="1">4. Brooks, F.P. The Myfhical Man-Month: Essayson Software Engineering. Addison-Wesley, Reading, Mass.. 1975.</ref>
          <ref rid="R5" class="deo:BibliographicReference" id="164" confidence="possible" page="12" column="1">5. Bury, K.F., and Boyle. J.M. An on-line experimental comparison of two simulated record selection languages. In Proceedings of the Human Factors SocietyAnnual Meeting, (Seattle, Wash.), R.E. Edwards, (Ed.), 74-78, 1982. (Available from the Human Factors Society, Box 1369, Santa Monica, Calif. 90406).</ref>
          <ref rid="R6" class="deo:BibliographicReference" id="165" confidence="possible" page="12" column="1">6. Crosby, P.B. Quality is Free. New American Library, New York, 1979.</ref>
          <ref rid="R7" class="deo:BibliographicReference" id="166" confidence="possible" page="12" column="1">7. Dijkstra, E.W. Structured Programming:Software Engineering Tech- rliques, NATO Scientific Affairs Division, Brussels 39, Belgium, Apr. 1970,84-88.</ref>
          <ref rid="R8" class="deo:BibliographicReference" id="167" confidence="possible" page="12" column="1">6. Dijkstra, E.W., and Hoare. D. Structured Programming.Academic Press, N.Y., 1973.</ref>
          <ref rid="R9" class="deo:BibliographicReference" id="168" confidence="possible" page="12" column="1">9. Engel. S., and Granda. R. Guidelines for man/display interfaces, Tech. Rep. TR00.2720. IBM, Poughkeepsie Lab.. N.Y.. 1975.</ref>
          <ref rid="R10" class="deo:BibliographicReference" id="169" confidence="possible" page="12" column="1">11. Gomory. R.E. Technology development. Science220, (1983). 576-580.</ref>
          <ref rid="R11" class="deo:BibliographicReference" id="170" confidence="possible" page="12" column="1">10. Ericsson, K.A.. and Simon, H.A. Verbal reports as data. Psychol. Rev. 87,(1980), 215-251.</ref>
          <ref rid="R12" class="deo:BibliographicReference" id="171" confidence="possible" page="12" column="1">12. Gould, J.D. An experimental study of writing, dictating, and speaking. In Affenfion and PerformanceVII. J. Requin, (Ed.), Erlbaum, Hillsdale, N.J., 1978. 299-319.</ref>
          <ref rid="R13" class="deo:BibliographicReference" id="172" confidence="possible" page="12" column="1">13. Gould, J.D. How experts dictate. 1. Exp. Psychol.: Hum. Percept.Per- form. 4, 4 (1978). 648-661.</ref>
          <ref rid="R14" class="deo:BibliographicReference" id="174" confidence="possible" page="12" column="2">14. Gould, J. D. Experiments on composing letters: Some facts, some myths, and some observations. In Cognitive Processesin Writing. L. Gregg. and I. Steinberg, (Eds.) Erlbaum, Hillsdale, N.J., 1980. pp. 98-127.</ref>
          <ref rid="R15" class="deo:BibliographicReference" id="175" confidence="possible" page="12" column="2">15. Gould. J.D. Composing letters with computer-based text editors. Hum. Fact. 23, (1981). 593-606.</ref>
          <ref rid="R16" class="deo:BibliographicReference" id="176" confidence="possible" page="12" column="2">16. Gould, J.D. Writing and speaking letters and messages.Inf. J Man Mach. Stud. 16, (1982), 147-171.</ref>
          <ref rid="R17" class="deo:BibliographicReference" id="177" confidence="possible" page="12" column="2">17. Gould, J.D.. and Boies, S.J.How authors think about their writing, dictating, and speaking. Hum. Facf. 20, (1978).495-505.</ref>
          <ref rid="R18" class="deo:BibliographicReference" id="178" confidence="possible" page="12" column="2">16. Gould, J.D., and Boies. S.J.Writing, dictating, and speaking letters. Science202. (1976j. 1145-1147.</ref>
          <ref rid="R19" class="deo:BibliographicReference" id="179" confidence="possible" page="12" column="2">19. Gould, J.D., . and Boies, I”. S.J.Human -. factors challenges _.. in creating a prmclpal support office system-The speech filing system approach. ACM Trans. Office Inform. Sysf. I, 4 (1983), 273-298.</ref>
          <ref rid="R20" class="deo:BibliographicReference" id="180" confidence="possible" page="12" column="2">20. Gould, J.D., and Boies. S.J.Speech filing-An office system for prin- cipals. IBM Sysr.J. 23, (1984), 65-81.</ref>
          <ref rid="R21" class="deo:BibliographicReference" id="181" confidence="possible" page="12" column="2">21. Gould. J. D., Conti, J.. and Hovanyecz. T. Composing letters with a simulated listening typewriter. Commun.ACM 26, 4 (1983). 295-308.</ref>
          <ref rid="R22" class="deo:BibliographicReference" id="182" confidence="possible" page="12" column="2">22. Hammond, N.. Jorgensen. A., MacLea A., Barnard, P.. and Long, J. Design practice and interface usability: Evidence from interviews with designers. In Proceedingsof the CHI83 Human Factors in Compuf- ing Systems(Boston, Mass., Dec. 1983). ACM, N.Y., 40-44.</ref>
          <ref rid="R23" class="deo:BibliographicReference" id="183" confidence="possible" page="12" column="2">23. Kelley. J.F. Natural language and computers: Six empirical steps for writing an easy-to-use computer application. Ph.D. dissertation, Johns Hopkins University, 1983. (Available from University Micro- film International: 300 North Zeeb Rd. Ann Arbor, Mich. 48106).</ref>
          <ref rid="R24" class="deo:BibliographicReference" id="184" confidence="possible" page="12" column="2">24. Lewis, C.H. Using the “thinking aloud” method in cognitive interface design. IBM Res. Rep. RC-9265. Yorktown Heights, N.Y., 1982.</ref>
          <ref rid="R25" class="deo:BibliographicReference" id="185" confidence="possible" page="12" column="2">25. Mack. R.. Lewis, C.H.. and Carroll, J. Learning to use word processors: Problems and prospects. ACM Trans. Office Inform. Sysf. _ I, 3 (1983). 254-271.</ref>
          <ref rid="R26" class="deo:BibliographicReference" id="186" confidence="possible" page="12" column="2">26. Morgan. C., Williams, G.. and Lemmons, P. An interview with Wayne Rosing, Bruce Daniels, and Larry Tesler. Byte, 1983, 90-113.</ref>
          <ref rid="R27" class="deo:BibliographicReference" id="187" confidence="possible" page="12" column="2">27. Newell. A., and Simon, H.A. Human Problem Solving. Prentice-Hall. Englewood Cliffs, N.J., 1972.</ref>
          <ref rid="R28" class="deo:BibliographicReference" id="188" confidence="possible" page="12" column="2">26. Nix. 0. Two experiments on the comprehensibility of pause- depleted speech. IBM Res. Rep. K-6305. Yorktown Heights, N.Y., 1976.</ref>
          <ref rid="R29" class="deo:BibliographicReference" id="189" confidence="possible" page="12" column="2">29. Proceedingsof the Human Factors in Computing SystemsMeetings. (Washington, Mar. 1981; Boston, Dec.. 1983) (Available from ACM, Box 64145, Baltimore, Md. 21264).</ref>
          <ref rid="R30" class="deo:BibliographicReference" id="190" confidence="possible" page="12" column="2">30. Proceedings of the Human Facfors Society Meeting, (Seattle, Wash, Oct. 1982: Norfolk, Va.. Oct., 1983) (Available from the Human Factors Society, Box 1369, Santa Monica, Calif. 90406).</ref>
          <ref rid="R31" class="deo:BibliographicReference" id="191" confidence="possible" page="12" column="2">31. Science.New Project Explores Disability Research, 233, (1984). 157.</ref>
          <ref rid="R32" class="deo:BibliographicReference" id="192" confidence="possible" page="12" column="2">32. Thomas, J.C. Office communications studies: I. Effects of communication behavior on the perception of described persons. IBM Res. Rep. RC-7572. Yorktown Heights, N.Y., 1979.</ref>
          <ref rid="R33" class="deo:BibliographicReference" id="193" confidence="possible" page="12" column="2">34. Williams, G. The Lisa computer system. Byte (1983), 33-50.</ref>
          <ref rid="R34" class="deo:BibliographicReference" id="194" confidence="possible" page="12" column="2">33. Thomas, J.C.. and Gould, J.D. A psychological study of query-by- example. In Proceedingsof 1975 National Computer Conference.(1975), 439-445.</ref>
          <ref rid="R35" class="deo:BibliographicReference" id="195" confidence="possible" page="12" column="2">35. Yourdon. E.. and Constantine, L.L. Structured Design. Yourdon, New York, 1976.</ref>
          <ref rid="R36" class="deo:BibliographicReference" id="196" confidence="possible" page="12" column="2">36. Zloof, M.M. Query by example-A data base language. IBM Sysf. J. 4. (1977), 324-343. CR Categories and Subject Descriptors: H.l.2 [Models and Princi-</ref>
          <ref class="deo:BibliographicReference" id="197" confidence="possible" page="12" column="2">ples]: Users/Slash Machine Systems-human factors; D.2.2 [Software Engineering]: Tools and Techniques--user interfaces; D.2.9 (Software Engineering]: Management-software qualify assurance(SQA) General Terms: Human Factors Additional Key Words and Phrases: systems development, principles of design. Received 3/84; revised 9/84; accepted lo/84</ref>
          <ref class="deo:BibliographicReference" id="198" confidence="possible" page="12" column="2">Authors’ Present Addresses: John D. Gould, IBM Thomas J. Watson Re-</ref>
          <ref rid="R37" class="deo:BibliographicReference" id="199" confidence="possible" page="12" column="2">search Center, P.O. Box 218, Yorktown Heights, NY 10598. Clayton</ref>
          <ref class="deo:BibliographicReference" id="200" confidence="possible" page="12" column="2">Lewis. Department of Computer Science, ECOT 7-7 Engineering Center,</ref>
          <ref class="deo:BibliographicReference" id="201" confidence="possible" page="12" column="2">Campus Box 430. Boulder, CO 80309. Permission to copy without fee all OPpart of this material is granted provided that the copies are not made or distributed for direct commer- cial advantage, the ACM copyright notice and the title of the publication and its date appear, and notice is given that copying is by permission of the Association for Computing Machinery. To copy otherwise, or to republish, requires a fee and/or specific permission.</ref>
        </ref-list>
        <region class="DoCO:FigureBox" id="Fx173">
          <image class="DoCO:Figure" src="62gj.page_012.image_12.png" thmb="62gj.page_012.image_12-thumb.png"/>
        </region>
        <outsider class="DoCO:TextBox" type="footer" id="202" page="12" column="2">March 1985 Volume 28 Number 3</outsider>
        <outsider class="DoCO:TextBox" type="footer" id="203" page="12" column="2">Communications of the ACM</outsider>
        <outsider class="DoCO:TextBox" type="page_nr" id="204" page="12" column="2">311</outsider>
      </section>
    </body>
  </article>
</pdfx>
