<?xml version='1.0' encoding='UTF-8'?>
<pdfx xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://pdfx.cs.man.ac.uk/static/article-schema.xsd">
  <meta>
    <job>d20c12f57793a0468ed1211f0e3a44476a7adff4bc5304c6e039bc6ffb3043b1</job>
    <base_name>62jl</base_name>
    <doi>http://dx.doi.org/10.1145/1517664.1517732</doi>
  </meta>
  <article>
    <front class="DoCO:FrontMatter">
      <title-group>
        <article-title class="DoCO:Title" id="1">Decoupling Interaction Hardware Design Using Libraries of Reusable Electronics</article-title>
      </title-group>
      <contrib-group class="DoCO:ListOfAuthors">
        <contrib contrib-type="author">
          <name id="2">Rajesh Sankaran</name>
        </contrib>
        <contrib contrib-type="author">
          <name id="3">Brygg Ullmer</name>
        </contrib>
        <contrib contrib-type="author">
          <name id="4">Jagannathan Ramanujam</name>
        </contrib>
        <contrib contrib-type="author">
          <name id="5">Karun Kallakuri</name>
        </contrib>
        <contrib contrib-type="author">
          <name id="6">Srikanth Jandhyala</name>
        </contrib>
        <contrib contrib-type="author">
          <name id="7">Cornelius Toole</name>
        </contrib>
        <contrib contrib-type="author">
          <name id="8">Christopher Laan Louisiana State University: Dept. of Electrical Engineering</name>
        </contrib>
        <contrib contrib-type="author">
          <name id="9">Dept. of Computer Science</name>
        </contrib>
        <contrib contrib-type="author">
          <name id="10">Center for Computation</name>
        </contrib>
        <contrib contrib-type="author">
          <name id="11">Technology (CCT) rajesh@cct.lsu.edu</name>
        </contrib>
        <contrib contrib-type="author">
          <name id="12">ullmer@lsu.edu</name>
        </contrib>
      </contrib-group>
      <abstract class="DoCO:Abstract" id="13">This paper presents our research toward the design and development of a library of electronic hardware modules called Blades and Tiles. Interaction hardware design with blades and tiles provides researchers with considerable flexibility in iterating their designs, decoupling between the domains of electronics, software, firmware and mechanical design. Our approach has been driven by design objectives including hardware reusability, reliability, scalability, and flexibility. We have created a library of blades and tiles, and used them to develop several interaction devices. We present both con- ceptual and applied aspects and discuss future directions.</abstract>
      <section class="DoCO:Section">
        <h2 class="DoCO:SectionTitle" id="14" confidence="possible" page="1" column="1">Author Keywords</h2>
      </section>
    </front>
    <body class="DoCO:BodyMatter">
      <region class="DoCO:TextChunk" id="15" page="1" column="1">Hardware toolkit, reusable hardware, blades and tiles, decoupling TUI design, modularity.</region>
      <section class="deo:Introduction">
        <h1 class="DoCO:SectionTitle" id="16" page="1" column="1">INTRODUCTION</h1>
      </section>
      <region class="DoCO:TextChunk" id="32" page="1" column="1">The integration of electronic, mechanical, software, and interaction design presents a challenging design space for tangible user interface (TUI) researchers. The physicality of such interfaces also makes them more complex and time consuming to prototype than pure software systems, often requiring expertise in various areas. Fortunately, the creation of hardware toolkits and prototyping systems (e.g. [ <xref ref-type="bibr" rid="R1" id="17" class="deo:Reference">1</xref>, <xref ref-type="bibr" rid="R2" hidden="1" id="18" class="deo:Reference">2</xref>, <xref ref-type="bibr" rid="R3" hidden="1" id="19" class="deo:Reference">3</xref> <xref ref-type="bibr" rid="R4" id="20" class="deo:Reference">4</xref>, <xref ref-type="bibr" rid="R7" id="21" class="deo:Reference">7</xref>, <xref ref-type="bibr" rid="R8" hidden="1" id="22" class="deo:Reference">8</xref>, <xref ref-type="bibr" rid="R9" hidden="1" id="23" class="deo:Reference">9</xref>, <xref ref-type="bibr" rid="R10" hidden="1" id="24" class="deo:Reference">10</xref>, <xref ref-type="bibr" rid="R11" hidden="1" id="25" class="deo:Reference">11</xref>, <xref ref-type="bibr" rid="R12" hidden="1" id="26" class="deo:Reference">12</xref>, <xref ref-type="bibr" rid="R13" id="27" class="deo:Reference">13</xref>]) is easing the process of realizing novel physical interfaces. These toolkits are evolving significantly in their ability to support a wide variety of interaction modalities.<marker type="block"/> The hardware toolkits community has made valuable progr- ess toward bootstrapping the initial development of TUIs, especially from the perspective of software developers. TUI researchers are invested and use these toolkits in the development of various promising interaction devices. This is ev- ident in the growing number of users embracing hardware prototyping platforms such as d.tools [<xref ref-type="bibr" rid="R5" id="29" class="deo:Reference">5</xref>], Arduino [<xref ref-type="bibr" rid="R3" id="30" class="deo:Reference">3</xref>] and Phidgets [<xref ref-type="bibr" rid="R4" id="31" class="deo:Reference">4</xref>] (to name a few). However, we feel several con- ceptual and technical developments in the architecture of the</region>
      <region class="DoCO:FigureBox" id="F1">
        <image class="DoCO:Figure" src="62jl.page_001.image_01.png" thmb="62jl.page_001.image_01-thumb.png"/>
        <caption class="deo:Caption" id="34" page="1" column="2">Figure 1. Close up of Blades: The figure shows from left, Switch-LED, Haptic Rotor, USB-Gateway, RFID, and Intracomm blades, and Blade label that sticks to the bottom of a blade. The barcoded and color-coded blade-labels provide blade details.</caption>
      </region>
      <region class="DoCO:TextChunk" id="35" confidence="possible" page="1" column="2">hardware toolkits can yield a number of benefits.</region>
      <region class="DoCO:TextChunk" id="38" page="1" column="2">From a hardware standpoint, the creation of novel interaction devices involves advancements in at least two different realms. Fundamentally, new sensors and/or devices – i.e. (interaction modalities) [ <xref ref-type="bibr" rid="R15" id="36" class="deo:Reference">15</xref>] – are investigated and developed. Simultaneously, the design and composition of interaction devices, application integration, and interaction se- quences are explored.<marker type="block"/> While many existing toolkits provide users with accessible avenues to program pre-existing toolkit hardware, they often lack straight-forward means to integrate user-developed interaction modalities (e.g., custom electronic modules and firmware e.g., for PWM of LEDs or haptic feedback) with existing toolkit elements. The interaction researcher is often restricted to using only the interaction modalities provided by the toolkits, as typically developed by a small set of hardware designers. We believe several factors contribute to this:</region>
      <region class="DoCO:TextChunk" id="39" confidence="possible" page="1" column="2">• existing toolkits have typically been designed to provide pre-built interaction electronics for use by researchers with predominantly software skills; • the tightly-coupled electronics and firmware components of many toolkits do not grant easy access for developers outside the core hardware team; and • there is often a lack of documented hardware schematics, protocols, and software architectures to foster the development of new interoperable toolkit elements by users.</region>
      <outsider class="DoCO:TextBox" type="page_nr" id="40" page="1" column="2">1</outsider>
      <region class="DoCO:TextChunk" id="42" page="2" column="1">Prior toolkits have simplified hardware design, and reduced the level of technical electronics expertise required to build and prototype TUIs in small numbers. However, we have not found any toolkits that support the construction of mod- erately larger numbers of devices (e.g., ∼10-100) for research purposes (e.g., colocated or distributed collaborative systems) or stable deployments. Likewise, it has been challenging to develop prototypes that integrate many (e.g., hundreds) interactors in a scalable fashion. <marker type="block"/> We propose Blades and Tiles as a step toward realizing the above-described architectural features. Through blades and tiles, we aim to empower the interaction design community with the freedom to develop and integrate their implementations of interaction modalities, and benefit from standards for the sake of easier adoption and interoperability. Blades and tiles are a library of extensible, reusable hardware entities designed with the intent of supporting community collaboration in the vein of open source software development. Here we describe the design and technical aspects of blades and tiles, example interface implementations using them, and discuss future directions.</region>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="43" page="2" column="1">EXAMPLE INTERFACES</h1>
        <region class="DoCO:TextChunk" id="44" page="2" column="1">Blades and tiles can be used to build a variety of interfaces. To illustrate their use, we give several concrete application examples.</region>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="45" confidence="possible" page="2" column="1">Core tangibles: interaction trays</h2>
          <region class="DoCO:TextChunk" id="51" page="2" column="1">We have developed several interaction trays, as one embodiment of the core tangibles concept [ <xref ref-type="bibr" rid="R20" id="46" class="deo:Reference">20</xref>]. <xref ref-type="fig" rid="F2" id="47" class="deo:Reference">Figure 2</xref> shows one<marker type="block"/> embodiment of a three-wheeled parameter tray. To implement this device, we have used two radio-frequency identification (RFID) blades; two Switch-LED blades; and three haptic rotor blades plugged into two tiles. Each tile also contains an “intracomm” blade, which serves as a message router. These tiles plug into a spine module that hosts one of several gateway blades – e.g., USB and Bluetooth – for linkage with an external PC or embedded gateway computer.</region>
          <region class="DoCO:FigureBox" id="F2">
            <image class="DoCO:Figure" src="62jl.page_002.image_03.png" thmb="62jl.page_002.image_03-thumb.png"/>
            <caption class="deo:Caption" id="50" page="2" column="1">Figure 2. Parameter Tray: This tray has been implemented using two tiles and ten blades.</caption>
          </region>
        </section>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="52" page="2" column="1">LONI</h1>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="53" confidence="possible" page="2" column="1">interaction device</h2>
          <region class="DoCO:TextChunk" id="61" page="2" column="1">Where the parameter tray of <xref ref-type="fig" rid="F2" id="54" class="deo:Reference">figure 2</xref> is a relatively general- purpose interaction device, we have also used blades as core elements of a class of special-purpose interaction devices<marker type="column" number="2"/><marker type="block"/> we call tangible visualizations [<xref ref-type="bibr" rid="R20" id="56" class="deo:Reference">20</xref>]. For example, <xref ref-type="fig" rid="F3" id="57" class="deo:Reference">Figure 3</xref> shows an interaction device specific to a statewide network infrastructure named LONI. Here, a Louisiana-shaped printed circuit board (PCB) hosts an array of RFID readers at the eight key city/nodes of the network; and a series of lin- ear LED arrays representing the networks connecting these nodes. These RFID and LED elements are supported by 9 blades including 4 LED and 2 RFID blades, which plug into the back of the PCB. The PCB itself contains only RFID antenna coils; LEDs; and connectors to the blades. Here,<marker type="block"/> the whole LONI PCB serves as a special-purpose “tile.” (A larger-scale LONI interface could also be built from a series of tiled subelements.) As the actual LONI network evolves in times, with city/nodes and network links added and removed, this bladed approach significantly reduces the com- plexity of implementing, debugging, and refining the interface.</region>
          <region class="DoCO:FigureBox" id="F3">
            <image class="DoCO:Figure" src="62jl.page_002.image_02.png" thmb="62jl.page_002.image_02-thumb.png"/>
            <caption class="deo:Caption" id="60" page="2" column="2">Figure 3. LONI Interface: The PCB is shaped like the state of Louisiana and incorporates the tile circuits.</caption>
          </region>
        </section>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="62" confidence="possible" page="2" column="2">Fan-based interfaces</h2>
          <region class="DoCO:TextChunk" id="72" page="2" column="2">The previous two examples are interfaces we have implemented. As a first illustration for how they might be used to support interfaces designed by others, leveraging some of the scaling properties of our blade-based approach, we briefly describe how the Blow Displays by Minakuchi et al. [ <xref ref-type="bibr" rid="R14" id="63" class="deo:Reference">14</xref>], and Murmur by Rydarowski et al. [<xref ref-type="bibr" rid="R17" id="64" class="deo:Reference">17</xref>] could be implemented using blades and tiles. As built by Minakuchi et al., the Blow Display uses two fans driven by a Phidgets Mo- tor Controller to divert user attention towards a PC monitor. This prototype can be built using a power blade. A power blade has four solid-state switches each supporting a current of 1 ampere. These switches can be turned on/off or pulsed, and can also be used to control larger relays (Figure. 4).<marker type="block"/> The Murmur system [<xref ref-type="bibr" rid="R17" id="66" class="deo:Reference">17</xref>] illustrates how bladed implementations can naturally scale, as well as provide convenient paths for progressively adding or modifying interaction modalities. Where the Blow display contains two fans, Murmur is described as including one hundred. With the scalable blades and tiles design, using numerous unmodified power blades, the Mumur hardware can be realized. Tiles, each accommo- dating four power-blades can be chained to energize the fan mesh, with the blades controlled via a USB and Bluetooth interface from a supporting PC. Alternately, tiles could be<marker type="page" number="3"/><marker type="column" number="1"/><marker type="block"/> left partially populated (with free blade slots). This retains prospects for subsequent integration of additional interaction modalities (e.g., promixity sensors, RFID sensors, LEDs, etc.) with no modifications to the underlying infrastructure. When thus implemented, it is also relatively straightforward to scale up the system to hundreds or thousands of nodes.<marker type="block"/> To be clear, in these systems, the electronics, firmware, and protocols represent a quite partial subset of the larger con- ceptual, software, mechanical, and user-centric implementational efforts. At the same time, we believe the bladed approach enables a highly valuable form of design and en- gineering decoupling. Subteams are enabled to work in par- allel, while retaining greater prospects for implementational iteration of system subcomponents.</region>
          <outsider class="DoCO:TextBox" type="page_nr" id="68" page="2" column="2">2</outsider>
          <region class="DoCO:FigureBox" id="F4">
            <image class="DoCO:Figure" src="62jl.page_003.image_04.png" thmb="62jl.page_003.image_04-thumb.png"/>
            <caption class="deo:Caption" id="70" page="3" column="1">Figure 4. Power Blade and Fan: Top: A CPU fan can be connected to a power blade or can be switched using a relay in case of large power requirements. Bottom: Power blade schematic.</caption>
          </region>
        </section>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="73" page="3" column="1">PREVIOUS AND RELATED WORK:</h1>
        <region class="DoCO:TextChunk" id="86" page="3" column="1">Our work has been inspired in part by hardware prototyping toolkits such as Phidgets, Teleo, and Ardiuno. Saul Greenberg et al. developed the Phidgets “plug and play” [ <xref ref-type="bibr" rid="R4" id="74" class="deo:Reference">4</xref>], building blocks that provide easy access to hardware sensors, ac- tuation, and control via PCs. The Phidgets platform made device creation sufficiently simple that developers could con- centrate on other issues such as form, use and design.<marker type="block"/> The Arduino [<xref ref-type="bibr" rid="R3" id="76" class="deo:Reference">3</xref>] hardware and software environment has been popular amongst artists and interaction designers alike. Arduinos are designed to be stand-alone or to communicate with software on a computer (e.g. Flash, Processing, MaxMSP). We see strong potential for integrating blades as supporting functional libraries in Arduino-based systems.<marker type="block"/> Van Laerhoven et al. designed and presented a true physi- cally distributed system of interaction elements in their “Pin and Play” concept [<xref ref-type="bibr" rid="R12" id="78" class="deo:Reference">12</xref>]. Their system, with a multi-drop communication network, that uses surface as the medium for communication, demonstrates the flexibility and advantages of a decentralized approach.<marker type="block"/> In this paper we discuss the use of Inter-Integrated Circuit<marker type="column" number="2"/><marker type="block"/> bus (I 2 C) as the primary communication protocol in the blade tile system. The Smart-Its [<xref ref-type="bibr" rid="R2" id="81" class="deo:Reference">2</xref>] were developed collabora- tively by Lancaster University, ETH Zurich, University of Karlsruhe, Interactive Institute and VTT and also used I 2 C interface for sensor/actuation boards. Similarly, Hartmann et al., use I 2 C bus for communication between their con- troller board and hot-pluggable input and output components in their d.tools system [<xref ref-type="bibr" rid="R5" id="82" class="deo:Reference">5</xref>].<marker type="block"/> Open-ended systems with generic connectors can present certain challenging safety and fault tolerance issues. In [<xref ref-type="bibr" rid="R19" id="84" class="deo:Reference">19</xref>], J. Scott et al. deal with generic real-time configurable interconnects and discuss their mechanisms for fault tolerance. Finally, the form factor of our tiles has been motivated by the DataTiles [<xref ref-type="bibr" rid="R16" id="85" class="deo:Reference">16</xref>] created by Rekimoto et al.</region>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="87" page="3" column="2">IMPLEMENTATION</h1>
        <region class="DoCO:TextChunk" id="89" page="3" column="2">Some of the basic concepts underlying blades and tiles have been introduced in [<xref ref-type="bibr" rid="R18" id="88" class="deo:Reference">18</xref>]. In the following, we briefly intro- duce some of the mechanical, electronic, firmware, software, protocol, and architectural implementations and design deci- sions underlying blades and tiles.</region>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="90" confidence="possible" page="3" column="2">Mechanical</h2>
          <region class="DoCO:TextChunk" id="91" confidence="possible" page="3" column="2">Blades and tiles systems center around the integration of multiple interaction modalities as self-contained network nodes that can be added and removed from the underlying communication network. We have created and followed several system-wide standards regarding mechanical design.</region>
          <region class="DoCO:TextChunk" id="99" page="3" column="2">Blade and tile dimensions Drawing inspiration from DataTiles [ <xref ref-type="bibr" rid="R16" id="92" class="deo:Reference">16</xref>], tiles are prototypically 10x10cm. This is a a modal size corresponding to the power hand grasp, to many other tangibles; and one which affords composition of multiple tiles. Blades (<xref ref-type="fig" rid="F1" id="93" class="deo:Reference">Figure 1</xref>) are prototypically 10 cm long; 2 cm wide; and 1 cm deep. For implementing interaction devices at the scale of our tiles, we have found this dimension a promising tradeoff of physical real estate with ability to accomodate standard components.<marker type="block"/> As a specific example underlying blade width, 2 cm width will exactly accomodate a 28-pin standard-width through- hole integrated circuit. This is the maximum width common among through-hole components, and the size of (e.g.) the popular IB Technology family of RFID reader hybrid modules. In cases where 2cm width is insufficient, we suggest integer multiples of width (4cm, 6cm, etc.). E.g., our step- per motor blade is 4 cm wide, on account of wider driver and power components.<marker type="block"/> Connectors The blades and tiles system is designed to facilitate addition and removal of interaction components, both at the blade and tile levels of granularity. We presently use two sets of pluggable USB connectors as tile-to-tile interconnects; and two sets of 2x7 headers for attaching blades to tiles. We employ a pair of 70 pin female headers to both electrically connect and mechanically fixture blades to tiles.<marker type="page" number="4"/><marker type="column" number="1"/><marker type="block"/> Electronic components We currently build all blades and tiles with through-hole electronic components [<xref ref-type="bibr" rid="R21" id="98" class="deo:Reference">21</xref>]. Through-hole components can be easily attached to a circuit boards (PCB) by developers with minimal soldering experience. While through-hole components have limitations in terms of size and density, we have found that they provide considerable flexibility for prototyping and small fabrication runs. Simultaneously, while through-hole components are preferred for human assembly, surface-mount components are better suited for machine (mass) assembly, and lead gracefully to smaller future standard dimensions for blades and tiles.</region>
          <outsider class="DoCO:TextBox" type="page_nr" id="97" page="3" column="2">3</outsider>
        </section>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="100" confidence="possible" page="4" column="1">Electronics</h2>
          <region class="DoCO:TextChunk" id="102" confidence="possible" page="4" column="1">Tiles Tiles (<xref ref-type="fig" rid="F5" id="101" class="deo:Reference">Figure 5</xref>) form the meeting ground between the electronics underlying specific interaction elements (e.g. switches, LEDs, rotary encoders) and the blades supporting their underlying implementations. Additionally, tiles can provide mechanical structure for electronic components and mount- ing external housings.</region>
          <region class="DoCO:FigureBox" id="F5">
            <image class="DoCO:Figure" src="62jl.page_004.image_06.png" thmb="62jl.page_004.image_06-thumb.png"/>
            <caption class="deo:Caption" id="104" page="4" column="1">Figure 5. Bottom of a Tile: The underside of a tile houses the tile specific circuits consisting of power management, communication and power circuits. This tile has been designed with some perforated PCB space for rapid prototyping.</caption>
          </region>
          <region class="DoCO:TextChunk" id="113" page="4" column="1">Tiles incorporate three kinds of electronic elements: circuits for blade management and control (e.g. blade connection headers, power control &amp; distribution), circuits that implement tile specific electronics (e.g. tile id, tile interconnects, power converter, debug circuits), and application specific components (typically interactors like RFID coils and LEDs). <marker type="block"/> Blades Aside from power, communications, and external interactors, blades are designed to be self-sufficient, eliminating strong linkages between electronic realization of different modalities. They are comprised of two types of components, shown in <xref ref-type="fig" rid="F6" id="106" class="deo:Reference">Figure 6</xref>: a microcontroller for local intelligence, and electronic components and circuits required to realize the interaction modality. Blades currently use Microchip’s<marker type="column" number="2"/><marker type="block"/> PIC series of microcontrollers, but are fundamentally designed to be processor independent. Blades are uniquely identified (electronically) by a six byte ID hard-coded in a DSN chip (Dallas DS2401).<marker type="block"/> Blades fall into three main classes: core, function, and resource blades. Core blades mediate the communication between blades. They also provide the communication interface to connect the hardware with external entities. Additionally, core blades ensure safe operation of the system: in- terrogating blade IDs before soft power-up; detecting faulty blades; and supporting active power management.<marker type="block"/> Function/interaction blades implement specific interaction modalities. They are broadly classified as sense, actuate, and display blades. Most blades fall in this category. Re- source blades implement supporting resources to augment function and core blades. Examples include battery power, additional memory, supporting computational capabilities, and data encryption.<marker type="block"/> Blades connect to tiles through two 14 pin interconnects. One is common across all blades; the other, blade-specific. The common interconnect provides linkage to power, in-tile + in-circuit blade programming, blade ID interrogation, and blade communication. The configuration of this interconnect has been refined over many iterations to support in-tile-in- circuit programming of different microcontrollers with off- the-shelf programmers; separate power sources for low and high power circuits on-board a blade; and add various communication protocols to blades.</region>
          <region class="DoCO:FigureBox" id="F6">
            <image class="DoCO:Figure" src="62jl.page_004.image_05.png" thmb="62jl.page_004.image_05-thumb.png"/>
            <caption class="deo:Caption" id="110" page="4" column="2">Figure 6. Function Blades: The figure shows the logical parts, and pin- outs of a function blade. Blades contain two sets of interconnects, one generic across all blades with power, programming, and communication pins, and the other blade specific. The circuits on a blade comprise of a intelligent processor and interaction specific circuits.</caption>
          </region>
        </section>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="114" confidence="possible" page="4" column="2">Firmware, communication architecture, and protocols</h2>
          <region class="DoCO:TextChunk" id="120" page="4" column="2">Blade firmware has been written in C using CCS’s propri- etary We believe that with minimal modifications (primarily I 2 C and RS232 calls), the code can be made compatible with other C compilers, both for PICs and other architectures. <marker type="block"/> In contrast to systems like Arduino, which typically employ high-ly integrated hardware implementations of interaction modalities, our architecture is deeply distributed, with de- pendence on communication and hardware level APIs at several levels of abstraction.<marker type="block"/> Device-level communication and protocols Most bladed interaction devices are built with more than one blade. We have found our medium-complexity interaction<marker type="page" number="5"/><marker type="column" number="1"/><marker type="block"/> devices typically integrated 3 to 10 blades, although also envision complex systems where this number may be significantly higher (e.g., hundreds of blades). Communication within a device is channeled at two levels; globally between tiles, and locally between a tile’s blades. At a low level, a packet-based protocol is used. Our protocol supports both global and hierarchical communication buses.<marker type="block"/> Our current blades communicate over a 100 kHz I 2 C network for inter-blade data transfer. I 2 C is a multi-master serial computer bus invented by Philips that is largely used to attach low-speed peripherals. We also use a 1-Wire bus for communicating with Dallas Semiconductors’ 1-Wire DSNs for blade and tile identification. The I 2 C protocol only defines primitive methods for sending and receiving network messages. To realize our goal of a scalable, hot-pluggable, dynamically reconfigurable system, we have developed a suite of supporting procedures, protocols, and algorithms. Our transport protocols have been modeled on TCP/IP and the CANbus embedded protocol. Some of these include:</region>
          <outsider class="DoCO:TextBox" type="page_nr" id="118" page="4" column="2">4</outsider>
          <region class="DoCO:TextChunk" id="121" confidence="possible" page="5" column="1">• Dynamic blade discovery and I 2 C address assignment; • Standardized I 2 C message packet structure adapted to and taking advantage of distributed intelligence; • Dynamic branching and merging of I 2 C busses for various methods of communication; and • On-the-fly I 2 C address decoding and message routing.</region>
          <region class="DoCO:TextChunk" id="124" page="5" column="1">Communication between blades is carried out in a time divi- sion multiple access (TDMA) fashion. The communication blades switch between bus-master and bus-slave configurations per our protocol, wherefunction and resource blades function purely as slave blades. All blades currently uni- formly communicate with each other and an external system ten times a second. Our communication protocol has also been designed to support different blade update rates, and we believe substantially accelerated update rates are imple- mentationally near at hand. <marker type="block"/> External Communication and Protocols Most interaction systems we have implemented and deployed involve more than one interaction device built using blades- tiles. These devices are being used in environments involv- ing multiple operating systems and high-level software pack- ages (e.g. the amira and VisIt visualization environments). Correspondingly, software and protocol implementations at this level are designed to provide higher level abstractions, with emphasis on language independence. After complet- ing early implementations using XML-RPC, we are successively migrating to ICE [<xref ref-type="bibr" rid="R6" id="123" class="deo:Reference">6</xref>] to take advantage of improved update rates and a variety of transport mechanisms.</region>
        </section>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="125" confidence="possible" page="5" column="1">Software</h2>
          <region class="DoCO:TextChunk" id="130" page="5" column="1">Software for integrating blade+tile-based interaction devices with external systems has undergone several iterations. These have supported interaction device research; four semesters of class use; and applications to several end-user contexts, including co-located and distributed collaborative visualiza- <marker type="column" number="2"/><marker type="block"/> tion and microscopy imaging. For portability, TUI integration software has been written in Python, Tcl, and Java.<marker type="block"/> We have observed our software converging toward two dis- tinct modes of usage. The first implementational mode cou- ples bladed hardware as mixed hardware/software library elements of medium- to high-end computational systems. The second combines blades as library elements for small computational systems – e.g., as function-specific co-processors for Arduino, Rabbit core modules, or other microcontroller- based systems.<marker type="block"/> Thus far, our efforts have concentrated on the first mode of use. This typically takes the form of integration with a supporting PC or gateway computer. Here, we are converging toward a layered architecture in which data is successively refined and transformed into high-level interaction events.<marker type="block"/> At a lower level, we have implemented a device driver tasked with collecting raw data from a blades+tiles tangible. The next level – the service layer – involves a tangibles interaction server which collects and redistributes events to the appropriate target. We are also implementing additional ser- vices including session handling, and management + coordi- nation models for interaction devices and the target applications to which they are bound (e.g., at the application layer).</region>
        </section>
      </section>
      <section class="deo:FutureWork">
        <h1 class="DoCO:SectionTitle" id="131" page="5" column="2">FUTURE WORK</h1>
        <region class="DoCO:TextChunk" id="139" page="5" column="2">Blades and tiles have undergone many revisions of design and testing, and have been successfully used in four mixed graduate/undergraduate project courses (two with ∼35 stu- dents). Based on these experiences, we plan several areas of enhancement in the near future, while keeping the system backward compatible. <marker type="block"/> Bandwidth: The current design of blades and tiles is con- strained by bandwidth restrictions due to its low datarate USB serial and Bluetooth serial interfaces to external systems. Unfortunately, besides the 100 kbit/s standard mode I 2 C 1 , we were unable to identify a suitable scalable-frequency multi-drop bus for internal communication. High-speed I 2 C supports a bandwidth of 3.4 Mbit/s, but is not yet implemented in most micro-controllers. Fortunately, the available overall bandwidth seems sufficient for most of our current needs.<marker type="block"/> With a view toward the requirements of future systems, we are working to alleviate this problem by developing gateway comm blades with significantly more powerful processors and high-bandwidth USB and WiFi support. Our efforts thus far include integration of embedded Linux systems like the Gumstix modules. Gumstix have a nearly identical form factor as blades; we are working on several implementations of bladified Gumstix.<marker type="block"/> Interoperability with other hardware systems is one of our driving design objectives. We have not yet implemented a simple way to interface blades and tiles to other existing 1 More info on I 2 C data rates can be obtained from: <ext-link ext-link-type="uri" href="http://en" id="135">http://en</ext-link>. wikipedia.org/wiki/I2C<marker type="page" number="6"/><marker type="column" number="1"/><marker type="block"/> toolkits and prototyping hardware. These existing toolkits could interoperate with blades+tiles at both software and hardware levels. We are actively investigating both prospects. Both forms of interoperability would provide developers with a higher level of hardware abstraction and a wider selection of hardware implementations.<marker type="block"/> New blades and processor architectures: Our current blade implementations primarily use Microchip’s PIC16F87 and PIC16F876A. We have focused our hardware development efforts predominantly towards refining the design of the to- tal system and implementing needed functional submodules on demand. Having produced a scalable and stable design, we have begun developing a new set of blades including a battery blade, Gumstix blade, slider blade, and a/d (anal- ogy/digital) blade. Additionally, building on observations of other toolkits, we are considering blades based on AVR microcontrollers, ARM processors, and embedded Linux systems such as the Gumstix family of modules.</region>
        <outsider class="DoCO:TextBox" type="page_nr" id="137" page="5" column="2">5</outsider>
      </section>
      <section class="deo:Discussion">
        <h1 class="DoCO:SectionTitle" id="140" page="6" column="1">DISCUSSION</h1>
        <region class="DoCO:TextChunk" id="143" page="6" column="1">Scalability: In principle, blades and tiles have been designed to be highly scalable. In practice, the effects of communication bus capacitance, power issues (both current and noise), and latency (esp. due to multiple levels of hierarchy) restrict the size and growth of our system. We have successfully tested networks of ∼40 blades and a dozen tiles with our current hardware. For broader scaling, we believe the use of multiple power sources and I 2 C bus isolation+extension using repeaters could provide possible paths forward. <marker type="block"/> Size and shape: We have interests in experimental scientific apparatus, interaction devices, and environments employing bladed implementations in diverse form factors. For some, regular shapes such as tiles contribute toward prospects for composability. In other cases, such as our LONI interaction device, irregular. Furthermore, we envision blades and tiles could be produced in a variety of standard sizes (perhaps analogous to the ISO paper families of A0, A1, etc.). Here, complex blades could be realized as aggregates of smaller blades, potentially blurring the line between blades and tiles.<marker type="block"/> Beyond user interfaces: Our development of blades and tiles has grown from our research on tangible interaction design. In addition, we believe the current and evolving architecture holds relevance and strong potential well beyond the domain of user interfaces. We also hold strong interest in open-source and multi-source prospects for both blades and bladed interaction devices,</region>
      </section>
      <section class="deo:Conclusion">
        <h1 class="DoCO:SectionTitle" id="144" page="6" column="1">CONCLUSION</h1>
        <region class="DoCO:TextChunk" id="147" page="6" column="1">Building on a relatively simple set of combined hardware and software design principles introduced in [ <xref ref-type="bibr" rid="R18" id="145" class="deo:Reference">18</xref>], we have described their realization in the form of Blades and Tiles. Building on prior hardware toolkits and our experiences with implementing tangible interfaces, we have designed and developed a robust, scalable system. We have also described several concrete example applications and their implemen- tation using blades and tiles.<marker type="column" number="2"/><marker type="block"/> While some of these principles are not individually novel, we believe our combined approach provides blades and tiles with powerful properties as library elements for decoupling the electronic, firmware, and software elements of complex, evolving physical/digital systems. We plan to release our im- plementation as open-source hardware and software in hopes of fostering wider collaborative efforts towards hardware interoperability.</region>
      </section>
      <section class="deo:Acknowledgements">
        <h1 class="DoCO:SectionTitle" id="148" page="6" column="2">ACKNOWLEDGEMENTS</h1>
        <region class="DoCO:TextChunk" id="149" page="6" column="2">This research has been supported by NSF MRI 0521559. Special thanks to Jerry Trahan, Christopher Branton, Alex Reeser, Alvin Wallace, Cole Wiley, Jennifer Claudet, Kexi Liu, Michael Carroll, Mohamed Diabi, Mariel Losso, Susie Poskonka, Shining Sun, and Zachary Dever.</region>
      </section>
      <section class="DoCO:Bibliography">
        <h1 class="DoCO:SectionTitle" id="150" page="6" column="2">REFERENCES</h1>
        <ref-list class="DoCO:BiblioGraphicReferenceList">
          <ref rid="R1" class="deo:BibliographicReference" id="151" page="6" column="2">1. Rafael Ballagas, Meredith Ringel, Maureen Stone, and Jan Borchers. istuff: a physical user interface toolkit for ubiquitous computing environments. In CHI ’03, pages 537–544, 2003.</ref>
          <ref rid="R2" class="deo:BibliographicReference" id="152" page="6" column="2">2. Michael Beigl, Tobias Zimmer, Albert Krohn, Christian Decker, and Philip Robinson. Smart-its communication and sensing technology for ubicomp environments. Technical report, The Telecooperation Office (TecO), 2003.</ref>
          <ref rid="R3" class="deo:BibliographicReference" id="153" page="6" column="2">3. Joliffe D. Arduino fever. MAKE V7, pages 52–53, 2006.</ref>
          <ref rid="R4" class="deo:BibliographicReference" id="154" page="6" column="2">4. Saul Greenberg and Chester Fitchett. Phidgets: easy development of physical interfaces through physical widgets. In UIST ’01, pages 209–218, 2001.</ref>
          <ref rid="R5" class="deo:BibliographicReference" id="155" page="6" column="2">5. Björn Hartmann, Scott R. Klemmer, Michael Bernstein, Leith Abdulla, Brandon Burr, Avi Robinson-Mosher, and Jennifer Gee. Reflective physical prototyping through integrated design, test, and analysis. In UIST ’06, pages 299–308. ACM, 2006.</ref>
          <ref rid="R6" class="deo:BibliographicReference" id="156" page="6" column="2">6. Michi Henning. A new approach to object-oriented middleware. IEEE Internet Computing, 8(1):66–75, 2004.</ref>
          <ref rid="R7" class="deo:BibliographicReference" id="157" page="6" column="2">7. Scott E. Hudson and Jennifer Mankoff. Rapid construction of functioning physical interfaces from cardboard, thumbtacks, tin foil and masking tape. In UIST ’06, pages 289–298, 2006.</ref>
          <ref rid="R8" class="deo:BibliographicReference" id="158" page="6" column="2">8. Hiroaki Kimura, Eiji Tokunaga, Yohei Okuda, and Tatsuo Nakajima. Cookieflavors: easy building blocks for wireless tangible input. In CHI ’06, pages 965–970. ACM, 2006.</ref>
          <ref rid="R9" class="deo:BibliographicReference" id="159" page="6" column="2">9. Scott R. Klemmer, Jack Li, James Lin, and James A. Landay. Papier-mache: toolkit support for tangible input. In CHI ’04, pages 399–406, 2004.</ref>
          <ref rid="R10" class="deo:BibliographicReference" id="160" page="6" column="2">10. Shigeru Kobayashi and Masayuki Akamatsu. Spinner: a simple approach to reconfigurable user interfaces. In NIME ’05, pages 208–211, 2004.</ref>
          <ref rid="R11" class="deo:BibliographicReference" id="162" page="7" column="1">11. Shigeru Kobayashi, Takanori Endo, Katsuhiko Harada, and Shosei Oishi. Gainer: a reconfigurable i/o module and software libraries for education. In NIME ’06, pages 346–351, 2006.</ref>
          <ref rid="R12" class="deo:BibliographicReference" id="163" page="7" column="1">12. Kristof Van Laerhoven, Albrecht Schmidt, and Hans-Werner Gellersen. Pin&amp;play: Networking objects through pins. In UbiComp ’02, pages 219–228, 2002.</ref>
          <ref rid="R13" class="deo:BibliographicReference" id="164" page="7" column="1">13. Johnny C. Lee, Daniel Avrahami, Scott E. Hudson, Jodi Forlizzi, Paul H. Dietz, and Darren Leigh. The calder toolkit: wired and wireless components for rapidly prototyping interactive devices. In DIS ’04, pages 167–175, 2004.</ref>
          <ref rid="R14" class="deo:BibliographicReference" id="165" page="7" column="1">14. Mitsuru Minakuchi and Satoshi Nakamura. Collaborative ambient systems by blow displays. In TEI ’07, pages 105–108, 2007.</ref>
          <ref rid="R15" class="deo:BibliographicReference" id="166" page="7" column="1">15. Laurence Nigay. Design Space for Multimodal Interaction. 2004.</ref>
          <ref rid="R16" class="deo:BibliographicReference" id="167" page="7" column="1">16. Jun Rekimoto, Brygg Ullmer, and Haruo Oba. Datatiles: a modular platform for mixed physical and graphical interactions. In CHI ’01: Proceedings of the SIGCHI conference on Human factors in computing systems, pages 269–276. ACM, 2001.</ref>
          <ref rid="R17" class="deo:BibliographicReference" id="168" page="7" column="1">17. Aimee Rydarowski, Ozge Samanci, and Ali Mazalek. Murmur: kinetic relief sculpture, multi-sensory display, listening machine. In TEI ’08, pages 231–238, 2008.</ref>
          <ref rid="R18" class="deo:BibliographicReference" id="169" page="7" column="1">18. Rajesh Sankaran, Brygg Ullmer, and Srikanth Jandhyala. Blades and tiles: An extensible hardware architecture approach for ubiquitous interaction devices. In UbiComp ’07 Adjunct Proceedings, 2007.</ref>
          <ref rid="R19" class="deo:BibliographicReference" id="170" page="7" column="1">19. James Scott, Frank Hoffmann, Mike Addlesee, Glenford Mapp, and Andy Hopper. Networked surfaces: a new concept in mobile networking. Mob. Netw. Appl., 7:353–364, 2002.</ref>
          <ref rid="R20" class="deo:BibliographicReference" id="171" page="7" column="1">20. Brygg Ullmer, Rajesh Sankaran, and et al. Tangible menus and interaction trays: core tangibles for common physical/digital activities. In TEI ’08, pages 209–212. ACM, 2008.</ref>
          <ref rid="R21" class="deo:BibliographicReference" id="173" page="7" column="1">21. Wikipedia. Through-hole technology. <ext-link ext-link-type="uri" href="http://en.wikipedia.org/wiki/" id="172">http://en.wikipedia.org/wiki/</ext-link> Through-hole technology.</ref>
        </ref-list>
        <outsider class="DoCO:TextBox" type="page_nr" id="161" page="6" column="2">6</outsider>
        <outsider class="DoCO:TextBox" type="page_nr" id="174" page="7" column="2">7</outsider>
      </section>
    </body>
  </article>
</pdfx>
