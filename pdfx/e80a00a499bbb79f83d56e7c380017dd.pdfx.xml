<?xml version='1.0' encoding='UTF-8'?>
<pdfx xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://pdfx.cs.man.ac.uk/static/article-schema.xsd">
  <meta>
    <job>7267a0b1d72c4f2e423ab27d7d93e4127ef0627879f1268b4906f1bd08e73403</job>
    <base_name>62ls</base_name>
    <doi confidence="possible">http://dx.doi.org/10.4018/978-1-60960-567-4.ch014</doi>
  </meta>
  <article>
    <front class="DoCO:FrontMatter">
      <region class="DoCO:FigureBox" id="Fx1">
        <image class="DoCO:Figure" src="62ls.page_001.image_01.png" thmb="62ls.page_001.image_01-thumb.png"/>
      </region>
      <region class="unknown" id="2">Paper to be presented at the Summer Conference 2010 on "Opening Up Innovation: Strategy, Organization and Technology" at Imperial College London Business School, June 16 - 18, 2010</region>
      <title-group>
        <article-title class="DoCO:Title" id="3">IMPROVISATION AS CONTROL: A FIELD STUDY OF COMPUTER GAME DESIGN</article-title>
      </title-group>
      <contrib-group class="DoCO:ListOfAuthors">
        <contrib contrib-type="author">
          <name id="4">Patrick Stacey</name>
        </contrib>
      </contrib-group>
      <region class="DoCO:TextChunk" id="6" confidence="possible">-Research Associate <email id="5">p.stacey@imperial.ac.uk</email></region>
      <outsider class="DoCO:TextBox" type="sidenote" id="7">from</outsider>
      <outsider class="DoCO:TextBox" type="sidenote" id="8">Abstract: The IS control. In like</outsider>
      <outsider class="DoCO:TextBox" type="sidenote" id="9">contrary, illustrate</outsider>
      <abstract class="DoCO:Abstract" id="10" confidence="possible">development and related innovation literatures largely regard improvisation as something distinct software innovation projects, control is usually achieved through the use of rationalistic mechanisms structured methods, stage-gates, and so forth. A key contribution this paper makes is that, on the improvisation can be considered a form of control, particularly in contexts like computer game design. I this by drawing on an empirical study of computer game innovation which is analyzed through a structurational lens. A model of contrapuntal computer game innovation is offered.</abstract>
      <outsider class="DoCO:TextBox" type="footer" id="11">JEL - codes: Z, -, -</outsider>
    </front>
    <body class="DoCO:BodyMatter">
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="12" page="2" column="1">Improvisation as control: a field study of computer game design</h1>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="13" confidence="possible" page="2" column="1">Abstract</h2>
          <region class="DoCO:TextChunk" id="14" page="2" column="1">The IS development and related innovation literatures largely regard improvisation as something distinct from control. In software innovation projects, control is usually achieved through the use of rationalistic mechanisms like structured methods, stage- gates, and so forth. A key contribution this paper makes is that, on the contrary, improvisation can be considered a form of control, particularly in contexts like computer game design. I illustrate this by drawing on an empirical study of computer game innovation which is analyzed through a structurational lens. A model of contrapuntal computer game innovation is offered.</region>
        </section>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="15" page="2" column="1">Introduction and theoretical foundations</h1>
        <region class="DoCO:TextChunk" id="63" page="2" column="1">There are many formal approaches that have been proposed for controlling software projects. One of most ‘traditional’ is the Waterfall Model ( <xref ref-type="bibr" rid="R47" id="16" class="deo:Reference">Royce, 1970</xref>) which breaks the IS development process down into discrete stages such as feasibility study, systems investigation, and implementation (<xref ref-type="bibr" rid="R1" id="17" class="deo:Reference">Avison and Fitzgerald, 1995</xref>). There are a number of similar structured systems development methods such as Structured Systems Analysis and Design Methodology (SSADM) (<xref ref-type="bibr" rid="R24" id="18" class="deo:Reference">Fitzgerald, 1996</xref>) and even some forms of agile development like XP (<xref ref-type="bibr" rid="R5" id="19" class="deo:Reference">Beck, 1999</xref>). The typical stages in the development lifecycle occur in a linear sequential manner with a provision for feedback loops between the stages (Boehm, 1988). However, process models and other innovations such as high-level languages like object-oriented, have not improved the ability to control the software development process (Pressman, 1987); they were not ‘silver bullets’ (<xref ref-type="bibr" rid="R9" id="20" class="deo:Reference">Brooks, 1995</xref>). Therefore, an ‘integrative’ approach has emerged in the form of software process improvement (SPI) to take a more organization-wide approach to process control (Aaen and Damsgaard, 1999). There are a number of SPI models including the Capability Maturity Model (CMM) (Paulk et al., 1994). The authors of the CMM which take the view that in order to control the quality of a software process there must be an objective, quantitative and statistical means of evaluating it (<xref ref-type="bibr" rid="R21" id="21" class="deo:Reference">Curtis and Paulk, 1993</xref>:p382; <xref ref-type="bibr" rid="R32" id="22" class="deo:Reference">Humphrey, 1988</xref>:p74). An assumption in the CMM and other metric-driven process improvement models such as ami (<xref ref-type="bibr" rid="R22" id="23" class="deo:Reference">Debou et al., 1994</xref>) is that software activities are indeed measurable and predictable (<xref ref-type="bibr" rid="R21" id="24" class="deo:Reference">Paulk et al., 1993</xref>; <xref ref-type="bibr" rid="R7" id="25" class="deo:Reference">Boehm, 2000</xref>). SPI not only takes a metrics approach to managing the software process, but encourages this to be codified and standardized at the level of the organization.<marker type="block"/> Metric-driven process improvement models subscribe to a functionalistic paradigm given their search for measureable cause-effect relationships in the software process (<xref ref-type="bibr" rid="R30" id="27" class="deo:Reference">Hirschheim and Klein 1989</xref>:p.1203). Furthermore, such functionalistic methodical development is so dominant in the field that “it has become a self-confirming construct” (<xref ref-type="bibr" rid="R52" id="28" class="deo:Reference">Truex et al 2000</xref>:p73). This is perhaps because they promote a feeling and fiction of control (<xref ref-type="bibr" rid="R40" id="29" class="deo:Reference">Nandhakumar and Avison, 1999</xref>), which is reminiscent of Plato’s observation that, “the arts of measuring and numbering and weighing come to the<marker type="page" number="3"/><marker type="block"/> rescue of the human understanding - there is the beauty of them - and the apparent greater or less, or more or heavier, no longer have the mastery over us, but give way before calculation and measure and weight?” Such functionalistic approaches exude objectivity and rationality (<xref ref-type="bibr" rid="R30" id="31" class="deo:Reference">Hirschheim and Klein, 1989</xref>) and have strong militaristic origins (<xref ref-type="bibr" rid="R8" id="32" class="deo:Reference">Bollinger and McGowan, 1991</xref>). Historically, such approaches were born out of the project management techniques developed by Henry Gantt in 1917, which helped “solve the problem of scheduling troops during World War I. As military and industry projects became more complex, methods such as the critical path method (CPM) and program evaluation and review technique (PERT) were developed to include the precedence relationships between tasks” (Wierschem and Johnston, 2005:p640).<marker type="block"/> Other approaches include the implementation of control portfolios, such as the combination of outcome, behavior, self and clan control (<xref ref-type="bibr" rid="R12" id="34" class="deo:Reference">Choudhury and Sabherwal, 2003</xref>). For instance, researchers found that, “when clients subsequently felt the need for greater behavior control, they expended considerable effort to increase their ability to monitor vendor behavior, either through direct observation (usually through collocation) or through information systems (e.g., conference calls and periodic progress reports)” (<xref ref-type="bibr" rid="R12" id="35" class="deo:Reference">Choudhury and Sabherwal 2003</xref>: p311). However, in their study, if the developer exhibited professionalism through “high controlee knowledge” then clients felt more comfortable that the developer would be able to “manage their own processes, [which] led to a greater reliance on outcome and self-controls” (<xref ref-type="bibr" rid="R12" id="36" class="deo:Reference">Choudhury and Sabherwal, 2003</xref>: p311). Therefore, there is the suggestion of letting-go in order to control when developers are seen to be capable, that they can deal with the complexity of the situation as it emerges (<xref ref-type="bibr" rid="R3" id="37" class="deo:Reference">Bach, 1995</xref>). This is consonant with the amethodical view of software development, which promotes embracing complexity and ambiguity. Unlike metric-driven process improvement, amethodical development emphasizes the different voices and interests of the developers, as well as negotiation that lead to compromise solutions (<xref ref-type="bibr" rid="R52" id="38" class="deo:Reference">Truex et al, 2000</xref>:p.71). Software development is regarded as a creative, social activity that, “cannot be totally preplanned in a standardized and detailed process model” (<xref ref-type="bibr" rid="R18" id="39" class="deo:Reference">Conradi and Fuggetta, 2002</xref>:p3), and that involves complex human actions and interactions (<xref ref-type="bibr" rid="R40" id="40" class="deo:Reference">Nandhakumar and Avison, 1999</xref>). Proponents of this perspective of software development propose that normative methodical software development approaches are employed as a social defense so as to “avoid the risks of real engagement with each other and with the task at hand. They turn away from the exigencies of work and take refuge in a surreal world.” (Wastell, 1996:p38).<marker type="block"/> Improvisation The previous section emphasizes that controlling the development/innovation process involves the human capability to deal with ambiguity and complexity as it occurs. Many scholars support the view that in order to handle complex situations, developers need to improvise. According to <xref ref-type="bibr" rid="R14" id="42" class="deo:Reference">Ciborra (1999)</xref>, “we can appreciate the importance of improvisation if we look at organizations less as the stable outcome of a hierarchical functional decomposition of tasks and more as an ongoing process of designing and sensemaking” (p5). According to the improvisational model of change for instance (<xref ref-type="bibr" rid="R44" id="43" class="deo:Reference">Orlikowski and Hofman, 1997</xref>), change is “typically an ongoing process made up of opportunities and challenges which are not necessarily predictable at the start” (p20). In challenging and complex situations actors improvise so as to bring order from the clutches of disorder. <xref ref-type="bibr" rid="R29" id="44" class="deo:Reference">Highsmith (2002)</xref> refers to this as a “chaordic” practice. Indeed,<marker type="page" number="4"/><marker type="block"/> in a team scenario, there may be competing explanations for experiences, events and problems, but gradually, interpretations lead to consensus (<xref ref-type="bibr" rid="R55" id="46" class="deo:Reference">Weick, 1995</xref>:p79), i.e. equifinality. This has been noted to occur during emergencies where capable individuals and teams improvise life-saving solutions out of chaos (<xref ref-type="bibr" rid="R14" id="47" class="deo:Reference">Ciborra 1999</xref>). In a case of systems engineering, it was reported how system designers had to ‘design in the dark’ by knowledgeably second-guessing the requirements due to unforeseen lack of access to executive users (Nandhakumar and Jones, 1997b).<marker type="block"/> Improvisation is therefore situated and emergent (<xref ref-type="bibr" rid="R15" id="49" class="deo:Reference">Ciborra, 2002</xref>) occurring at the meeting point of thought and action, at a moment in time (<xref ref-type="bibr" rid="R43" id="50" class="deo:Reference">Orlikowski, 1996</xref>; <xref ref-type="bibr" rid="R14" id="51" class="deo:Reference">Ciborra, 1999</xref>) as actors make do with whatever is ready-to-hand (Levi-<xref ref-type="bibr" rid="R35" id="52" class="deo:Reference">Strauss, 1966</xref>:p.17) to make sense of their conditions. This fleeting nature of improvisation is akin to that of play which is “an escape from responsibility and routine” (<xref ref-type="bibr" rid="R31" id="53" class="deo:Reference">Huizinga, 1970</xref>:p.26) and radiates spontaneity (<xref ref-type="bibr" rid="R59" id="54" class="deo:Reference">Zain and Rickards, 1996</xref>). It, like improvisation, has a sense of being on the verge of being beyond control, although never actually beyond that verge (<xref ref-type="bibr" rid="R49" id="55" class="deo:Reference">Sroufe and Waters, 1976</xref>). This is consistent with Gidden’s notion of human agency, i.e. just because things have been “so” does not mean they should continue as such, “the seed of change is there in every act which contributes towards the reproduction of any ‘ordered’ form of social life” (<xref ref-type="bibr" rid="R11" id="56" class="deo:Reference">Cassell, 1993</xref>:p108). Like play, improvisation and human agency are interventions in any ordered or disordered situation that draws on, “a mixture of the pre-composed and the spontaneous” (<xref ref-type="bibr" rid="R56" id="57" class="deo:Reference">Weick, 1998</xref>:p551); creation while performing (<xref ref-type="bibr" rid="R38" id="58" class="deo:Reference">Miner et al., 1996</xref>). <xref ref-type="bibr" rid="R6" id="59" class="deo:Reference">Berliner (1994)</xref> furthers this idea, saying, “Improvisation involves reworking precomposed material and designs in relation to unanticipated ideas conceived, shaped and transformed under the special conditions of performance, thereby adding unique features to every creation”(p421). Special local conditions reflect that one improvises on something; it does not materialize out of thin air (<xref ref-type="bibr" rid="R56" id="60" class="deo:Reference">Weick, 1998</xref>:p546). Further, improvisation depends on a broad base of knowledge (<xref ref-type="bibr" rid="R6" id="61" class="deo:Reference">Berliner, 1994</xref>:p544), although some scholars regard improvisation in negative terms (e.g. <xref ref-type="bibr" rid="R21" id="62" class="deo:Reference">Paulk et al, 1993</xref>).</region>
        <region class="DoCO:TextChunk" id="68" confidence="possible" page="4" column="1">Improvisation therefore carries the hallmarks of control in its potential to bring about order from chaos (e.g.<xref ref-type="bibr" rid="R29" id="64" class="deo:Reference">Highsmith, 2002</xref>; <xref ref-type="bibr" rid="R14" id="65" class="deo:Reference">Ciborra 1999</xref>).Yet it is largely regarded as something distinct from control and a concept that requires further research (<xref ref-type="bibr" rid="R10" id="66" class="deo:Reference">Brown and Eisenhardt, 1995</xref>). This is not surprising as control usually infers planning, whereas improvisation does not usually involve this. <xref ref-type="bibr" rid="R10" id="67" class="deo:Reference">Eisenhardt and Tabrizi (1995)</xref> have investigated improvisation in innovation, finding that innovation teams that adopted a more improvisational approach developed more successful innovation. However this was not characterized in terms of control.</region>
        <region class="DoCO:TextChunk" id="69" page="4" column="1">This paper addresses the theoretical disconnect between control and improvisation, and its main research question is: How can improvisation enable control in a computer game design context? The remainder of the paper is structured as follows: First, we outline our research methods and setting. Second, we present 2 computer game projects that constitute a field study at a game studio. We then analyse the data and develop a theoretical model in a largely bottom-up manner. Finally we discuss the implications of our findings before drawing some brief conclusions.</region>
      </section>
      <section class="deo:Methods">
        <h1 class="DoCO:SectionTitle" id="70" page="5" column="1">Research methods</h1>
        <region class="DoCO:TextChunk" id="88" page="5" column="1">The empirical, interpretive study was conducted at Quantum Game Studio (QGS). QGS (a pseudonym) was founded in March 2003 in Singapore with a multidisciplinary development team of twenty. QGS was regarded by Singapore’s Infocomm Development Authority (IDA) as one of the leading local studios, which mostly developed mobile phone games. Since 2003 they had produced numerous games or ‘titles’, some of these were collaborations with European partners. Their games were distributed by mobile phone operators around the world such as Vodaphone. When the researcher first visited QGS in 2004 at their Genting Road office (an industrial area in Singapore), he felt the physical working environment was ‘homely’. For instance, the managing director’s office, which doubled as a meeting room, contained antique Indonesian artifacts and teak furniture. The engineers’ office featured less ‘décor’ but their walls were filled with ‘pop culture’ posters. The artists’ larger office seemed more playful with games like table football set up in the area behind them. <marker type="block"/> Starting in January 2004 we conducted a thirty-month field study of QGS and their game innovations using an in-depth case study approach (e.g. <xref ref-type="bibr" rid="R53" id="73" class="deo:Reference">Walsham 1993</xref>). This approach provides rich description and understanding of phenomena by getting “inside the world of those generating it” (<xref ref-type="bibr" rid="R46" id="74" class="deo:Reference">Rosen 1991</xref>, p.8). It enabled me to gain sufficient access to the knowledge and meanings (Nandhakumar and Jones 1997) of the game innovators in the setting. twenty six semi-structured interviews (see <xref ref-type="table" rid="T1" id="75" class="deo:Reference">Table 1</xref>) with diverse professionals at QGS were conducted. The interviews concerned game projects that they were currently or very recently involved with. All the interviewees were aware that the lead field researcher had signed a confidentiality agreement, and this, perhaps, contributed to their confidence to speak out on inter professional issues. The interviews all took place in a private room on QGS’s premises, were of between 60 and 90 minutes duration, recorded onto audio devices and fully transcribed by the first author.<marker type="block"/> To aid the analysis, all qualitative data was imported into Weft QDA – an open- source Computer-aided Qualitative Data Analysis Software. Weft is simply a tool for<marker type="page" number="6"/><marker type="block"/> organizing, structuring and thinking about the data; the analysis is ultimately accomplished by the researchers. Hence, to fully digest the data, a microanalysis of words, phrases, and lines was carried out. The micro-interpretations this produced were stored as ‘memos’ in each category or code, so that they could be conveniently revisited later to inform our conceptual development. I then used structuration theory (Giddens 1984) as a theoretical lens (<xref ref-type="bibr" rid="R45" id="81" class="deo:Reference">Orlikowski, 2000</xref>) to guide the analysis and interpret the data. I now briefly describe the essential elements of Structuration theory and then explain why it is pertinent to draw on this as an analytical lens.<marker type="block"/> In Giddens’ theory (1984) the notion of dualism between structure and individual experience is replaced by the notion of ‘duality of structure’, in which human activities and social structures are recursively related. Thus, “social structures are both constituted by human agency, and yet at the same time are the very medium of this constitution.” (<xref ref-type="bibr" rid="R26" id="83" class="deo:Reference">Giddens, 1976</xref>). Human agency has the connotation of power being in the hands of the individual, i.e. having the capability to make a difference in a situation (Giddens, 1984). For analytical convenience Giddens examines this structure/agency mutuality along three dimensions: (i) signification, (ii) domination, and (iii) legitimation. Giddens’ (1984) model of structuration is presented in <xref ref-type="fig" rid="F1" id="84" class="deo:Reference">Figure 1</xref>.<marker type="block"/> The signification dimension is concerned with meanings and the means by which we interpret day-to-day phenomena by drawing on established and changing interpretive schemes, or, stocks of knowledge. These schemes or stocks may be conditioned by powerful institutions who exercise that power by acting through resources associated with their structures of domination. Furthermore, the particular contexts of meaning can be enforced, such as how we interpret a yellow box with a camera inside it on top of a steel pole by the side of road in the UK. We have come to know through established channels of meaning, that the police authority has deemed this to symbolize a speed camera. This stability of meaning affords us ontological security. To further the example, upon seeing and interpreting the significance of the speed camera according to conditions of signification and domination, the driver then refers to other signs such as the speed limit allocated to the road (also introduced by those acting through structures of domination like the highways department). S/he interprets and compares the meaning of this speed limit sign and then compares it against another one in their car, i.e. the speedometer. This involves the driver in a reflexive monitoring action determining whether s/he is acting legitimately, i.e. within the confines of the law. Thus, structures of legitimation interact with those of domination, and establish norms of day-to-day life. However, whether the driver (the agent), acts in accordance with such norms is another matter; they may choose to do otherwise. According to Giddens’ dialectic of control, the driver may either: (a) acquiesce to</region>
        <region class="unknown" id="72" page="5" column="1">Data Collection and Analysis</region>
        <region class="DoCO:TableBox" id="Tx77">
          <content>
            <table class="DoCO:Table" number="1" page="5">
              <thead class="table">
                <tr class="table">
                  <th class="table"> Name</th>
                  <th class="table"> Position</th>
                  <th class="table"> Number of Interviews</th>
                </tr>
              </thead>
              <tbody>
                <tr class="table">
                  <td class="table"> Alf</td>
                  <td class="table"> Game Designer / Managing Director</td>
                  <td class="table"> 6</td>
                </tr>
                <tr class="table">
                  <td class="table"> John</td>
                  <td class="table"> Project Manager</td>
                  <td class="table"> 6</td>
                </tr>
                <tr class="table">
                  <td class="table"> Mac</td>
                  <td class="table"> Computer Graphics/animation programmer</td>
                  <td class="table"> 3</td>
                </tr>
                <tr class="table">
                  <td class="table"> Peter</td>
                  <td class="table"> Western-style Artist</td>
                  <td class="table"> 1</td>
                </tr>
                <tr class="table">
                  <td class="table"> Gayle</td>
                  <td class="table"> Anime Artist</td>
                  <td class="table"> 2</td>
                </tr>
                <tr class="table">
                  <td class="table"> Richard</td>
                  <td class="table"> Lead programmer</td>
                  <td class="table"> 2</td>
                </tr>
                <tr class="table">
                  <td class="table"> Andy</td>
                  <td class="table"> Senior Programmer</td>
                  <td class="table"> 2</td>
                </tr>
                <tr class="table">
                  <td class="table"> Don</td>
                  <td class="table"> Junior Programmer</td>
                  <td class="table"> 2</td>
                </tr>
                <tr class="table">
                  <td class="table"> Angelina</td>
                  <td class="table"> Intern programmer</td>
                  <td class="table"> 1</td>
                </tr>
                <tr class="table">
                  <td class="table"> Brandon</td>
                  <td class="table"> Artist</td>
                  <td class="table"> 1</td>
                </tr>
                <tr class="table">
                  <td class="table"></td>
                  <td class="table"> Group</td>
                  <td class="table"> 1</td>
                </tr>
                <tr class="table">
                  <td class="table"></td>
                  <td class="table"> TOTAL=</td>
                  <td class="table"> 27</td>
                </tr>
              </tbody>
            </table>
          </content>
          <region class="TableInfo" id="78" confidence="possible" page="5" column="1">Name Position Number of Interviews Alf Game Designer / Managing Director 6 John Project Manager 6 Mac Computer Graphics/animation programmer 3 Peter Western-style Artist 1 Gayle Anime Artist 2 Richard Lead programmer 2 Andy Senior Programmer 2 Don Junior Programmer 2 Angelina Intern programmer 1 Brandon Artist 1 Group 1 TOTAL= 27</region>
          <caption class="deo:Caption" id="79" page="5" column="1">Table 1: Summary of interviews</caption>
        </region>
        <region class="unknown" id="86" page="6" column="1">Structure Signification Domination Legitimation Modality Interpretive Resources Rules schemes Interaction Communication Power Sanction</region>
        <region class="DoCO:FigureBox" id="F1">
          <caption class="deo:Caption" id="87" page="6" column="1">Figure 1: Giddens (1984) Model of Structuration</caption>
        </region>
        <region class="DoCO:TextChunk" id="89" confidence="possible" page="7" column="1">structural forces and cut their speed accordingly, thereby ethically responding to legitimated norms of driving, or, (b) the driver may wittingly or unwittingly ignore established control norms and thereby attempt to change the rules of driving. In this way the driver does not reproduce structures of signification, domination, nor legitimation, and may later knowledgeably draw on stocks of knowledge to discursively defend their actions. The capability to control the conditions is an aspect of agency: “By control I mean the capability that some actors, groups or types of actors have of influencing the circumstances of action of others.” (Giddens, 1984:p283)</region>
        <region class="DoCO:TextChunk" id="94" page="7" column="1">My reason for using structuration theory as a theoretical lens/sensitizing device was: (i) the theme of human agency fitted well with the paper’s interest in improvisation, being situated and emergent (<xref ref-type="bibr" rid="R15" id="90" class="deo:Reference">Ciborra, 2002</xref>), whilst being enabled and constrained by (ii) social structures such as normative software methodologies (<xref ref-type="bibr" rid="R42" id="91" class="deo:Reference">Orlikowski and Robey 1991</xref>) which may encourage control (<xref ref-type="bibr" rid="R33" id="92" class="deo:Reference">Humphrey et al. 1991</xref>; <xref ref-type="bibr" rid="R21" id="93" class="deo:Reference">Paulk et al. 1993</xref>).</region>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="95" page="7" column="1">Field study</h1>
        <region class="DoCO:TextChunk" id="96" page="7" column="1">I present two game projects designed and developed at QGS: the Kia Valley driving game, and the Tiger Golf sports game. The rationale for presenting these two games is that they had very similar characteristics. They featured short time horizons, vague requirements, similar design teams, were technically challenging, and consequently necessitated much improvisation and ingenuity in order to deliver them.</region>
        <region class="DoCO:TextChunk" id="97" confidence="possible" page="7" column="1">The Kia Valley driving game Kia Valley was a mobile and PC driving game developed between July 2005 and October 2005. The QGS designers and developers involved were: lead programmer John, game designer Alf, animator Mac (minimally), and a freelance artist Brandon recently recruited from China. Also involved were the client Kia Motors (Singapore) (unavailable for interview) and GarageGames who developed the development tool Torque. Richard left QGS at the start of this game project, after delivering what he called a ‘Kung Fu fighting game. This was so he could focus on development, not team leading. Alf explained: “[Richard] wants to only develop. Tho I had to take on boring projects to stay afloat. Conflict of 'interest'. Hehe” (SMS message from Alf)</region>
        <region class="DoCO:TextChunk" id="98" page="7" column="1">John responded to Richard’s resignation by taking on full programming responsibility for three upcoming projects. John said:</region>
        <region class="DoCO:TextChunk" id="99" confidence="possible" page="7" column="1">“Well its nothing something enjoyable, or something you can keep doing on and on especially given our work rate.”</region>
        <region class="DoCO:TextChunk" id="100" page="7" column="1">However, despite the initial stress he expressed, he found the first project as a full- time programmer, developed for a Korean car company, enjoyable; he thought it was a “rush” in the sense of rising to the challenge. Firstly, Alf with some input from John produced a basic design document for their client Kia Motors (Singapore):</region>
        <region class="DoCO:TextChunk" id="101" confidence="possible" page="8" column="1">“Essentially our design was about 2 paragraphs long saying we need a basic driving game.”</region>
        <region class="DoCO:TextChunk" id="102" page="8" column="1">This was drawn up during a short concept meeting at their office with the Korean company. Initially the client had wanted an AI player, a “bot”, but after talking to Alf they decided that a multiplayer game would be easier than an AI one. So they put together a quote outlining the costs for an AI version, multiplayer version and single player version. The client would have had to have paid a lot for the AI feature so they were not surprised when the client opted for the single player version. This simplified the design and development process because the player would be driving against the clock instead of another player or “bot”. Alf then circulated the updated design document throughout the team and then proceeded to search the internet for ideas to visualize the game.</region>
        <region class="DoCO:TextChunk" id="103" confidence="possible" page="8" column="1">The challenge in the project was the imminent deadline QGS had to meet; they only had one month to develop it all. John regarded this as an immutable condition: “it [the deadline] was in a sense beyond their [Kia’s] control as well, since their car show had to happen at that certain date, the venue booking and so forth.”</region>
        <region class="DoCO:TextChunk" id="105" page="8" column="1">With little planning time available, he and the rest of the team decided to go straight into production. The scant nature of the design did not help: “I think we need a fortune-teller with the game designer”, said John. This produced friction in the process over the design, although the lack of time made it easier for John to make the case that using a tool, kit or engine was necessary. Alf agreed and he moved on to appointing an artist who would load 3D models into a chosen development kit. At the same time, John started evaluating driving game kits or tools to ‘springboard’ development as per his suggestion. He considered Cyrix and Power Render but in the end he decided to use one he identified a few years ago called Torque. At the time he did not know what to do with Torque, so he just put it aside. He liked Torque because the source code was provided with the engine, so if anything broke down or there were features he wanted to implement which were not provided in the kit he could do so. Most of the time, however, he made use of the scripts that came along with the starter-kit. <marker type="block"/> John started with “the easy bits”, as he described them. Using a terrain editor, he put in the hills, trenches, paint textures for the ground, crafted the track etc; assembled the game-world first. He then designed the GUI such as the car dashboard, dials, etc. The GUI art was mostly done by Alf using Photoshop and it was straightforward to plug- in the graphics. John then got to grips with the car dynamics too which also had scripts he could invoke. There was a built-in car in the starter-kit that he practiced with; he tried changing the suspension and watched the car bounce all over the place. In the meantime, the artist was building the car model in 3D Max but John had reservations about his designs:</region>
        <region class="DoCO:TextChunk" id="106" confidence="possible" page="8" column="1">“the first few textures he came out with were really China...you know those anime kind of waves on the car, it looked like a Chinatown.” He asked the artist to stick to plain colors instead. The artist and John also had to figure out what should be in the ‘[3d]Max’ file to make it exportable to the Torque</region>
        <region class="DoCO:TextChunk" id="107" page="9" column="1">engine. Initially, the artist was working from home and they sent him the engine documentation, “which was a bit overwhelming”, said Brandon. When the artist did not complete the model and it was obvious he did not understand how to integrate with the game engine, John brought him in to work in the office for the remainder of the project. They discovered that the Max file had to contain dummy nodes or objects to inform the engine what a wheel was, where the centre of mass was, where the cameras should be etc. This was made easier by using a custom exporter tool, a plug- in for 3D Max, which enabled them to export a file into Torque format. It took a while for John and the 3D artist to get the engine to accept the file; he recalled one day when they kept trying out models and loaded in twenty-five car models until they jammed the server. The first few times they tried loading the car model, the car either had no tyres, sank into the ground, just flew around, or the tyres were perpendicular to the direction of the car’s motion. The team found these trials very amusing:</region>
        <region class="DoCO:TextChunk" id="108" confidence="possible" page="9" column="1">“Cos the first time we put it in, the car was had no tyres, or car sinks into the ground, or car flies around (laughter). Tyres are perpendicular to the direction you are traveling in” said John.</region>
        <region class="DoCO:TextChunk" id="110" page="9" column="1">A few “bugs” emerged with the engine in the early stages of the project; when the car came to a stop in four-wheel drive mode, the game crashed. Partly by luck in the middle of the project, John changed some sound rules and discovered that if the engine sound file was taken out then the car would not crash. This pointed them towards a solution. Another example was a streaming sound “bug”, i.e. when the engine was “rev’d”, the sound decreased, and if it was “rev’d” too much the game crashed. John fixed this and made it available to the developers of the engine, GarageGames. Such problems were not always fixed immediately however. If they seemed too time consuming he would put them aside to let his subconscious do the thinking whilst working on other aspects. Only later on in the development phase would such “bugs” be ironed out. <marker type="block"/> Towards the end, the less important aspects of the game were implemented such as high score, car preview, driving wheel, hardware controller and the speedometer. Although the default Torque engine came with a speedometer Brandon described it as “an ugly little bugger” because the needle was just a triangle it looked amateur. So he wanted to put an actual needle instead. This concern came along quite early on in the process, within the first week. Alf was commenting on it but they put it off until the last week because it was a small matter and if they had little time left over they could stick with the standard one; at least they would still have a game. As it turned out, they did have time and did manage to put in a more professional looking needle. Other standard game aspects were implemented towards the end too such as game lobby or menu and the high scoring table. John’s overriding principle was to keep it simple stupid (KISS), i.e. if they did not need a feature then it was not put it in, unless there was time left over for such ‘bells and whistles’. Identifying what was a feature and what was a bell or a whistle was constantly being decided on-the-fly. An example of not having enough time for this was when the car collided with a cone it stopped. They did not have time to implement the ‘rigid shape physics’ such that when you hit a relatively soft object, such as a simple traffic cone, it would fly. Instead, they thought they would remove the cone altogether from the game. Although, when they play-tested the game somehow the cone re-appeared and was gigantic in size: “The cone sort of sneaked in there, so there was this super gigantic cone in the highway.”</region>
        <region class="DoCO:TextChunk" id="111" confidence="possible" page="10" column="1">This was deemed so funny and entertaining that the cone became a feature of the game. The team was glad this had happened. If they had not conducted play-testing, they would not have been able to make this serendipitous design decision. Once the project had been satisfactorily delivered to the client, John wanted to understand how the team had managed to complete the game in just three weeks. He wrote a commentary and posted it on an online forum.</region>
        <region class="DoCO:TextChunk" id="117" page="10" column="1">The Tiger Golf sport game Tiger Golf was a mobile sports game developed between January 2004 and May 2004. The project team at QGS comprised the new lead programmer John, Alf, and an artist who was not available for interview. QGS and their client discussed this game project in the light of a reference game. However, this turned out to be more than a rough guide reference game, since the client more or less wanted a “clone” of it to reproduce almost entirely. John said. <marker type="block"/> “This was a 3 month project. And the specifications we got from the client was... well there’s wasn’t really much specifications, he just said he wanted to make a mobile golf game, he wants it to be as good as Tiger Woods Golf, and he wants it to be cheap.”<marker type="block"/> This lack of clarity from the client provoked John and Alf to communicate in order to clarify the scant requirements. They sought to understand the client’s vision for the game by brainstorming. John continued:<marker type="block"/> “We did a bit of brainstorming with regards to what unique features we could put into the game and so forth. Erm, so what we eventually came up with was a game with an overhead view and a golf course which is randomly generated, so every time you play it’s a different course and basically it’s a very 2D looking thing, but because its 2D we could do this random generation thing.”<marker type="block"/> This brainstorming process resulted in a game design document that was passed to the client. After reading it the client simply said, “ok let me know when it’s done”, according to Alf. There was no objection from the client, and so QGS began to implement the design. The client insisted upon formal constant communication through structured weekly progress reports. The developers also sent samples of the artwork regularly to him; art assets such as the golf clubs and so forth. These were attempts on both sides to make sure they understood each other. This culminated in a prototype at the end of the first month, which was shown to the client. According to Alf, the client was unhappy with the prototype:<marker type="block"/> “The client said it doesn’t look as good as the Tiger Woods one, and apparently he did not understand the original specifications when we sent them to him; he didn’t realize it was going to be 2D. He was expecting a 3D game, which was almost impossible on mobile phones at that time.”</region>
        <region class="DoCO:TextChunk" id="118" confidence="possible" page="10" column="1">Despite the constant communication between client and QGS in the form of reports and art samples there was still a lack of shared understanding. They seemed to be talking past each other, not clarifying meanings but making assumptions. It was only when a playable prototype was presented to the client that an awareness of a</region>
        <region class="DoCO:TextChunk" id="120" page="11" column="1">communication breakdown emerged. As a result QGS understood more fully what the client wanted and agreed to the client’s demands to redesign the game. John expressed to Alf and team that a 3D game would not be easy to make for a mobile phone. They had to spend time researching 3D rendering for mobile devices, seeing how balls fly and so forth. Initially the game was partially 3D, a compromise between 2D and 3D, by using a “block renderer”. This was not as straightforward as hoped, however, and resulted in the team dropping native 3D and faking-it; John said: <marker type="block"/> “On hindsight had we started working on that at the start of the three months maybe we would have gone through with that route but that wasn’t too viable. So after a bit of research a bit of trial and error we went back redesigned again and this time it was completely fake 3D as in we basically have a bitmap of the golf course that we push along as you are supposedly rotating, so we got that in, the catch of course is that that is really graphics intensive, and it only really runs on the high end phones.”</region>
        <region class="DoCO:TextChunk" id="121" confidence="possible" page="11" column="1">The consequences of poor communication and the inability to reach a shared understanding resulted in great deal of rework. Given the technical difficulty of implementing 3D on a phone, along with their lack of knowledge regarding this, the developers had to find a way to improvise. This resulted in a “fake 3D” solution that meant the game could only be played on high-end phones. This solution alone took one month to devise and had to be communicated to the client before proceeding too far and running the risk of rework again. Alf said: “Although we knew that this was the way to go about it, we told the client that it wasn’t going to perform very well, but it does provide the eye candy so, and he seemed, the client, seemed to like what was going on there... so we continued with that route, we made the game.”</region>
        <region class="DoCO:TextChunk" id="122" page="11" column="1">This time the developers constantly play-tested the game, to evaluate its experience, and shared this activity with the client. Less emphasis was placed on formal regular reports but more on play-testing. As the developers did so they reflected on the game constantly, and soon decided that it was “really boring”. They took it upon themselves to alter the game, according to John:</region>
        <region class="DoCO:TextChunk" id="123" confidence="possible" page="11" column="1">“to make it a bit more compelling Alf decided to add in a few more features, like changing of golf sets and some world cup thing as well, because we realised that the game play is really boring” John mentioned the importance of play-testing in finding out these “playability”, “fun” issues: “as you design half way you realize its not really fun and that’s where you need your changes to come in.”</region>
        <region class="DoCO:TextChunk" id="124" page="11" column="1">Thus, although they ran the risk again of deviating from the client’s requirements, they trusted their own judgment on what made a good game, and added features accordingly. Once the developers judged the game to be complete, they sent it to the client. He discovered that it did not run on the low-end phones, and insisted on the game being ported. However, despite the client’s insistence, QGS had little enthusiasm for porting</region>
        <region class="DoCO:TextChunk" id="125" confidence="possible" page="12" column="1">the game because they were now behind with other projects. So they outsourced the porting. John thought that the project would have been easier for them if the client had signed a formal business contract:</region>
        <region class="DoCO:TextChunk" id="126" page="12" column="1">“back to IBM days again, having a document with a full specification which will require the client’s signature on so once he has signed ‘yes this is what I want’, then that is what he wants to get, and if he asks for anything that is not in the specs then we can charge extra, ask for more time to implement the change”</region>
        <region class="DoCO:TextChunk" id="127" confidence="possible" page="12" column="1">A formal contract was seen as the antidote in future scenarios - a means of gaining control: “at least that [signed documentation] gives us some semblance of control. For this project we were literally dangling at the end of the rope.” Summary Two game projects were described which had similar features and necessitated much improvisational skill. I now provide an analysis drawing on a structurational lens.</region>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="128" page="12" column="1">Analysis</h1>
        <region class="DoCO:TextChunk" id="129" confidence="possible" page="12" column="1">I now draw on the three associated dimensions and related elements of Giddens’ Structuration theory as a lens by which to interpret the themes of communication, power, and legitimation. I relate to communication to efforts to understand project details such as requirements and design, power relates to improvisation, and legitimation relates to norms of software development.</region>
        <region class="DoCO:TextChunk" id="138" page="12" column="1">Communication The game designer (Alf) began the Kia Valley projects by writing a design document in consultation with the external party, such as the Kia client. This document contained an interpretation of the client’s requirements, or essential design meanings, like, “we need a basic driving game.” Alf expected his team to understand and to develop the game based on these scant design meanings. In writing and distributing the design document to his team, Alf sought to establish a design structure for the project. He did this by drawing on cultural schemes, such as concept art from the internet, which he hoped the designers could use and reproduce. He thereby reproduced cultural meanings in his own game designs with the intention of setting the direction for each of QGS’s projects. However, the game designer seemed to assume that he shared these interpretive, cultural schemes with his team. This was not always the case however, and as a result multiple interpretations of the equivocal design evolved revealing a lack of shared understanding of the game designer’s intended design. Further, Alf was not aware initially that John was intending to leverage a car game tool, which had a major influence on the design. And even when provided with a design, the developers did not always build upon and reproduce the significance the game designer intended for a game. This meant a great deal of effort was required to try and overcome this confusion within the design team. <marker type="page" number="13"/><marker type="block"/> Only when the prototype had been constructed and play-tested did conditions arise in which the interpretations of the requirements and design could be properly understood and evaluated by client and team. As per the case description, the client did not share the designers’ interpretations, and so the design in-use had to be reworked and a 3D game was improvised. <xref ref-type="fig" rid="F2" id="131" class="deo:Reference">Figure 2</xref> summarizes the structuration of communication in this project.<marker type="block"/> There was a lack of congruence throughout the team regarding the design meanings. There were ‘interpretive holes’ in the design in-use that the designers encountered along the way and had to ‘patch’. They did this sometimes by making assumptions about the designer’s or client’s vision for the game and producing a design in-use with new interpretations. Given the dynamic nature of play-testing in both projects described, it could not always be anticipated until this activity took place, whether the design made sense to the designers, and what it implied in terms of further game-play features. Furthermore, whether the game designer or client reproduced and sanctioned the programmers’ improvised meanings depended upon the play-testing activity. Therefore, the interpretation of ambiguous designs in-use, and play-testing, were key activities that contributed to meaning divergence and congruence in the communication process. In the figure below I gather together these emerging actions and structures to begin building a picture of what was ‘going on’. The elements in the figure such as ‘equivocal design in-use’ are reused throughout the study to help gradually build a conceptual model of the process.<marker type="block"/> Power As the previous section regarding the communication process at QGS revealed, equivocal initial designs had the potential to provoke the designers to exercise their capabilities and make changes to the design. This is but one example of designers at QGS exercising their power in the sample two projects, i.e. not letting things be “so”,</region>
        <region class="unknown" id="133" page="13" column="1">Structure Design in-use Modified and Stabilised design Action MD interprets author MD and meanings producer the Client design approves Design implemented is testing Play- Client developers’ doesn’t interpretations, sanction Client’s requirements into design document and asserts his interpretation of design</region>
        <region class="DoCO:FigureBox" id="F2">
          <caption class="deo:Caption" id="134" page="13" column="1">Figure 2: the structuration of communication in the Tiger Golf game</caption>
        </region>
        <region class="unknown" id="136" page="13" column="1">Equivocal design in-use Actions: Interpretation and authoring of design Play-testing</region>
        <region class="DoCO:FigureBox" id="F3">
          <caption class="deo:Caption" id="137" confidence="possible" page="13" column="1">Figure 3: Dynamics in communication</caption>
        </region>
        <region class="DoCO:TextChunk" id="139" confidence="possible" page="14" column="1">but taking action in challenging situations. The exercise of power was another prominent dimension of QGS’s game innovation process.</region>
        <region class="DoCO:TextChunk" id="142" page="14" column="1">In the case of the Kia Valley project, Richard decided to resign since he did not want to lead but just program. As a result, a situation emerged where the engineering team’s strength and experience was significantly diminished. Subsequently, John initially felt stressed at the prospect of increased workload and the possibility of failure in the project. However, when he re-interpreted the scenario this served to motivate him as. He exercised his power in this situation by drawing on material resources - instead of programming from scratch he made use of an established development tool or game engine called “Torque”. The resources that underpinned his capability in this critical change situation were acquired though his continuous monitoring of the game development industry context over the years. This was also how John chose to shape the development process, i.e. through greater monitoring and use of development tools. The ISD literature tends to emphasize that tool choice and use is shaped by organizational forces (<xref ref-type="bibr" rid="R48" id="140" class="deo:Reference">Savolainen, 1999</xref>) leading to developers becoming more replaceable and interchangeable (Orlikowski, 1993). This particular game development situation was different however in that an individual developer’s selection and use of a tool was an outcome of them exercising their agency. John’s identification and use of such material resources as development tools contributed to his positive feelings, i.e. he eventually had fun in this situation and his interaction with the tool also provided some comic moments. The development tool resource eased the process also, as its affordances suggested to him and team how to go on; it provided game-play direction. The power aspect of the process in this project is depicted in <xref ref-type="fig" rid="F4" id="141" class="deo:Reference">figure 4</xref> below. Additionally, the diagram introduces ‘emotions’ which are underneath ‘consciousness’ in the diagram to portray that emotion is seated deeply in the agent’s consciousness.</region>
        <region class="unknown" id="143" page="14" column="1">Structure Engineering team’s “strength” dimished Development Resources Tools Action Identifies tool and improves team’s productivity Reflexive monitoring Consciousness Emotions John unhappy</region>
        <region class="DoCO:FigureBox" id="F4">
          <caption class="deo:Caption" id="144" page="14" column="1">Figure 4: structuration of power in the Kia Valley game</caption>
        </region>
        <region class="DoCO:TextChunk" id="145" confidence="possible" page="14" column="1">The Kia Valley project highlighted the additional importance of and relationship between mood/emotion and reflexive monitoring. Emotion was also important element of play-testing in which the designers reflexively monitored their emotions, i.e. they reflected on whether the game excited them. This was similarly observed in the Tiger Golf game. I now analyze the case data from the perspective of legitimation.</region>
        <region class="DoCO:TextChunk" id="147" page="15" column="1">Legitimation As the previous section on the exercise of power in the projects, this was linked to legitimation in some circumstances. For example, structures of domination in the wider context were linked to “rules”, such as a client’s minimum requirement for a game project or even a deadline. For example, in Tiger Golf the rule laid down by the client was that: “he wanted to make a mobile golf game, he wants it to be as good as Tiger Woods Golf, and he wants it to be cheap.” (John) The case data reveals that legitimation was a further major dimension in QGS’s game development process. <marker type="block"/> The designers reproduced structures of legitimation by drawing on norms and rules of conduct in their ongoing development practices. For instance, documenting a design, and the agile practice of tool use. Standard features like a car’s dashboard and speedometer tended to be implemented towards the end of a project, as in the Kia Valley game. For example, John and Brandon made changes to the outdoor terrain and speedometer needle. He thereby changed and at the same time reinforced the ‘rules’. In this way, the game play rules were enabled and constrained by the development tool. Some of QGS’s practices reproduced structures of legitimation, or be more normative, at times.</region>
        <region class="DoCO:TextChunk" id="148" confidence="possible" page="15" column="1">This is in contrast to the play-test activity; its occurrence was sanctioned by the creative nature of the process and resulted in interruptions of ongoing game development practices. For instance, play-testing the Kia Valley game led to interrupting the norms of driving games, with regards the giant cone. The intuitive nature of computer games sanctioned a cascade of fluid activities, not only in play- testing, but the micro activities it comprised. These were suffused with the creation, evaluation and transformation of rules according to the level of excitement and challenge the actors envisaged for the game. Play-testing was a chronically reflexive process in which the actors drew upon normative and personal game playing moods, which were largely embedded in their practical consciousness.</region>
        <region class="DoCO:TextChunk" id="154" page="15" column="1">Depending on how a normative documented design or development kit was interpreted by the designers, this had the potential to flex the process too. Legitimation could therefore lead to non-routine actions. Given the designs were construed as being ambiguous for instance, this provoked a stream of non-routine improvised activities in order to fill the ‘interpretive holes’ in the design in-use. The communication process therefore had the potential to significantly flex the game development practices. Indeed, play-testing was a practice that enabled the clarification of the meanings of the design in-use. Therefore, while play-testing constituted a non-routine and improvised activity, its repetition simultaneously contributed to the sedimentation of the design in-use and thereby also the process as a whole (see <xref ref-type="fig" rid="F5" id="149" class="deo:Reference">figure 5</xref>). The routine and the non-routine therefore reflected back and forth on each other.<marker type="page" number="16"/><marker type="block"/> Play-testing as a non-routine mode of development, was therefore related to routinisation in the sense that it led to a stabilized design in which features would be known and implemented. A stabilized design would imply less experimentation and venturing, and more adhering. Norms of software development were not particularly useful in times of disruption, where improvisation was needed to respond to emergent challenges or hazards. Nor were they deemed appropriate more generally at QGS, where it was held that play-testing and trial and error was more appropriate. This play-test improvisational approach was upheld on account of the meanings the actors attributed to the nature of computer games, i.e. they were intuitive and therefore called for an intuitive approach, one which invoked the actors’ inner-life. Consensus over the way the game made the actors feel was more important than a predefined feature checklist.<marker type="block"/> The three structurational analyses above discussed the interplay between inter-actions, modalities and structures that mutually generated the game innovation process at QGS. I now discuss these analyses in concert and present a model of contrapuntal game innovation that illustrates how improvisation may be considered a form of control.</region>
        <region class="unknown" id="151" page="16" column="1">Structural aspects: Stabilised design [Development tool] CGS’s ethos on games [Bug reports] Game rules Actions: Play-testing (non-routine) Consciousness: Inner-life impulse</region>
        <region class="DoCO:FigureBox" id="F5">
          <caption class="deo:Caption" id="152" confidence="possible" page="16" column="1">Figure 5: Legitimation of development practices – forces of non-routinisation</caption>
        </region>
      </section>
      <section class="deo:Discussion">
        <h1 class="DoCO:SectionTitle" id="155" page="16" column="1">Discussion</h1>
        <region class="DoCO:TextChunk" id="168" page="16" column="1">The above findings indicate that the game innovation process was characterized by mutualising processes involving communication, the exercise of power, legitimation and emotion. These mutualising processes involved making sense of equivocal designs in-use through the ingenious exercise of rules, resources and emotions, as well as the selective and symbolic leveraging of software development norms. The communication process involved intense and ingenious efforts to make sense of equivocal designs in-use. To exercise their power over or improvise around ambiguity, the actors engaged in an intense interplay between (re)interpretation and play-testing. Play-testing was the act by which the actors performed a game prototype, i.e. a manifestation or “build” of a design in-use. Sometimes this occurred as a distinct phase in the innovation process, or through the use of a design tool. The play-test performance contributed to efforts to make sense of designs in-use, stimulating interpretation and reflection ( <xref ref-type="bibr" rid="R34" id="156" class="deo:Reference">Leiter, 1980</xref>; <xref ref-type="bibr" rid="R57" id="157" class="deo:Reference">Weick et al., 2005</xref>) regarding puzzling<marker type="page" number="17"/><marker type="block"/> design data (<xref ref-type="bibr" rid="R55" id="159" class="deo:Reference">Weick, 1995</xref>). This has similar characteristics to emergency situations where capable individuals and teams improvise life-saving solutions out of chaos (<xref ref-type="bibr" rid="R14" id="160" class="deo:Reference">Ciborra, 1999</xref>). For example, making sense through iterative build-and-play-test was how John chose to shape the development process in the Kia Valley project. Through his reflexive monitoring and mobilization of contexts John drew upon and played with a development tool resource to suggest means of producing a meaningful design.<marker type="block"/> Such improvisation was a means of “getting things done” (<xref ref-type="bibr" rid="R28" id="162" class="deo:Reference">Giddens 1984a</xref>:p283) involving (re)interpreting designs in-use through the construction and performance of game “builds” (play-testing). Interpretation and performance constituted a potent dyad that had the “power” to both alter and stabilize the human social construction of designs in-use. One definition of interpretation is that it is performance; for example, the performance of a piece of music (Chambers dictionary). The performative quality of interpretation in the context carries the hallmarks of improvisation, which involves reworking ready material under the special conditions of performance (<xref ref-type="bibr" rid="R6" id="163" class="deo:Reference">Berliner, 1994</xref>). These performances had “special conditions” that enabled and constrained the reworking of designs in-use. More particularly, the conditions or social and physical contexts had a mostly local nature (Nandhakumar and Jones, 1997b). The case analysis attested to this – many of the rules and resources were ready-to-hand (Levi- <xref ref-type="bibr" rid="R35" id="164" class="deo:Reference">Strauss, 1966</xref>) to the actors. Rules and resources were identified through the actors’ continuous reflexive monitoring of contexts. The monitoring and mobilizing of contexts was integral to their exercise of power - their agency or improvisational skill.<marker type="block"/> Improvisation was therefore of form of control when we refer to Giddens’ notion of it: “By control I mean the capability that some actors, groups or types of actors have of influencing the circumstances of action of others.” (<xref ref-type="bibr" rid="R28" id="166" class="deo:Reference">Giddens, 1984a</xref>:p283) More specifically, this would include the production of rules (as an aspect of circumstance) that shaped the actions of others. Improvisation involved the exercise of power and control by drawing on ready-to-hand rules and resources in the local context. So, when this affected the circumstances of action of others, this was a form of control. For example, by altering a design structure’s gameplay rules and invoking them in the context of play-testing, they affected others’ conditions, even their inner-life conditions. Improvisation also enabled the clarification of the meanings of the design in-use. While this play-testing constituted a non-routine and improvised activity, its repetition simultaneously contributed to the sedimentation of the design in-use, of meanings, and thereby also the process as a whole, akin to spiraling into control. For example, on the Tiger Golf project continual play-testing enabled the designers to ‘clear the air’ with the client. This sensemaking facilitated control (<xref ref-type="bibr" rid="R19" id="167" class="deo:Reference">Currie and Brown, 2003</xref>). A stabilized design through playful improvisation would imply less experimentation and venturing, more conforming and therefore eventually more control.</region>
        <region class="DoCO:TextChunk" id="170" confidence="possible" page="17" column="1">Conceptual Model I now present a conceptualization of the computer game innovation process, drawing on the discussion (see <xref ref-type="fig" rid="F6" id="169" class="deo:Reference">figure 6</xref> below).</region>
        <region class="unknown" id="171" page="18" column="1">Forces of design Forces of sedimentation design flux Structure Project Equivocal design Project likeness In-use uniqueness Business Collective Interdisciplinary engagement sense Conflict Less business engagement Drawing on Hazards knowledge, resources and rules Design Improvisation Action Through constant reflexive monitoring and emotion reflexion</region>
        <region class="DoCO:FigureBox" id="F6">
          <caption class="deo:Caption" id="172" confidence="possible" page="18" column="1">Figure 6: Contrapuntal computer game innovation process</caption>
        </region>
        <region class="DoCO:TextChunk" id="175" page="18" column="1">The figure has two axes; the y axis pertains to the action – structure continuum, while the x axis pertains to the continuum of design flux (change) – and design sedimentation (stabilize). This recognizes the fluidity between change and stability as well as action and structure, both of which are mutually shaping. The use of double- ended arrows symbolizes their interactive nature. The top left of the figure features a box which contains those forces that contributed to design flux such as equivocal design in-use, project uniqueness and less business engagement. Project uniqueness reflects that the two projects presented in the empirical section were not alike and therefore little or no re-use of code occurred. Less business engagement was particularly noticeable in the Tiger Golf game when very little engagement occurred with the client. The forces of design flux provoked design improvisations through the reflexive monitoring of contexts and emotions which enabled the identification and mobilization of resources (such as tools) and rules (like gameplay). Improvisation was an ongoing activity which was closely related to sensemaking and keeping things in control. This ongoingness is indicated by the recursive arrow around ‘design improvisation’ in the figure. Through ongoing design improvisation, so a collective sense of designs in-use emerged, which contributed to design sedimentation and control. It may be imagined then that design improvisation was like a vortex or spiral that inched ever closer towards sedimentation, i.e. the top right hand corner box. <marker type="block"/> Taking a broader view of the conceptualization, it depicts that design sedimentation (stabilization) and design flux (destabilization) were mutually constituting forces in the game innovation process. Through ongoing fluxing cycles of improvisation so stabilization was achieved; a spiraling into control. Similarly through ongoing reworking of sedimenting or normalizing designs in-use, so creative design flux and re-hash were enabled. Thus improvisation was a mutuality of design flux and sedimentation. While at times in the process it seemed more improvised or controlled, it was neither, but rather it was “chaordic” (<xref ref-type="bibr" rid="R29" id="174" class="deo:Reference">Highsmith, 2002</xref>) - a combination of chaos and order, i.e. contrapuntal - a harmonious combination of design flux and</region>
        <region class="DoCO:TextChunk" id="176" confidence="possible" page="19" column="1">design sedimentation. This fusion of these ‘opposites’ was harmonious because design control relied on design improvisation and vice versa.</region>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="177" page="19" column="1">Implications</h1>
        <region class="DoCO:TextChunk" id="182" page="19" column="1">The key contribution of this paper is that improvisation may be considered a form of control in innovation projects like computer games on account of its contrapuntal nature. This is contrary to much ISD and innovation literature that tends to sanction planning and the production of up-front documentation. As the study attested, a computer game’s design, including its gameplay rules, storyline and so forth, may never be fully known at the outset of a project. The designs in the field study changed along the way as the designers ‘figured out’ what made the game entertaining. Rather then, a design emerges based on the inspiration of the structural properties of designs in-use, as well as emotion reflexion based on experiencing these structural properties (e.g. gameplay rules). After all, the goal of game development is to produce entertainment ( <xref ref-type="bibr" rid="R51" id="178" class="deo:Reference">Swartout and van Lent 2003</xref>). So, it was not the case that documentation was the specification and the design (<xref ref-type="bibr" rid="R47" id="179" class="deo:Reference">Royce, 1970</xref>), but rather the sedimentation of the design in-use was a sedimentation of meaning that was an outcome of an ongoing intensive, playful improvisation. The implication here is that where the requirements and design have a strong aesthetic component, improvisation may be a more salient process control strategy.<marker type="block"/> In order to control computer game innovation through improvisation, requires generating and aligning the elements of the contrapuntal model in <xref ref-type="fig" rid="F6" id="181" class="deo:Reference">figure 6</xref>. In other words, capable individuals with a deep knowledge of programming, art, and design, as well as knowledge of all the resources / tools at their professional disposal. This depends on the ability to and interest in reflexively monitoring contexts of practice. Here, reflexive monitoring also means constantly reflecting and questioning designs in-use and how they impact the designer’s emotions, since this is a key aspect of game development. Through this ongoing effort to overcome design ambiguity, so design sedimentation and control emerges. Such improvisation control was particularly enabled by the practice of play-testing, which warrants further study.</region>
      </section>
      <section class="deo:Conclusion">
        <h1 class="DoCO:SectionTitle" id="183" page="19" column="1">Conclusions</h1>
        <region class="DoCO:TextChunk" id="184" page="19" column="1">The aim of this paper was to address the theoretical disconnect between control and improvisation, and asked: How can improvisation enable control in a computer game design context? This is of interest to practice too because the computer game industry needs a process management approach that does not stifle creative practices and yet still facilitates process control. The paper found that the computer game development process is contrapuntal - a harmonious combination design of flux and sedimentation, i.e. improvisation. Significantly, the sedimentation or control of designs in-use was an outcome of the sedimentation of meaning enabled through the intensive practice of play-testing.</region>
      </section>
      <section class="DoCO:Bibliography">
        <h1 class="DoCO:SectionTitle" id="185" page="20" column="1">References</h1>
        <ref-list class="DoCO:BiblioGraphicReferenceList">
          <ref rid="R1" class="deo:BibliographicReference" id="186" page="20" column="1">Avison, D. E. and G. Fitzgerald (1995). Information systems development:</ref>
          <ref class="deo:BibliographicReference" id="187" confidence="possible" page="20" column="1">methodologies, techniques and tools. London, McGraw-Hill.</ref>
          <ref rid="R2" class="deo:BibliographicReference" id="188" page="20" column="1">Baba, Y. and F. T. Tschang (2001). "Product development in Japanese TV game software:</ref>
          <ref class="deo:BibliographicReference" id="189" confidence="possible" page="20" column="1">The case of an innovative game." International Journal of Innovation Management 5(4): 487-515.</ref>
          <ref rid="R3" class="deo:BibliographicReference" id="190" page="20" column="1">Bach, J. (1995). "Enough About Process: What We Need are Heroes." IEEE Software</ref>
          <ref class="deo:BibliographicReference" id="191" confidence="possible" page="20" column="1">12(2).</ref>
          <ref rid="R4" class="deo:BibliographicReference" id="192" page="20" column="1">Baskerville, R., B. Ramesh, et al. (2003). "Is "Internet-speed" software development</ref>
          <ref class="deo:BibliographicReference" id="193" confidence="possible" page="20" column="1">different?" Software, IEEE 20(6): 70-77.</ref>
          <ref rid="R5" class="deo:BibliographicReference" id="194" page="20" column="1">Beck, K. (1999). Extreme programming explained: embrace change. Boston, MA,</ref>
          <ref class="deo:BibliographicReference" id="195" page="20" column="1">Addison-Wesley Longman Publishing Co., Inc.</ref>
          <ref rid="R6" class="deo:BibliographicReference" id="196" page="20" column="1">Berliner, P. F. (1994). Thinking in Jazz: The infinite art of improvising. Chicago, IL, University of Chicago,.</ref>
          <ref rid="R7" class="deo:BibliographicReference" id="197" page="20" column="1">Boehm, B. W. (2000). Software Cost Estimation with CocomoII (with CD-ROM),. Upper Saddle River, N.J., Prentice Hall.</ref>
          <ref rid="R8" class="deo:BibliographicReference" id="198" page="20" column="1">Bollinger, T. B. and C. McGowan (1991). "A critical look at software capability evaluations." Software, IEEE 8(4): 25-41.</ref>
          <ref rid="R9" class="deo:BibliographicReference" id="199" page="20" column="1">Brooks, F. P. (1995). The Mythical Man-Month. Reading, Mass.; Wokingham,</ref>
          <ref class="deo:BibliographicReference" id="200" page="20" column="1">Addison Wesley Longman, Inc.</ref>
          <ref rid="R10" class="deo:BibliographicReference" id="201" page="20" column="1">Brown, S., and K. Eisenhardt. 1995. Past Research, Present Findings, and Future Directions.Academy of Management Review, 20.</ref>
          <ref rid="R11" class="deo:BibliographicReference" id="202" page="20" column="1">Cassell, P. (1993). The Giddens Reader. London, Macmillan.</ref>
          <ref rid="R12" class="deo:BibliographicReference" id="203" page="20" column="1">Choudhury, V. and R. Sabherwal (2003). "Portfolios of Control in Outsourced</ref>
          <ref rid="R13" class="deo:BibliographicReference" id="204" confidence="possible" page="20" column="1">Software Development Projects." Information Systems Research 14(September 2003/3): pp. 291–314.</ref>
          <ref rid="R14" class="deo:BibliographicReference" id="205" page="20" column="1">Ciborra, C. U. (1999). "Notes on improvisation and time in organizations." Accting.,</ref>
          <ref class="deo:BibliographicReference" id="206" confidence="possible" page="20" column="1">Mgmt. &amp; Info. Tech. 9(2): 77–94.</ref>
          <ref rid="R15" class="deo:BibliographicReference" id="207" page="20" column="1">Ciborra, C. U. (2002). The Labyrinths of Information: Challenging the Wisdom of</ref>
          <ref class="deo:BibliographicReference" id="208" confidence="possible" page="20" column="1">Systems. Oxford, Oxford University Press.</ref>
          <ref rid="R16" class="deo:BibliographicReference" id="209" page="20" column="1">Ciborra, C. U. (2004). The mind or the heart? It depends on the (definition of) the</ref>
          <ref class="deo:BibliographicReference" id="210" confidence="possible" page="20" column="1">situation, London School of Economics, UK. April.</ref>
          <ref rid="R17" class="deo:BibliographicReference" id="211" page="21" column="1">Ciborra, C. U. and G. F. Lanzara (1987). Formative Contexts of Systems Design.</ref>
          <ref class="deo:BibliographicReference" id="212" page="21" column="1">Information Systems Development for Human Progress, North-Holland, Amsterdam.</ref>
          <ref rid="R18" class="deo:BibliographicReference" id="213" page="21" column="1">Conradi, R. and A. Fuggetta (2002). "Improving software process improvement." IEEE Software 19(4, July/August).</ref>
          <ref rid="R19" class="deo:BibliographicReference" id="214" page="21" column="1">Currie, G. and A. D. Brown (2003). "A narratological approach to understanding processes of organizing in a UK hospital." Human Relations 56(5): 563-586.</ref>
          <ref rid="R20" class="deo:BibliographicReference" id="215" page="21" column="1">Curtis, B., H. Krasner, et al. (1988). "A Field Study of the Software Design Process for Large Systems." Communications of the ACM 31(11).</ref>
          <ref rid="R21" class="deo:BibliographicReference" id="216" page="21" column="1">Curtis, B. and M. C. Paulk (1993). "Creating a Software Process Improvement</ref>
          <ref class="deo:BibliographicReference" id="217" confidence="possible" page="21" column="1">Program." Information and Software Technology 35(6-7): 381-386.</ref>
          <ref rid="R22" class="deo:BibliographicReference" id="218" page="21" column="1">Debou, C., A. Kuntzmann-Combelles, et al. (1994). A quantitative approach to software process management. Software Metrics Symposium, 1994., Proceedings of</ref>
          <ref class="deo:BibliographicReference" id="219" confidence="possible" page="21" column="1">the Second International.</ref>
          <ref rid="R23" class="deo:BibliographicReference" id="220" page="21" column="1">Eisenhardt, Kathleen M. and Behnam N. Tabrizi, "Accelerating Adaptive Processes: Product Innovation in the Global Computer Industry", Administrative Science Quarterly, 1995</ref>
          <ref rid="R24" class="deo:BibliographicReference" id="221" page="21" column="1">Fitzgerald, B. (1996). "Formalized systems development methodologies: a critical</ref>
          <ref class="deo:BibliographicReference" id="222" confidence="possible" page="21" column="1">perspective." Information Systems Journal 6: 3-23.</ref>
          <ref rid="R25" class="deo:BibliographicReference" id="223" page="21" column="1">Frijda, N. H. (1988). "The Laws of Emotion." American Psychologist May: 349-358.</ref>
          <ref rid="R26" class="deo:BibliographicReference" id="224" page="21" column="1">Giddens, A. (1976). New Rules of Sociological Method. London: Hutchinson.</ref>
          <ref rid="R27" class="deo:BibliographicReference" id="225" page="21" column="1">Giddens, A. (1979). Central problems in social theory. London, MacMillan.</ref>
          <ref rid="R28" class="deo:BibliographicReference" id="226" page="21" column="1">Giddens, A. (1984a). The Constitution of Society: Outline of the Theory of Structure. Berkeley, CA., University of California Press.</ref>
          <ref rid="R29" class="deo:BibliographicReference" id="227" page="21" column="1">Highsmith, J. (2002). Agile Software Development Ecosystems. Boston: MA.,</ref>
          <ref class="deo:BibliographicReference" id="228" page="21" column="1">Addison-Wesley.</ref>
          <ref rid="R30" class="deo:BibliographicReference" id="229" page="21" column="1">Hirschheim, R. and H. K. Klein (1989). "Four Paradigms of Information Systems Development." Communications of the ACM 32(10).</ref>
          <ref rid="R31" class="deo:BibliographicReference" id="230" page="21" column="1">Huizinga, J. (1970). Homo Ludens. London, Granada Publishing Ltd.</ref>
          <ref rid="R32" class="deo:BibliographicReference" id="231" page="21" column="1">Humphrey, W. S. (1988). "Characterizing the software process: a maturity framework." Software, IEEE 5(2): 73-79.</ref>
          <ref rid="R33" class="deo:BibliographicReference" id="232" page="21" column="1">Humphrey, W. S., T. R. Snyder, et al. (1991). "Software Process Improvement at</ref>
          <ref class="deo:BibliographicReference" id="233" page="21" column="1">Hughes-Aircraft." Ieee Software 8(4): 11-23.</ref>
          <ref rid="R34" class="deo:BibliographicReference" id="234" page="22" column="1">Leiter, K. A. (1980.). Primer on ethnomethodology. New York:, Oxford Univerity</ref>
          <ref class="deo:BibliographicReference" id="235" confidence="possible" page="22" column="1">Press.</ref>
          <ref rid="R35" class="deo:BibliographicReference" id="236" page="22" column="1">Levi-Strauss, C. (1966). The Savage Mind. Chicago, Chicago University Press.</ref>
          <ref rid="R36" class="deo:BibliographicReference" id="237" page="22" column="1">Lofland, J. (1995). "Analytical ethnography: features, failings and futures." Journal of</ref>
          <ref class="deo:BibliographicReference" id="238" confidence="possible" page="22" column="1">Contemporary Ethnography 24(1): p.30-67.</ref>
          <ref rid="R37" class="deo:BibliographicReference" id="239" page="22" column="1">Miner, A. J., C. Moorman, et al. (1996). Organizational improvisation in new product</ref>
          <ref class="deo:BibliographicReference" id="240" confidence="possible" page="22" column="1">development. Unpublished manuscript. University of Wisconsin, Madison, WI.</ref>
          <ref rid="R38" class="deo:BibliographicReference" id="241" page="22" column="1">Miner, A. J., C. Moorman, et al. (1996). Organizational improvisation in new product development. Unpublished manuscript. University of Wisconsin, Madison, WI.</ref>
          <ref rid="R39" class="deo:BibliographicReference" id="242" page="22" column="1">Nandhakumar, J. and M. Jones (1997a). "Too Close for Comfort? Distance and Engagement in Interpretive Information Systems Research." Information Systems</ref>
          <ref class="deo:BibliographicReference" id="243" confidence="possible" page="22" column="1">Journal 7: 109-131.</ref>
          <ref rid="R40" class="deo:BibliographicReference" id="244" page="22" column="1">Nandhakumar, J. and D. E. Avison (1999). "The Fiction of Methodological</ref>
          <ref class="deo:BibliographicReference" id="245" confidence="possible" page="22" column="1">Development, a Field Study of Information Systems." Information Technology and People 12(2).</ref>
          <ref rid="R41" class="deo:BibliographicReference" id="246" page="22" column="1">Nandhakumar, J. and M. Jones (2001). "Accounting for time: Managing time in</ref>
          <ref class="deo:BibliographicReference" id="247" confidence="possible" page="22" column="1">project-based teamworking." Accounting, Organizations and Society 26(3): 193–214.</ref>
          <ref rid="R42" class="deo:BibliographicReference" id="248" page="22" column="1">Orlikowski, M. J. (1991). "Integrated Information Environment or Matrix of</ref>
          <ref class="deo:BibliographicReference" id="249" confidence="possible" page="22" column="1">Control?" Accounting, Management and Information Technologies 1(1): 9-42.</ref>
          <ref rid="R43" class="deo:BibliographicReference" id="250" page="22" column="1">Orlikowski, W. J. (1996). "Improvising Organizational Transformation Over Time: A Situated Change Perspective." Information systems research 7(1): 63.</ref>
          <ref rid="R44" class="deo:BibliographicReference" id="251" page="22" column="1">Orlikowski, W. J. and J. D. Hofman (1997). "An Improvisational Model for Change</ref>
          <ref class="deo:BibliographicReference" id="252" confidence="possible" page="22" column="1">Management: The Case of Groupware Technologies." Sloan Management Review 38(2): 11-21.</ref>
          <ref rid="R45" class="deo:BibliographicReference" id="253" page="22" column="1">Orlikowski, W. J. (2000). "Using Technology and Constituting Structures: A Practice Lens for Studying Technology in Organizations." Organization science 11(4): pp.404- 428.</ref>
          <ref rid="R46" class="deo:BibliographicReference" id="254" page="22" column="1">Rosen, M. (1991). "Coming to terms with the field: understanding and doing organizational ethnography." Journal of Management Studies 28(1): 1-24.</ref>
          <ref rid="R47" class="deo:BibliographicReference" id="255" page="22" column="1">Royce, W. W. (1970). "Managing Development of Large Scale Software Systems."</ref>
          <ref class="deo:BibliographicReference" id="256" confidence="possible" page="22" column="1">IEEE WESCON, TRW: 1-9.</ref>
          <ref rid="R48" class="deo:BibliographicReference" id="257" page="22" column="1">Savolainen, V. (1999). Perspectives of Information Systems, Springer.</ref>
          <ref rid="R49" class="deo:BibliographicReference" id="258" page="22" column="1">Sroufe, L. A. and E. Waters (1976). "The ontogenesis of smiling and laughter: A perspective on the organization of development in infancy." Psychological Review</ref>
          <ref class="deo:BibliographicReference" id="259" confidence="possible" page="22" column="1">83: 173-189.</ref>
          <ref rid="R50" class="deo:BibliographicReference" id="260" page="23" column="1">Stacey, P. and J. Nandhakumar (2005). Managing Projects in a Games Factory:</ref>
          <ref class="deo:BibliographicReference" id="261" confidence="possible" page="23" column="1">Temporality and Practices. Proceedings of the 38th Hawaii International Conference on System Sciences, Organizational Systems and Technology Track, IT and Project Management, Waikoloa, Hawaii, IEEE.</ref>
          <ref rid="R51" class="deo:BibliographicReference" id="262" page="23" column="1">Swartout, W. and M. van Lent (2003). "Making a game of system design." Communications of the ACM 46(7): 32--39.</ref>
          <ref rid="R52" class="deo:BibliographicReference" id="263" page="23" column="1">Truex, D., R. Baskerville, and J. Travis: 2000, ‘Amethodical systems development: the deferred meaning of systems development methods’. Accounting, management and information technologies, 10, 53–79.</ref>
          <ref rid="R53" class="deo:BibliographicReference" id="264" page="23" column="1">Walsham, G. (1993). Interpreting IS in Organisations. Chichester, John Wiley.</ref>
          <ref rid="R54" class="deo:BibliographicReference" id="265" page="23" column="1">Wastell, D. G. (1996). "The fetish of technique: methodology as a social defence." Inform Syst J 6(1): 25-40.</ref>
          <ref rid="R55" class="deo:BibliographicReference" id="266" page="23" column="1">Weick, K. (1995). Sensemaking in organizations. Thousand Oaks, Sage.</ref>
          <ref rid="R56" class="deo:BibliographicReference" id="267" page="23" column="1">Weick, K. (1998). "Introductory Essay: Improvisation as a Mindset for Organizational</ref>
          <ref class="deo:BibliographicReference" id="268" confidence="possible" page="23" column="1">Analysis." Organization Science 9(5): pp. 543-555.</ref>
          <ref rid="R57" class="deo:BibliographicReference" id="269" page="23" column="1">Weick, K. E., K. M. Sutcliffe, et al. (2005). "Organizing and the process of sensemaking. ." Organization Science 16(4): 409-421.</ref>
          <ref rid="R58" class="deo:BibliographicReference" id="270" page="23" column="1">Wierschem, D. and C. Johnston (2005). "The role of project management in university computing resource departments." International Journal of Project</ref>
          <ref class="deo:BibliographicReference" id="271" confidence="possible" page="23" column="1">Management 23: pp. 640-649.</ref>
          <ref rid="R59" class="deo:BibliographicReference" id="272" page="23" column="1">Zain, M. and T. Rickards (1996). "Assessing and comparing the innovativeness and</ref>
          <ref class="deo:BibliographicReference" id="273" confidence="possible" page="23" column="1">creative climate of firms." Scandinavian Journal of Management 12(2): pp.109-121.</ref>
        </ref-list>
      </section>
    </body>
  </article>
</pdfx>
