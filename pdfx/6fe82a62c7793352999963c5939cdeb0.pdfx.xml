<?xml version='1.0' encoding='UTF-8'?>
<pdfx xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://pdfx.cs.man.ac.uk/static/article-schema.xsd">
  <meta>
    <job>4d5a2ebc0c4f2160a160864a18624330321b5bfb8cd713e6b7739ea536cb2a82</job>
    <base_name>62in</base_name>
    <doi confidence="possible" alt_doi="http://dx.doi.org/10.4324/9781315842455">http://dx.doi.org/10.1037/1082-989x.10.1.3.supp</doi>
  </meta>
  <article>
    <front class="DoCO:FrontMatter">
      <title-group>
        <article-title class="DoCO:Title" id="1">INTRODUCING AN EMPIRICAL MODEL OF DESIGN</article-title>
      </title-group>
      <region class="unknown" id="3">Paul Ralph, Lancaster University, <email id="2">paul@paulralph.name</email></region>
      <abstract class="DoCO:Abstract" id="5">The dominant view of design in information systems and software engineering, the Rational Model, views design and engineering as a methodical, plan-centered, approximately rational process of optimizing a design candidate for known constraints and objectives. It persists despite extensive empirical evidence that it does not reflect design practice and no evidence that attempts to adopt rationalistic processes improve outcomes. One reason for its resilience against empirical critique may be the lack of a comprehensive alternative. This paper addresses this gap by enumerating the Rational Model’s components and proposing a comprehensive, better-supported alternative, an “Empirical Model of Design”. The Empirical Model is intended to replace the Rational Model as a foundation for design methods and practices, design education and design science research. <marker type="block"/> Keywords: Design Science, Rationalism, Empiricism, SCI Theory, Software Development.</abstract>
      <region class="unknown" id="6">1</region>
    </front>
    <body class="DoCO:BodyMatter">
      <section class="deo:Introduction">
        <h1 class="DoCO:SectionTitle" id="7" page="2" column="1">INTRODUCTION</h1>
        <region class="DoCO:TextChunk" id="29" page="2" column="1"> <xref ref-type="bibr" rid="R9" id="8" class="deo:Reference">Brooks (2010)</xref> attacked the assumptions underlying “The Rational Model of Design”, the dominant view of design in information systems (IS) and software engineering (SE), which views design and engineering as a methodical, plan-centered, approximately rational process of optimizing a design candidate for known constraints and objectives. His most compelling criticism was that empirical research does not support this view (e.g., <xref ref-type="bibr" rid="R14" id="9" class="deo:Reference">Cross et al. 1992</xref>, <xref ref-type="bibr" rid="R46" id="10" class="deo:Reference">Truex et al. 2000</xref>, <xref ref-type="bibr" rid="R32" id="11" class="deo:Reference">Ralph 2010a</xref>, <xref ref-type="bibr" rid="R13" id="12" class="deo:Reference">Checkland 1999</xref>, <xref ref-type="bibr" rid="R2" id="13" class="deo:Reference">Bansler and Bødker 1993</xref>, <xref ref-type="bibr" rid="R51" id="14" class="deo:Reference">Zheng et al. 2011</xref>). Despite this evidence, the Rational Model continues to exert substantial influence in scientific and popular discourse surrounding design in IS and SE, as displayed in the design science approach (<xref ref-type="bibr" rid="R20" id="15" class="deo:Reference">Hevner et al. 2004</xref>), textbooks (e.g., <xref ref-type="bibr" rid="R24" id="16" class="deo:Reference">Laudon et al. 2009</xref>, <xref ref-type="bibr" rid="R23" id="17" class="deo:Reference">Kroenke et al. 2010</xref>), standards (e.g., <xref ref-type="bibr" rid="R21" id="18" class="deo:Reference">IEEE 1998</xref>), official body of knowledge compilations (e.g., <xref ref-type="bibr" rid="R8" id="19" class="deo:Reference">Bourque and Dupuis 2004</xref>), Wikipedia articles 1 , modern design methods (<xref ref-type="bibr" rid="R22" id="20" class="deo:Reference">Jacobson et al. 1999</xref>) and even the popular conception of the scientific process (e.g., <xref ref-type="bibr" rid="R50" id="21" class="deo:Reference">Yin 2003</xref>, <xref ref-type="bibr" rid="R11" id="22" class="deo:Reference">Campbell and Stanley 1963</xref>, <xref ref-type="bibr" rid="R45" id="23" class="deo:Reference">Trochim 2001</xref>). The Rational Model’s continued dominance is unsurprising. It came first. It has intuitively appealing characteristics including modeling design as search, satisficing instead of optimizing, and viewing professionals as rational actors executing reliable plans. Furthermore, a host of social and cognitive factors including the validity effect (<xref ref-type="bibr" rid="R36" id="24" class="deo:Reference">Renner 2004</xref>) and status quo bias (<xref ref-type="bibr" rid="R39" id="25" class="deo:Reference">Samuelson and Zeckhauser 1988</xref>) inhibit shifts to alternative models. Moreover, no comprehensive alternative to the Rational Model is available, which motivates this paper. Purpose: The purpose of this paper is to explicate the meaning of The Rational Model of Design and to propose a comprehensive alternative. Software design science includes a minimum of two research streams (<xref ref-type="bibr" rid="R19" id="26" class="deo:Reference">Hevner and Chatterjee 2010</xref>) – 1) a research method where knowledge is gained by building innovative artifacts (<xref ref-type="bibr" rid="R20" id="27" class="deo:Reference">Hevner et al. 2004</xref>) and 2) “the philosophical, theoretical and empirical study of software creation and modification including its phenomenology, methodology and causality” (<xref ref-type="bibr" rid="R33" id="28" class="deo:Reference">Ralph 2010b</xref>, p. ii). The paper contributes to the latter by organizing alternatives to elements of the Rational Model into an “Empirical Model of Design” (§2). Section 3 summarizes empirical evidence concerning both models, followed by a discussion of the effects of the Rational Model’s dominance (§4). The paper concludes with a summary of its contributions and remaining questions (§5).</region>
        <region class="unknown" id="30" page="2" column="1">2</region>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="31" page="2" column="1">THE RATIONAL MEMEPLEX AND ITS ALTERNATIVE</h1>
        <region class="DoCO:TextChunk" id="93" page="2" column="1">The dominant view of design has been called “Technical Problem-Solving” ( <xref ref-type="bibr" rid="R40" id="32" class="deo:Reference">Schön 1983</xref>), the “Reason-Centric Perspective” (<xref ref-type="bibr" rid="R33" id="33" class="deo:Reference">Ralph 2010b</xref>) and the “Rational Model” (<xref ref-type="bibr" rid="R9" id="34" class="deo:Reference">Brooks 2010</xref>). This paper adopts “Rational Model” as it conveys not only its rationalist epistemology (§2.2) but also its rational designer and process assumptions. As the Rational Model is both multifaceted and socially constructed, various thinkers may disagree on its nature, hindering unequivocal definition. Therefore, this paper analyzes the Rational Model using mimetics, the study of memes. <xref ref-type="bibr" rid="R15" id="35" class="deo:Reference">Dawkins (1989)</xref> coined the term “meme” as a “noun that conveys the idea of a unit of cultural transmission, or a unit of imitation” (p. 192). In this view, memes include beliefs, theories, methods, models, philosophies and best practices. Memes may interact, e.g., a rationalist philosophy justifies analytical evaluation methods. Several mutually-reinforcing memes form a complex of memes or “memeplex”. By conceptualizing the Rational Model as a memeplex it may be defined by its component memes and their interactions. 2.1 Rational Memes and Alternatives. Rationalism vs. Empiricism. <xref ref-type="bibr" rid="R9" id="36" class="deo:Reference">Brooks (2010)</xref> argues that the Rational Model rests on the philosophy of rationalism. Broadly speaking, rationalism is the belief that knowledge derives from reason and<marker type="page" number="3"/><marker type="block"/> intuition, in contrast to empiricism, the view that knowledge is primarily derived from sensory experience (<xref ref-type="bibr" rid="R26" id="39" class="deo:Reference">Markie 2008</xref>). Empiricism is the basis of popular epistemologies including critical realism, social constructivism, falsificationism and logical positivism. Technical Problem-Solving vs. Reflection-in-Action. The foundations of the Rational Model were independently developed in computer science by Herbert Simon, Allen Newell and their collaborators (cf., <xref ref-type="bibr" rid="R29" id="40" class="deo:Reference">Newell and Simon 1972</xref>, Simon 1996) and engineering by Gerhard Pahl, Wolfgang Beitz and their collaborators (cf., Pahl and Beitz 1996). Design professionals are modeled as rational agents attempting to optimize a design candidate for known constraints and objectives. Where the problem space is so large that finding an optimal solution is beyond the designer’s limited processing power, the designer will “satisfice” or “find decisions that are good ‘enough’” using heuristic search (Simon 1996, p. 27). Simon coins the term “procedural rationality” for this “finding a way of calculating, very approximately, where a good course of action lies” (p. 27), thereby differentiating a (boundedly) rational action from rational outcomes. <xref ref-type="bibr" rid="R40" id="41" class="deo:Reference">Schön (1983)</xref> called this paradigm “Technical Problem- Solving” (TP-S). TP-S exhibits rationalism in assuming that designers are capable of evaluating the effects of decisions by inspection and that good processes produce good systems. Building on empirical studies of professional practice, <xref ref-type="bibr" rid="R40" id="42" class="deo:Reference">Schön (1983)</xref> devised an alternative to TP-S – Reflection-in-Action (RiA). RiA models design as a reflective conversation between the designer and the situation. The designer alternates between framing (conceptualizing the problem), making moves (where a move is a real or simulated action intended to improve the situation) and evaluating those moves. Multiple agents may collectively reflect in action using boundary objects (<xref ref-type="bibr" rid="R25" id="43" class="deo:Reference">Levina 2005</xref>). (Boundary objects, including diagrams and prototypes, are simultaneously robust enough to maintain their identities and flexible enough to serve multiple parties). Reflection-in-Action differs from Technical Problem-Solving in many ways, e.g., professionals respond to a problematic situation (rather than a given problem) with many possible interpretations and form and explore hypothesis about potentially beneficial actions (rather than optimizing or satisficing design candidates). RiA is consistent with empiricism in assuming that the problem and solution are coconstructed by reflecting on observations and simulations. Planning vs. Ethnomethodoligcal views of Human Action. The “planning model of cognitive science ... posits that action is a form of problem solving,” and that “the plan is prerequisite to the action” (<xref ref-type="bibr" rid="R44" id="44" class="deo:Reference">Suchman 1987</xref>, p. 28-29). This ‘cognitivist view’ is consistent with Rationalism in two senses – 1) designing an artifact requires a substantial planning phase as seen in plan-driven methods and 2) designing is itself planning – a design is a plan for building an artifact. In contrast, the “ethnomethodological view” (EV) of action posits that “the organization of situated action is an emergent property of moment-by-moment interactions between actors, and between actors and the environments of their action” (<xref ref-type="bibr" rid="R44" id="45" class="deo:Reference">Suchman 1987</xref>, p. 179) while “plans are representations, or abstractions over action” (p. 186). This is consistent with Empiricism in that design is seen as an interaction between an actor and its environment; a design project is seen as a system of inquiry where the designer searches for the right solution by building artifacts in the world rather than planning them in the mind. SDLC vs. SCI. Another key feature of the Rational Model is The Systems Development Lifecycle (SDLC). Although SDLC (<xref ref-type="fig" rid="F1" id="46" class="deo:Reference">Figure 1</xref>) was initially presented as a method (<xref ref-type="bibr" rid="R38" id="47" class="deo:Reference">Royce 1970</xref>), many treat it as a lifecycle process theory – an explanation of how and why an entity changes and develops according to a prefigured, unitary sequence of phases (<xref ref-type="bibr" rid="R47" id="48" class="deo:Reference">Van de Ven and Poole 1995</xref>). For example, Fitzgerald (2006) states that “in conventional software development, the development lifecycle in its most generic form comprises four broad phases: planning, analysis, design, and implementation” (p. 3). Similarly, Ewusi-Mensah (2003) says that “regardless of the particular process model ... every software project will feature: (1) the requirements-definition and functional-specification phase; (2) the design phase; ... (3) the implementation; ... and (4) the installation, operation, and maintenance phase” (p. 51). Additionally, <xref ref-type="bibr" rid="R24" id="49" class="deo:Reference">Laudon et al. (2009)</xref> state that “systems development ... consist[s] of systems analysis, systems design, programming, testing, conversion and production and maintenance ... which usually take place in sequential order”. Moreover, traditional SDLC phases are explicitly adopted by the IEEE Guide to the Software Engineering Body of Knowledge (<xref ref-type="bibr" rid="R8" id="50" class="deo:Reference">Bourque and Dupuis 2004</xref>).<marker type="page" number="4"/><marker type="block"/> SDLC has been criticized for many years (cf., <xref ref-type="bibr" rid="R38" id="56" class="deo:Reference">Royce 1970</xref>, <xref ref-type="bibr" rid="R27" id="57" class="deo:Reference">McCracken and Jackson 1982</xref>, <xref ref-type="bibr" rid="R18" id="58" class="deo:Reference">Gladden 1982</xref>, <xref ref-type="bibr" rid="R7" id="59" class="deo:Reference">Boehm 1988</xref>, <xref ref-type="bibr" rid="R9" id="60" class="deo:Reference">Brooks 2010</xref>, <xref ref-type="bibr" rid="R5" id="61" class="deo:Reference">Beck 2005</xref>). However, most criticism concerns the order of activities rather than their conceptual separation; e.g., <xref ref-type="bibr" rid="R38" id="62" class="deo:Reference">Royce (1970)</xref> argued that leaving testing to the end of the lifecycle would increase risk (§2.5). Many of these criticisms therefore may be avoided by redefining SDLC as a clique (<xref ref-type="fig" rid="F1" id="63" class="deo:Reference">Figure 1</xref>), i.e., adding all possible phase transitions. This re- conceptualization reveals the fundamental premise of SDLC – analysis, design, coding and testing are temporally and conceptually separable. This is consistent with Rationalism as separating design from implementation assumes that the designer is capable of determining which type of system to build and approximately how it will work by reasoning. An alternative to SDLC is Sensemaking-Coevolution-Implementation Theory (SCI). SCI (<xref ref-type="bibr" rid="R33" id="64" class="deo:Reference">Ralph 2010b</xref>) is a teleological process theory, an explanation of how and why an entity changes where change is manifested by a goal-seeking agent engaging in activities in a self-determined sequence (<xref ref-type="bibr" rid="R33" id="65" class="deo:Reference">Ralph 2010b</xref>, <xref ref-type="bibr" rid="R47" id="66" class="deo:Reference">Van de Ven and Poole 1995</xref>). The core claim of SCI is that complex software systems are produced primarily through its three titular activities. SCI is consistent with empiricism in that the design agent explicitly gains knowledge through sense experience (sensemaking). SCI (<xref ref-type="fig" rid="F2" id="67" class="deo:Reference">Figure 2</xref>, <xref ref-type="table" rid="T1" id="68" class="deo:Reference">Table 1</xref>) describes the process where an agent designs a complex system. The agent may be an individual or team. The arrows in <xref ref-type="fig" rid="F2" id="69" class="deo:Reference">Fig. 2</xref> indicate relationships between concepts and activities, not the sequence of activities. Since implementation depends on the Mental Picture of the Design Object, which is initially generated by the coevolution process, some coevolution must precede implementation. By equivalent logic, some sensemaking must precede coevolution. However, once the two mental pictures are initially formed, the agent may transition between activities in any order. One possible sequence would be as follows. The design agent begins the project by perceiving its environment and the environment where the design object is intended to operate. Organizing its perceptions, the agent forms a mental picture of the context, including some tentative goals and constraints. Based on this, the agent formulates some beliefs about one or more possible design objects. It then iterates between these two sets of beliefs, refinements of one triggering reframing of the other and the inverse (the inner iterative loop). The agent may externalize its cognition in boundary objects including conceptual models, design models, mockups and prototypes. Eventually the agent begins to build the design object (or perhaps to convert an existing prototype into the design object). The design object’s existence then changes the context, which triggers further sensemaking, and so forth (the outer iterative loop). Testing would therefore mostly involve the outer loop.<marker type="page" number="5"/><marker type="block"/> System Development Methods (SDMs). Many modern SDMs still retain SDLC’s basic structure. For example, Extreme Programming (<xref ref-type="bibr" rid="R5" id="74" class="deo:Reference">Beck 2005</xref>) involves running through SDLC phases in linear, time- boxed iterations (<xref ref-type="fig" rid="F3" id="75" class="deo:Reference">Figure 3</xref>), while the Unified Software Process (USP) (<xref ref-type="bibr" rid="R22" id="76" class="deo:Reference">Jacobson et al. 1999</xref>) adopts them as parallel “disciplines” within an alternative phase model (<xref ref-type="fig" rid="F4" id="77" class="deo:Reference">Figure 4</xref>). Even Boehm’s (1988) spiral model is just SDLC reorganized into a spiral with added risk analysis. However, modern SDMs are often characterized according to their degree of planning and analysis. Plan-driven methods including Waterfall and USP and are often contrasted with Agile methods (<xref ref-type="bibr" rid="R6" id="78" class="deo:Reference">Beck et al. 2001</xref>) including Extreme Programming (<xref ref-type="bibr" rid="R5" id="79" class="deo:Reference">Beck 2005</xref>), Lean (<xref ref-type="bibr" rid="R31" id="80" class="deo:Reference">Poppendieck and Poppendieck 2003</xref>) and Boomerang (<xref ref-type="bibr" rid="R10" id="81" class="deo:Reference">Stacey and Nandhakumar 2008</xref>). However, a starker contrast is available in the form<marker type="page" number="6"/><marker type="block"/> of amethodical development. “Amethodical systems building implies management and orchestration of systems development without a predefined sequence, control, rationality, or claims to universality. An amethodical development activity is so unique and unpredictable ... that even the criteria of contingent development methods are irrelevant” (<xref ref-type="bibr" rid="R46" id="83" class="deo:Reference">Truex et al. 2000</xref>, p. 54).<marker type="block"/> Like SDLC, plan-driven methods are consistent with Rationalism in their separation of design from coding and focus on ensuring outcome quality through good plans and processes. Analogously, amethodical development, with its unpredictability and focus on improvised action, is clearly more consistent with Empiricism. In contrast, Agile methods may combine rationalist and empiricist elements. For example, Extreme Programming prescribes both separating planning, analysis, design and coding (rationalist) and keeping a user near the development team for questioning (empiricist). Project Management Frameworks (PMFs). While a software design method conveys advice for designing and building software, a software project management framework conveys advice for organizing the software creation enterprise (e.g., distributing and scheduling tasks, types of meetings). USP (above) is both an SDM and a PMF as it contains advice for both designing (e.g., ‘organize code into components’) and organizing the project (e.g., ‘create an executable architecture during the elaboration phase’) (<xref ref-type="bibr" rid="R22" id="88" class="deo:Reference">Jacobson et al. 1999</xref>). As a PMF, USP is consistent with rationalism in its organization of the design project as separate disciplines named after SDLC phases. Scrum (<xref ref-type="bibr" rid="R6" id="89" class="deo:Reference">Schwaber and Beedle 2001</xref>) is an alternative PMF commonly combined with Agile SDMs. Scrum comprises a set of recommended roles, artifacts meetings and practices for developing software in time-boxed iterations called sprints but no phases or disciplines; rather, work is organized into time- boxed ‘sprints’, each producing a shippable product increment. Scrum’s consistency with empiricism is evident in its lightweight planning and explicit focus on continual interaction with external stakeholders. 2.2 Defining the Rational and Empirical Models of Design The previous section identified various elements (memes) related to software design and consistent with rationalism. Many of these are interconnected. TP-S rests on the assumption that “a physical symbol system ... has the necessary and sufficient means for general intelligent action” (Simon 1996, p. 23). More specifically, intelligent agents model their environments and possible actions using symbol structures; “hence the programs that govern the behavior of a symbol system can be stored, along with other symbol structures, in the system's own memory, and executed when activated” (Simon 1996, p. 22). This is equivalent to the planning model of cognitive science. The centrality of plans also manifests in SDLC as both the project plan and the design specification (as a construction plan). Like SDLC, TP-S clearly separates phases with design beginning with known constraints and objectives and producing a plan for an artifact rather than the artifact itself. Plan- driven methods likewise seek to ensure outcomes through planning and process, and separate design from other phases. SDLC, TP-S and plan-driven methods are all intensely methodical. Meanwhile, many of the alternatives identified above are also interconnected. RiA is motivated by Schön’s (1983) finding that a designer “does not keep means and ends separate, but defines them<marker type="page" number="7"/><marker type="block"/> interactively as he frames a problematic situation [and] does not separate thinking from doing” (p. 69). This rejection of planning as the foundation of action is central to EV and reframes design as an improvised interaction between an actor and its environment. SCI is explicitly informed by RiA (<xref ref-type="bibr" rid="R33" id="91" class="deo:Reference">Ralph 2010b</xref>) and enshrines both the actor/environment interaction and the actor’s ability to choose its own path. Agile methods, like SCI, focus on producing code rather than plans, however, SCI and RiA are consistent with entirely amethodical development with neither assuming a structured process. Moreover, as Scrum’s planning is mostly just choosing the current sprint’s goal and distributing work, the plan is an abstraction over action, as in EV. Scrum’s explicit focus on interaction with external stakeholders is broadly consistent with SCI and Agile methods. Additionally, Scrum explicitly encourage reflection in action through its retrospective meetings. Organizing design-related memes around their epistemological underpinnings facilitates definitions for The Rational Model of Design and an alternative as follows. I call this alternative “The Empirical Model of Design” not only as it posits that designers approach projects as empirical inquiries but also to remind us of its grounding in empirical observation (§3). <xref ref-type="table" rid="T2" id="92" class="deo:Reference">Table 2</xref> summarizes the models. The Rational Model of Design: a collection of interconnected design-related memes with a rationalist epistemology including Technical Problem-Solving, the Systems Development Lifecycle, plan-driven development methods, and their assumptions. The Empirical Model of Design: a collection of interconnected design-related memes with an empiricist epistemology including Reflection-in-Action, Sensemaking- Coevolution-Implementation Theory, amethodical development, and their assumptions.</region>
        <region class="unknown" id="38" page="2" column="1">1 At the time of writing, Wikipedia’s ubiquitous “Software Development Process Template” sidebar listed eight “Activities and Steps” including “Requirements”, “Design”, “Implementation” and “Testing”.</region>
        <region class="DoCO:FigureBox" id="F1">
          <image class="DoCO:Figure" src="62in.page_004.image_01.png" thmb="62in.page_004.image_01-thumb.png"/>
          <image class="DoCO:Figure" src="62in.page_004.image_02.png" thmb="62in.page_004.image_02-thumb.png"/>
          <image class="DoCO:Figure" src="62in.page_004.image_03.png" thmb="62in.page_004.image_03-thumb.png"/>
          <image class="DoCO:Figure" src="62in.page_004.image_04.png" thmb="62in.page_004.image_04-thumb.png"/>
          <image class="DoCO:Figure" src="62in.page_004.image_05.png" thmb="62in.page_004.image_05-thumb.png"/>
          <image class="DoCO:Figure" src="62in.page_004.image_06.png" thmb="62in.page_004.image_06-thumb.png"/>
          <caption class="deo:Caption" id="53" page="4" column="1">Fig. 1.</caption>
        </region>
        <region class="unknown" id="55" page="4" column="1">SDLC (adapted from <xref ref-type="bibr" rid="R38" id="54" class="deo:Reference">Royce 1970</xref>). Solid lines indicate the original, no-backtracking version. Solid lines plus dashed lines show the original version with backtracking. Solid, dashed and dotted lines indicate the clique version (see below).</region>
        <region class="unknown" id="71" page="5" column="1">Key Design Design Input Object's Agent's Design Object Output Environment Environment Composition Executes Primitives Unbounded Entity Object Sensemaking Implementation Mental Entity Design Agent Activity Goals Mental Mental Picture Picture of Coevolution of Design Constraints Context Object</region>
        <region class="DoCO:FigureBox" id="F2">
          <caption class="deo:Caption" id="73" page="5" column="1">Fig. 2. Sensemaking-Coevolution-Implementation Theory (from <xref ref-type="bibr" rid="R32" id="72" class="deo:Reference">Ralph 2010a</xref>)</caption>
        </region>
        <region class="DoCO:FigureBox" id="F4">
          <image class="DoCO:Figure" src="62in.page_006.image_07.png" thmb="62in.page_006.image_07-thumb.png"/>
          <caption class="deo:Caption" id="87" page="6" column="1">Fig. 3. XP’s “Pull Model of Fig. 4. Unified Software Process Phase Model (adapted from Development” (<xref ref-type="bibr" rid="R5" id="86" class="deo:Reference">Beck 2005</xref>) Wikimedia Commons)</caption>
        </region>
        <region class="DoCO:TableBox" id="Tx94">
          <content>
            <table class="DoCO:Table" number="2" page="7">
              <thead class="table"/>
              <tbody>
                <tr class="table"/>
              </tbody>
            </table>
          </content>
          <region class="TableInfo" id="95" confidence="possible" page="7" column="1">3</region>
        </region>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="96" page="7" column="1">THE JURY IS IN</h1>
        <region class="DoCO:TextChunk" id="114" page="7" column="1">The above elucidation of the Rational and Empirical models raises many questions – can the model elements be empirically tested? are some elements superior to others? does one model better reflect software development practice overall? The answer to all three questions is “yes” and substantial empirical study has already been done. Concerning TP-S and RiA, <xref ref-type="bibr" rid="R40" id="97" class="deo:Reference">Schön (1983)</xref> and <xref ref-type="bibr" rid="R14" id="98" class="deo:Reference">Cross et al. (1992)</xref> explicitly found that real designers do not operate according to TP-S. The core TP-S assumption that problems are known, unambiguous, and agreed is incommensurate with empirical evidence of goal conflict in design projects (cf., <xref ref-type="bibr" rid="R13" id="99" class="deo:Reference">Checkland 1999</xref>). Instead, <xref ref-type="bibr" rid="R40" id="100" class="deo:Reference">Schön (1983)</xref> found that a designer “does not keep means and ends separate, but defines them interactively as he frames a problematic situation. He does not separate thinking from doing” (p. 69). RiA is explicitly based on this empirical foundation provided by Schön’s (1983) case studies. This was later extended for team design (see <xref ref-type="bibr" rid="R25" id="101" class="deo:Reference">Levina 2005</xref> for discussion of Collective RiA). Concerning theories of human action, Suchman (1987)’s comprehensive comparison of EV and the plan-centered view concludes that action is inherently improvised, consistent with EV. In software<marker type="page" number="8"/><marker type="block"/> development specifically, <xref ref-type="bibr" rid="R51" id="103" class="deo:Reference">Zheng et al. (2011)</xref> show how “collective agility” in a large project was enacted through improvisational behavior under minimal strategic planning. Concerning process theories, a survey of more than 1400 software developers (<xref ref-type="bibr" rid="R32" id="104" class="deo:Reference">Ralph 2010a</xref>) found that SCI more accurately represented software development than SDLC or the Function-Behavior- Structure Framework (FBS) (<xref ref-type="bibr" rid="R17" id="105" class="deo:Reference">Gero 1990</xref>), another rationalist design process theory. Concerning the methodicalness of development, <xref ref-type="bibr" rid="R28" id="106" class="deo:Reference">Nandhakumar and Avison (1999)</xref> found that “traditional [information systems] development methodologies are treated primarily as a necessary fiction to present an image of control or to provide a symbolic status, and are too mechanistic to be of much use in the detailed, day-to-day organization of systems developers' activities” (p. 176). <xref ref-type="bibr" rid="R3" id="107" class="deo:Reference">Baskerville et al. (1992, 2004)</xref> similarly found evidence of amethodical systems development in several case studies of software developers. <xref ref-type="bibr" rid="R46" id="108" class="deo:Reference">Truex et al. (2000)</xref> summarized the argument by suggesting that “methods [are] merely unattainable ideals and hypothetical ‘straw men’ that provide normative guidance to utopian development situations” (p. 53). Concerning SDMs, research by The <xref ref-type="bibr" rid="R43" id="109" class="deo:Reference">Standish Group (2006)</xref> found that the shift from Waterfall to Agile methods has driven the reduction in project failure since the original Chaos Report. Concerning PMFs, a meta-analysis of empirical studies of Scrum teams concluded that introducing Scrum is associated with higher productivity and customer satisfaction (<xref ref-type="bibr" rid="R12" id="110" class="deo:Reference">Cardozo et al. 2010</xref>). The above summary may appear biased toward the Empirical Model. However, an extensive search using Academic Search Premier and Google Scholar using Query 1 produced only one study supporting a Rational-Model element. <xref ref-type="bibr" rid="R30" id="111" class="deo:Reference">Palvia and Nosek (1990)</xref> evaluated SDLC against a prototyping methodology using a survey; however, it explicitly assumed that SDLC describes all software development, creating a circular argument. Query 1: (“Waterfall Model” OR SDLC) AND (experiment OR “laboratory study” OR “case study” OR “field study” OR survey OR “variance model” or “econometric analysis”) While it may appear incredulous that the dominant view of design lacks empirical support, it is worth remembering that Simon (1996) provided no empirical support for TP-S; <xref ref-type="bibr" rid="R38" id="112" class="deo:Reference">Royce (1970)</xref> specifically said the Waterfall Model “has never worked” (p. 335); <xref ref-type="bibr" rid="R17" id="113" class="deo:Reference">Gero (1990)</xref> provided no empirical support for FBS; and Rationalism as a basis for science fell out of fashion with Kant’s Critique of Pure Reason. Meanwhile RiA, SCI and amethodical development were all developed based on empirical observations. In conclusion, notwithstanding that existing evidence is incomplete and imperfect, the balance of evidence supports the Empirical Model.</region>
        <region class="unknown" id="115" page="8" column="1">4</region>
      </section>
      <section class="deo:Discussion">
        <h1 class="DoCO:SectionTitle" id="116" page="8" column="1">DISCUSSION</h1>
        <region class="DoCO:TextChunk" id="143" page="8" column="1">In addition to the components discussed above, the Rational Model makes several key assumptions – 1) design projects begin with known, unambiguous, agreed goals (cf., <xref ref-type="bibr" rid="R40" id="117" class="deo:Reference">Schön 1983</xref>); 2) “design” occurs after analysis and before implementation (cf., <xref ref-type="bibr" rid="R40" id="118" class="deo:Reference">Schön 1983</xref>); 3) the solution space is bounded and conceptually navigable (cf., <xref ref-type="bibr" rid="R9" id="119" class="deo:Reference">Brooks 2010</xref>); 4) the system being designed is simple, i.e., its properties are predictable from its components (cf. <xref ref-type="bibr" rid="R17" id="120" class="deo:Reference">Gero 1990</xref> on predicted behavior). Neither Simon (1996) nor Pahl and Beitz (1996) clearly state these assumptions. <xref ref-type="bibr" rid="R9" id="121" class="deo:Reference">Brooks (2010)</xref> attacked the Rational Model on multifarious grounds including – 1) “We don't really know the goal when we start” (p. 22); 2) The desiderata and constraints keep changing; and 3) the designer cannot explore the tree of design decisions as it is never fully understood and the impacts of individual decisions cannot be determined without following them through to complete designs. He thereby joins a chorus of conceptual excoriation of the Rational Model and related concepts (e.g., <xref ref-type="bibr" rid="R27" id="122" class="deo:Reference">McCracken and Jackson 1982</xref>, <xref ref-type="bibr" rid="R18" id="123" class="deo:Reference">Gladden 1982</xref>, <xref ref-type="bibr" rid="R46" id="124" class="deo:Reference">Truex et al. 2000</xref>, <xref ref-type="bibr" rid="R28" id="125" class="deo:Reference">Nandhakumar and Avison 1999</xref>). Following this, the Empirical Model makes opposing assumptions – 1) design projects involve multiple stakeholders having poorly-understood, ambiguous, conflicting goals (<xref ref-type="bibr" rid="R13" id="126" class="deo:Reference">Checkland 1999</xref>, <xref ref-type="bibr" rid="R40" id="127" class="deo:Reference">Schön 1983</xref>, <xref ref-type="bibr" rid="R10" id="128" class="deo:Reference">Brown et al. 2008</xref>); 2) “design encompasses all the activities involved in conceptualizing, framing, implementing, commissioning, and ultimately modifying complex systems” (Freeman and<marker type="page" number="9"/><marker type="block"/>  <xref ref-type="bibr" rid="R16" id="130" class="deo:Reference">Hart 2004</xref>, p. 20); 3) the solution space is unbounded; and 4) the system being designed is complex, i.e., it exhibits properties not predictable from its constituent parts (cf., <xref ref-type="bibr" rid="R49" id="131" class="deo:Reference">Waldrop 1992</xref>). As mentioned in the introduction, support for the Rational Model is not surprising. This discussion is not intended to insult those who accepted the Rational Model in the past (as the author did) but to reveal the harm of continuing to do so. The Rational model is not wrong; it is simply misapplied where its assumptions do not hold and this misapplication creates specific, observable problems. In real-world design projects, for example, developers are unable to make reliable time and cost estimates as they neither conceptualize their work through detailed plans nor have sufficient information about the problem to accurately estimate its solution’s difficulty (<xref ref-type="bibr" rid="R35" id="132" class="deo:Reference">Ralph and Wand 2009</xref>). This creates tension with managers attempting to drive projects through cost estimates (<xref ref-type="bibr" rid="R5" id="133" class="deo:Reference">Beck 2005</xref>) and is used to justify contracting development with fixed price / fixed schedule contracts, thereby increasing overall project risks (<xref ref-type="bibr" rid="R9" id="134" class="deo:Reference">Brooks 2010</xref>). Furthermore, Rational-Model thinking encourages focusing on an oversimplified “given” problem (e.g., USP’s focus on use cases) instead of multiple stakeholders having poorly-understood, ambiguous, conflicting goals (cf., <xref ref-type="bibr" rid="R13" id="135" class="deo:Reference">Checkland 1999</xref>). Similarly, unfounded adherence to the Rational Model affects design research in at least two ways. First, the design science research approach, as formulated by <xref ref-type="bibr" rid="R20" id="136" class="deo:Reference">Hevner et al. (2004)</xref>, was heavily influenced by TP-S (Hevner et al. cite Simon 13 times). It conceptualizes “the design science paradigm” as “fundamentally a problem-solving paradigm” (p. 76), marginalizing the crucial interplay between problem framing and problem solving at the heart of RiA. Furthermore, it recommends that researchers “Design as a search process” (p. 83), following Simon’s model of design as heuristic search. However, empirical evidence reveals that designers do not design as a search process (<xref ref-type="bibr" rid="R40" id="137" class="deo:Reference">Schön 1983</xref>, <xref ref-type="bibr" rid="R14" id="138" class="deo:Reference">Cross et al. 1992</xref>) as designers rarely have sufficient information to navigate the tree of design decisions (<xref ref-type="bibr" rid="R9" id="139" class="deo:Reference">Brooks 2010</xref>). Second, many design scientists are engaged in developing new and improved SDMs and PMFs (i.e., method engineering). The Rational Model’s continued dominance has, at least in part, created a research culture that accepts methods making Rational-Model assumptions despite empirical evidence that these assumptions do not hold in practice. For example, the extensive research on goal-oriented requirements engineering methods assumes that requirements can be “derived” from stakeholder goals (cf., van <xref ref-type="bibr" rid="R48" id="140" class="deo:Reference">Lamsweerde 2001</xref>). This is based on the Rational-Model assumption of a limited number of knowable solutions. Given the opposite, Empirical-Model assumption of an unknown, possibly infinite number of solutions, requirements cannot generally be derived from goals. For example, one cannot infer specific requirements from the goal of a virtual learning environment, “to enhance student learning”, as there is an unknown number of strategies to achieve this goal, some of which may not need any particular “requirement”. The fact that proponents of new methods need not produce evidence of effectiveness to be taken seriously exacerbates this problem. Not requiring empirical evidence supporting SDMs and PMFs is arguably also a manifestation of Rationalism. Moreover, software engineering courses embracing the Rational Model have become misaligned with practice, as expressed by Graham (2003) – “I was taught in college that one ought to figure out a program completely on paper before even going near a computer. I found that I did not program this way ... I tended to just spew out code that was hopelessly broken, and gradually beat it into shape.” The Rational Model’s influence is evident in the ACM model curricula for software engineering and information systems, which cover neither coevolution nor generating design alternatives (<xref ref-type="bibr" rid="R34" id="141" class="deo:Reference">Ralph 2011</xref>). Finally, two certain misconception bears preempting. First, many design-related concepts do not fit cleanly in either model. For example, peer programming has no innate epistemology. Second, the Rational and Empirical Models are not methods. Software development teams do not adopt one or the other of these models, and more than Galapagos finches adopt evolution, natural selection and positivism and scientific realism. This is not a debate between agile and plan-driven methods – adopting a plan-driven method is not akin to adopting the Rational Model. The Rational and Empirical models are memeplexes, constructed by the scientific community to conceptualize design work. The paper has two primary limitations. First, it is not a comprehensive review of every study on ever Rational- and Empirical-Model concept. It claims only that a good-faith search for empirical evidence supporting the Rational Model found only a dearth of empirical study, while empirical studies<marker type="page" number="10"/><marker type="block"/> supporting corresponding Empirical-Model concepts were plentiful. Second, the analysis applies only to the software development domain. The Rational Model may comprise excellent concepts for understanding other design domains (e.g., electrical engineering).</region>
        <region class="unknown" id="144" page="10" column="1">5</region>
      </section>
      <section class="deo:Conclusion">
        <h1 class="DoCO:SectionTitle" id="145" page="10" column="1">CONCLUSION</h1>
        <region class="DoCO:TextChunk" id="146" page="10" column="1">This paper makes two contributions. First, it extends Brooks’ (2010) identification of The Rational Model of Design by clarifying its meaning, providing a sample of its components and their relationships and enumerating its negative effects on research, practice and education. Second, it organizes Rational Model alternatives into The Empirical Model of Software Design and summarizes the evidence supporting these alternatives. This results in the challenging conclusion that the new Empirical Model is superior to the status quo Rational Model. These contributions have implications for research, practice and teaching. Researchers studying design may stop basing surveys, coding schemes and experimental protocols on unsupported Rational-Model phases – opting instead for SCI or RiA. Furthermore, the idea of designing through a search processes in the design science approach may be revised. Practitioners may use the Empirical Model and its supporting evidence to argue against fixed-price, fixed-schedule contracts and SDMs and PMFs based on unsupported Rational-Model assumptions. Finally, instructors may replace SDLC, USP and related Rational-Model concepts, with SCI Theory, Scrum and other Empirical-Model alternatives in software development and project management courses. Moreover, it is crucial that software engineering education shift away from toy problems and idealized processes toward ambiguous situations, and complex artifacts that emphasize the problem-framing / problem-solving interplay. The purpose of this paper is not to disparage proponents of the Rational Model but to point out that the status quo should be subject to the same standard of empirical testing as its alternatives. Following this, several avenues of future research are evident. First, direct empirical comparisons of SDMs, a methodologically challenging task, are needed. Second, some descriptive research on the extent to which Rational-Model assumptions are met in diverse projects would be beneficial. Finally, the components of The Empirical Model may be improved, e.g., SCI Theory may be generalized to account for multiple agents pursuing conflicting agendas. In conclusion, while many have criticized the dominant view of design, such criticisms are of limited use when no comprehensive alternative is available. This paper presents a comprehensive alternative, clearing the way for a paradigm shift in design research, practice and education.</region>
      </section>
      <section class="DoCO:Bibliography">
        <h1 class="DoCO:SectionTitle" id="147" confidence="possible" page="10" column="1">References</h1>
        <ref-list class="DoCO:BiblioGraphicReferenceList">
          <ref rid="R1" class="deo:BibliographicReference" id="148" confidence="possible" page="10" column="1">Alexander, C. W. (1964). Notes on the synthesis of form. Harvard University Press.</ref>
          <ref rid="R2" class="deo:BibliographicReference" id="149" confidence="possible" page="10" column="1">Bansler, J. &amp; Bødker, K. (1993). 'A reappraisal of structured analysis: Design in an organizational context.' ACM Transactions on Information Systems, 11 (2), 165-93.</ref>
          <ref rid="R3" class="deo:BibliographicReference" id="150" confidence="possible" page="10" column="1">Baskerville, R. &amp; Pries-Heje, J. (2004). 'Short cycle time systems development.' Information Systems Journal, 14 (3), 237-64.</ref>
          <ref rid="R4" class="deo:BibliographicReference" id="151" confidence="possible" page="10" column="1">Baskerville, R., Travis, J. &amp; Truex, D. P. (1992). 'Systems without method: The impact of new technologies on information systems development projects.' Paper presented at the IFIP WG8.2 Working Conference on The Impact of Computer Supported Technologies in Information Systems Development.</ref>
          <ref rid="R5" class="deo:BibliographicReference" id="152" confidence="possible" page="10" column="1">Beck, K. (2005). Extreme programming explained: Embrace change. Boston, MA, USA: Addison Wesley.</ref>
          <ref rid="R6" class="deo:BibliographicReference" id="153" confidence="possible" page="10" column="1">Beck, K., Beedle, M., van Bennekum, A., Cockburn, A., Cunningham, W., Fowler, M., Grenning, J., Highsmith, J., Hunt, A., Jeffries, R., Kern, J., Marick, B., Martin, R. C., Mellor, S., Schwaber, K., Sutherland, J. &amp; Thomas, D. (2001). 'Manifesto for agile software development.' [online at http:// www.agilemanifesto.org/].</ref>
          <ref rid="R7" class="deo:BibliographicReference" id="154" confidence="possible" page="10" column="1">Boehm, B. (1988). 'A spiral model of software development and enhancement.' IEEE Computer, 21 (5), 61-72.</ref>
          <ref rid="R8" class="deo:BibliographicReference" id="155" confidence="possible" page="11" column="1">Bourque, P. &amp; Dupuis, R. (2004). 'Guide to the software engineering body of knowledge (SWEBOK).' IEEE Computer Society Press.</ref>
          <ref rid="R9" class="deo:BibliographicReference" id="156" confidence="possible" page="11" column="1">Brooks, F. P. (2010). The design of design: Essays from a computer scientist. Addison-Wesley Professional.</ref>
          <ref rid="R10" class="deo:BibliographicReference" id="157" confidence="possible" page="11" column="1">Brown, A. D., Stacey, P. &amp; Nandhakumar, J. (2008). 'Making sense of sensemaking narratives.' Human Relations, 61, 1035-62.</ref>
          <ref rid="R11" class="deo:BibliographicReference" id="158" confidence="possible" page="11" column="1">Campbell, D. T. &amp; Stanley, J. (1963). Experimental and quasi-experimental designs for research. Boston: Houghton Mifflin.</ref>
          <ref rid="R12" class="deo:BibliographicReference" id="159" confidence="possible" page="11" column="1">Cardozo, E., Neto, J., Barza, A., França, A. &amp; da Silva, F. (2010). 'Scrum and productivity in software projects: A systematic literature review.' 14th International Conference on Evaluation and Assessment in Software Engineering (EASE). Keele University, UK,.</ref>
          <ref rid="R13" class="deo:BibliographicReference" id="160" confidence="possible" page="11" column="1">Checkland, P. (1999). Systems thinking, systems practice. Chichester: Wiley.</ref>
          <ref rid="R14" class="deo:BibliographicReference" id="161" confidence="possible" page="11" column="1">Cross, N., Dorst, K. &amp; Roozenburg, N. (1992). Research in design thinking. Delft: Delft University Press.</ref>
          <ref rid="R15" class="deo:BibliographicReference" id="162" confidence="possible" page="11" column="1">Dawkins, R. (1989). The selfish gene. Oxford University Press. Ewusi-Mensah, K. (2003). Software development failures. MIT Press. Fitzgerald, B. (2006). 'The transformation of open source software.' MIS Quarterly, 30 (3), 587-598.</ref>
          <ref rid="R16" class="deo:BibliographicReference" id="163" confidence="possible" page="11" column="1">Freeman, P. &amp; Hart, D. (2004). 'A science of design for software-intensive systems.' Communications of the ACM, 47 (8), 19-21.</ref>
          <ref rid="R17" class="deo:BibliographicReference" id="164" confidence="possible" page="11" column="1">Gero, J. S. (1990). 'Design prototypes: A knowledge representation schema for design.' AI Magazine, 11 (4), 26-36.</ref>
          <ref rid="R18" class="deo:BibliographicReference" id="165" confidence="possible" page="11" column="1">Gladden, G. R. (1982). 'Stop the life-cycle, I want to get off.' SIGSOFT Software Engineering Notes, 7 (2), 35-39.</ref>
          <ref rid="R19" class="deo:BibliographicReference" id="166" confidence="possible" page="11" column="1">Hevner, A. &amp; Chatterjee, S. (2010). Design research in information systems: Theory and practice. Springer.</ref>
          <ref rid="R20" class="deo:BibliographicReference" id="167" confidence="possible" page="11" column="1">Hevner, A. R., March, S. T., Park, J. &amp; Ram, S. (2004). 'Design science in information systems research.' MIS Quarterly, 28 (1), 75-105.</ref>
          <ref rid="R21" class="deo:BibliographicReference" id="169" confidence="possible" page="11" column="1">IEEE (1998). 'IEEE standard 830-1998: Recommended practice for software requirements specifications.' [online at <ext-link ext-link-type="uri" href="http://standards.ieee.org/reading/ieee/std_public/description/se/" id="168">http://standards.ieee.org/reading/ieee/std_public/description/se/</ext-link> 830-1998_desc.html].</ref>
          <ref rid="R22" class="deo:BibliographicReference" id="170" confidence="possible" page="11" column="1">Jacobson, I., Booch, G. &amp; Rumbaugh, J. (1999). The unified software development process. Boston, MA, USA: Addison-Wesley Longman Publishing Co., Inc.</ref>
          <ref rid="R23" class="deo:BibliographicReference" id="171" confidence="possible" page="11" column="1">Kroenke, D., Gemino, A. &amp; Tingling, P. (2010). Experiencing MIS. Toronto: Pearson, Prentice Hall.</ref>
          <ref rid="R24" class="deo:BibliographicReference" id="172" confidence="possible" page="11" column="1">Laudon, K., Laudon, J. &amp; Brabston, M. (2009). Management information systems: Managing the digital firm. Toronto: Pearson, Prentice Hall.</ref>
          <ref rid="R25" class="deo:BibliographicReference" id="173" confidence="possible" page="11" column="1">Levina, N. (2005). 'Collaborating on multiparty information systems development projects: A collective reflection-in-action view.' Information Systems Research, 16 (2), 109-30.</ref>
          <ref rid="R26" class="deo:BibliographicReference" id="174" confidence="possible" page="11" column="1">Markie, P. (2008). 'Rationalism vs. Empiricism', Stanford Encyclopedia of Philosophy [online at http:// plato.stanford.edu/entries/rationalism-empiricism/].</ref>
          <ref rid="R27" class="deo:BibliographicReference" id="175" confidence="possible" page="11" column="1">McCracken, D. D. &amp; Jackson, M. A. (1982). 'Life cycle concept considered harmful.' SIGSOFT Software Engineering Notes, 7 (2), 29-32.</ref>
          <ref rid="R28" class="deo:BibliographicReference" id="176" confidence="possible" page="11" column="1">Nandhakumar, J. &amp; Avison, D. (1999). 'The fiction of methodological development: A field study of information systems development.' Information Technology &amp; People, 12 (2), 176-91.</ref>
          <ref rid="R29" class="deo:BibliographicReference" id="177" confidence="possible" page="11" column="1">Newell, A. &amp; Simon, H. (1972). Human problem solving. Prentice-Hall, Inc. Pahl, G. &amp; Beitz, W. (1996). Engineering design: A systematic approach. London: Springer-Verlag.</ref>
          <ref rid="R30" class="deo:BibliographicReference" id="178" confidence="possible" page="11" column="1">Palvia, P. &amp; Nosek, J. (1990). 'An empirical evaluation of system development methodologies.' Information Resource Management Journal, 3 (3), 23-32.</ref>
          <ref rid="R31" class="deo:BibliographicReference" id="179" confidence="possible" page="11" column="1">Poppendieck, M. &amp; Poppendieck, T. (2003). Lean software development: An agile toolkit. Addison- Wesley Professional.</ref>
          <ref rid="R32" class="deo:BibliographicReference" id="180" confidence="possible" page="11" column="1">Ralph, P. (2010a). 'Comparing two software design process theories.' In Proceedings of the Fifth International Design Science Research in Information Systems and Technology Conference. Jun 4-5.</ref>
          <ref rid="R33" class="deo:BibliographicReference" id="181" confidence="possible" page="11" column="1">Ralph, P. (2010b). 'Fundamentals of software design science.' Sauder School of Business: 177. Vancouver, Canada: University of British Columbia.</ref>
          <ref rid="R34" class="deo:BibliographicReference" id="182" confidence="possible" page="11" column="1">Ralph, P. (2011). 'The coevolution gap in software developer education.’ Working Paper, Lancaster University, 12 pages.</ref>
          <ref rid="R35" class="deo:BibliographicReference" id="183" confidence="possible" page="12" column="1">Ralph, P. &amp; Wand, Y. (2009). 'A proposal for a formal definition of the design concept.' In K. Lyytinen, P. Loucopoulos, J. Mylopoulos &amp; W. Robinson (Eds.) Design requirements engineering: A ten-year perspective: 103-36. Springer-Verlag.</ref>
          <ref rid="R36" class="deo:BibliographicReference" id="184" confidence="possible" page="12" column="1">Renner, C. H. (2004). 'Validity effect.' In R. F. Pohl (Ed.) Cognitive illusions: A handbook on fallacies and biases in thinking, judgement and memory: 201-13. Hove, UK: Psychology Press.</ref>
          <ref rid="R37" class="deo:BibliographicReference" id="185" confidence="possible" page="12" column="1">Roozenburg, N. &amp; Eekels, J. (1995). Product design: Fundamentals and methods. Chichester, UK: Wiley.</ref>
          <ref rid="R38" class="deo:BibliographicReference" id="186" confidence="possible" page="12" column="1">Royce, W. W. (1970). 'Managing the development of large software systems: Concepts and techniques.' In proceedings of Wescon.</ref>
          <ref rid="R39" class="deo:BibliographicReference" id="187" confidence="possible" page="12" column="1">Samuelson, W. &amp; Zeckhauser, R. J. (1988). 'Status quo bias in decision making.' Journal of Risk and Uncertainty, 1, 7-59.</ref>
          <ref rid="R40" class="deo:BibliographicReference" id="188" confidence="possible" page="12" column="1">Schön, D. A. (1983). The reflective practitioner: How professionals think in action. USA: Basic Books.</ref>
          <ref rid="R41" class="deo:BibliographicReference" id="189" confidence="possible" page="12" column="1">Schwaber, K. (2004). Agile project management with scrum. Microsoft Press. Schwaber, K. &amp; Beedle, M. (2001). Agile software development with scrum. Prentice Hall. Simon, H. A. (1996). The sciences of the artificial. Cambridge, MA, USA: MIT Press.</ref>
          <ref rid="R42" class="deo:BibliographicReference" id="190" confidence="possible" page="12" column="1">Stacey, P. &amp; Nandhakumar, J. (2008). 'Opening up to agile games development.' Communications of the ACM, 51 (12), 143-46.</ref>
          <ref rid="R43" class="deo:BibliographicReference" id="191" confidence="possible" page="12" column="1">Standish Group (2006). 'Chaos database: Chaos surveys conducted from 1994 to fall 2004'.</ref>
          <ref rid="R44" class="deo:BibliographicReference" id="192" confidence="possible" page="12" column="1">Suchman, L. (1987). Plans and situated actions: The problem of human-machine communication. Cambridge University Press.</ref>
          <ref rid="R45" class="deo:BibliographicReference" id="193" confidence="possible" page="12" column="1">Trochim, W. (2001). Reserch methods knowledge base. Cincinnatti, OH, USA: Atomic Dog Publishing.</ref>
          <ref rid="R46" class="deo:BibliographicReference" id="194" confidence="possible" page="12" column="1">Truex, D., Baskerville, R. &amp; Travis, J. (2000). 'Amethodical systems development: The deferred meaning of systems development methods.' Accounting, Management and Information Technologies, 10 (1), 53-79.</ref>
          <ref rid="R47" class="deo:BibliographicReference" id="195" confidence="possible" page="12" column="1">Van de Ven, A. H. &amp; Poole, M. S. (1995). 'Explaining development and change in organizations.' The Academy of Management Review, 20 (3), 510-40.</ref>
          <ref rid="R48" class="deo:BibliographicReference" id="196" confidence="possible" page="12" column="1">van Lamsweerde, A. (2001). 'Goal-oriented requirements engineering: A guided tour.' Proceedings of the Fifth IEEE International Symposium on Requirements Engineering. Aug.</ref>
          <ref rid="R49" class="deo:BibliographicReference" id="197" confidence="possible" page="12" column="1">Waldrop, M. M. (1992). Complexity: The emerging science at the edge of order and chaos. New York, USA: Simon and Schuster.</ref>
          <ref rid="R50" class="deo:BibliographicReference" id="198" confidence="possible" page="12" column="1">Yin, R. (2003). Case study research: Design and methods. California, USA: Sage Publications.</ref>
          <ref rid="R51" class="deo:BibliographicReference" id="199" confidence="possible" page="12" column="1">Zheng, Y., Venters, W. &amp; Cornford, T. (2011). 'Collective agility, paradox and organizational improvisation: The development of a particle physics grid.' Information Systems Journal, 21(4), 303-33.</ref>
        </ref-list>
      </section>
    </body>
  </article>
</pdfx>
