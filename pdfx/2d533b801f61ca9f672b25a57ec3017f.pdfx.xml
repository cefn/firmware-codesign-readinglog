<?xml version='1.0' encoding='UTF-8'?>
<pdfx xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://pdfx.cs.man.ac.uk/static/article-schema.xsd">
  <meta>
    <job>78aa070570bc9290b44b48db382d7613863c99cee530506b5dd4e2c151114896</job>
    <base_name>62oy</base_name>
    <doi>http://dx.doi.org/10.1109/auic.2001.906270</doi>
  </meta>
  <article>
    <front class="DoCO:FrontMatter">
      <title-group>
        <article-title class="DoCO:Title" id="1">The Computer Science of Everyday Things</article-title>
      </title-group>
      <contrib-group class="DoCO:ListOfAuthors">
        <contrib contrib-type="author">
          <name id="2">Harold Thimbleby</name>
        </contrib>
      </contrib-group>
      <region class="unknown" id="4">Computing Science Middlesex University Bounds Green Road, London, N11 2NQ <ext-link ext-link-type="uri" href="http://www.cs.mdx.ac.uk/harold" id="3">http://www.cs.mdx.ac.uk/harold</ext-link></region>
      <abstract class="DoCO:Abstract" id="5">Technology is fashionable, wonderful and getting better; Moore’s Law predicts substantial, sustained improvement. Yet the usability of ‘everyday things’ is low (video recorders being a notorious example). It seems to follow that improvements must be sought in areas outside technology, such as human factors. But a premise is wrong: in fact, the technology — the embedded computer science — is appalling! Obsolescence, a symptom of Moore’s Law, hides flawed design: poor products are replaced rather than fixed. The poor quality of the computer science of everyday things is eclipsed by the hope for fixing today’s problems with tomorrow’s consumption. This paper reviews Moore’s Law and the usability of everyday things; it shows that professional computer science can improve usability with ease. Improvement will be essential when ethical and environmental issues become, as they will, unavoidable design criteria. Keywords Moore’s Law, User interfaces, Mobile phones, Programming user interfaces, Environment.</abstract>
    </front>
    <body class="DoCO:BodyMatter">
      <section class="deo:Introduction">
        <h1 class="DoCO:SectionTitle" id="6" page="1" column="1">1 Introduction</h1>
      </section>
      <region class="DoCO:TextChunk" id="9" page="1" column="1">Almost all modern everyday things — from mobile phones, cameras, central heating controllers, calculators, to wristwatches and airplanes — work because of embedded computer programs. While most are technically impressive, their usability is often low. Usability problems are not just irritat- ing, but are costly and stressful, and hazardous in many contexts: whether the users concerned are airline pilots, office workers using photocopiers, or home users struggling with video recorders. It is popular to argue that everyday things are harder to use than they need be, and that improvements must be sought in human factors, that is in the study of users and their tasks [<xref ref-type="bibr" rid="R16" id="7" class="deo:Reference">16</xref>], and in the study of ecologies and context of use [<xref ref-type="bibr" rid="R15" id="8" class="deo:Reference">15</xref>], etc. The</region>
      <region class="DoCO:TextChunk" id="10" confidence="possible" page="1" column="1">Proceedings of the Australasian User Interface Conference, Bond University, Gold Coast, Aus- tralia, January 29–February 1, 2001.</region>
      <region class="DoCO:TextChunk" id="12" page="1" column="2">lack of “user centred design” is the conventional reason for the failure of almost all programmed systems [<xref ref-type="bibr" rid="R10" id="11" class="deo:Reference">10</xref>]. Indeed, as industry can evidently sell to consumers without improving usability, business prac- tice itself creates a source of usability problems that is again of non-technical origin. Usability, then, as a field has become dominated by marketing, social, empirical and statistical methods alien to computer scientists. The broad emphasis on human factors encourages computer scientists, further, to dismiss usability as irrelevant to their focus. Indeed, in simple terms computer science appears remarkably successful (cf. Moore’s Law, §2, below): superficially confirming that usability problems must be solved elsewhere. But successful interaction clearly requires un- derstanding of both humans and computers. The computer science of everyday things has ignored usability (we give examples below), and its standards are woeful. This factor of low usability is ignored not just by designers and usability workers but also by computer scientists. There is a serious educational problem, both at the level of educating technologists to program user interfaces better, and at the level of encouraging consumers to demand higher standards of lifetime usability, which could easily be provided.</region>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="13" page="1" column="2">2 The “impressive” Moore’s Law</h1>
      </section>
      <region class="DoCO:TextChunk" id="25" page="1" column="2">Technology is getting better, and has increasing performance over time. We can represent this by the graph (see <xref ref-type="fig" rid="F1" id="14" class="deo:Reference">Figure 1</xref>) using a curve of posi- tive slope (it is not necessary to worry about the precise shape of the line, or exactly what ‘per- formance’ is measuring). For any particular task the user has, some minimal level of performance p will be required. From the graph it is clear that there is a crossover when the lines intersect, at performance = p and time = t. Before time t, technology is delivering inadequate performance; after t, technology can deliver more than adequate performance. Norman [<xref ref-type="bibr" rid="R17" id="15" class="deo:Reference">17</xref>], crediting Christensen [<xref ref-type="bibr" rid="R3" id="16" class="deo:Reference">3</xref>], makes the following argument. Before the crossover time<marker type="page" number="2"/><marker type="column" number="1"/><marker type="block"/> t, manufacturers need only promise technical ca- pability (which is easy, since technology is getting better all the time). After time t, products get distinguished not by their performance, which is more than adequate, but by more subtle — and harder to supply — properties like usability. For technologies like wrist watches, we are long past the threshold, and they are now fashion items, that is chosen on criteria mainly other than technological. But for many everyday things, like word processors, we should also be well beyond the crossover. So why aren’t word processors much better? Manufacturers can increase consumers’ expecta- tion of p, by providing or promising new ‘essential’ features: it is in their interest to increase p, because this postpones the crossover. Thus many everyday things have numerous features, a factor influencing their usability. The slope of the graph obviously reflects Moore’s Law. Moore’s Law, eponymous of Intel’s Gordon Moore [<xref ref-type="bibr" rid="R13" id="20" class="deo:Reference">13</xref>], says that computer technical infrastructure improves by a factor of two every 18 months. By infrastructure, take your pick: network bandwidth, processor speed, storage capacity, . . . progress is relentless. We often do not wonder about Moore’s Law beyond the excitement: everyone hopes for better products tomorrow. The law has been followed closely and by many companies. If Moore’s Law was an observation about scientific progress, we would expect more variance. We would not expect IBM, Intel and Motorola to be neck and neck; we would not expect the law to apply to the USA and to Japan. It is too coincidental [<xref ref-type="bibr" rid="R2" id="21" class="deo:Reference">2</xref>]. More likely, then, the law is an observation about capitalism rather than a surpris- ingly uniform rate of technological breakthrough. Stimulating consumer demand by enhancing performance expections is a very creative activity, and requires insight into market behaviour. Coincidentally most creative professionals are not technical: the people employed by industry to<marker type="column" number="2"/><marker type="block"/> enhance products do not understand or realise the limitations of the embedded computer science (§4). User interfaces are complex and problems in usability rarely show up immediately. By the time a user becomes dissatisfied with a product, Moore’s Law ‘ensures’ new products are available. There is little need for manufacturers to make old products better if, by the time their limitations are discov- ered, users prefer a new product to a fixed older product. Thus Moore’s Law encourages loss in design quality: manufacturers can assume customers prefer to upgrade to a faster or more featured product. In other words, provided the product lasts long enough — a few months — it need have no long-term usability features: this makes it easier to design, and to get away with poor quality design methods. Even if a product fails completely, consumers would probably rather pay to upgrade than wait for it to be repaired. Moore’s Law encourages fatalistic computer science. Your current programs will run 25% faster in six months with you doing absolutely nothing. In particular because memory gets cheaper, programs get bigger. Moore’s Law removes pressure to improve program quality: programmers can always postpone addressing bloat. Suppose, by way of example, a program is so complex that it will take 3 years to run. If its programmers delay 18 months, and then start, there will be cheaper, faster computers. The program would still finish on the same date. The programmers could have 18 months idling, and still achieve the same goal. Whatever you want to do, you may as well do nothing to start with. Enthusiasts of Moore’s Law talk huge numbers. Processor speed has improved by s, memory has increased by m, and, wow the product has twice as many zeros! But if we have more memory we need a faster processor just to take advantage of it in the same time. If there is memory not accessed, it is being used inefficiently; thus improvement might be better quantified by the ratio m/s, which assumes the computer is used to capacity in both speed and memory. Talking huge products s × m, while superficially impressive, ignores usage. Since the ratio m/s, whose dimension is time, is more-or-less constant, it explains why, despite the na ̈ ıve view of Moore’s Law, computers still take as long to boot! (Hence Machrone’s Law: the computer you want always costs $5000.) It comes down to a business issue, we want computers that are more powerful than our competitors, and we can af- ford to finance just so much to get the leverage. Despite Moore’s Law, users still take approximately the same sort of time to perform tasks. If the growth of Moore’s Law meant anything real for users, we would already have had a huge computer revolution: doubling every 18 months<marker type="page" number="3"/><marker type="column" number="1"/><marker type="block"/> is a factor of a million after 30 years. Social life has been transformed by transport, yet the performance gain is meagre compared to computer tech- nology’s: 200, perhaps as little as ten. 1 The trans- formation transport has made within such a small factor suggests that the tera-factors for computers are measuring something of little significance to humans. Humans do want to get to other places and they do want to move manufactured goods around the world, but they do not need computers to have more memory or higher density processors. What they do want is to get tasks done faster and better. Computers are not doing that with anything like the spectacular improvements the proponents of Moore’s Law would like us to believe, except in a few specialised areas [<xref ref-type="bibr" rid="R10" id="24" class="deo:Reference">10</xref>]. Human activities have not been speeded up, and certainly not speeded up by astronomical factors. The growth described by Moore’s Law focuses on technology not impact, encourages industry to postpone worrying about usability, encourages consumers to try to keep up with changing fashions, and all despite continual obsolescence (§7). Ironi- cally market churn, the corrollary of Moore’s Law, encourages a low standard for the computer science of everyday things, which in turn makes a causualty of usability.</region>
      <region class="unknown" id="18" page="2" column="1">Performance p t Time −→</region>
      <region class="DoCO:FigureBox" id="F1">
        <caption class="deo:Caption" id="19" confidence="possible" page="2" column="1">Figure 1: Perfomance of technology increases with time (curved graph). After time t perfomance exceeds the crossover value p.</caption>
      </region>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="26" page="3" column="1">3 Consumer (in)action</h1>
        <region class="DoCO:TextChunk" id="30" page="3" column="1">The automobile industry was changing rapidly in the 1960s, and in some the problems of computer science at the turn of the 21st. century reflect it. In the 1960s, some cars were badly designed and unsafe to drive. As Ralph Nader exposed [<xref ref-type="bibr" rid="R14" id="27" class="deo:Reference">14</xref>, <xref ref-type="bibr" rid="R22" id="28" class="deo:Reference">22</xref>], the prevailing cultural assumption was that drivers had accidents, and therefore drivers were respon- sible for the behaviour of cars. If an accident is “driver error” it is not the manufacturer’s problem, but is, say, a human factors or contextual problem. If a parked car rolls down a hill (an example from [<xref ref-type="bibr" rid="R14" id="29" class="deo:Reference">14</xref>]), the driver should have applied the parking brake properly, they should have turned the wheels so the car would roll against the kerb, and so on — they should be better trained, the handbrake should have better affordance . . . all perfectly constructive observations. That the car has been badly engineered and has an unsafe parking brake is thereby disguised. Similar remarks could be made about “pilot error” and the generic excuse, the “human factor.” Thus we are persuaded that usability problems are human problems. If users have usability prob-</region>
        <region class="DoCO:TextChunk" id="31" confidence="possible" page="3" column="1">1 Before the Industrial Revolution people moved between the speed of walking or of a horse, say 5 to 70km/h; today you can (unsafely and expensively) travel on land at up to 1000km/h, though most transport is undertaken by lorries travelling around 110km/h (much less if we average over the journey rather than take maximum legal speeds).</region>
        <region class="DoCO:TextChunk" id="33" page="3" column="2">lems, they should learn how to use things properly. Our society is certainly a complex place, and people do need to be technology-literate because that is how the world is. But this practical response can be used as an excuse to make systems over-complex because users will take it upon themselves to learn how to use them. Indeed, manufacturers often com- modify their learning material, thus making further profit by providing systems that require additional training! The prioritisation of safety in car design came about because of consumer action, stimulated by Nader’s damning exposés. Currently consumers of everyday things are unaware usability problems are avoidable. People working in industry are themselves consumers of everyday things — they may even be employed because of their eager following of technological fashion; they are not immune from the cultural assumptions. Although consumers could be focussed [<xref ref-type="bibr" rid="R8" id="32" class="deo:Reference">8</xref>] towards usability, the main driver for change will be from technologists. Thus, the rest of this paper is aimed at computer scientists, arguing (i ) the computer science of everyday things is embarassingly bad (ii ) the computer science is easy to fix, and to do so would have valuable benefits — achieving environmental as well as usability benefits.</region>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="34" page="3" column="2">4 Buggy everyday things</h1>
        <region class="DoCO:TextChunk" id="42" page="3" column="2">There are many gadgets representing bad computer science, but most are so bad that they are impossible to describe clearly! Perhaps the best example, because it is in principle straight forward, pervasive yet inexcusably bad, is the handheld calculator. Hand held calculators are a mature technology. Calculators have well-defined requirements, of ac- curacy and performance and so on. There have been many generations of calculator designs, and the manufacturers have had many opportunities to step their production to fix problems. The only limitation on calculator quality is manufacturer in- clination. Research into calculator user interfaces has a twenty-year background [ <xref ref-type="bibr" rid="R25" id="35" class="deo:Reference">25</xref>, <xref ref-type="bibr" rid="R29" id="36" class="deo:Reference">29</xref>]. Casio is the leading manufacturer of hand held calculators. Two of their basic models are the SL- 300LC and the MC-100, which look very similar. The SL-300LC is shown in <xref ref-type="fig" rid="F2" id="37" class="deo:Reference">Figure 2</xref>.<marker type="block"/> • Pressing the 9 keys 100+17.5% (e.g., to cal- culate 17.5% tax on £100) on the SL-300LC gets 117.50. The MC-100, with exactly the same keystrokes, gets 121.21212. Two similar- looking, confusable, calculators, made by the same manufacturer, do different things. ✄   Since the ✂ % ✁ key is unpredictable (from calculator to calculator, and even in different contexts in the same calculator), users soon avoid using it, thereby<marker type="page" number="4"/><marker type="column" number="1"/><marker type="block"/> The Casio SL-300LC. Note the highly- visible self-advertising memory keys in the middle of the top row of buttons. ‘solving’ the usability problem with their own work around. Thus with hard effort they succeed, and because of their investment in solving problems it becomes harder to question the overall appropri- ateness of the device for their tasks. Both calculators have memories, which ✄ (appear   to) function identically. The button ✂ MRC ✁ recalls the stored number and displays it, but pressed twice in succession ✄   it sets the memory to zero. The button ✂ ✄ M+ ✁   adds the displayed number to memory, and ✂ M− ✁ subtracts from the memory.</region>
        <region class="DoCO:FigureBox" id="F2">
          <image class="DoCO:Figure" src="62oy.page_004.image_01.png" thmb="62oy.page_004.image_01-thumb.png"/>
          <caption class="deo:Caption" id="41" page="4" column="1">Figure 2:</caption>
        </region>
        <region class="DoCO:TextChunk" id="43" confidence="possible" page="4" column="1">• We can assume that the memory is there for a purpose: to store numbers, and perhaps especially to store numbers that have been calculated (since other numbers are likely to be easily available). How can a number calculated and displayed be stored in memory? It is very hard to work out what to do. 2 Memory, despite high-visibility keys giving the impression of simplicity, is very difficult to use.</region>
        <region class="DoCO:TextChunk" id="46" page="4" column="1">Arguably, memory should save paper and help users do sums more reliably. Yet most users (especially those that need calculators) would need a scrap of paper to work out how to avoid using paper to write down the number! Evidently memory is not provided to make the calculator more usable but is a feature to increase p (see <xref ref-type="fig" rid="F1" id="44" class="deo:Reference">Figure 1</xref>). Casio has been making calculators for a long time, and the two calculators are not “new” in any way. It is not obvious how Casio can justify either ✄   2 Pressing ✂ M+ ✁ adds the display to memory, and only makes the memory equal the display if it already contains zero, which ✄ it may   not. To make the memory zero, you have to press ✂ MRC ✁ twice, but pressing it the first time sets the display to the memory, which loses the number you wanted to store. The solution is not easy, and there is no solution that avoids the risk of calculator overflow. (If you need paper to work it out, why not use the paper for the memory?!)<marker type="column" number="2"/><marker type="block"/> the differences or the curious features shared by both calculators. Neither comes with user manuals or other information that warn of or reveal any problems. Calculators are impressive, especially if a prepared salesman shows you them going through some calculations. It is possible to demonstrate the memory in action, apparently working. Only some critical thought would determine that it is a very peculiar feature.</region>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="47" page="4" column="2">4.1 More examples</h1>
        <region class="DoCO:TextChunk" id="60" page="4" column="2">A cynical reader might take the Casio calculators as specially selected (but see [ <xref ref-type="bibr" rid="R29" id="48" class="deo:Reference">29</xref>]). This section gives a brief selection of problems to illustrate the diversity of problems. All should have been easily detectable, and all are easily avoidable in principle. See [<xref ref-type="bibr" rid="R9" id="49" class="deo:Reference">9</xref>, <xref ref-type="bibr" rid="R18" id="50" class="deo:Reference">18</xref>, <xref ref-type="bibr" rid="R20" id="51" class="deo:Reference">20</xref>] for examples of usability problems with safety-critical devices, where there is an obli- gation improve usability. The Sony television KV-M1421U has a remote control, the RM-694. Not only are their colour, number and layout of buttons different, but the user interfaces are unrelated: they work in completely different ways — which is obvious, e.g., from their statecharts [<xref ref-type="bibr" rid="R27" id="52" class="deo:Reference">27</xref>]. One concludes either Sony never specified the user interface, or did not worry about the gratuitous differences. The Panasonic Genius microwave cooker has a clock. The user interface allows the clock to be set to any number, 0000 to 9999. Despite the impression that it may be a 24 hour clock, it only runs when set to a valid 12 hour time. Nothing gives any indication why the clock will not run when it is set to a time such as 2230 [<xref ref-type="bibr" rid="R23" id="53" class="deo:Reference">23</xref>, <xref ref-type="bibr" rid="R31" id="54" class="deo:Reference">31</xref>]. The Nokia 5110 mobile phone has a menu- driven user interface providing access to ‘all’ the phone’s functions (see §5). However some functions, such as keypad lock, are not in the menu structure. Thus a user without the phone’s manual may be unable to find such functions. There is no reason why all functions should not be in the main menu. The De Longhi Pinguino [<xref ref-type="bibr" rid="R5" id="55" class="deo:Reference">5</xref>] air conditioner cannot be used without the user manual. There are delays between pressing buttons and things hap- pening, so a user might press a button twice (to really do something) but this resets the mode of the device before it has even started. When the device is running, its “on” light is off. A front panel light labelled “memo control” is described in the manual as meaning that there is a three minute wait (if it is flashing) or that the air conditioner is in cooling mode (if it is on continuously). It is possible to press the buttons on the front panel to get all the lights to come on in interesting patterns; this is presumably a test mode (or perhaps a salesroom<marker type="page" number="5"/><marker type="column" number="1"/><marker type="block"/> eye-catching feature), but the manual does not describe it. The JVC HRD580-EK video recorder has the opposite problem [<xref ref-type="bibr" rid="R21" id="57" class="deo:Reference">21</xref>]. It has features that cannot be used with the user manual. The manual has textual descriptions of complex operations (such as tuning in the VCR to UHF channels). Reading these sections is time consuming, yet the corre- sponding features on the VCR have short time- outs. So by reading the manual while trying to perform the operations described ensures the VCR will time-out: then the user will be reading the wrong part of the manual to explain what the VCR is doing! What the user is reading becomes counter- productive. (One solution to the system/manual synchronisation problem is for the device itself to present instructions to the user: since it ‘knows’ what state it is in, it can always present the appro- priate sections of the manual [<xref ref-type="bibr" rid="R1" id="58" class="deo:Reference">1</xref>].) There is not space here to analyse these assorted criticisms further. Each unusable system is unusable in its own way; the faults are too varied to easily bring into clear comparison. (See [<xref ref-type="bibr" rid="R26" id="59" class="deo:Reference">26</xref>] for a systematic analysis of a long list of usability problems with a single product.) One reason why faults persist is that nobody has conceptual leverage on the problems: manufacturers employ production processes that result in incoherent usability issues; nobody understands the results.</region>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="61" page="5" column="1">5 Computer science applied</h1>
        <region class="DoCO:TextChunk" id="62" page="5" column="1">We need conceptual leverage not on problems, interesting as they may be, but on solutions. User interfaces might be improved by better computer science, but can improvements be achieved system- atically? In this section we outline a computer science appraisal of the Nokia 5110 mobile phone’s user interface. We provide evidence that applying elementary computer science will improve user interfaces.</region>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="63" page="5" column="1">5.1 More efficiency, based on Nokia’s design</h1>
        <region class="DoCO:TextChunk" id="67" page="5" column="1">Full details of the example discussed in this section can be found in [ <xref ref-type="bibr" rid="R28" id="64" class="deo:Reference">28</xref>]. The Nokia 5110 handset organises most of its functions in a tree, which is presented to the user as a menu. Clearly the design assumption is the user will search the tree to find functions to activate. Computer scientists are familiar with search, and indeed with search trees. A Huffman tree is the most efficient way to organise a search tree (given that there is a fixed set of keys) [<xref ref-type="bibr" rid="R28" id="65" class="deo:Reference">28</xref>]. We could simply determine the average cost per function and compare it with Nokia’s design, but the so-called cost of knowledge graph, itself introduced by psychologists to evaluate user interfaces, shows increasing efficiency the longer<marker type="column" number="2"/><marker type="block"/> it is used for the Huffman over Nokia’s original design; after 500 key presses, a user of the Huffman design is twice as efficient. 3 It can be pointed out that Nokia’s design may have virtues other than trying to minimise keystrokes; certainly, a Huffman tree is optimal precisely because it has no other purpose than to be efficient. However all Nokia functions have a shortcut code, which (as it is so-named) is presumably to provide a brief alternative. Again, the Huffman tree lends itself to an improved code; moreover, since Nokia do not use their shortcut codes efficiently, we can provide both Nokia’s original and a non-overlapping code: this gains the best of both worlds (whatever the ‘best’ of the Nokia world is supposed to be). Nokia’s shortcuts have an average access cost of 3.64 keystrokes; the combined approach has an average cost of 2.87 keystrokes. Such improvements can be made by applying purely routine computer science to user interface design. The next section illustrates what we can do when more imagination is brought into play.</region>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="68" page="5" column="2">5.2 More efficiency, based on a novel design</h1>
        <region class="DoCO:TextChunk" id="71" page="5" column="2">Full details of the example discussed in this section can be found in [ <xref ref-type="bibr" rid="R12" id="69" class="deo:Reference">12</xref>]. Most keys on the Nokia have letters on them, and just as they are used for entering names (e.g., SMS messages) they could be used for searching for functions. Reference to any algorithms book will find numerous ways of making good use of keys for searching! Here, we explore hash codes. Given a function name, such as Call Waiting we find its hash code by using the Nokia’s standard keypad. Thus, the first two letters ✄   of Call Waiting , “C” and “A,” are on the ✄ ✂ 2   ✁ key, and the third and fourth letters are on ✂ 5 ✁ , thus the hash code of Call Waiting starts 2255. . . As a user enters a hash code, the new design displays (in a scrolling list) all functions that match the hash code. To disambiguate the code, the user can either use up and down arrows (as in the conventional Nokia design), ✄   or enter more digits. If the user presses the ✂ C ✁ key, the last digit is deleted, and the hash code looked up again and the display is refreshed. Marsden built a simulation of the original Nokia and the new design, and compared their use. (Both designs used the same screen image.) Of the experimental scenarios completed on the new design, users achieved an average 9.54 3 Due to bugs in Microsoft Word it turned out, for unfathomable reasons, to be impossible to place a graph in the original Word version of this paper to illustrate this point. Again, this is a computer science problem: bad programming in a consumer software package. (This published version was formatted using TEX.)<marker type="page" number="6"/><marker type="column" number="1"/><marker type="block"/> key presses, in comparison to the Nokia design where 16.52 key presses were required. This was a strongly significant result (p &lt; 0.001) with users requiring approximately 7 fewer key presses, on average, to access the functions on the hash code design. The overall mean times (not key press counts) for the hash code phone was 33.42 seconds, compared to 42.02 seconds for the original. The improvement, though, was not consistent enough from person to person for a statistically significant dif- ference to be asserted. A computer scientist would wonder why the al- phabetic labels are not more sensibly organised. Of the 12 available keys, only 9 are used, and the allocation of letters to keys does not reflect frequency of use. There are international standards of letter allocation, but as phones differ, they cannot be an important consideration — and the silliness of the international standards merely begs the question why the standards bodies do not ask computer science questions either.</region>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="72" page="6" column="1">5.3 Other benefits</h1>
        <region class="DoCO:TextChunk" id="74" page="6" column="1">Both examples above rely on a specification of the Nokia device. Once the device is specified, it is easy to devise and analyse many improvements. The inconsistencies in the actual user interface of the Nokia suggest that Nokia do not use a professional computer science approach to user interface implementation. 4 That is, given a more-or- less formal approach inconsistencies are hard to implement, whereas in an informal approach inconsistencies are easy if not an expected consequence! It is arguable that consistency makes devices easier to use (outside of games); certainly consistency makes user manuals easier to write and shorter. In fact user manuals can be generated, at least in part, automatically [<xref ref-type="bibr" rid="R30" id="73" class="deo:Reference">30</xref>] — then, not only can user manuals be used concurrently early in the design process, but they can have guarantees (if desired) that they are complete and correct.</region>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="75" page="6" column="1">6 Programming the user interface</h1>
        <region class="DoCO:TextChunk" id="79" page="6" column="1">Computer scientists routinely design computer programs to be efficient and correct. We need to see the user as at least as important as a computer, and the user interface as a program for the user. User interface design then becomes a matter of “programming the user.” Many problems in user 4 Two examples: short cut codes are ✄ not   displayed uniformly from function to function; the ✂ C ✁ key behaves differently (unnecessarily) in different ✄   functions. In Phone book , while entering a number, ✂ C ✁ deletes ✄   digits, whereas in Clock , again while entering a number, ✂ C ✁ goes up a level in the menu hierarchy. In Clock , then, it is not possible to correct numbers: all digits have to be entered correctly first time. <marker type="column" number="2"/><marker type="block"/> interface problems then come down to failing to provide the user with a correct and efficient interface. That the user interface also needs to be com- putable is obvious — but this is an idea that seems to be ignored in almost all interfaces! Even such simple tasks as determining a sequence of moving a cursor from one screen position to another in Microsoft Word are undecidable [<xref ref-type="bibr" rid="R24" id="77" class="deo:Reference">24</xref>]. Once user interfaces are seen in this light, then many ideas from computer science can be applied. This paper showed how familiar algorithms can be applied to user interfaces; elsewhere we have ex- plored applying ideas like declarative programming to user interfaces [<xref ref-type="bibr" rid="R25" id="78" class="deo:Reference">25</xref>]. Given that many user interface problems can be attributed to bad computer science, much of conventional empirical usability work is misplaced, at least while it tries to understand or make user interfaces look better without changing the under- lying way they are implemented. There are numerous reasons why change will be difficult, including:</region>
        <region class="DoCO:TextChunk" id="81" confidence="possible" page="6" column="2">1. Some human factors researchers working in usability are explicitly trying to find ways of camoflaguing problems in user interfaces [<xref ref-type="bibr" rid="R19" id="80" class="deo:Reference">19</xref>]. 2. Most human factors trained professionals do not understand computer science, and there is a professional division between the two sub- jects. 3. The accurate computer science description of typical user interfaces is too hard to under- take, creating the impression that computer science cannot speak on the topic. In contrast, user problems are relatively easily ob- served and measured. This makes human factors salient, but it describes symptoms of computer science problems rather than helps understand or avoid their cause. 4. Because all user interfaces involve people, very similar empirical methods can be applied very widely. In contrast almost all computational approaches are particular — for example, dis- crete systems methods would be inappropriate for virtual reality; techniques for speech are inappropriate for graphics — and much harder to generalise. In comparison to human factors experts, computer scientists seem to know relatively little about user interfaces in general. 5. User interface design is done by industrial designers, again who do not understand computer science. 6. Because of the market demand, practising computer scientists, even ones not working in user interfaces, are trained to a low standard.</region>
        <region class="DoCO:TextChunk" id="82" confidence="possible" page="7" column="1">7. Manufacturers put their best programmers onto tasks that must work correctly. In a mobile phone, say, these will include battery management and radio communications. Customers will notice quickly if the phone does not work at all; but most customers will blame themselves when they find the user interface tricky. Thus manufacturers put their worst programmers onto user interfaces. 8. Computer scientists who develop a product are familiar with its user interface. Their knowledge and experience will make it (and in general, all devices) much easier for them to use. Therefore computer scientists discount the evidence of usability studies. 9. Because it stimulates consumption, users are encouraged to blame themselves rather than the products they buy. Researchers, too, are consumers with similar stakes in the usability of the everyday things they own. It is unusual and depressing to question the design of products you have chosen to buy, especially if it brings into question the standards of your own profession!</region>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="83" page="7" column="1">7 Sustainability and ethics</h1>
        <region class="DoCO:TextChunk" id="88" page="7" column="1">With all the reasons against improving user interfaces, where will improvement come from? Moore’s Law apparently underwrites manufac- turers’ confidence in faster and more powerful processors for their products. Manufacturers can anticipate adding features to systems without seri- ously impacting their performance. Equally, they can anticipate users preferring to replace their current products with new ones — users prefer to replace rather than have inferior devices fixed. By the time users find problems with user interfaces, the market will have moved on and the users can be promised their problems will be fixed by new features. The result of this is continual replacement. In- dustry benefits, and consumers willingly become fashion followers. Mobile phones, for example, are not sold on their effectiveness for communication but on their status value. There is a serious consequence: what happens to all the obsolete devices? In the UK, 900 000 tonnes of mostly toxic waste electronics is buried annually in land fill sites. This is not sustainable. Some notable efforts have been made to recycle, for instance shipping computers to the third world — but this is merely shifting the toxic waste from one back yard to another. Manufactuers may be persuaded by legislation [ <xref ref-type="bibr" rid="R4" id="84" class="deo:Reference">4</xref>] to use more environmentally-friendly materials and processes, but this does not address the core problem.<marker type="column" number="2"/><marker type="block"/> The computer science of everyday things has been so bad for so long that we all take it for granted. It is time to design user interfaces so they are robust, so they can be upgraded. These are conventional computer science issues. There is not space to cover further ethical issues; but see [<xref ref-type="bibr" rid="R11" id="86" class="deo:Reference">11</xref>], which shows that car radios are a widespread, unethical, example of dangerous user interfaces, and see [<xref ref-type="bibr" rid="R6" id="87" class="deo:Reference">6</xref>], which discusses ethical design more generally.</region>
      </section>
      <section class="deo:Conclusion">
        <h1 class="DoCO:SectionTitle" id="89" page="7" column="2">8 Conclusions</h1>
        <region class="DoCO:TextChunk" id="91" page="7" column="2">We are caught up in a culture that accepts unus- ability. Sadly, competent computer scientists seem aloof from the user interface. This paper showed that a professional computer science of everyday things would help improve usability. Computer scientists routinely prove properties of their programs and worry about their efficiency and correctness: why not apply these sorts of concern to the user interface? This paper showed that benefits, of usability and a better environment, will follow. It is obvious that both computers and human users both ‘run’ programs (in languages such as CSP [<xref ref-type="bibr" rid="R7" id="90" class="deo:Reference">7</xref>] the differences that might seem obvious in languages like Java disappear). In particular, users deserve as much attention in design of their programs (i.e., the user interfaces) as the computers get in their programs. This paper showed that standard computer science can be applied to the user interfaces of everyday things. User interface design is very much a proper part of computer science. It is time to show users that higher standards are possible.</region>
      </section>
      <section class="DoCO:Bibliography">
        <h1 class="DoCO:SectionTitle" id="92" page="7" column="2">References</h1>
        <ref-list class="DoCO:BiblioGraphicReferenceList">
          <ref rid="R1" class="deo:BibliographicReference" id="93" page="7" column="2">[1] M. A. Addison and H. Thimbleby. Intelligent adaptive assistance and its automatic genera- tion. Interacting with Computers, Volume 8, Number 1, pages 51–68, 1996.</ref>
          <ref rid="R2" class="deo:BibliographicReference" id="94" page="7" column="2">[2] J. S. Brown and P. Duguid. The Social Life of Information. Harvard Business School Press, 2000.</ref>
          <ref rid="R3" class="deo:BibliographicReference" id="95" page="7" column="2">[3] C. M. Christensen. The Innovator’s Dilemma: When Technologies Cause Great Firms to Fail. Harvard Business School Press, 1997.</ref>
          <ref rid="R4" class="deo:BibliographicReference" id="96" page="7" column="2">[4] Commission of the European Communities. Proposal for a Directive of the European Parliament and of the Council on Waste Electrical and Electronic Equipment, Volume COM(2000) 347 provisional. 2000.</ref>
          <ref rid="R5" class="deo:BibliographicReference" id="97" page="7" column="2">[5] de Longhi. Pinguino Electronic eco, 573909/02.97, 1997.</ref>
          <ref rid="R6" class="deo:BibliographicReference" id="98" page="8" column="1">[6] P. Duquenoy and H. Thimbleby. Justice and design. In M. A. Sasse and C. Johnson (editors), IFIP Conference Interact’99, 1999.</ref>
          <ref rid="R7" class="deo:BibliographicReference" id="99" page="8" column="1">[7] C. A. R. Hoare. Communicating Sequential Processes. Prentice Hall International Series in Computer Science, 1985.</ref>
          <ref rid="R8" class="deo:BibliographicReference" id="100" page="8" column="1">[8] M. Jones, G. Marsden and H. Thimbleby. Empowering users with usability certificates. In S. Turner and P. Turner (editors), BCS Conference HCI 2000, Volume II, pages 37– 38, 2000.</ref>
          <ref rid="R9" class="deo:BibliographicReference" id="101" page="8" column="1">[9] P. B. Ladkin. Analysis of a technical description of the Airbus A320 braking system. High Integrity Systems, Volume 4, Number 1, pages 331–349, 1995.</ref>
          <ref rid="R10" class="deo:BibliographicReference" id="102" page="8" column="1">[10] T. Landauer. The Trouble with Computers. MIT Press, 1995.</ref>
          <ref rid="R11" class="deo:BibliographicReference" id="103" page="8" column="1">[11] G. Marsden, P. Duquenoy and H. Thimbleby. Ethics and consumer electronics. In A. D’Atri, A. Marturano, S. Rogerson and T. W. Bynum (editors), Fourth International Conference on the Social and Ethical Impacts of Information and Communication Technologies, Ethicomp’99, 1999.</ref>
          <ref rid="R12" class="deo:BibliographicReference" id="104" page="8" column="1">[12] G. Marsden, H. W. Thimbleby, M. Jones and P. Gillary. Successful user interface design from efficient computer algorithms. In ACM Conference CHI’2000, Extended Abstracts, pages 181–182, 2000.</ref>
          <ref rid="R13" class="deo:BibliographicReference" id="106" page="8" column="1">[13] G. Moore. Nanometres and Gigabucks — Moore on Moore’s Law. University Video Corporation Distinguished Lecture, 1996. <ext-link ext-link-type="uri" href="http://www.uvc.com" id="105">http://www.uvc.com</ext-link>.</ref>
          <ref rid="R14" class="deo:BibliographicReference" id="107" page="8" column="1">[14] R. Nader. Unsafe at Any Speed. Pocket Books, 1965.</ref>
          <ref rid="R15" class="deo:BibliographicReference" id="108" page="8" column="1">[15] B. A. Nardi and V. L. O’Day. Information Ecologies: Using Technology with Heart. MIT Press, 1999.</ref>
          <ref rid="R16" class="deo:BibliographicReference" id="109" page="8" column="1">[16] D. A. Norman. The Psychology of Everyday Things. Basic Books, 1988.</ref>
          <ref rid="R17" class="deo:BibliographicReference" id="110" page="8" column="1">[17] D. A. Norman. The Invisible Computer. MIT Press, 1998.</ref>
          <ref rid="R18" class="deo:BibliographicReference" id="111" page="8" column="1">[18] E. Palmer. ‘Oops, it didn’t arm,’ a case study of two automation surprises. In R. S. Jensen and L. A. Rakovan (editors), Eighth International Symposium on Aviation Psychology, pages 227–232, 1995.</ref>
          <ref rid="R19" class="deo:BibliographicReference" id="112" page="8" column="1">[19] B. Reeves and C. Nass. The Media Equation. Cambridge University Press, 1996.</ref>
          <ref rid="R20" class="deo:BibliographicReference" id="113" page="8" column="2">[20] N. B. Sarter and D. D. Woods. How in the world did we ever get into that mode? mode error and awareness in supervisory control. Human Factors, Volume 37, Number 1, pages 5–19, 1995.</ref>
          <ref rid="R21" class="deo:BibliographicReference" id="114" page="8" column="2">[21] H. Thimbleby. Can anyone work the video? New Scientist, Volume 129, Number 1757, pages 48–51, 1991.</ref>
          <ref rid="R22" class="deo:BibliographicReference" id="115" page="8" column="2">[22] H. Thimbleby. Computer literacy and usability standards? In C. D. Evans, B. L. Meek and R. S. Walker (editors), User Needs in Information Technology Standards. Butterworth- Heinemann, 1993.</ref>
          <ref rid="R23" class="deo:BibliographicReference" id="116" page="8" column="2">[23] H. Thimbleby. The frustrations of a push- button world. In Encyclopædia Britannica Yearbook of Science and the Future, pages 202–219. Encyclopædia Britannica Inc., 1993.</ref>
          <ref rid="R24" class="deo:BibliographicReference" id="117" page="8" column="2">[24] H. Thimbleby. Treat people like computers? In A. Edwards (editor), Extraordinary People and Human-Computer Interaction, pages 283– 295. Cambridge University Press, 1995.</ref>
          <ref rid="R25" class="deo:BibliographicReference" id="118" page="8" column="2">[25] H. Thimbleby. A new calculator and why it is necessary. Computer Journal, Volume 38, Number 6, pages 418–433, 1996.</ref>
          <ref rid="R26" class="deo:BibliographicReference" id="119" page="8" column="2">[26] H. Thimbleby. Design for a fax. Personal Technologies, Volume 1, Number 2, pages 101– 117, 1997.</ref>
          <ref rid="R27" class="deo:BibliographicReference" id="120" page="8" column="2">[27] H. Thimbleby. Visualising the potential of interactive systems. In Tenth IEEE International Conference on Image Analysis and Processing, ICIAP’99, pages 670–677, 1999.</ref>
          <ref rid="R28" class="deo:BibliographicReference" id="121" page="8" column="2">[28] H. Thimbleby. Analysis and simulation of user interfaces. In S. McDonald, Y. Waern and G. Cockton (editors), BCS Conference HCI 2000, Volume XIV, pages 221–237, 2000.</ref>
          <ref rid="R29" class="deo:BibliographicReference" id="122" page="8" column="2">[29] H. Thimbleby. Calculators are needlessly bad. International Journal of Human-Computer Studies, Volume 52, Number 6, pages 1031– 1069, 2000.</ref>
          <ref rid="R30" class="deo:BibliographicReference" id="123" page="8" column="2">[30] H. Thimbleby and P. B. Ladkin. A proper explanation when you need one. In M. A. R. Kirby, A. J. Dix and J. E. Finlay (editors), BCS Conference HCI’95, Volume X, pages 107–118, 1995.</ref>
          <ref rid="R31" class="deo:BibliographicReference" id="124" page="8" column="2">[31] I. H. Witten and H. Thimbleby. User mod- elling as machine identification: New methods for HCI. In H. R. Hartson and D. Hix (editors), Advances in Human-Computer Interaction, Volume IV, pages 58–86. Ablex, 1993.</ref>
        </ref-list>
      </section>
    </body>
  </article>
</pdfx>
