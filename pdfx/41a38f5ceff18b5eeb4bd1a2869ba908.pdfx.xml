<?xml version='1.0' encoding='UTF-8'?>
<pdfx xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://pdfx.cs.man.ac.uk/static/article-schema.xsd">
  <meta>
    <job>a48a32b63465f49e5646dd88266851f7091da4a3b13c57b18498be08f8aae136</job>
    <base_name>62m4</base_name>
    <doi>http://dx.doi.org/10.1007/s007660050006</doi>
  </meta>
  <article>
    <front class="DoCO:FrontMatter">
      <contrib-group class="DoCO:ListOfAuthors">
        <contrib contrib-type="author">
          <name id="1">Requirements Eng (1998) 3:219±241 ß 1998 Springer-Verlag London Limited</name>
          <aff id="2">1998</aff>
        </contrib>
      </contrib-group>
      <outsider class="DoCO:TextBox" type="header" id="3">Requirements</outsider>
      <title-group>
        <article-title class="DoCO:Title" id="4">A Representational Framework for Scenarios of System Use</article-title>
      </title-group>
      <region class="unknown" id="5">Annie I. Anto Anton Â n a and Colin Potts b a College of Engineering, North Carolina State University, Raleigh, North Carolina; and b College of Computing, Georgia Institute of Technology, Atlanta, Georgia, USA</region>
      <region class="DoCO:TextChunk" id="6" confidence="possible">Scenarios are becoming widely used in three areas of system development: software engineering, human– computer interaction (HCI), and organisational process design. There are many reasons to use scenarios during system design. The one usually advanced in support of the practice is to aid the processes of validating the developers’ understanding of the customers’ or users’ work practices, organisational goals and structures, and system requirements. All three areas identified above deal with these processes, and not surprisingly this has given rise to a profusion of scenario-based practices and representations. Yet there has been little analysis of why scenarios should be useful, let alone whether they are. Only by having such a framework for understanding what scenarios are, and what they are for, can we begin to evaluate different scenario approaches in specific development contexts. This paper is a contribution toward such a framework. We lay out a space of representational possibilities for scenarios and enumer- ate a set of values or criteria that are important for different uses of scenarios. We then summarise several salient representations drawn from the software engineering, HCI, and organisational process design communities to clarify how these representational choices contribute to or detract from the goals of the respective practices. Finally, we discuss how scenario representations from one area of design may be useful in others, and we discuss the relationship between these representations and other significant early-design and requirements engineering practices.</region>
    </front>
    <body class="DoCO:BodyMatter">
      <region class="DoCO:TextChunk" id="7" page="1" column="1">Keywords: Design representations; Requirements engineering; Scenarios</region>
      <region class="DoCO:TextChunk" id="9" confidence="possible" page="1" column="1">Correspondence and offprint requests to: Annie I. Ant  ́n, College of Engineering, North Carolina State University, 408 Engineering Graduate Research Center, Raleigh, NC 27695-7534, USA. Email: <email id="8">anton@csc.ncsu.edu</email></region>
      <region class="unknown" id="10" page="1" column="2">Engineering</region>
      <section class="deo:Introduction">
        <h1 class="DoCO:SectionTitle" id="11" page="1" column="2">1. Introduction</h1>
      </section>
      <region class="DoCO:TextChunk" id="34" page="1" column="2">Scenarios are descriptions of concrete system behaviours. They may summarise the behaviour traces of an existing system. More typically, however, they are useful during planning and design to describe systems that do not yet exist in a tangible, usable form. During those pre- implementation stages, designers, users and other stakeholders may not fully understand the implications of many of their proposed decisions. By forcing stakeholders to pay attention to particularities of real use, scenarios facilitate a better understanding of the envisaged system [ <xref ref-type="bibr" rid="R1" id="12" class="deo:Reference">1</xref>, <xref ref-type="bibr" rid="R2" hidden="1" id="13" class="deo:Reference">2</xref>, <xref ref-type="bibr" rid="R3" hidden="1" id="14" class="deo:Reference">3</xref>, <xref ref-type="bibr" rid="R4" hidden="1" id="15" class="deo:Reference">4</xref>, <xref ref-type="bibr" rid="R5" hidden="1" id="16" class="deo:Reference">5</xref>, <xref ref-type="bibr" rid="R6" hidden="1" id="17" class="deo:Reference">6</xref>, <xref ref-type="bibr" rid="R7" hidden="1" id="18" class="deo:Reference">7</xref>, <xref ref-type="bibr" rid="R8" hidden="1" id="19" class="deo:Reference">8</xref>, <xref ref-type="bibr" rid="R9" hidden="1" id="20" class="deo:Reference">9</xref>, <xref ref-type="bibr" rid="R10" hidden="1" id="21" class="deo:Reference">10</xref>, <xref ref-type="bibr" rid="R11" hidden="1" id="22" class="deo:Reference">11</xref>, <xref ref-type="bibr" rid="R12" hidden="1" id="23" class="deo:Reference">12</xref>, <xref ref-type="bibr" rid="R13" id="24" class="deo:Reference">13</xref>]. More specifically, scenarios may be used to facilitate the understanding of work practices and business processes, to represent behavioural requirements, to validate requirements against more general goals, to evaluate alternative allocations of requirements to architectural components, to generate and validate object-oriented designs, to explore the significance of design decisions, and to generate and review system test cases. Three communities of practice and research have adopted scenarios during the early stages of system planning and design. These are the software engineering, human–computer interaction (HCI) and organisational process planning communities. During requirements engineering, software engineering practitioners and investigators use scenario-based representations for reasoning about interactions between system and environment. For architectural and detailed design, they may construct more elaborate scenarios that capture the interactions among internal system components such as the objects in an object-oriented design. Of these two roles of scenarios in software engineering, the first potentially involves the user’s or customer’s view of the proposed system and is therefore most relevant for requirements gathering and validation activities. HCI<marker type="page" number="2"/><marker type="column" number="1"/><marker type="block"/> experts tend to use scenarios exclusively as a source of advice and validation from user representatives. As in the case of requirements engineering scenarios, HCI scenarios may elucidate how the proposed system will support concrete work practices. More concrete HCI scenarios may take the form of low-fidelity storyboards or higher-fidelity user interface mock-ups. Finally, the organisational process planning community often uses scenarios to envisage how a reconfigured set of work practices and proposed information technology support will accomplish organisationally significant activities. Such representations play a significant role in information systems planning and business process re-engineering projects. All these scenarios have in common that they represent the operation of some proposed system. The software engineer seeks to understand how the components of a software system interact with each other and with the external environment as the system runs. The HCI expert seeks to understand and confirm how users will interact with the system to perform their work. The organisational planner seeks to understand the implications of work redesign and technology introduc- tion on the regular operations of the enterprise. In all these cases, the scenarios stand for eventualities that are likely to occur more than once, and possibly with great regularity. Thus, a scenario to investigate how a customer withdraws cash from a bank account could be conducted from all three perspectives with the common expectation that many customers will want to withdraw cash. Some of the eventualities explored (for example, attempting to withdraw cash with a stolen debit card) may be uncommon, but they nevertheless trigger standard modes of system behaviour. The role of the scenario is to think through what those modes of behaviour should be and check that they are desirable as described. Operational scenarios require the analyst to describe and envisage behaviours and courses of events. There is another sense in which scenarios are used for envisioning systems: scenarios of system evolution. Like operational scenarios, evolutionary scenarios involve reasoning about situations that have not yet occurred, but unlike operational scenarios, evolutionary scenarios describe situations that occur only once. Rather than occurring during the operation of the envisaged system, they describe events in the life of a system that may cause the system itself to change. For example, in strategic business planning and international affairs, scenarios are often constructed to check how an organisation or policy would cope with changes resulting from natural, political or technological discontinuities. For example, a corporate analyst may ask what the implications would be to the oil industry of new alliances among oil-producing nations, or what the<marker type="column" number="2"/><marker type="block"/> effect on the telephone industry would be for satellite- based cellular coverage. Evolutionary scenarios may also be used during project planning as an adjunct to risk analysis. Here, a typical question might be what the implications would be if a competitor were to release a product that included features that the project had deferred to a subsequent release. This evolutionary use of scenarios is very different from the operational use. Here, the analyst has to describe and envisage future states of affairs. Although the word scenario is commonly used in both senses, we regard the uses as so different that they should be analysed separately. In this paper, we are concerned exclusively with operational scenarios. However, we take an integrative, interdisciplinary approach to analysing scenario representations in the three fields already discussed: software engineering, HCI, and organisational process planning. Effective use of scenarios depends on how the representation of the scenario accords with the purpose of the scenario analyst. By representation we mean both the surface rendition of scenario content in the form of notations and layout conventions, and the underlying semantics or ontology on which scenarios are based. Given the diversity of uses to which scenarios are put in current practice, not surprisingly there exists a plethora of representations for them. Different representations are intended to succeed at different functions and are expected to exhibit complementary strengths and short- comings. Moreover, empirical data shows that scenarios are not always used consistently with the intentions and assumptions of the authors who promote their use [<xref ref-type="bibr" rid="R13" id="29" class="deo:Reference">13</xref>]. Our purpose in this paper is to examine the space of representational alternatives for scenarios and how representation and use constrain each other. Representations inhabit a space, the dimensions of which correspond to polarities or continua of choice. Any scenario representation occupies a location in this space, and the theoretical and practical questions that this lets us articulate amount to identifying good locations. But this is too simplistic: there are no good locations per se, only good locations (or trajectories) for given purposes. Purpose, in turn, refers to practical uses of scenarios and measures of effectiveness in use. The uses to which scenarios are put are varied and have been recently summarised in an exemplary survey of European industry [<xref ref-type="bibr" rid="R13" id="30" class="deo:Reference">13</xref>]. We use this knowledge of practice to define success criteria for scenario use. This effort to map out the space of representational alternatives and success criteria is a necessary first step in the construction of a framework for comparing and evaluating scenario representations in system design. The term ‘scenario’ has so many different meanings that in the absence of such a framework any comparison and<marker type="page" number="3"/><marker type="column" number="1"/><marker type="block"/> evaluation of representations would be unsystematic and potentially misleading. We do not therefore attempt a comprehensive survey or comparison of representational techniques. However, to keep our feet on the ground, we sample the space of representational alternatives with some scenario representations that illustrate salient positions on the dimensions that we identify. There are four sections to the paper. In the next section, we explain the representation space, explaining and justifying our proposed dimensions, and we then discuss the factors that make a scenario representation effective for different purposes. In Section 3, we illustrate the space of representations by reviewing several representationally significant accounts of scenario-based behaviour modelling from each of the three fields named above: software engineering, HCI, and organisational process planning. Our goal is not to conduct an exhaustive survey, but to show how the different goals of scenario analysts affect the representations they choose. In Section 4, we discuss the effectiveness of scenario representations for different purposes. The differences among the fields often mask common representational requirements, so we conclude that a greater degree of cross-fertilisation would be desirable.</region>
      <outsider class="DoCO:TextBox" type="page_nr" id="26" page="2" column="1">220</outsider>
      <outsider class="DoCO:TextBox" type="header" id="27" page="2" column="1">A. I. Anto  ̈ n and C. Potts</outsider>
      <outsider class="DoCO:TextBox" type="header" id="32" page="3" column="1">A Representational Framework for Scenarios of System Use</outsider>
      <outsider class="DoCO:TextBox" type="page_nr" id="33" page="3" column="1">221</outsider>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="35" page="3" column="1">2. The Scenario Landscape</h1>
        <region class="DoCO:TextChunk" id="40" page="3" column="1">Scenarios differ among themselves in two important ways: what they are and what they are for. In the first section below, we lay out a multidimensional space of representational features that together define what scenario representations are. Any scenario representation should be locatable as a point in this space. In Section <marker type="column" number="2"/><marker type="block"/> 2.2, we examine the question of what makes a ‘good’ scenario representation. This depends, of course, on what the scenarios are being used for, so a discussion of criteria amounts to a discussion of purpose. The framework is summarised graphically in <xref ref-type="fig" rid="F1" id="39" class="deo:Reference">Fig. 1</xref>. The terms arrayed around the outside of the figure are the dimensions described in Section 2.1. The terms inside the figure are the criteria discussed in Section 2.2. The location of the criteria terms indicates very approxi- mately the relevance of the criteria to the dimensions.</region>
        <region class="DoCO:FigureBox" id="F1">
          <image class="DoCO:Figure" src="62m4.page_003.image_01.png" thmb="62m4.page_003.image_01-thumb.png"/>
          <caption class="deo:Caption" id="38" page="3" column="1">Fig. 1. Graphical summary of the framework. Representational dimensions are arrayed around the ®gure. Terms inside the ®gure correspond to criteria.</caption>
        </region>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="41" page="3" column="2">2.1. The Representational Space</h2>
          <region class="DoCO:TextChunk" id="46" page="3" column="2">There are many ways in which one could categorise scenarios along dimensions. We have therefore developed a multidimensional classification scheme that separates these and other factors that a one-dimensional classification scheme would inevitably confound. Our aim is to cover a range of factors that affect the appearance and ‘feel’ of scenarios and likely govern their effectiveness for different purposes. These factors are as follows: . Ontological emphasis: What is the assumed nature of the reality being modelled or described in the scenario? Is it, for example, a totally ordered sequence of time-stamped events, or a story-like narrative involving the actions, responsibilities and interactions of purposeful agents? . Surface structure: What does the scenario look like to its readers, and what skills are involved in reading it? Is it, for example, a textual description in natural language, or a directed graph with a precise meaning attached to its bubbles and arrows? . Span: Does the scenario describe an end-to-end transaction or does it describe a shorter fragment of behaviour? . Level of detail: Does the scenario describe behaviours at a high level of abstraction or in great detail? . Frame of reference: Does the scenario describe behaviour from a detached perspective or from the perspective of a system entity (typically a user)? . Mood: Jackson [ <xref ref-type="bibr" rid="R14" id="42" class="deo:Reference">14</xref>] argues that statements that describe factual properties of the world be distinguished carefully from statements that describe desired or required system behaviour. In classical grammar, such statements are said to be in different moods: statements of fact are indicative, whereas statements of desire are optative. The same distinction can be made about scenarios: does the scenario describe actual or normative behaviour? Modal differences are important, according to Jackson, because one kind of property cannot combine with or entail the other.<marker type="page" number="4"/><marker type="column" number="1"/><marker type="block"/> We now describe and informally illustrate in turn each of these classification dimensions.</region>
          <outsider class="DoCO:TextBox" type="page_nr" id="44" page="4" column="1">222</outsider>
          <outsider class="DoCO:TextBox" type="header" id="45" page="4" column="1">A. I. Anto  ̈ n and C. Potts</outsider>
          <section class="DoCO:Section">
            <h3 class="DoCO:SectionTitle" id="47" page="4" column="1">2.1.1. Ontological Emphasis</h3>
            <region class="DoCO:TextChunk" id="58" page="4" column="1">Scenarios represent the occurrence of events over time, but different scenario representations embody different assumptions about the nature of time. These assumptions fall into the following categories: . Duration: Do the temporal constituents of the scenario (events, actions, etc.) occur during time intervals or at precise moments? Can events overlap? A second, related issue is whether the temporal constituents form a total or partial ordering. . Linearity: Is the time line of the scenario linear or is it branching? That is, is the scenario a trace, or does it admit alternative courses of action or possible futures? In the case of a branching-time model, may alternative courses recombine in a directed graph, or must they continue to diverge in a tree structure? . Determinacy: In the case of a branching model, are the conditions leading to the choice of alternative paths specified fully? If so, we have a deterministic model. If the conditions are specified in terms of probabilities, we have a stochastic model. If they are unspecified, the model is non-deterministic. . Triggering: Are the temporal constituents of the scenario (events, actions, etc.) initiated as the result of some other specified factors? If so, what are they: conditions that hold at the time, triggering events that occurred immediately beforehand, or the passage of time? <marker type="block"/> Scenarios involve the interaction of entities that we shall refer to as agents. What can we say about these agents and their interactions? Openness. A scenario may involve agents in a closed or open world. In a closed-world model, the agents are all that exist. For example, a software system scenario may consist of one or more agents representing the software itself, and other agents representing the entities in its environment. The behaviour of the non-specified agents (e.g., human users) is knowable (i.e., deterministic, or at least stochastic). In an open-world model, there are two sets of agents: those that are deterministic and those that are not. The deterministic agents are usually those that are under the control of the designer and are to be implemented (usually in software). The non- deterministic agents are usually those that are not under the control of the designer and are given by the<marker type="column" number="2"/><marker type="block"/> system’s environment. These may include people, organisations and natural phenomena, but they may also include other systems that are not part of the development project. If we draw a boundary around the deterministic agents, we get the system boundary. In many scenarios constructed during requirements engineering, there is just one deterministic agent: ‘The System’. In such cases, scenarios conform to a black box model. In a black box model, a fundamental distinction exists between one agent, the system, and the agents in its immediate environment. In this case, the internal structure of the system agent is invisible in the scenario. Glass box scenarios, in contrast, have more than one deterministic agent under the control of the developer. That there are several agents implies a configuration of design elements. Their identities and interactions go beyond the functional character of the problem and contaminate any requirements issues with implementation assumptions. In practice, however, many requirements engineering decisions arise in the context of an existing, evolving system. To evaluate the feasibility of injecting new requirements into an existing software architecture, for example, one has to adopt a glass-box model. Identity. The agents may represent structural or functional entities. In the real world, a functional entity often maps onto several structural entities and vice versa. For example, a black box scenario may represent the interaction among several human users using a software system. These users may be separate individuals (structural entities) or organisational or work process roles (functional entities). Similarly, in a glass box scenario, system entities may represent physical modules (e.g., load modules or sites in a distributed system) or functional modules.<marker type="block"/> In some scenario representations, the agents have goals, purposes or responsibilities. Or, at least, the designer ascribes goals anthropomorphically to the agents. In other representations, agents are mechanistic, rule- governed responders to stimuli. By extension, we classify a scenario as mechanistic, purposive, or mixed-purposive depending on whether goals are ascribed to none, all or some of the agents that interact in it. Note that this facet of the classification scheme says nothing about the purpose of scenarios, only how the idea of purpose appears in scenarios.<marker type="block"/> Finally, a scenario may describe behaviours that the writer of the scenario labels as ‘desirable’ or ‘undesir-<marker type="page" number="5"/><marker type="column" number="1"/><marker type="block"/> able’. These labels may be present in the scenario representation itself, in which case incomplete or erroneous actions and undesirable or exceptional situations are lexically or syntactically distinguished from correct, anticipated and complete ones. Conversely, normative and exceptional scenarios may be representationally similar, differing in practice only by the names or labels attached to them.</region>
            <h4 class="unknown" id="49" page="4" column="1">2.1.1.2. Agency</h4>
            <h4 class="unknown" id="52" page="4" column="2">2.1.1.3. Teleology</h4>
            <h4 class="unknown" id="54" page="4" column="2">2.1.1.4. Normativeness</h4>
            <outsider class="DoCO:TextBox" type="header" id="56" page="5" column="1">A Representational Framework for Scenarios of System Use</outsider>
            <outsider class="DoCO:TextBox" type="page_nr" id="57" page="5" column="1">223</outsider>
          </section>
          <section class="DoCO:Section">
            <h3 class="DoCO:SectionTitle" id="59" page="5" column="1">2.1.2. Surface Structure</h3>
            <region class="DoCO:TextChunk" id="75" page="5" column="1">The surface structure of the representation is the way its ontology presents itself to the scenario reader. For example, duration can be shown by overlapping regions of a time line. Branching futures can be shown by branching arcs in a directed graph. Agency and purpose can be presented using keywords embedded in narrative prose. <marker type="block"/> Many scenario representations employ natural language. At one extreme of natural language use are scenarios that are nothing but natural language narrative prose documents. These are more common in business strategy and public policy planning [<xref ref-type="bibr" rid="R15" id="62" class="deo:Reference">15</xref>, <xref ref-type="bibr" rid="R16" hidden="1" id="63" class="deo:Reference">16</xref>, <xref ref-type="bibr" rid="R17" hidden="1" id="64" class="deo:Reference">17</xref>, <xref ref-type="bibr" rid="R18" id="65" class="deo:Reference">18</xref>], although Jacobson’s [<xref ref-type="bibr" rid="R9" id="66" class="deo:Reference">9</xref>] use case descriptions are essentially textual descriptions of typical transactions. In software engineering, scenarios generally have some structure, with natural language being used to provide informal specification of content. For example, UML sequence diagrams (see Section 3.1.1) and their antecedents in earlier object- oriented development methods have a formal structure. This structure involves parallel time lines with interactions among scenario entities shown as perpendicular or oblique arcs linking the entities’ time lines. Textual descriptions of the events being described in the diagram appear at the appropriate points along the side of the diagram. Similarly, in schematic scenarios (see Section 3.1.2), the setting of the scenario is a formal constituent of the scenario as a whole, but usually consists only of informal prose. Thus, one differentiating feature of a scenario representation is the role that natural language plays, for example how constrained is its use.<marker type="block"/> In tabular representations, the succession of rows in the table encodes the temporal sequence of the narrative. Columns may represent different facets of the global state at a point in the scenario or the simultaneous behaviour of several entities. For example, in OBA [<xref ref-type="bibr" rid="R11" id="69" class="deo:Reference">11</xref>], each row represents a step in the behaviour of a system.<marker type="column" number="2"/><marker type="block"/> Entries in the first column correspond to system or environment actors. Entries in the second column are informal descriptions of actions at the system or environment level. Entries in the third and fourth columns represent objects and method invocations, respectively, that correspond to the actions in the first two columns. Thus, the entries in a row represent different views or abstraction levels for a single behavioural event. A simple table’s vertical sequence represents a total ordering of the events represented by the rows. Simple tables cannot show partial orderings of events, although annotations or superimposed graphics can bracket potentially overlapping event sequences.<marker type="block"/> Directed graphs are used in several scenario representations. Arcs normally represent precedence relations either between events or states. Branching in the graph usually represents alternative courses of action. The more complete these are with respect to the function of the system, the more the graph comes to represent a specification of general behaviour rather than a specific scenario. The degenerate case of the directed graph is an acyclic chain of nodes that represent a linear trace of events. In practice, scenarios often involve some alternative courses, and so directed graphs that represent scenarios tend to have some branching but be thin, with low average rates of fan-out and fan-in at the nodes.<marker type="block"/> A storyboard segments behaviour into several discrete frames. Each frame uses a mixture of text and pictures to depict the system. Storyboards are common in interactive system design. Their emphasis therefore tends to be the quality of the human–computer dialogue, and their frames contain sketches of user-interface presentations at key points in the scenario. Because standard office presentation tools can be used to animate or walk through storyboards, storyboards can be inexpensive or low-fidelity replacements for prototypes. However, this emphasis on appearance and usability is not necessary: storyboards may represent any high-level system properties during a behavioural sequence.</region>
            <h4 class="unknown" id="61" page="5" column="1">2.1.2.1. Natural Language Text</h4>
            <h4 class="unknown" id="68" page="5" column="1">2.1.2.2. Tabular Representations</h4>
            <h4 class="unknown" id="72" page="5" column="2">2.1.2.3. Directed Graphs</h4>
            <h4 class="unknown" id="74" page="5" column="2">2.1.2.4. Storyboards</h4>
          </section>
          <section class="DoCO:Section">
            <h3 class="DoCO:SectionTitle" id="76" page="5" column="2">2.1.3. Span</h3>
            <region class="DoCO:TextChunk" id="85" page="5" column="2">A scenario may describe a short or long span of behaviours. Although span is a continuum, it is useful to approximate it as a choice between end-to-end transactions and shorter fragments. <marker type="page" number="6"/><marker type="column" number="1"/><marker type="block"/> Some scenarios represent a logically complete behavioural sequence starting with some external event or system input, and ending with the system outputs that are the final responses to that event. Between these two points there may be many other inputs and outputs that have a secondary or controlling influence over the scenario. For example, in an interactive system, a ‘transaction’ may involve a lengthy interactive dialogue in which the user makes his or her intentions clear through a set of actions, and the system generates many outputs as feedback. In contrast, a batch transaction may involve just one input event, an intervening computation, and a final system output. What these different forms of scenario have in common is that they each encapsulate conceptually complete behaviours.<marker type="block"/> Equally, however, scenarios may represent fragments (or ‘snippets’ [<xref ref-type="bibr" rid="R19" id="83" class="deo:Reference">19</xref>]) of such end-to-end transactions. Where an end-to-end transaction tells a ‘story’ about the system, a fragment presents a ‘vignette’. Fragments are useful when composing longer scenarios out of reusable components. For example, several longer span scenarios may explore system behaviour in a normal case and in the presence of several kinds of exception. In such cases, the scenario fragments up to the point of the exceptions (if any) may be identical in the scenarios. Designers often elicit fragments from customer stakeholders during requirements interviews [<xref ref-type="bibr" rid="R20" id="84" class="deo:Reference">20</xref>]. Seldom do end-to-end scenarios arise directly in such interviews. Finally, a fragment at a high level of analysis may qualify as a conceptually complete scenario at a more detailed level. For example, the immediate post-input processing in response to the initiating event of an end-to-end scenario may involve significant information retrieval and computation steps. When elaborating this behaviour into module interactions, the entire sequence becomes a scenario in its own right.</region>
            <outsider class="DoCO:TextBox" type="page_nr" id="78" page="6" column="1">224</outsider>
            <outsider class="DoCO:TextBox" type="header" id="79" page="6" column="1">A. I. Anto  ̈ n and C. Potts</outsider>
            <h4 class="unknown" id="80" page="6" column="1">2.1.3.1. End-to-End Transactions 2.1.5. Frame of Reference</h4>
            <h4 class="unknown" id="82" page="6" column="1">2.1.3.2. Fragments and Vignettes</h4>
          </section>
          <section class="DoCO:Section">
            <h3 class="DoCO:SectionTitle" id="86" page="6" column="1">2.1.4. Level of Detail</h3>
            <region class="DoCO:TextChunk" id="90" page="6" column="1">Level of detail refers to the degrees of behavioural complexity and agent refinement present in a scenario. Detailed scenarios are longer scenarios as long as the span is the same. To keep the length of detailed scenarios manageable, therefore, detailed scenarios in practice may not span as much behaviour as the higher-level scenarios from which they are derived. However, it is possible to describe end-to-end transactions at the level of detailed module interactions. <marker type="column" number="2"/><marker type="block"/> We view some scenarios from a frame of reference outside the system as a whole. Directed graph representations, for example, are usually used to show a Cartesian view of the system’s behaviour (in the same sense Cartesian coordinates define a space from an absolute frame of reference). Other representations depict the behaviour as viewed by an entity participating in the scenario (usually a user). In this case, we can view the scenario as taking a turtle view of the behaviour (in the sense that turtle geometry defines a space from the frame of reference of an agent within the space itself). A turtle view can be expressed concretely (e.g., as a storyboard containing user-interface sketches), but it could equally be presented as a more abstract narrative. In practice, scenario representations sometimes mix frames of reference. For example, UAN representations of human–computer dialogues [<xref ref-type="bibr" rid="R21" id="88" class="deo:Reference">21</xref>] describe only user interactions with a system and ignore the details of any behind-the-scenes computations (see Section 3.2.1). In this respect, UAN task specifications are turtle representations of scenarios. However, UAN includes some features of the system’s behaviour that are not necessarily directly visible to a user, such as the outline description of computations and descriptions of user- interface state. Thus, UAN task specifications include some impoverished Cartesian views of the same scenario. Furthermore, there is no need to restrict turtle views to those of human users. It is commonplace in object- oriented design practice to encourage designers or other stakeholders to role-play objects, and some design method authors colourfully describe typical walk- through sessions conducted in this way [<xref ref-type="bibr" rid="R22" id="89" class="deo:Reference">22</xref>]. When designers role-play an object and ask ‘What do I do now?’ (i.e., what responsibilities does the object have, and with what other objects does it collaborate?) they are adopting a turtle-oriented view.</region>
          </section>
          <section class="DoCO:Section">
            <h3 class="DoCO:SectionTitle" id="91" page="6" column="2">2.1.6. Mood</h3>
            <region class="DoCO:TextChunk" id="96" page="6" column="2">Scenarios may describe actual, required or possible behaviours. Following Jackson [ <xref ref-type="bibr" rid="R14" id="92" class="deo:Reference">14</xref>], we use the concept of mood from classical grammar to reflect these distinctions. To Jackson’s indicative mood (statements of putative fact that are either true or false) and optative mood (statements of desire), we add the subjunctive mood (what-if statements). In the context of scenarios, the moods refer to scenarios describing some existing behaviour (indicative), those describing required behaviour (optative), and those describing proposed behaviour (subjunctive).<marker type="page" number="7"/><marker type="column" number="1"/><marker type="block"/> Clearly, any scenario representation could be used to express scenarios in all three moods. Just by looking at a directed graph, we cannot determine whether it denotes a behaviour that actually occurs in a running system, a behaviour that is desired by the customers of a proposed system, or a possible behaviour of a system the requirements of which have not yet been decided. However, the mood of a scenario affects why it was written in the first place and the questions that reviewing it will help address, and so different representation may be more suited to different moods. Because an indicative scenario represents actual behaviour, the principal questions to be answered from reviewing it are whether the described behaviour actually can or does occur, what other behaviours are also possible, and whether these behaviours exhibit problems that could be addressed by a different system. An optative scenario represents desired behaviour, and so is designed to clarify the implications of that behaviour and whether these too are desired. It is also used to elaborate the details of a desired behaviour from requirements down to detailed design, implementation and test case definition. A subjunctive scenario represents possible behaviours, and so is used to explore alternative requirements (typically decisions about what to automate and what to leave as manual operations or decisions).</region>
            <outsider class="DoCO:TextBox" type="header" id="94" page="7" column="1">A Representational Framework for Scenarios of System Use</outsider>
            <outsider class="DoCO:TextBox" type="page_nr" id="95" page="7" column="1">225</outsider>
          </section>
        </section>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="97" page="7" column="1">2.2. Effectiveness of Scenario Representations</h2>
          <region class="DoCO:TextChunk" id="98" page="7" column="1">We propose criteria for evaluating the effectiveness of scenario representations: their congruence with the stakeholder’s ‘language’ (which includes terminology, syntax, conceptual semantics and ways of talking), their completeness and precision, and their compatibility with established development practices.</region>
          <section class="DoCO:Section">
            <h3 class="DoCO:SectionTitle" id="99" page="7" column="1">2.2.1. Congruence with the Stakeholder's Language</h3>
            <region class="DoCO:TextChunk" id="101" page="7" column="1">Specifications are often difficult for non-designers to understand. One of the goals of using scenarios is to clarify for the benefit of non-designer stakeholders the implications of a system design so that the stakeholder can comment on the adequacy of the design. To accomplish this, the scenario representation has to speak the stakeholder’s language. Insofar as opinions are sought from multiple stakeholders with differing backgrounds and perspectives on the proposed system, ‘speaking the stakeholder’s language’ may mean mediating among several languages. The stakeholder’s language has multiple layers: lexical, syntactic, semantic and pragmatic. The lexical level, which refers to the terminology used to name the <marker type="column" number="2"/><marker type="block"/> terms in a scenario or a specification, is critical to building a shared understanding of a proposed system. Indeed, inappropriate use of application-specific terminology is a frequent cause of expensive system redesign. However, the choice of a scenario representation is unlikely to have much bearing on the terminology used. The syntax of the representation refers to the principal grammatical categories of the scenario representation, and how they combine in scenarios. For example, a tabular representation of scenarios implicitly includes a time-ordering and represents that as spatial alignment on the page. Symbols may represent different kinds of event or action, such as those that the system or the user performs. The syntax may also be so implicit as to be virtually non-existent. An animated storyboard does not represent the sequence syntactically at all but renders it directly as a stop-motion temporal sequence. Semantics refers to the meaning assigned to the scenario content. Some representations have a more formal syntax than others and therefore clearer rules for assigning meaning to the scenarios. However, the concepts that the stakeholder brings to the scenario may have little to do with the intended semantics of a formal representation. Thus, the semantics of a representation in use depends as much on the person doing the understanding as it does on the representation itself. Finally, pragmatics defines how language is used in concrete communicative situations. An important deter- minant aspect of pragmatics is context-appropriateness. For example, a person used to thinking about a process as a flow through an enterprise is more likely to understand and use representations that provide a detached view of the entire process. A person who is embedded in that process and is only aware of parts of it, however, may only be able to relate directly to high- fidelity representations of what that person sees. The degree to which stakeholders do and can abstract from their direct experience and describe processes in abstract terms is rather controversial. Scenario approaches and related approaches to prototyping and storyboards that originated in HCI have tended to emphasise concreteness and familiarity, not abstraction. The recent theoretical interest in activity theory has emphasised the role of concrete artefacts in mediating activity.</region>
          </section>
          <section class="DoCO:Section">
            <h3 class="DoCO:SectionTitle" id="102" page="7" column="2">2.2.2. Completeness</h3>
            <region class="DoCO:TextChunk" id="106" page="7" column="2">Scenarios are inherently incomplete. Unlike specifications, they illustrate example behaviours. The issue therefore arises whether a set of scenarios represents the implicit set from which it is drawn. Given that absolute completeness is impossible, we must construe scenario <marker type="page" number="8"/><marker type="column" number="1"/><marker type="block"/> completeness as a relative measure of salience or representativeness. Are enough significant scenarios or distinctions among situations explored (whatever ‘enough’ and ‘significant’ mean)? Through precision and association with systematic methods, some scenario representations seek to achieve greater completeness than others, but for some design purposes completeness is not critical.</region>
            <outsider class="DoCO:TextBox" type="page_nr" id="104" page="8" column="1">226</outsider>
            <outsider class="DoCO:TextBox" type="header" id="105" page="8" column="1">A. I. Anto  ̈ n and C. Potts</outsider>
          </section>
          <section class="DoCO:Section">
            <h3 class="DoCO:SectionTitle" id="107" page="8" column="1">2.2.3. Precision</h3>
            <region class="DoCO:TextChunk" id="108" page="8" column="1">Precision is the absence of ambiguity in the semantics of a representation. A scenario representation is precise if the scenario analyst can answer questions such as these: ‘What happens next?’ ‘What can happen next other than what appears in this scenario?’ ‘Who or what is responsible for doing this?’ ‘What are the consequences of this event?’ Scenario representations fall on a spectrum with some representations having the goal of giving the analyst or stakeholder a ‘feel’ for the envisaged system, while others are essentially trace specifications. Precision is necessary for some purposes, whereas for others imprecision is not only acceptable but may be desirable. For example, it can be misleading to represent aspects of a design that are still undetermined (e.g., user interface layout) when the purpose of the scenario effort is to gather feedback about those aspects of the design that are reasonably firm (e.g., the desired functionality). Precise representation may convey a misleading sense of closure and invite unhelpful feedback.</region>
          </section>
          <section class="DoCO:Section">
            <h3 class="DoCO:SectionTitle" id="109" page="8" column="1">2.2.4. Compatibility with Existing Practice</h3>
            <region class="DoCO:TextChunk" id="111" page="8" column="1">Scenario representations are used as one part of a constellation of practices. Sometimes, the scenario representations associated with other elements of a design process are little more than accidents of history. In these cases, a using organisation could easily mix and match scenario representations based on the other criteria listed here. In other cases, however, scenario representations have grown together with other representational and analytic approaches. This is especially the case in the object-oriented methods, which early experience showed were difficult to use and diffuse into development organisations in the absence of scenario representations. In this and similar cases, there is immense pressure in practice to use familiar and well- established representations. In addition to analytic methodologies, some scenario representations may lend themselves better to the social situation of development projects. For example, a workshop-based method like Joint Application Design (JAD) may lend itself to representations in which <marker type="column" number="2"/><marker type="block"/> scenarios are composed out of small, tangible objects like cards that can be easily moved on a work surface. The key criterion here is rapid authoring, editing and reconfiguration. In a situation where most design discussion takes place through the medium of document circulation and review, a more considered approach to authorship may be encouraged, and multi-page, more precise scenario representations would be expected by stakeholders.</region>
          </section>
        </section>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="112" page="8" column="2">2.3. Comparing Frameworks</h2>
          <region class="DoCO:TextChunk" id="117" page="8" column="2">A broader classification framework has been proposed by members of the European CREWS project [ <xref ref-type="bibr" rid="R23" id="113" class="deo:Reference">23</xref>]. In the CREWS framework, scenarios are classified according to four views or aspects: Purpose, Lifecycle, Content and Form. The Purpose and Lifecycle views address the process of using scenarios during requirements engineering and are independent of representational issues. Content has the following facets: Abstraction, Con- text, Argumentation and Coverage. By ‘abstraction’ is meant the distinction between type and instance terms. We take the view that all terms in scenarios are instance terms, although the labels or names given to such terms may be derived from, or even be identical to, type names (e.g., ‘Caller’, ‘Elevator1’). A scenario with a narrow ‘context’ is one that in our terms has a designated agent or agents that represent the system to be built but few or no non-system agents and no interaction among non- system agents. In contrast, a broad context scenario is one with one or no system agents (either the system is a black box or the boundary is undetermined) and with interactions occurring among non-system agents. ‘Argu- mentation’ or reasons may be contained within a scenario. We treat this in two separate ways depending on whether the argumentation is ascribed to an agent participating in the scenario or is recorded by a designer/ analyst to justify the content of a scenario. The first form of argumentation requires purpose to be an ontological category separate from action in the representation. The second form of argumentation, like other forms of design rationale, is annotation or meta-level documentation that is about scenarios, not in them (even though it may appear textually embedded in scenarios along with other meta-level information like authorship). ‘Coverage’ refers to several attributes that we deal with separately above: time, purpose, and span. Form in the CREWS framework breaks down into description and presentation. Description corresponds to our distinctions among types of surface structure. Presentation is similar to our frame of reference, but combines this with inspection-time interactivity. Since any representation could plausibly be animated inter-<marker type="page" number="9"/><marker type="column" number="1"/><marker type="block"/> actively, presentation in the CREWS sense does not differentiate among representations and therefore falls outside our framework.</region>
          <outsider class="DoCO:TextBox" type="header" id="115" page="9" column="1">A Representational Framework for Scenarios of System Use</outsider>
          <outsider class="DoCO:TextBox" type="page_nr" id="116" page="9" column="1">227</outsider>
        </section>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="118" page="9" column="1">3. Scenarios in Practice and Research</h1>
        <region class="DoCO:TextChunk" id="119" page="9" column="1">Three specific communities (software engineering, HCI and organisational process design) have adopted the use of scenarios during system planning and design. Software engineers employ scenarios at various stages of the system life cycle; for example, scenarios are analysed during requirements engineering in an effort to develop an understanding of system interactions and behaviours. Scenarios are also used during architectural and detailed design. In HCI, scenarios are used in developing user interfaces and for envisioning new products. The organisational process community has adopted the use of scenarios to develop an understanding of how work flows and processes may be redesigned more efficiently and with the support of information technology. In this section, we explore the contributions of these three communities to the advancement of scenario ‘technology’. The purpose here is not to simply survey areas that incorporate scenarios, but rather to indicate where and how analysts use scenarios. Additionally, we examine how their individual goals affect the representations they choose.</region>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="120" page="9" column="1">3.1. Scenarios in Software Engineering</h2>
          <region class="DoCO:TextChunk" id="121" page="9" column="1">Scenarios play different roles in numerous software development methods, varying from assisting in the acquisition of requirements to the detailed analysis of behavioural specifications. In this subsection, we discuss the use of scenarios in object-oriented software engineering, requirements engineering and software testing. Examples of specific scenario representations are included to demonstrate how they are useful for accomplishing a particular set of objectives.</region>
          <section class="DoCO:Section">
            <h3 class="DoCO:SectionTitle" id="122" page="9" column="1">3.1.1. Scenarios in Object-Oriented Analysis and Design</h3>
            <region class="DoCO:TextChunk" id="157" page="9" column="1">It is no accident that scenarios have become a subject of much attention in the object-oriented development community [ <xref ref-type="bibr" rid="R9" id="123" class="deo:Reference">9</xref>, <xref ref-type="bibr" rid="R11" id="124" class="deo:Reference">11</xref>, <xref ref-type="bibr" rid="R22" id="125" class="deo:Reference">22</xref>, <xref ref-type="bibr" rid="R24" id="126" class="deo:Reference">24</xref>]. An object-oriented software architecture inevitably anthropomorphises and granu- lates a design, creating many small, interacting software components that are ‘responsible’ for providing services for each other. The conceptual complexity of the design cannot merely be rendered by object modelling or specification notations, because the behaviour of the system becomes so distributed that it is difficult to<marker type="column" number="2"/><marker type="block"/> understand. Designing or reviewing a design in an object-by-object fashion restricts one’s attention myopi- cally to the services provided by objects and the interfaces available to other objects. Scenarios therefore complement the localised precision of object-oriented models with a concrete representation for designing and validating system-wide functionality. The starting point for a successful object-oriented scenario construction effort must be an informal description of a scenario expressed in user-oriented terms. Object-oriented methods therefore tend to adopt scenario descriptions at two separate levels. The detailed level is the object-interaction level, in which the interacting actors are software objects. Above this is the use case or user-oriented level, in which the system is a black box. There are many object-oriented approaches that employ the use of scenarios [<xref ref-type="bibr" rid="R9" id="128" class="deo:Reference">9</xref>, <xref ref-type="bibr" rid="R11" id="129" class="deo:Reference">11</xref>, <xref ref-type="bibr" rid="R25" id="130" class="deo:Reference">25</xref>]. These differ in their notations, but are very similar in their underlying semantics. The recently introduced Unified Modeling Language (UML) [<xref ref-type="bibr" rid="R26" id="131" class="deo:Reference">26</xref>] coalesces the approaches of Booch [<xref ref-type="bibr" rid="R25" id="132" class="deo:Reference">25</xref>], Jacobson [<xref ref-type="bibr" rid="R9" id="133" class="deo:Reference">9</xref>], and OMT [<xref ref-type="bibr" rid="R27" id="134" class="deo:Reference">27</xref>]. UML extends to the notations these three methods. Accordingly, we focus our attention on UML here. Use cases are typical interactions that a user may have with a system. Each scenario in an object-oriented analysis illustrates a concrete instance of a use case. UML scenarios are sets of actions and interactions involving objects. UML employs two basic representations for scenarios: collaboration and sequence diagrams. UML sequence diagrams show behavioural sequences directly as a scenario unfolds over time. In a sequence diagram, the interactions among objects may be derived from the layout of the diagram. UML collaboration diagrams describe interactions among objects more directly. In the case of collaboration diagrams, however, the sequencing of interactions is less obvious, because it is encoded numerically. Different design tasks impose different requirements on these representations. For example, it has been observed that during a development project the responsibilities assigned to one object may be reassigned to another once the interactions are understood better (Lubars et al. [<xref ref-type="bibr" rid="R28" id="135" class="deo:Reference">28</xref>] refer to this as ‘method migration’). An important role that scenarios play during object- oriented design is, therefore, the elucidation of interaction responsibilities. For this purpose – the designing in of responsibilities and the making of design commitments about bindings of methods to objects – the sequence diagram is a clearer representation. The sequence diagram therefore has a generative role. It may also be used for later documentation and explanation, but here the collaboration diagram is more concise. The detailed nature of the interactions can be found or looked<marker type="page" number="10"/><marker type="column" number="1"/><marker type="block"/> up, but do not clutter the representation. Whenever two logically interdependent representations of the same information are seemingly needed to perform different development tasks, it becomes obvious that consistency management is necessary. In this case, deriving one representation from the other is a mechanical process. <xref ref-type="fig" rid="F2" id="140" class="deo:Reference">Figure 2</xref> shows a sequence diagram, containing objects and events, for processing a membership application and membership fees for an electronic commerce system; the passing of time is portrayed via progression down the diagram. As shown in <xref ref-type="fig" rid="F2" id="141" class="deo:Reference">Fig. 2</xref>, it is possible to represent concurrency in sequence diagrams (e.g., a receipt may, effectively, be generated while the budget is being increased). Control information is event- based and captured in two ways: a condition marker and an interaction marker. The condition marker indicates when messages are sent from one object to another. For example, if the membership payment is approved (approval = ‘yes’), then a message (generate) is sent to the receipt object. An iteration marker is available to indicate that a message is repeatedly sent to various objects. The sequence diagram includes an optional return notation to indicate the return from a message when such information would improve the clarity of the diagram. Unlike Jacobson’s object ladder diagrams, UML sequence diagrams are sometimes employed to represent concurrent processes by an extension to the notation to denote method activation. Additionally,<marker type="column" number="2"/><marker type="block"/> notation extensions are provided for asynchronous messages so that a message does not block the caller’s ability to continue its own processing. In contrast to the sequence diagram, which shows the passing of time through progression down the page, a collaboration diagram shows time by numbering the messages and representing objects as icons. <xref ref-type="fig" rid="F3" id="143" class="deo:Reference">Figure 3</xref> shows the collaboration diagram that corresponds to the sequence diagram in <xref ref-type="fig" rid="F2" id="144" class="deo:Reference">Fig. 2</xref>. While the numbering of messages makes it more difficult to visualise the chronology of events, it is easier to see how objects are related. The representation is easily extended to allow overlays to provide additional information. The sequence and collaboration diagrams represent scenarios at the detailed level of description. When the system is to be treated as a black box, they require too much detail. For the black box level of detail, the OOSE use case diagram [<xref ref-type="bibr" rid="R9" id="145" class="deo:Reference">9</xref>] is used in UML. A UML use case bundles many possible scenarios together, each of which represents a single path through the use case. For example, consider the use case for an electronic commerce system in the example below. In this system, a certification authority must approve any electronic cash transactions. There are several possible paths, or associated scenarios, which the ‘purchase software package’ use case may follow; for example, the purchase may be approved (transaction completed),<marker type="page" number="11"/><marker type="column" number="1"/><marker type="block"/> the electronic commerce web server may fail to respond (private server down), or the certification authority may not authorise the purchase (credit refused).<marker type="block"/> In the OOSE method, the designer builds a series of object models that are appropriate for different stages of the software development process. The requirements model consists of actors and use cases. The actors are external agents that interact with the system; these agents are typically users. The use cases are named, actor-initiated, end-to-end transactions and in UML they are normative in that there is no clear distinction between standard and exceptional cases. This may be partly due to the emphasis on ‘typical’ user interactions. Although a use case has a single primary sequence of actions, it may also branch into ‘alternative courses’ when triggered by certain conditions. The examples provided in Jacobson et al. [<xref ref-type="bibr" rid="R9" id="152" class="deo:Reference">9</xref>] show alternative courses that are relatively simple composed of short sequences of actions that handle exceptions. Thus, while use cases<marker type="column" number="2"/><marker type="block"/> could branch arbitrarily in principle, in practice they are almost linear. A weakness of the use case approach in practice is that the gap between a textual use case description and the more formal representation of a scenario in a sequence diagram is very wide. Traceability between scenarios at these varying levels of detail becomes a concern, and practitioners have developed elaborate schemes for planning and managing the production and co-evolution of scenarios at different levels of detail [<xref ref-type="bibr" rid="R12" id="154" class="deo:Reference">12</xref>]. <xref ref-type="table" rid="T1" id="155" class="deo:Reference">Table 1</xref> summarises the ontological emphasis, notation and scope of the three UML scenario representations (use cases, sequence diagrams and collaboration diagrams). Although the surface structure of each OO notation is different, the representations discussed in <xref ref-type="table" rid="T1" id="156" class="deo:Reference">Table 1</xref> are the major representations used in the object-oriented analysis and design.</region>
            <outsider class="DoCO:TextBox" type="page_nr" id="137" page="10" column="1">228</outsider>
            <outsider class="DoCO:TextBox" type="header" id="138" page="10" column="1">A. I. Anto  ̈ n and C. Potts</outsider>
            <region class="DoCO:FigureBox" id="F2">
              <caption class="deo:Caption" id="139" page="10" column="1">Fig. 2. UML sequence diagram for electronic commerce membership application.</caption>
            </region>
            <outsider class="DoCO:TextBox" type="header" id="147" page="11" column="1">A Representational Framework for Scenarios of System Use</outsider>
            <outsider class="DoCO:TextBox" type="page_nr" id="148" page="11" column="1">229</outsider>
            <region class="DoCO:FigureBox" id="F3">
              <caption class="deo:Caption" id="149" page="11" column="1">Fig. 3. Collaboration diagram for membership application and fees for an electronic commerce system.</caption>
            </region>
            <region class="unknown" id="151" page="11" column="1">Single use case: purchase software package (CommerceNet) Associated scenarios: transaction completed private server down credit refused</region>
          </section>
          <section class="DoCO:Section">
            <h3 class="DoCO:SectionTitle" id="158" page="11" column="2">3.1.2. Scenarios in Requirements Engineering</h3>
            <region class="DoCO:TextChunk" id="195" page="11" column="2">The literature is rich with evidence as to the usefulness of scenarios during the development process for uncovering [ <xref ref-type="bibr" rid="R2" id="159" class="deo:Reference">2</xref>, <xref ref-type="bibr" rid="R10" id="160" class="deo:Reference">10</xref>, <xref ref-type="bibr" rid="R28" id="161" class="deo:Reference">28</xref>, <xref ref-type="bibr" rid="R29" id="162" class="deo:Reference">29</xref>], elaborating [<xref ref-type="bibr" rid="R9" id="163" class="deo:Reference">9</xref>, <xref ref-type="bibr" rid="R28" id="164" class="deo:Reference">28</xref>], refining [<xref ref-type="bibr" rid="R30" id="165" class="deo:Reference">30</xref>], and validating requirements [<xref ref-type="bibr" rid="R1" id="166" class="deo:Reference">1</xref>, <xref ref-type="bibr" rid="R6" id="167" class="deo:Reference">6</xref>, <xref ref-type="bibr" rid="R31" id="168" class="deo:Reference">31</xref>]. Requirements errors are often due to improper validation. During<marker type="page" number="12"/><marker type="column" number="1"/><marker type="block"/> validation, assessments are made to determine how well the proposed system addresses the needs of the stakeholders. Iterative reviews of scenarios with stakeholders help developers ensure that stakeholders’ requirements are complete, consistent and realistic. Scenarios are effective for explicating desired behaviours and for elaborating requirements. In one study, half of the improvements to a set of requirements came from scenario analysis [<xref ref-type="bibr" rid="R29" id="174" class="deo:Reference">29</xref>]. The process of identifying high-level goals is fundamental to the requirements analysis and specification process. Goal- oriented requirements engineering approaches focus on the identification and elaboration of goals and their subsequent refinement into operational requirements. Studies have shown that scenarios support the elabora-<marker type="column" number="2"/><marker type="block"/> tion of goals in requirements engineering [<xref ref-type="bibr" rid="R2" id="177" class="deo:Reference">2</xref>, <xref ref-type="bibr" rid="R3" hidden="1" id="178" class="deo:Reference">3</xref>, <xref ref-type="bibr" rid="R4" hidden="1" id="179" class="deo:Reference">4</xref>, <xref ref-type="bibr" rid="R5" id="180" class="deo:Reference">5</xref>] and are useful for uncovering and elaborating requirements, checking for completeness and conflicts, and commu- nicating with stakeholders. Scenarios, thus, play a major role in discovering goals and system requirements [<xref ref-type="bibr" rid="R2" id="181" class="deo:Reference">2</xref>]. The tendency among practitioners has been to consider routine and ‘expert errorless cases’ [<xref ref-type="bibr" rid="R8" id="182" class="deo:Reference">8</xref>]. However, different levels of abstraction are more useful for the identification of exception cases. In Potts et al. [<xref ref-type="bibr" rid="R29" id="183" class="deo:Reference">29</xref>], the simple enumeration of different kinds of cases guaran- teed that exceptional cases would not be overlooked in the scenario analysis. Scenarios denote concrete circumstances under which a goal can fail, helping analysts uncover hidden goals in acquiring and validating requirements, thereby supporting the process of refining<marker type="page" number="13"/><marker type="column" number="1"/><marker type="block"/> goals. When goal priorities change, scenarios facilitate the evaluation of these new priorities. In goal-based requirements analysis, we focus first on the user, system and enterprise goals, and then consider the scenarios that satisfy these goals. By the end of the analysis there should be at least one scenario per goal and multiple scenarios for potentially problematic goals. Scenario fragments are initially elicited during stakeholder interviews to identify a concrete set of process goals. Often these goals offer very little direct correspondence to prescriptive goals which are typically expressed by management-level stakeholders and account for organisational structures and processes that should be observed. However, the use of scenarios and inquiry is beneficial in that the analysis surfaces exceptional cases and goals which are not usually apparent in prescriptive goal sets [<xref ref-type="bibr" rid="R3" id="187" class="deo:Reference">3</xref>, <xref ref-type="bibr" rid="R29" id="188" class="deo:Reference">29</xref>]. Goals are elaborated by considering scenarios and goal obstacles [<xref ref-type="bibr" rid="R10" id="189" class="deo:Reference">10</xref>] (goal obstacles prevent or block the achievement of a given goal). Goal obstacles are identified to consider the possible ways in which goals can fail. Scenarios offer a natural and concrete way to describe the circumstances in which a goal may fail or be blocked, facilitating the discovery of new goals and the consideration of alternative mappings from goals to operations. The analysis of scenarios permits the consideration of alternative possible goal implementations for the identification of the most plausible solutions. Scenario analysis also facilitates the identification of possible pre and post conditions for various behaviours and goals. There exists a dichotomy between user goals and system interactions in OOSE use cases [<xref ref-type="bibr" rid="R26" id="190" class="deo:Reference">26</xref>]. Often, use cases represent a sequence of tasks, or system interactions, which the user must complete to achieve their real goal. For example, in an electronic commerce system, a user may visit a web page, log in using an ID and password, and perform a search, when their real goal may be to simply purchase an item. A scenario schema is presented in Potts [<xref ref-type="bibr" rid="R10" id="191" class="deo:Reference">10</xref>] which is similar to a story schema. Scenarios are derived from a description of the system’s and the user’s goals as well as the potential obstacles which block those goals. The scenario in <xref ref-type="table" rid="T2" id="192" class="deo:Reference">Table 2</xref> shows how a scenario, in which a person can apply for membership to an electronic commerce consortium and electronically pay their membership fees, is specified using the scenario schema of Potts [<xref ref-type="bibr" rid="R10" id="193" class="deo:Reference">10</xref>]. This representation is especially well suited to goal-based approaches as evidenced by the explicit association of a goal to each episode in the scenario. Episodes may be overlapping. For example, it may be the case that the episode Approving Payment in <xref ref-type="table" rid="T2" id="194" class="deo:Reference">Table 2</xref> is not completed because the applicant has a poor credit record. This occurrence would require an</region>
            <outsider class="DoCO:TextBox" type="page_nr" id="170" page="12" column="1">230</outsider>
            <outsider class="DoCO:TextBox" type="header" id="171" page="12" column="1">A. I. Anto  ̈ n and C. Potts</outsider>
            <region class="DoCO:TableBox" id="T1">
              <caption class="deo:Caption" id="172" page="12" column="1">Table 1. Representational properties of scenarios in object-oriented development</caption>
              <content>
                <table class="DoCO:Table" number="1" page="12">
                  <thead class="table"/>
                  <tbody>
                    <tr class="table">
                      <td class="table"></td>
                      <td class="table"></td>
                      <td class="table"> Use cases</td>
                    </tr>
                    <tr class="table.strange">
                      <td class="table.strange"> Temporality</td>
                      <td class="table.strange"> Duration</td>
                      <td class="table.strange"> None</td>
                    </tr>
                    <tr class="table">
                      <td class="table"></td>
                      <td class="table"> Linearity</td>
                      <td class="table"> None</td>
                    </tr>
                    <tr class="table">
                      <td class="table"></td>
                      <td class="table"> Determinacy</td>
                      <td class="table"> Underspeci®ed, so</td>
                    </tr>
                    <tr class="table">
                      <td class="table"></td>
                      <td class="table"> Triggering</td>
                      <td class="table"> non-deterministic None</td>
                    </tr>
                    <tr class="table">
                      <td class="table"> Agency</td>
                      <td class="table"> Openness</td>
                      <td class="table"> Black box</td>
                    </tr>
                    <tr class="table">
                      <td class="table"></td>
                      <td class="table"> Identity</td>
                      <td class="table"> Functional</td>
                    </tr>
                    <tr class="table">
                      <td class="table"> Teleology</td>
                      <td class="table"></td>
                      <td class="table"> External users) may entities be described (usually</td>
                    </tr>
                    <tr class="table">
                      <td class="table"> Frame of reference</td>
                      <td class="table"></td>
                      <td class="table"> as Cartesian, speci®ed purposeful behaviour although is</td>
                    </tr>
                    <tr class="table">
                      <td class="table"> Normativeness</td>
                      <td class="table"></td>
                      <td class="table"> user-initiated Multiple standard `courses': and exceptional often</td>
                    </tr>
                    <tr class="table">
                      <td class="table"> Surface structure</td>
                      <td class="table"></td>
                      <td class="table"> Natural descriptions language and directed graphs</td>
                    </tr>
                    <tr class="table">
                      <td class="table"> Span</td>
                      <td class="table"></td>
                      <td class="table"> End-to-end from user</td>
                    </tr>
                    <tr class="table">
                      <td class="table"> Level of detail</td>
                      <td class="table"></td>
                      <td class="table"> initiation Abstract and user-oriented</td>
                    </tr>
                    <tr class="table">
                      <td class="table"> Mood</td>
                      <td class="table"></td>
                      <td class="table"> Planned system</td>
                    </tr>
                  </tbody>
                </table>
              </content>
              <region class="TableInfo" id="173" confidence="possible" page="12" column="1">Use cases Temporality Duration None Linearity None Determinacy Underspeci®ed, so non-deterministic Triggering None Agency Openness Black box Identity Functional Teleology External entities (usually users) may be described as purposeful Frame of reference Cartesian, although speci®ed behaviour is user-initiated Normativeness Multiple `courses': often standard and exceptional Surface structure Natural language descriptions and directed graphs Span End-to-end from user initiation Level of detail Abstract and user-oriented Mood Planned system</region>
            </region>
            <region class="unknown" id="176" page="12" column="2">Sequence diagram Collaboration diagrams Yes. Concurrency and Yes, though numbered overlapping are possible messages imply total ordering is more usual Basically linear, but small, Linear. Multiple sequences local alternative sequences shown as multiple diagrams can be shown Deterministic. Branching Deterministic. Conditions may conditions may be speci®ed be shown on collaborations Mainly event-based: Mainly event-based: Number completion of previous event shows ordering or receipt of message triggers events Glass box. The external Glass box. All entities are initiating events are described objects or classes in the informally. All entities within software the sequence diagram itself are objects or classes in the software Usually functional. Multiple Usually functional. Multiple instances of a participant instances of a participant (usually class) may be shown, (usually class) may be shown, but not usually distinguished but not usually distinguished Mechanistic Mechanistic Cartesian Cartesian Does not distinguish between Does not distinguish between standard and exceptional standard and exceptional cases cases Ladder diagram with facility Directed graphs. Emphasis for formal annotations. on object relation ships and Emphasis on passage of time visibility; passage of time is and message passing implicit in numbering scheme Varies from short sequence Usually behavioural fragments up to end-to-end transaction Detailed Detailed, but less facility for showing duration Usually planned system, but Usually planned system, but may represent existing may represent existing system interactions system interactions</region>
            <outsider class="DoCO:TextBox" type="header" id="185" page="13" column="1">A Representational Framework for Scenarios of System Use</outsider>
            <outsider class="DoCO:TextBox" type="page_nr" id="186" page="13" column="1">231</outsider>
            <region class="DoCO:TableBox" id="T2">
              <caption class="deo:Caption" id="196" page="13" column="2">Table 2. Schematic scenario (electronic commerce system)</caption>
            </region>
            <region class="DoCO:TextChunk" id="197" confidence="possible" page="13" column="2">Scenario: Membership Application Processed: purchase approved by certi®cation authority Setting: Background: User wants to apply for membership to electronic commerce consortium Roles: User Electronic Commerce Web Server Certi®cation Authority Narrative: Episode: Making Membership Application Available Goal: Membership Application Available Action: User invokes the Membership Application web page Outcome: Membership Application is available Episode: Completing Membership Application Form Goal: Membership Application Submitted Action: User ®lls out membership application form Action: User selects e-check as payment method Action: User enters public key Action: User submits membership application Outcome: Membership Application Form submitted Episode: Approving Payment Goal: Consortium budget balance increased Action: Membership application data processed Action: Web server receives payment information Action: Certi®cation authority consulted Action: Certi®cation authority approves payment Action: Certi®cation authority noti®es consortium web server Action: Web server noti®es applicant Outcome: Certi®cation authority has approved membership fee payment Episode: Delivering Membership Kit Goal: Membership kit sent to new member Action: User added to member database Action: User added to member mailing list Action: User added to member web page Action: Web server sends membership kit electronically to new member Outcome: Membership kit received by new member</region>
            <region class="DoCO:TextChunk" id="207" page="13" column="2">alternate response from the system not addressed in the scenario below. However, the scenario constructed to address this exceptional case would still ‘use’ the first two episodes in the scenario below (Making Membership Application Available and Completing Membership Application Form). <xref ref-type="table" rid="T3" id="198" class="deo:Reference">Table 3</xref> summarises the ontological emphasis, notation and scope of goal-oriented schematic scenarios. There are other scenario representations used in requirements engineering; however, they are basically event histories. The notation addressed in <xref ref-type="table" rid="T3" id="199" class="deo:Reference">Table 3</xref> is distinct because of its strong goal structure. Requirements are often difficult for stakeholders to understand, but they may be clarified and refined through a discussion of scenarios because they allow stakeholders to clearly relate their experiences ultimately facilitating the validation of requirements. Scenarios are also useful for refining user requirements [<xref ref-type="bibr" rid="R32" id="200" class="deo:Reference">32</xref>]. Descriptions of a system and its environment allow stakeholders to envisage the proposed or existing system, considering the possible ways in which it will support their work.<marker type="page" number="14"/><marker type="column" number="1"/><marker type="block"/> Scenario representations that allow analysts and stakeholders to consider exceptional cases are an especially rich source for identifying new requirements. In contrast, scenario representations that lean towards a high degree of normativeness are less likely to significantly influence the number of requirements identified. In <xref ref-type="table" rid="T3" id="206" class="deo:Reference">Table 3</xref>, we see that use cases help organise and clarify requirements. However, sequence and collaboration diagrams only indirectly support the identification and refinement of requirements. Goal-oriented schematic scenarios appear to support the identification and refinement of user requirements more than any other representation discussed thus far. This is perhaps due to the ability to directly associate scenarios with specific user goals.</region>
            <outsider class="DoCO:TextBox" type="page_nr" id="202" page="14" column="1">232</outsider>
            <outsider class="DoCO:TextBox" type="header" id="203" page="14" column="1">A. I. Anto  ̈ n and C. Potts</outsider>
            <region class="DoCO:TableBox" id="T3">
              <caption class="deo:Caption" id="204" page="14" column="1">Table 3. Representational properties of schematic scenarios in goal-based requirements analysis</caption>
              <content>
                <h1 class="table"> Schematic scenarios</h1>
                <table class="DoCO:Table" number="3" page="14">
                  <thead class="table"/>
                  <tbody>
                    <tr class="table">
                      <td class="table"> Temporality</td>
                      <td class="table"> Duration Linearity</td>
                      <td class="table"> Action Linear occurrences are atomic events, episodes may overlap</td>
                    </tr>
                    <tr class="table">
                      <td class="table"></td>
                      <td class="table"> Determinacy Triggering</td>
                      <td class="table"> No branching</td>
                    </tr>
                    <tr class="table">
                      <td class="table"> Agency</td>
                      <td class="table"> Openness Identity</td>
                      <td class="table"> All Closed Mixed forms world. of triggering The boundary possible of the to-be implemented system may not be known</td>
                    </tr>
                    <tr class="table">
                      <td class="table"> Teleology Frame of reference</td>
                      <td class="table"></td>
                      <td class="table"> All actors are considered purposeful agents</td>
                    </tr>
                    <tr class="table">
                      <td class="table"> Normativeness Surface structure</td>
                      <td class="table"></td>
                      <td class="table"> Cartesian Distinction between goal-ful®lling episodes and those that resolve obstacles</td>
                    </tr>
                    <tr class="table">
                      <td class="table"> Span Level of detail</td>
                      <td class="table"></td>
                      <td class="table"> Structured Collection Varies, but of text usually goal-directed representation of intermediate episodes shown level as of either detail outline or table with entries in natural language</td>
                    </tr>
                    <tr class="table">
                      <td class="table"> Mood</td>
                      <td class="table"></td>
                      <td class="table"> Either descriptive or prescriptive</td>
                    </tr>
                  </tbody>
                </table>
              </content>
              <region class="TableInfo" id="205" confidence="possible" page="14" column="1">Schematic scenarios Temporality Duration Action occurrences are atomic events, episodes may overlap Linearity Linear Determinacy No branching Triggering All forms of triggering possible Agency Openness Closed world. The boundary of the to-be implemented system may not be known Identity Mixed Teleology All actors are considered purposeful agents Frame of reference Cartesian Normativeness Distinction between goal-ful®lling episodes and those that resolve obstacles Surface structure Structured text representation shown as either outline or table with entries in natural language Span Collection of goal-directed episodes Level of detail Varies, but usually of intermediate level of detail Mood Either descriptive or prescriptive</region>
            </region>
          </section>
          <section class="DoCO:Section">
            <h3 class="DoCO:SectionTitle" id="208" page="14" column="1">3.1.3. Scenarios in Software Test Case Generation</h3>
            <region class="DoCO:TextChunk" id="211" page="14" column="1">One result of effective requirements engineering is a set of test cases that correspond to the identified requirements for a system. Yet, many organisations treat test case generation as a separate quality assurance function to be done separately from and later than requirements determination. It is interesting that Weidenhaupt et al. [ <xref ref-type="bibr" rid="R13" id="209" class="deo:Reference">13</xref>] recently found little evidence of European software organisations using scenarios systematically during test case generation, although there was a widespread desire to do so. Perhaps what is missing is the traceability or change management capability from generative and early validation scenarios to the test cases themselves. In an object-oriented project, collaboration diagrams provide a framework for identifying the interacting objects that are required to be available or stubbed for unit testing against specific scenarios or for integration testing of small numbers of tightly coupled units. However, they are not expressed in terms of concrete inputs or state information. Several test cases, for example, may correspond to a single collaboration diagram, where the test cases represented either tests<marker type="column" number="2"/><marker type="block"/> on an equivalence partition of inputs or boundary value tests or equivalence partitions also tested with other non- boundary value tests.</region>
          </section>
        </section>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="212" page="14" column="2">3.2. Scenarios in Human±Computer Interaction</h2>
          <region class="DoCO:TextChunk" id="213" page="14" column="2">In HCI, scenarios play a role both in user interface dialogue design, in more general task modelling, and prototyping.</region>
          <section class="DoCO:Section">
            <h3 class="DoCO:SectionTitle" id="214" page="14" column="2">3.2.1. Scenarios in Task Analysis for Human Interaction</h3>
            <region class="DoCO:TextChunk" id="220" page="14" column="2">Much of the HCI work involving the use of scenarios does not refer to them by name, but instead uses the term task. Sometimes, a task description is a scenario by another name, since it describes a single trace of behaviour, or a narrow range of alternatives. Sometimes, however, a task description corresponds more to the software engineering sense of a specification, in that a general description is provided of how the user interacts with a system to perform a high-level task and incorporates all the envisaged contingencies and alternatives. An example of a task specification formalism that uses a narrow, scenario-like sense of the term task is GOMS (Goals, Operators, Methods, Selection Rules) [ <xref ref-type="bibr" rid="R33" id="215" class="deo:Reference">33</xref>], a method for specifying task-specific user/computer interaction sequences and evaluating user interface designs. In GOMS, the user is assumed to be a purposive agent with knowledge of the task to be performed (a high-level goal) and the available methods for accomplishing this goal using mental and physical operations. This procedural knowledge includes a set of methods for mapping operators onto goals (e.g., moving the mouse and clicking a button for selecting a displayed object) and a set of selection rules for choosing methods that accomplish the same goal (e.g., deleting a paragraph by<marker type="page" number="15"/><marker type="column" number="1"/><marker type="block"/> repeatedly deleting text lines or by marking its beginning and end and then cutting the selected text). The system, on the other hand, is a deterministic device that responds mechanically to the user’s input. GOMS grows out of an engineering psychology approach to the design of user interfaces; the user’s behaviour is modelled in great detail, down to the quantification of basic parameters (e.g., the time to make a simple decision or the time to move a mouse to a target) and the assignment of probabilities to selection rules or parameter ranges. It can therefore be used as a stochastic model of the user/ computer system for evaluation purposes when the design criterion of interest is the speed with which a given task can be performed. The entry point for GOMS is the user’s assumed goal in performing a task. Task descriptions are hierarchical descriptions of the methods (sequences of steps) that can be performed to accomplish the goal. In GOMS, a scenario is referred to as a task instance. GOMS models can be written in several ways. The generally accepted notation, NGOMSL (Natural GOMS Language) is used for unit-task GOMS analyses [<xref ref-type="bibr" rid="R34" id="219" class="deo:Reference">34</xref>]. These are analyses of tasks that are performed by a small number of sequential steps. NGOMSL is generally used for task descriptions; not task instances (scenarios).</region>
            <outsider class="DoCO:TextBox" type="header" id="217" page="15" column="1">A Representational Framework for Scenarios of System Use</outsider>
            <outsider class="DoCO:TextBox" type="page_nr" id="218" page="15" column="1">233</outsider>
          </section>
        </section>
      </section>
      <section class="deo:Methods">
        <h1 class="DoCO:SectionTitle" id="221" confidence="possible" page="15" column="1">Method to accomplish goal submit_member- ship_application. Step 1: Accomplish goal of filling out membership application form Step 2: Select e-check as payment method Step 3: Enter public key Step 4: Accomplish goal of submitting membership application Step 5: Return with goal accomplished</h1>
        <region class="DoCO:TextChunk" id="291" page="15" column="1">Selection rules are written in an if/then style and model the user’s choice between different methods. For the purpose of the analysis, the user is therefore considered a deterministic mechanism that unerringly chooses the specified method when a choice presents itself. Other human performance engineering approaches to design and evaluation of interfaces use task models more similar to data-flow or state-oriented specifications of system behaviour. The operational sequence diagram (OSD) [ <xref ref-type="bibr" rid="R35" id="222" class="deo:Reference">35</xref>], however, is a graphical notation that mixes the user’s goals, the information acquisition operations (e.g., looking at a display) and decisions required of the user, and the operations to be performed by the system. It presents the information from the point of view of the user. An example OSD is shown in <xref ref-type="fig" rid="F4" id="223" class="deo:Reference">Fig. 4</xref>. It shows the vertical time line, the scenario components, and the allocation of responsibility between user and system.<marker type="column" number="2"/><marker type="block"/> A final example of a human performance engineering notation for tasks is the User Action Notation (UAN) [<xref ref-type="bibr" rid="R21" id="225" class="deo:Reference">21</xref>]. This is a tabular notation in which the user, interface, and underlying computation are treated as three agents involved in a scenario. The user operations are specified in great detail. The interface operations (e.g., changes to display) and its state (e.g., change of<marker type="page" number="16"/><marker type="column" number="1"/><marker type="block"/> mode) are specified informally or by reference to separate pictures, and the underlying computation is described informally also. UAN is a tabular notation, for describing instances of human–computer dialogues. The left-most column, representing the user’s actions, contains UAN entries, which in UAN proper use symbols to represent predefined user interface operations such as moving a mouse or clicking a button. The entries in the other columns are left informal. Because we are not concerned with the specification of user interface operations, in <xref ref-type="table" rid="T4" id="233" class="deo:Reference">Table 4</xref> we show the user actions (column 1) with UAN- like precision, but at a higher level of abstraction than the standard UAN sensorimotor operations. In all three examples – GOMS, operator sequence diagrams, and UAN – the practical emphasis of the designer is on the physical design of the user interface, often at quite a low level of abstraction, involving the placement of display symbols and the availability of actuator devices (buttons, menus, etc.) However, the notations for scenarios are quite general and can be used at higher levels of abstraction. In all cases, however, there is an intrinsic emphasis on the design of interactions between one privileged agent (the human user) and a mechanistic system.<marker type="block"/> Another design tradition also involving the nature of organisational work is the contextual and participatory design of systems. Here the emphasis tends to be more on the nature of work as it actually is performed, rather than its normative specification, and the description of envisaged systems at the detailed, operational level visible to the individual actors in the work processes rather than at the level of organisational strategy. These methods tend to be characterised more by a philosophi- cal stance and a number of social-scientific observational techniques. Less attention has been paid to the standardisation of those representations of behaviour that are used as the basis for participatory decision making. For example, the early work in participatory<marker type="column" number="2"/><marker type="block"/> design in Scandinavia emphasised the use of ‘proto- types’ of possible systems, but with an opportunistic approach to how such prototypes should be built in different situations [<xref ref-type="bibr" rid="R36" id="237" class="deo:Reference">36</xref>]. Two exceptions to this trend are CARD/PICTIVE [<xref ref-type="bibr" rid="R37" id="238" class="deo:Reference">37</xref>] and Contextual Design [<xref ref-type="bibr" rid="R38" id="239" class="deo:Reference">38</xref>]. CARD and PICTIVE are related techniques that are used in collaborative design settings to illustrate and explore possible system behaviours. Because a strong emphasis is given to the user’s views of their business tasks, the notations used in CARD and PICTIVE are informal and expressed in terms of user concepts. They differ in two ways. First, they are used at different levels of detail, a comple- mentarity suggested by the analogy that Muller et al. [<xref ref-type="bibr" rid="R37" id="240" class="deo:Reference">37</xref>] draw between the two representations and bifocal lenses. Indeed, these authors maintain that the benefits of scenario analysis come from the simultaneous exploration at varying levels of details that the two notations afford. CARD depicts the broad outline of system use through the manipulation of filing cards (cf. their use as informal specification micro-documents in some object- oriented design methods [<xref ref-type="bibr" rid="R24" id="241" class="deo:Reference">24</xref>]). In contrast, PICTIVE describes the microstructure of scenarios in terms of artefacts at hand (usually office stationery representing states of a scenario). The second difference between CARD and PICTIVE is that CARD is equally suitable for sketching indicative and optative scenarios, whereas PICTIVE, being more dependent on the artefacts of work as currently practised, is more suitable for indicative scenarios. Despite these differences, however, the representations are very similar in all but their surface characteristics, and we will concentrate on CARD. CARD cards are high-level summaries of dialogue steps (see <xref ref-type="fig" rid="F5" id="242" class="deo:Reference">Fig. 5</xref>). Although they may sketch the displays that the user sees in a visual interface, their role is less to help users envisage the interface than to provide a skeleton for work flow and dialogue storyboards. Symbols are used to abstract away irrelevant visual details: for example, cards may be colour-coded according to whether they predominantly show informa-<marker type="page" number="17"/><marker type="column" number="1"/><marker type="block"/> tion entered by the user or displayed by the system or to represent the organisational actor who is responsible for this step in the work flow. Contextual Design [<xref ref-type="bibr" rid="R38" id="247" class="deo:Reference">38</xref>] is a thorough method for work redesign and the early design of information technology products that support redesigned work. It incorporates the contextual analysis of work situations, which in turn borrows heavily from ethnographic practice. The over- riding methodological emphasis in contextual analysis is for the analyst to stay grounded in the actual work that takes place and to lead interviewees away from generalisations and abstractions. As a result, the models of work sequences and the flows of responsibility that each interview generates represent single scenarios of work practice. These are subsequently consolidated into a more general view of the work to be supported. In addition to these temporally oriented models, the contextual analyst also produces several other models and formatted field notes, including physical models and artefact models. The physical models provide descriptions of salient features of the work space and movement through it, while the artefact models provide descriptions of the physical and information artefacts used during the work, including the user interfaces of existing systems. Contextual Design continues with the envisioning of new products to support the work. The important features of the indicative models are taken from the Contextual Analysis phase, and subjunctive models are created to represent the transformed work practices using the new tools. In the case of the sequential model, for example, the important features carried over from the observed work practices to the proposed work practices using the new technology are the intents of the interviewees during the observed work scenarios. Thus, while the individual steps are redesigned and possibly unrecognisable, the intents are preserved. In this respect, Contextual Design resembles the goal-oriented specification of new systems. Finally, user interface mock-ups are created to show the detailed ‘turtle’-oriented view of<marker type="column" number="2"/><marker type="block"/> the work scenarios. The artefact models are used to facilitate and constrain the design of these mock-ups, again so that the principal information provision intents of the users are preserved even though the precise layout and organisation of the artefacts may be redesigned altogether. <xref ref-type="fig" rid="F6" id="251" class="deo:Reference">Figure 6</xref> shows a Contextual Analysis/Design sequence flow model for a meeting scheduling scenario. The representational properties of the task analysis scenario representations are shown in <xref ref-type="table" rid="T5" id="252" class="deo:Reference">Table 5</xref>. GOMS provides another teleological model, possessing the highest degree of precision. OSD is a graphical notation which categorises types of events (e.g., system events). In UAN, we see a user-oriented frame of reference versus the global frame of reference in all of the previously discussed representations. The CARD &amp; PICTIVE notations provide a turtle view from the users’ point of view. Finally, in contextual design the focus is on designing for the current or existing process, rather than envisaged ones.<marker type="block"/> Scenarios help developers and users manage the conceptual complexity of software development by<marker type="page" number="18"/><marker type="column" number="1"/><marker type="block"/> clarifying the concrete behavioural consequences of requirements or design proposals. Another related design strategy that does this is prototyping. Scenarios can be used independently of prototyping, and prototypes can be used in the absence of scenarios. It remains an open issue, however, how to apply scenario representations and prototyping in a controlled and beneficial way. A recent survey of projects [<xref ref-type="bibr" rid="R13" id="260" class="deo:Reference">13</xref>] shows that scenarios and prototypes are frequently used together and that senior developers agree that they should. To some extent, the bringing together of prototyping and scenario analysis rests on terminology. There is,<marker type="column" number="2"/><marker type="block"/> however, an important theoretical difference between scenarios and executable prototypes. An executable program or a specification is a behaviour generator; a scenario, including a detailed storyboard, is a behaviour description. Prototypes can therefore be used to generate scenarios, and the types of scenarios that are thought to be worth exploring can shape the development of a prototype. Prototypes generally mimic some features of envisaged system behaviour in a pseudo-realistic way, perhaps by populating a user interface that is similar to the likely interface of the envisaged product with<marker type="page" number="19"/><marker type="column" number="1"/><marker type="block"/> realistic but randomised or canned data. They could, however, also generate logs similar to the tabular scenario representations described above, in which the user inputs and system outputs were listed or summarised. The apparatus required to generate this data would be similar to a test harness and would require that prototypes be constructed with the exploration of specific scenarios in mind.<marker type="block"/> Scenarios concretise abstract descriptions of system use making it possible to develop a detailed understanding of system behaviours. When business processes are not readily understood, and stakeholders are unable to provide models that are easily understood, scenarios can clarify uncertainties and ambiguities. In the case of organisational IS design, scenarios are used in business process re-engineering (BPR), in which a software system is designed or modified as part of a broader effort to rationalise the ways in which an organisation functions. The goals of all these design efforts are similar: to design a system that fits into the way in which individuals or groups do (or, in the case of BPR) should perform tasks. There is a long tradition in organisational science of treating the purposive interaction of groups and organisations as systems, and so the behaviour of such ‘soft’ systems may potentially be modelled using the same types of concepts and representations as are used in the modelling of ‘hard’ systems. Although some scholars have argued that hard and soft systems must be analysed differently [<xref ref-type="bibr" rid="R39" id="268" class="deo:Reference">39</xref>] or have questioned the system metaphor or organisations altogether [<xref ref-type="bibr" rid="R40" id="269" class="deo:Reference">40</xref>], recent developments in information technology, particularly work-flow systems, have led to the widespread modelling and ‘re-engineer- ing’ of business processes [<xref ref-type="bibr" rid="R42" id="270" class="deo:Reference">42</xref>]. A business process is like a task model except that it tends to be defined in less detail and involves several human agencies (individuals or groups), rather than a single user. For political reasons also, business process models tend to be prescriptive rather than descriptive and normative rather than exceptional. These practical differences aside, the representations used for business process modelling are similar to those used in system specification and user task analysis. Despite the fact that business process modelling and re-engineering are supposedly grounded in the work of organisations, surprisingly little use is made of scenarios. Instead, models are usually presented that specify generalisations of behaviour. A recent exception is the use case-driven object-oriented method of Jacobson, which he has extended to the object-oriented specifica-<marker type="column" number="2"/><marker type="block"/> tion of business processes [<xref ref-type="bibr" rid="R42" id="272" class="deo:Reference">42</xref>]. As with use case-driven software engineering, use case-driven BPR starts with the definition of organisational use cases (where the system boundary is now the organisational boundary and the external actors are organisations external to the organisation whose processes are being modelled). Because the use case representation of Jacobson’s method is essentially unchanged from its form in object-oriented software design, BPR use cases are not tabulated in a separate table. The existing techniques for acquiring and specifying system objectives are either formal or informal. Formal techniques specify declarations and assertions in a logic- based formal language, describing the behaviours of mechanistic software systems in detail and with minimal ambiguity. The benefits of employing formal approaches include the ability to conduct consistency checks [<xref ref-type="bibr" rid="R31" id="273" class="deo:Reference">31</xref>], formal error checking, etc. However, formal languages lack constructs to clearly delineate the separation between domain descriptions and actual requirements [<xref ref-type="bibr" rid="R41" id="274" class="deo:Reference">41</xref>]. Thus, while formal specification languages are well suited for describing some systems, they are not as useful for describing non-mechanistic systems (e.g., business processes). Scenarios, while informal, make the operational concepts of a system easier to understand for both stakeholders and analysts and stakeholders easily understand concepts expressed in concrete terms. A contrasting approach to requirements acquisition is illustrated in the use case movement [<xref ref-type="bibr" rid="R9" id="275" class="deo:Reference">9</xref>]. Although use cases are usually associated with object-oriented design, the concept in no way requires that the software be developed according to object-oriented principles. At the highest level, a collection of use case diagrams represents the union of use cases or transactions that it will support and the interfaces that they have to external actors. Unlike the previously described approach to requirements acquisition, use case analysis proceeds by top-down decomposition: details are postponed until the use cases have been identified and the actors concerned have been mapped. Because of this, the names given to use cases generally reflect the high-level functions that the system will support, and they necessarily reflect the system’s purpose and normative intent. Exceptions and breakdowns are treated in the use case scenarios, each representing a ‘course’ through the use case. Use cases are obtained by interview and walking through generalised situations. It is not surprising, therefore, that use cases have been used for information system planning and business process re-engineering efforts, where the overall design approach allows for the wholesale removal and reconfiguration of procedures. Such an approach to requirements acquisition leads to representational requirements quite different from the previous case. Here, there is a need for one or several<marker type="page" number="20"/><marker type="column" number="1"/><marker type="block"/> representations that can show the same information at varying levels of detail as the requirements are decomposed and elaborated. The representation should be easily understood by customer representatives, but as the subject matter is often higher level or more generalised, the notation employed can be more schematic than concrete. As the design approach tends to emphasise more rigour and traceability, the representations should be compatible with or amenable to transformation into more generalised specifications. The diagram in <xref ref-type="fig" rid="F7" id="280" class="deo:Reference">Fig. 7</xref> borrows from the sequence diagram in UML and object ladder diagram in OOSE. <xref ref-type="fig" rid="F7" id="281" class="deo:Reference">Figure 7</xref> corresponds to the sequence diagram in <xref ref-type="fig" rid="F2" id="282" class="deo:Reference">Fig. 2</xref> for processing a membership application and membership fees for an electronic commerce system. A similar approach was employed in the early stages of a BPR project [<xref ref-type="bibr" rid="R2" id="283" class="deo:Reference">2</xref>]. In that study, the focus on organisational responsibilities assisted in surfacing process duplication among organisational parties as well as general process inefficiencies based on organisational responsibilities and work flows. As with other sequence-like notations, the passing of time is shown via progression down the diagram. However, this type of ‘organisational process’ diagram is used to depict temporal actions among organisational units, rather than among system objects.<marker type="block"/> There are, of course, many more scenario approaches than the ones surveyed in this section. The CREWS framework [<xref ref-type="bibr" rid="R23" id="286" class="deo:Reference">23</xref>] has been applied to some of these, but most use only informal textual representations. Two involve the use of graphical or other semi-formal or formal representations that are not discussed in this<marker type="column" number="2"/><marker type="block"/> paper either in their current or earlier forms [<xref ref-type="bibr" rid="R42" id="288" class="deo:Reference">42</xref>, <xref ref-type="bibr" rid="R43" id="289" class="deo:Reference">43</xref>]. Rosson and Carroll’s scenarios may involve a collection of storyboards and informal pictures (cf. CARD) or interactions among implementation classes in Smalltalk (cf. UML). The approach of Hsia et al. [<xref ref-type="bibr" rid="R43" id="290" class="deo:Reference">43</xref>] employs a formal representation for detailed scenarios that are viewed from a Cartesian frame of reference. The other approaches summarised in the CREWS framework are all extensions of object-oriented analysis representations that are either now part of UML or have been transformed into UML.</region>
        <region class="DoCO:FigureBox" id="F4">
          <image class="DoCO:Figure" src="62m4.page_015.image_02.png" thmb="62m4.page_015.image_02-thumb.png"/>
          <caption class="deo:Caption" id="228" page="15" column="2">Fig. 4. Operational sequence diagram for meeting scheduling example.</caption>
        </region>
        <outsider class="DoCO:TextBox" type="page_nr" id="229" page="16" column="1">234</outsider>
        <outsider class="DoCO:TextBox" type="header" id="230" page="16" column="1">A. I. Anto  ̈ n and C. Potts</outsider>
        <region class="DoCO:TableBox" id="T4">
          <caption class="deo:Caption" id="231" page="16" column="1">Table 4. Example UAN scenario for composing a meeting invitation</caption>
          <content>
            <table class="DoCO:Table" number="4" page="16">
              <thead class="table"/>
              <tbody>
                <tr class="table">
                  <td class="table"> User actions</td>
                  <td class="table"> Interface behaviour Interface state</td>
                  <td class="table"> Underlying computation</td>
                </tr>
                <tr class="table.strange">
                  <td class="table.strange"> Enter meeting text description of a</td>
                  <td class="table.strange"> Meeting ®lled in description form Invitation preparation</td>
                  <td class="table.strange"> mode Compose contents of e-mail form's message text ®eld</td>
                </tr>
                <tr class="table.strange">
                  <td class="table.strange"> Select addressees names from of list invitation (e.g., by</td>
                  <td class="table.strange"> Selected names highlighted</td>
                  <td class="table.strange"> Look addressees' up sender's e-mail and addresses</td>
                </tr>
                <tr class="table.strange">
                  <td class="table.strange"> highlighting from menu)</td>
                  <td class="table.strange"></td>
                  <td class="table.strange"></td>
                </tr>
                <tr class="table.strange">
                  <td class="table.strange"> Commit clicking OK to invitations or Send button) (e.g., by</td>
                  <td class="table.strange"> Feedback are being sent that (e.g., messages by</td>
                  <td class="table.strange"> Route e-mail message to all</td>
                </tr>
                <tr class="table">
                  <td class="table"></td>
                  <td class="table"> hourglass or clock cursor)</td>
                  <td class="table"> addressees' and route a copy e-mail to addresses sender</td>
                </tr>
              </tbody>
            </table>
          </content>
          <region class="TableInfo" id="232" confidence="possible" page="16" column="1">User actions Interface behaviour Interface state Underlying computation Enter text description of a Meeting description form Invitation preparation mode Compose e-mail message from meeting ®lled in contents of form's text ®eld Select names of invitation Selected names highlighted Look up sender's and addressees from list (e.g., by addressees' e-mail addresses highlighting from menu) Commit to invitations (e.g., by Feedback that messages Route e-mail message to all clicking OK or Send button) are being sent (e.g., by addressees' e-mail addresses hourglass or clock cursor) and route a copy to sender</region>
        </region>
        <region class="unknown" id="235" page="16" column="1">3.2.2. Scenarios in Contextual Design</region>
        <outsider class="DoCO:TextBox" type="header" id="244" page="17" column="1">A Representational Framework for Scenarios of System Use</outsider>
        <outsider class="DoCO:TextBox" type="page_nr" id="245" page="17" column="1">235</outsider>
        <region class="DoCO:FigureBox" id="F5">
          <caption class="deo:Caption" id="246" page="17" column="1">Fig. 5. CARD representation of a meeting scheduling scenario.</caption>
        </region>
        <region class="unknown" id="249" page="17" column="2">Analysis/Design sequence model for a</region>
        <region class="DoCO:FigureBox" id="F6">
          <caption class="deo:Caption" id="250" page="17" column="2">Fig. 6. A Contextual meeting scheduling.</caption>
        </region>
        <region class="unknown" id="254" page="17" column="2">3.2.3. Scenarios in Storyboarding and Prototyping</region>
        <outsider class="DoCO:TextBox" type="page_nr" id="256" page="18" column="1">236</outsider>
        <outsider class="DoCO:TextBox" type="header" id="257" page="18" column="1">A. I. Anto  ̈ n and C. Potts</outsider>
        <region class="DoCO:TableBox" id="T5">
          <caption class="deo:Caption" id="258" page="18" column="1">Table 5. Representational properties of task analysis scenario representations</caption>
          <content>
            <table class="DoCO:Table" number="5" page="18">
              <thead class="table"/>
              <tbody>
                <tr class="table">
                  <td class="table"></td>
                  <td class="table"> GOMS</td>
                  <td class="table"> OSD</td>
                </tr>
                <tr class="table.strange">
                  <td class="table.strange"> Temporality Duration</td>
                  <td class="table.strange"> Non-overlapping</td>
                  <td class="table.strange"> Non-overlapping sequences of</td>
                </tr>
                <tr class="table">
                  <td class="table"></td>
                  <td class="table"> sequences user operations. and system of</td>
                  <td class="table"> user operations. and system</td>
                </tr>
                <tr class="table.strange">
                  <td class="table.strange"></td>
                  <td class="table.strange"> Operation duration derived</td>
                  <td class="table.strange"></td>
                </tr>
                <tr class="table.strange">
                  <td class="table.strange"></td>
                  <td class="table.strange"> from performance human data.</td>
                  <td class="table.strange"></td>
                </tr>
                <tr class="table.strange">
                  <td class="table.strange"></td>
                  <td class="table.strange"> CPM-GOMS models partially</td>
                  <td class="table.strange"></td>
                </tr>
                <tr class="table.strange">
                  <td class="table.strange"></td>
                  <td class="table.strange"> ordered behaviours</td>
                  <td class="table.strange"></td>
                </tr>
                <tr class="table">
                  <td class="table"> Linearity</td>
                  <td class="table"> Explicit criteria among selection</td>
                  <td class="table"> Explicit criteria among selection</td>
                </tr>
                <tr class="table">
                  <td class="table"></td>
                  <td class="table"> alternative methods</td>
                  <td class="table"> alternative methods</td>
                </tr>
                <tr class="table">
                  <td class="table"> Determinacy</td>
                  <td class="table"> Stochastic</td>
                  <td class="table"> Non-deterministic</td>
                </tr>
                <tr class="table">
                  <td class="table"> Triggering</td>
                  <td class="table"> User are steps operations in</td>
                  <td class="table"> System is triggered behaviour by</td>
                </tr>
                <tr class="table">
                  <td class="table"></td>
                  <td class="table"> plans (methods)</td>
                  <td class="table"> user operations input; are user spontaneous triggered by or system feedback</td>
                </tr>
                <tr class="table">
                  <td class="table"> Agency Openness</td>
                  <td class="table"> Black with few box system models</td>
                  <td class="table"> Black box models</td>
                </tr>
                <tr class="table">
                  <td class="table"></td>
                  <td class="table"> internals</td>
                  <td class="table"> with internals few system</td>
                </tr>
                <tr class="table">
                  <td class="table"> Identity</td>
                  <td class="table"> Physical</td>
                  <td class="table"> Physical</td>
                </tr>
                <tr class="table">
                  <td class="table"> Teleology</td>
                  <td class="table"> The intentions user's are</td>
                  <td class="table"> User is treated</td>
                </tr>
                <tr class="table">
                  <td class="table"></td>
                  <td class="table"> explicit</td>
                  <td class="table"> as agent a mechanistic</td>
                </tr>
                <tr class="table">
                  <td class="table"> Frame of reference</td>
                  <td class="table"> Cartesian but emphasises models,</td>
                  <td class="table"> Cartesian but emphasises models,</td>
                </tr>
                <tr class="table">
                  <td class="table"></td>
                  <td class="table"> behaviour to user visible</td>
                  <td class="table"> behaviour to user visible</td>
                </tr>
                <tr class="table">
                  <td class="table"> Normativeness</td>
                  <td class="table"> Normative</td>
                  <td class="table"> Normative</td>
                </tr>
              </tbody>
            </table>
          </content>
          <region class="TableInfo" id="259" confidence="possible" page="18" column="1">GOMS OSD Temporality Duration Non-overlapping Non-overlapping sequences of sequences of user and system user and system operations. operations. Operation duration derived from human performance data. CPM-GOMS models partially ordered behaviours Linearity Explicit selection Explicit selection criteria among criteria among alternative alternative methods methods Determinacy Stochastic Non-deterministic Triggering User operations System behaviour are steps in is triggered by plans (methods) user input; user operations are spontaneous or triggered by system feedback Agency Openness Black box models Black box models with few system with few system internals internals Identity Physical Physical Teleology The user's User is treated intentions are as a mechanistic explicit agent Frame of reference Cartesian models, Cartesian models, but emphasises but emphasises behaviour visible behaviour visible to user to user Normativeness Normative Normative</region>
        </region>
        <region class="unknown" id="262" page="18" column="2">UAN CARD &amp; PICTIVE Contextual Design Non-overlapping Duration not Non-overlapping sequences of modelled work sequences user and system operations Linear Linear Branching possible Non-deterministic Non-deterministic Non-deterministic System behaviour System behaviour Sequences of steps is triggered by is triggered by share a single intent user input; user user input; user operations are operations are spontaneous or spontaneous or triggered by triggered by system feedback system feedback Glass box Glass model Black box models with few (CARD) showing system internals. major system Three actors objects (user, UI, and underlying computation) Physical Functional Physical User is treated User's goals are User's goals as a mechanistic implicit (intents) modelled agent explicitly Cartesian models, Both, but Contextual Analysis but emphasises emphasis on models are behaviour visible turtle-oriented Cartesian; to user storyboards Contextual Design models are turtle-oriented Normative Normative Breakdowns and workarounds explicitly marked</region>
        <outsider class="DoCO:TextBox" type="header" id="264" page="19" column="1">A Representational Framework for Scenarios of System Use</outsider>
        <outsider class="DoCO:TextBox" type="page_nr" id="265" page="19" column="1">237</outsider>
        <region class="unknown" id="267" page="19" column="1">3.3. Scenarios for Organisational Processes</region>
        <outsider class="DoCO:TextBox" type="page_nr" id="277" page="20" column="1">238</outsider>
        <outsider class="DoCO:TextBox" type="header" id="278" page="20" column="1">A. I. Anto  ̈ n and C. Potts</outsider>
        <region class="DoCO:FigureBox" id="F7">
          <caption class="deo:Caption" id="279" page="20" column="1">Fig. 7. Business process shown as an object sequence diagram.</caption>
        </region>
        <region class="unknown" id="285" page="20" column="1">3.4. Other Representations</region>
      </section>
      <section class="deo:Conclusion">
        <h1 class="DoCO:SectionTitle" id="292" page="20" column="2">4. Discussion and Conclusions</h1>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="293" page="20" column="2">4.1. Cross-Disciplinary Application of Scenarios</h2>
          <region class="DoCO:TextChunk" id="298" page="20" column="2">Because the roles differ that scenarios play in each of the design processes described in Section 3, it would be easy to conclude that the representations developed for use in each of these areas are only appropriate there. It is certainly true that some representations are better suited for some purposes than others, but it is not necessarily the case that the representations employed in one area and developed for one purpose are inapplicable to others. We have already remarked how object-oriented scenario representations, which were originally developed for describing the interactions among objects in a software design, have more recently been used to describe interactions among organisational ‘objects’ during a business process re-engineering. We have also referred to the common teleological basis of the goal-based scenario representations (which originated squarely in the discipline of requirements engineering) and contextual design (which originated from the concerns of one school of thought within HCI). To take a less obvious example of how representational techniques could cross such boundaries but have not, consider how the representational mechanisms of OSD [ <xref ref-type="bibr" rid="R35" id="294" class="deo:Reference">35</xref>] (see Section 3.2.1) transcend the particular needs of human-factors task analysis and how they could be applied equally appropriately in architectural modelling for analysing requirements feasibility. The important representational features of OSD are that a behavioural element in a scenario is shown in three orthogonal ways. First, OSD uses icon shapes to encode whether a scenario element is an action, an input item, a decision, or an item of stored information. Second, OSD encodes by means of shading whether the element belongs to or is the responsibility of the actor of interest or the rest of the system. (In OSD, the actor of interest is always a human operator, hence the apparent though illusory restriction of OSD to human factors analyses.) Finally, OSD makes a representational distinction<marker type="page" number="21"/><marker type="column" number="1"/><marker type="block"/> between those elements that are complete and correct and those that are incomplete and erroneous. These three representational distinctions could fruitfully be applied, during software evolution, where the issues of interest are the behavioural interactions between a new and therefore representationally privileged component or function and an existing assemblage of legacy components. Of particular interest in integration test planning and requirements feasibility reviews is the question of whether the existing and to-be-integrated components rest on assumptions about the orderliness and completeness of each other. OSD highlights exactly this issue. The effectiveness of a representational technique owes less to the historical accident of its birth than to where it is positioned in the representational space described in Section 2. By systematically comparing and reviewing scenario representations in this way, we believe it would be possible for one design discipline to appropriate and modify useful techniques that originated in another area.</region>
          <outsider class="DoCO:TextBox" type="header" id="296" page="21" column="1">A Representational Framework for Scenarios of System Use</outsider>
          <outsider class="DoCO:TextBox" type="page_nr" id="297" page="21" column="1">239</outsider>
        </section>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="299" page="21" column="1">4.2. Scenarios and Prototypes</h2>
          <region class="DoCO:TextChunk" id="302" page="21" column="1">Scenarios help developers and users manage the conceptual complexity of software development by clarifying the concrete behavioural consequences of requirements or design proposals. Another related design strategy that does this is prototyping. Scenarios can be used independently of prototyping, and prototypes can be used in the absence of scenarios. It remains an open issue, however, how to apply scenario representations and prototyping in a controlled and beneficial way. A recent survey of projects [ <xref ref-type="bibr" rid="R13" id="300" class="deo:Reference">13</xref>] shows that scenarios and prototypes are frequently used together and that senior developers agree that they should. To some extent, the bringing together of prototyping and scenario analysis rests on terminology. There is, however, an important theoretical difference between scenarios and executable prototypes. An executable program or a specification is a behaviour generator; but a scenario, including a detailed storyboard, is a behaviour description. Prototypes can therefore be used to generate scenarios, and the types of scenarios that are thought to be worth exploring can shape the development of a prototype. Prototypes generally mimic some features of envisaged system behaviour in a pseudo-realistic way, perhaps by populating a user interface that is similar to the likely interface of the envisaged product with realistic but randomised or canned data. They could, however, also generate logs similar to the tabular scenario representations described above, in which the user inputs and system outputs were listed or summarised. The apparatus required to generate this<marker type="column" number="2"/><marker type="block"/> data would be similar to a test harness and would require that prototypes be constructed with the exploration of specific scenarios in mind.</region>
        </section>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="303" page="21" column="2">4.3. Scenarios and Team-Based Design</h2>
          <region class="DoCO:TextChunk" id="306" page="21" column="2">Finally, there are open questions about the facilitation and presentation constraints on scenario representations that are used in conjunction with team-based design methods such CARD/PICTIVE [<xref ref-type="bibr" rid="R37" id="304" class="deo:Reference">37</xref>]. An essential feature of all such methods when applied successfully is adequate preparation. It is not therefore necessary that scenarios be sketched from scratch during a group meeting. Instead, an outline scenario can be used for eliciting comments and improvements much in the same way that conventional JAD has used information systems modelling representations, such as entity- relationship diagrams for database schemas. Any of the representational techniques described above could be used in this way. Nevertheless, the mundane limitations of temporary occupancy of meeting rooms, size and simultaneous viewing restrictions on standard facilitated meeting technologies such as flip charts, limit the practical range of representations that can be used. There is a premium therefore on highlighting in the representation only those features that are likely to stimulate the most fruitful design insights. In this case, use case diagrams are too uninformative in their content and use case descriptions too textual. Beyer and Holtzblatt [<xref ref-type="bibr" rid="R38" id="305" class="deo:Reference">38</xref>] report good results, anecdotal but based on extensive practice, in using consolidated sequence models in conjunction with the other Contextual Design models. Simple tabular notations (modified UAN again or a multi-column, actor-emphasising version of schematic scenarios) are also likely to be useful for similar reasons. To support rapid creation and modification of scenario descriptions, PICTIVE and CARD use standard office cards and other devices to represent scenarios. Again, the mundane limitation of what can fit on a three by five inch card determines the granularity of the analysis. In fact, a lot of information can be put on a single card, and it appears to be a good team-design discipline to summarise scenario states or actor expectations through memorable phrases and sketches. These descriptions can be transitory and be modified during a meeting and thrown away after it (after documenting the details), but they can equally be elaborated into corresponding system design scenarios later in the design process (e.g., object collaboration diagrams).</region>
          <outsider class="DoCO:TextBox" type="page_nr" id="307" page="22" column="1">240</outsider>
          <outsider class="DoCO:TextBox" type="header" id="308" page="22" column="1">A. I. Anto  ̈ n and C. Potts</outsider>
        </section>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="309" page="22" column="1">4.4. Conclusions</h2>
          <region class="DoCO:TextChunk" id="310" page="22" column="1">Underlying the multiple uses of scenarios in system development and the traditions of research and practice that have adopted the use of scenarios for varying purposes in design, there is a single underlying purpose: software systems, which are complex and difficult to understand, can be understood and designed better if the behaviours and consequences implied by abstract or high-level design commitments are clarified through concrete examples. The representations chosen for scenarios are therefore crucial in promoting this understanding. There are frequently trade-offs to be achieved in practice between the level of formality and precision that a scenario exhibits for analysis and traceability management across the life cycle and the modifiability and exploratory feel that it exhibits actually to promote design use in team settings. Representations are not independent of purpose and methodology, but accidents of history have limited the use of some scenario representations to some communities and discouraged researchers and practitioners in other communities from studying them carefully and proposing refinements. In particular, requirements engineering can benefit from the adoption of representational techniques that originate in downstream software engineering processes, human–computer dialogue design and organisational process design. Acknowledgements. Research discussed in this paper was partly sponsored by NTT Multimedia Communications Laboratories in Palo Alto, CA, and partly by the National Science Foundation under grant CCR-9503863.</region>
        </section>
      </section>
      <section class="DoCO:Bibliography">
        <h1 class="DoCO:SectionTitle" id="311" page="22" column="1">References</h1>
        <ref-list class="DoCO:BiblioGraphicReferenceList">
          <ref rid="R1" class="deo:BibliographicReference" id="312" page="22" column="1">1. Anderson JS, Durney B. Using scenarios in deficiency-driven requirements engineering. In: IEEE International Symposium on Requirements Engineering (RE ’93), San Diego, CA, January 1993, pp 134–141</ref>
          <ref rid="R2" class="deo:BibliographicReference" id="313" page="22" column="1">2. Ant  ́n AI, McCracken WM, Potts C. Goal decomposition and scenarios analysis in business process reengineering. In: Advanced information systems engineering: 6th international conference, CAiSE ’94 Proceedings, Utrecht, The Netherlands, June 1994, pp 94–104</ref>
          <ref rid="R3" class="deo:BibliographicReference" id="314" page="22" column="1">3. Ant  ́n AI. Goal-based requirements analysis. In: International conference on requirements engineering (ICRE ’96), Colorado Springs, CO, April 1996, pp 136–144</ref>
          <ref rid="R4" class="deo:BibliographicReference" id="315" page="22" column="1">4. Ant  ́n AI. Goal identification and refinement in the specification of software-based information systems. PhD dissertation, Georgia Institute of Technology, Atlanta, GA, June 1997</ref>
          <ref rid="R5" class="deo:BibliographicReference" id="316" page="22" column="1">5. Ant  ́n AI, Potts C. The use of goals to surface requirements for evolving systems. In: International conference on software engineering (ICSE ’98), Kyoto, Japan, 19–25 April 1998, pp 157–166</ref>
          <ref rid="R6" class="deo:BibliographicReference" id="317" page="22" column="1">6. Benner K, Feather MS, Johnson WL, Zorman L. Utilizing scenarios in the software development process. In: IFIP WG 8.1 working conference on information systems development processes, North Holland, 1993, pp 117–314</ref>
          <ref rid="R7" class="deo:BibliographicReference" id="319" page="22" column="1">7. Breitman KK, Sampaio de Prado Leite JC. A framework for scenario evolution. In: International conference on requirements <marker type="column" number="2"/><marker type="block"/> engineering (ICRE ’98), Colorado Springs, CO, 6–10 April 1998, pp 214–221</ref>
          <ref rid="R8" class="deo:BibliographicReference" id="320" page="22" column="2">8. Carroll JM, Rosson M. Getting around the task–artifact cycle: how to make claims and design by scenario. ACM Trans Inform Syst 1992;10(2):181–212</ref>
          <ref rid="R9" class="deo:BibliographicReference" id="321" page="22" column="2">9. Jacobson I, Christerson M, Jonsson P, O  ̈ vergaard G. Object- oriented software engineering: a use case driven approach. Addison-Wesley, Reading, MA, 1992</ref>
          <ref rid="R10" class="deo:BibliographicReference" id="322" page="22" column="2">10. Potts C. Using schematic scenarios to understand user needs. In: Symposium on designing interactive systems: processes, practices, methods and techniques, University of Michigan, Ann Arbor, MI, August 1995, pp 247–256</ref>
          <ref rid="R11" class="deo:BibliographicReference" id="323" page="22" column="2">11. Rubin KS, Goldberg A. Object behavior analysis. Commun ACM 1992;35(9):48–62</ref>
          <ref rid="R12" class="deo:BibliographicReference" id="324" page="22" column="2">12. Texel PP, Williams CB. Use cases combined with Booch, OMT, UML: process and products. Prentice-Hall, Englewood Cliffs, NJ, 1997</ref>
          <ref rid="R13" class="deo:BibliographicReference" id="325" page="22" column="2">13. Weidenhaupt K, Pohl K, Jarke M, Haumer P, CREWS team. Scenarios in system development: current practice. IEEE Software 15(2), pp 34–45, March 1998</ref>
          <ref rid="R14" class="deo:BibliographicReference" id="326" page="22" column="2">14. Jackson M. Software requirements and specifications. Addison- Wesley, Reading, MA, 1995</ref>
          <ref rid="R15" class="deo:BibliographicReference" id="327" page="22" column="2">15. Ringland G. Scenario planning: managing for the future. Wiley, Chichester, UK, 1998</ref>
          <ref rid="R16" class="deo:BibliographicReference" id="328" page="22" column="2">16. Schwartz P. The art of the long view. Doubleday, Garden City, NY, 1991</ref>
          <ref rid="R17" class="deo:BibliographicReference" id="329" page="22" column="2">17. van der Heijden K. Scenarios: the art of strategic conversation. Wiley, Chichester, 1996</ref>
          <ref rid="R18" class="deo:BibliographicReference" id="330" page="22" column="2">18. Waltre M. Scenario analysis: an approach to organisational learning. Report no 96-027, Department of Computer and System Sciences, Stockholm University/Royal Institute of Technology, November 1996</ref>
          <ref rid="R19" class="deo:BibliographicReference" id="331" page="22" column="2">19. Kazman R, Abowd G, Bass L, Clements P. Scenario-based analysis of software architecture. IEEE Software 1996; November: 47–55</ref>
          <ref rid="R20" class="deo:BibliographicReference" id="332" page="22" column="2">20. Dardenne A. On the use of scenarios in requirements acquisition. Technical report CIS-TR-93-17, University of Oregon, Eugene, OR, 1993</ref>
          <ref rid="R21" class="deo:BibliographicReference" id="333" page="22" column="2">21. Hix D, Hartson HR. Developing user interfaces: ensuring usability through product and process. Wiley, New York, 1993</ref>
          <ref rid="R22" class="deo:BibliographicReference" id="334" page="22" column="2">22. Coad P, Yourdon E. Object-oriented design. Prentice-Hall, Englewood Cliffs, NJ, 1991</ref>
          <ref rid="R23" class="deo:BibliographicReference" id="335" page="22" column="2">23. Rolland C, Achour B, Cauvet C, Ralyt  ́ J, Sutcliffe A, Maiden N, Jarke M, Haumer P, Pohl K, Dubois E, Heymans P. A proposal for a scenario classification framework. Requirements Eng 1998;3(1):23–47</ref>
          <ref rid="R24" class="deo:BibliographicReference" id="336" page="22" column="2">24. Wirfs-Brock R. Designing objects and their interactions: a brief look at responsibility-driven design. In: Carroll JM (ed). Scenario-based design: envisioning work and technology in system development. Wiley, New York, 1995, pp 337–360</ref>
          <ref rid="R25" class="deo:BibliographicReference" id="337" page="22" column="2">25. Booch G. Object-oriented analysis and design with applications (2nd edn). Benjamin/Cummings, Redwood City, CA, 1994</ref>
          <ref rid="R26" class="deo:BibliographicReference" id="338" page="22" column="2">26. Fowler M. UML distilled: applying the standard object modeling notation. Addison-Wesley, Reading, MA, 1997</ref>
          <ref rid="R27" class="deo:BibliographicReference" id="339" page="22" column="2">27. Rumbaugh J, Blaha M, Premerlani W, Eddy F, Lorenzen W. Object-oriented modeling and design. Prentice-Hall, Englewood Cliffs, NJ, 1991</ref>
          <ref rid="R28" class="deo:BibliographicReference" id="340" page="22" column="2">28. Lubars M, Potts C, Richter C. Developing initial OOA Models. In: Proceedings of the 15th international conference on software engineering. ACM/IEEE Computer Society Press, Los Alamitos, CA, 1993, pp 255–264</ref>
          <ref rid="R29" class="deo:BibliographicReference" id="341" page="22" column="2">29. Potts C, Takahashi K, Ant  ́n AI. inquiry-based requirements analysis. IEEE Software 1994;11(2):21–32</ref>
          <ref rid="R30" class="deo:BibliographicReference" id="342" page="22" column="2">30. Takahashi K, Yamamoto Y. An analysis of traceability in requirements documents. IEICE Trans Inform Syst 1995;E78- D(4):393–402</ref>
          <ref rid="R31" class="deo:BibliographicReference" id="343" page="22" column="2">31. Heitmeyer C, Labaw B, Kiskis D. Consistency checking of SCR- style requirements specifications. In: Proceedings of the 2nd international symposium on requirements engineering (RE ’95), York, UK, March 1995, pp 56–63</ref>
          <ref rid="R32" class="deo:BibliographicReference" id="344" page="22" column="2">32. Takahashi K. Hypermedia support for requirements analysis. PhD thesis, University of Tokyo, Japan, 1997</ref>
          <ref rid="R33" class="deo:BibliographicReference" id="347" page="23" column="1">33. Card S, Moran T, Newell A. The psychology of human–computer interaction. Erlbaum, Hillsdale, NJ, 1983</ref>
          <ref rid="R34" class="deo:BibliographicReference" id="348" page="23" column="1">34. Kieras DE. Toward a practical GOMS model methodology for user interface design. In: Helander M (ed). Handbook of human– computer interaction. North-Holland, Amsterdam, 1988, pp 135– 158</ref>
          <ref rid="R35" class="deo:BibliographicReference" id="350" page="23" column="1">35. Kurke MI. Operational sequence diagrams in system design. Human Factors 1961;3:66–73</ref>
          <ref rid="R36" class="deo:BibliographicReference" id="351" page="23" column="1">36. Ehn P. Work-oriented design of computer artifacts (2nd edn) Erlbaum, Hillsdale, NJ, 1989</ref>
          <ref rid="R37" class="deo:BibliographicReference" id="352" page="23" column="1">37. Muller M, Tudor LG, Wildman DM, White EA, Root RW, Dayton T, Carr R, Diekmann B, Dykstra-Erickson E. Bifocal tools for scenarios and representations in participatory activities with users. In: Carroll JM (ed). Scenario-based design: envisioning work and technology in system development. Wiley, New York, 1995, pp 135–163</ref>
          <ref rid="R38" class="deo:BibliographicReference" id="353" page="23" column="2">38. Beyer H, Holtzblatt K. Contextual design: defining customer- centered systems. Morgan-Kaufmann, San Francisco, CA, 1998</ref>
          <ref rid="R39" class="deo:BibliographicReference" id="354" page="23" column="2">39. Checkland PB, Scholes J. Soft systems methodology in action. Wiley, Chichester, 1990</ref>
          <ref rid="R40" class="deo:BibliographicReference" id="355" page="23" column="2">40. Morgan G. Images of organization (2nd edn). Sage, Newbury Park, CA, 1997</ref>
          <ref rid="R41" class="deo:BibliographicReference" id="356" page="23" column="2">41. Jacobson I, Ericsson M, Jacobson A. The object advantage: business process reengineering with object technology. Addison- Wesley, Wokingham, UK, 1995</ref>
          <ref rid="R42" class="deo:BibliographicReference" id="357" page="23" column="2">42. Carroll JM, Rosson MB. Narrowing the specification implementation gap in scenario-based design. In: Carroll JM (ed). Scenario- based design: envisioning work and technology in system development. Wiley, New York, 1995, pp 247–279</ref>
          <ref rid="R43" class="deo:BibliographicReference" id="358" page="23" column="2">43. Hsia P, Samuel J, Gao J, Kung D, Totyshima Y, Chen C. Formal approach to scenario analysis, IEEE Software 1994;11(2):33–41</ref>
        </ref-list>
        <outsider class="DoCO:TextBox" type="header" id="345" page="23" column="1">A Representational Framework for Scenarios of System Use</outsider>
        <outsider class="DoCO:TextBox" type="page_nr" id="346" page="23" column="1">241</outsider>
        <h4 class="unknown" id="349" page="23" column="1">2.1.1.1. Temporality</h4>
      </section>
    </body>
  </article>
</pdfx>
