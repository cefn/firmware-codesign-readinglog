<?xml version='1.0' encoding='UTF-8'?>
<pdfx xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://pdfx.cs.man.ac.uk/static/article-schema.xsd">
  <meta>
    <job>9b6d35d4afe815578c11164a3d8568d77ed058d36c46c9c21101f09eb2910da7</job>
    <base_name>62i0</base_name>
    <doi confidence="possible" alt_doi="http://dx.doi.org/10.4324/9780203890332">http://dx.doi.org/10.2202/1949-6605.1020</doi>
  </meta>
  <article>
    <front class="DoCO:FrontMatter">
      <title-group>
        <article-title class="DoCO:Title" id="1" confidence="possible">“When an academic community expects a doctoral student to contribute something new through a dissertation, it first expects that student to do a literature review. This is a way to honor the history of learning of that community. Becoming accountable to history also enables the student to discover the learning edge of the practice, the places where a contribution makes sense and is possible. It is this double accountability to the past and the future of the practice that equips the student to contribute to its evolution as a full participant” Etienne Wenger (1998)</article-title>
      </title-group>
      <region class="DoCO:TextChunk" id="2" confidence="possible">Summary Introduction Disciplinary Orientation Computer Science Design Research Management and Social Science Scope: Screenless Devices and Microinteractions Firmware Design Failure Canonical Case: The Cateye Bicycle Light The SocioPolitics of Firmware Design Failure CoDesign Workshops Contrast with ‘Software Requirements’ approaches Key Theoretical Background Sketching and Bricolage Idiosyncracy, ReadyToHand and Flow Immateriality Boundary Objects Candidate Representations Service Blueprinting Software Representations Software Practices Wizard of Oz Mockups Narrative Techniques Next Steps Conclusion References</region>
      <region class="DoCO:TextChunk" id="3" confidence="possible">Summary This document represents a review of relevant literature encountered as part of the first year of Cefn Hoile’s PhD, titled “Tinkering with Boundary objects for the CoDesign of Product Firmware.” Firmware describes the instructions which determine how a microcontrollerbased digital product will act in different situations  the software ‘brain’ of a device. There is an extensive usability critique of firmware implementations found in the design literature, and many of us encounter examples of badly selected default configurations and behaviours and complex interactions with digitallycontrolled products in everyday life. Unlike the dynamic ecosystems and everimproving user experiences associated with mainstream OS and GUIbased computing devices, the lingering problems of firmware design suggest that entrenched issues exist within existing industrial design practices. The PhD focuses on lowmargin products with no operating system or graphical interface, and where no application marketplace or aftermarket firmware ecosystem is available. Selecting this segment imposes the greatest emphasis on the manufacturer’s firmware design choices, as the code which is shipped determines the product’s effectiveness and usability throughout its lifetime. It also excludes simplistic models of codesign which focus merely on interface choices, and which leave software behaviour underspecified as a gap to be filled arbitrarily later in the engineering process. The context of the research is an engineered design encounter, in which a manufacturer invites users who have domain expertise, but no programming experience, to join their product development team and codesign preferred behaviour for a firmwarecontrolled product. The ideal endresult of this design process is a representation which unambiguously specifies the behaviour of the device, so that engineers can ship working firmware without making design decisions in isolation from users’ domain knowledge and feedback. A key aspect of codesign work is that the users are engaged to confront design issues and make design contributions, and not merely be an object of study and hypothesis (for example, where others to author technical specifications, write software and make judgements on users’ behalf). There is of course a fundamental issue with nonprogrammers being asked to design software. It is hard to see how users can be in the position to perform reflectioninaction and reflectiononaction, considered central to the creative process of “sketching”reported in the design literature. To enable reflectivity, users must have some means to project the consequences of their choices and evaluate them as the design coalesces. However, by hypothesis, they lack the firmware programming experience to prototype or anticipate those</region>
      <region class="DoCO:TextChunk" id="4" confidence="possible">consequences. We anticipate that authentic engagement of users’ in a firmware design process is indeed possible given a rich enough toolset of representations and processes, designed to close this reflection gap. Boundary objects are descriptions, props and other physical or abstract items which can sustain collaboration and knowledge sharing between multiple individuals with diverse backgrounds. Unlike many software domains, and many other domains in which codesign workshops are delivered, it is far from obvious what boundary objects ought to be used as part of a firmware codesign process. All representations are not equal. At one cultural and practical extreme we have computer code, which unambiguously determines exactly how the product will behave, but which is inaccessible to the lay people who will use the device. At another extreme, we have softer, more ambiguous resources, such as wishlists provided by users, which describe a state of the world which they would like to achieve, but which require a great deal of design judgement to be exercised to translate a wish into an implementation, assuming it is feasible at all. The emphasis of the work is, therefore, to identify and evaluate representations and practices which offer suitable boundary objects for both programmers and nonprogrammers to exchange knowledge about firmware specifications within a codesign process. The PhD aims to identify existing relevant candidate tools and approaches, as well as considering new directions which can be taken, to satisfy this need. Successful representations would provide a basis for rationalising both real world engineering constraints and domainspecific user intentions and merging them into an unambiguous final design specification. Many candidates are under consideration for experimental deployment within workshops. Formal diagrams adopted from software design management are likely to confuse and exclude users from the design process, and to address these shortcomings we are considering more accessible techniques drawn from other Codesign fields, from Service Blueprinting, Wizard of Oz prototyping, and Narrative techniques, such as comicbook storyboards. To the author’s knowledge no previous work has attempted to engage nonprogrammers in the codesign of firmware. During the PhD, and following on from this review of existing work, a series of firmware design collaboration workshops will be undertaken, based on fullyfunctioning product prototypes. These staged collaboration activies will offer a means of exploring and validating hypotheses, and gathering qualitative evidence regarding candidate boundary objects and practices.</region>
    </front>
    <body class="DoCO:BodyMatter">
      <section class="deo:Introduction">
        <h1 class="DoCO:SectionTitle" id="5" page="5" column="1">Introduction</h1>
        <region class="DoCO:TextChunk" id="6" confidence="possible" page="5" column="1">The PhD will investigate techniques and tools which can effectively engage users in the codesign of behaviour for firmwarecontrolled, or ‘embedded’ devices. The design of behaviours for embedded products seems a trivially simple domain of computer science, with such devices often coordinating very few sensors and actuators, having very little state and handling only rare interactions with low complexity. However the appropriate choice of behaviour for toasters, central heating systems and even bicycle lights is by no means obvious.</region>
        <region class="DoCO:TextChunk" id="8" page="5" column="1">Disappointingly, established firmware design practice doesn’t seem to take account of users’ commonsense perspectives and expectations, even though this compatibility is critical to succeed in the marketplace, and failures to take account of them are embarrassingly obvious. <marker type="block"/> Firmware design issues can be documented in many real world products, shortcomings which are obvious to the users of the products, suggesting that manufacturers need clear, practical guidance and processes to follow in order to avoid such issues.</region>
        <region class="DoCO:TextChunk" id="9" confidence="possible" page="5" column="1">Our focus is the development of workshop approaches which directly involve users, including the identification of preferred representations and processes for collaborative interaction design. To succeed, it will necessary to draw upon theory in many different fields, including pedagogy, ethnography, computer science and management science to inform practice. We expect the work to benefit those working academically within softwarerelated fields, and commercially for those designing behaviours for embedded products. However, the PhD’s primary contribution falls within the specialism of design research. There is the potential to publish in any of these fields, but given the emphasis of techniques from design research, powerful crossdisciplinary arguments will be needed in order to target established journals and conferences in the fields of computer science or management . Disciplinary Orientation Here we summarise the most relevant academic fields and key concepts which resonate with the problem, providing an overview of the sources we expect to draw upon, and where we hope to make a contribution. The remaining sections of the document expand on each key concept as it is presented in the literature, and draw out more detailed observations and relationships with the scope of our research work. To arrive at appropriate collaborative practices to assess for firmware codesign, a number of core concepts from the literature provide a foundation. These are drawn from the disciplines of</region>
        <region class="DoCO:TextChunk" id="10" confidence="possible" page="6" column="1">computing, management and design. Computer Science Within computer science, several established domains explore how nonprogrammers can engage with software design and examine suitable choices of representation to help them. Mainstream software development methodologies propose structured processes for engaging users and undertaking requirements analysis  gathering user input as part of a managed design pipeline.</region>
        <region class="DoCO:TextChunk" id="12" page="6" column="1">Pedagogical techniques for learning programming may also turn out to be highly relevant, as they are designed take account of the conceptual obstacles faced by nonprogrammers confronting the field. However, although users must be equipped to collaborate richly on firmware design problems, we do not need them to write code, so the insights drawn from this practice must be carefully selected, and techniques established for the teaching of future programmers may need to be extensively modified for our purposes. <marker type="block"/> A connected discipline is that of enduser programming, which aims to present programming tools which are so easy to adopt that end users can use them to achieve their purposes with little or no training. Domainspecific languages, designed to express a limited set of possible behaviours, can simplify the task of specifying behaviour compared to using a fullfledged programming language. Visual programming metaphors can also be adopted, which avoid editing code as text altogether, presenting the set of possible behavioural combinations more intuitively. Modeldriven design approaches, provide models which domain experts can manipulate to specify their intent, and which can then be transformed directly into executable target code using a scheme previously prepared by software engineers. Design Research</region>
        <region class="DoCO:TextChunk" id="13" confidence="possible" page="6" column="1">Although many software practices can be described as ‘usercentred’, they can be very distant from participatory design practices, in which users play an active role and contribute to design decisions in the delivery of an artifact. The aspirational term codesign suggests a particularly active form of engagement. The spectrum of user engagement in the design process has recently been a hot topic in design research, and we expect computer science to benefit greatly from more active participation, if the inherent hurdles in engaging users with the substrate of programming can be overcome by suitable tools and techniques. Interestingly, the term ‘participatory design’ itself originated from concerns over the illjudged deployment of computing technologies. Scandinavian experimenters from the 1970’s onwards sought to involve the workforce in influencing how emerging digital tools should be adopted within their employers’ businesses, to accommodate workers’ wishes and concerns over new ways of working. The difficulties anticipated for workers, if information technology were to be specified</region>
        <region class="DoCO:TextChunk" id="14" confidence="possible" page="7" column="1">topdown by management, may be mirrored in users’ experience of firmwarecontrolled products today. Interaction design is a recognised domain within design literature which has many commonalities with firmware engineering, dealing with “with the development and use of interactive products, systems and services” (Biskjaer et al 2010). A set of mature design methods are already in use in this domain, but they are broad in their scope, and largely concern themselves with negotiating the affordances or value equation of a product, through dramatising scenarios of use. By hypothesis in our case, the affordances of the product are already settled, the intended users and the imagined use they will make of the product have all been decided. Our focus is squarely on prescribing the behaviour of that product to best exploit its affordances and to best serve that intended use. In the examples so far encountered, the crafting of detailed behaviour is left to skilled software engineering specialists to establish later in the process, and no techniques are proposed to engage the users themselves in this phase, leaving a clear gap in the literature to be filled by our experimental work. Management and Social Science Operations Research, also known as Management Science is a discipline at  the intersection of design and management (Cross 2001), which aims to establish ways of reasoning and an evidence base to determine how business processes combining both people and information systems should proceed. A broad range of business functions and processes are examined by the field, including those underpinning the development of new products.</region>
        <region class="DoCO:TextChunk" id="15" page="7" column="1">Although Operations Research has a preponderance of formal methods and theories, key contributors have sought to model processes which cannot be stated formally, notably in the subfields of Soft systems methodology (Checkland 2000).</region>
        <region class="DoCO:TextChunk" id="16" confidence="possible" page="7" column="1">The from Organisational Studies, the perspective of communities of practice may be valuable to understand and engage users within the concerns, cultural values and “regime of competence” of programmers, without actually becoming programmers. If users can understand the challenges which practitioners face, they may be able to better telegraph how their preferences for device behaviour project onto those concerns (Wenger 1998). Less formal sociological fields such as Science and Technology Studies, have gathered evidence from practice and proposed theoretical constructs around collaborative working and knowledge transfer between various groups, including groups involved in software design. One very important theoretical construct for our work arising from this field is the notion of “boundary object” (Star and Griesemer 1989), providing a representation, totem or point of conceptual coordination to mediate between groups with different interests and world views.</region>
        <region class="DoCO:TextChunk" id="17" confidence="possible" page="8" column="1">Scope: Screenless Devices and Microinteractions We have adopted deliberate emphasis on the design of screenless interactions (Cox and Hoile 2013) and will be targeting existing product designs, maintaining a relentless focus on software behaviours and interactive sequences to narrow our focus as outlined below.</region>
        <region class="DoCO:TextChunk" id="18" page="8" column="1">However, it is expected that the final results of our work, concerning user engagement in the software design process, would be applicable to firmware design both for screenless and screenbased, established and emerging products.</region>
        <region class="DoCO:TextChunk" id="19" confidence="possible" page="8" column="1">Selecting screenless devices offers one way to eliminate the temptation to engage users merely through manipulating and judging images of the user interface, the “visually evident design object for software” (Holmlid 2005).  A recent survey by Myers et al (2008) found no studies exploring how “the interactive behaviour of the interface is created and communicated” (our italics). We can therefore focus on eliciting users’ contributions to the central interaction design question that “[a]t some point during system development the user interface will be programmed” (Holmlid 2005). Selecting predetermined, stable product designs also permits questions of form, physical interface and affordance choices to be set aside. Additionally, by being able to directly address the needs of manufacturers to improve stable products which are already shipping, we are responding directly to Norman’s exhortation to design researchers... The least interesting innovations to the university and company research community are the small, slow enhancements that gradually lower costs while improving performance. But in fact, not only is this where most product enhancement takes place, but it is also where the research community can add the most value...uncovering the difficulties people have in everyday use, the workarounds and hacks they invent that can suggest product modifications. This allows existing products to be modified at low cost, low risk, while making them ever more attractive, ever more valuable to the customer base. (Norman 2006) Our intention is for participants to design with very high granularity, at a level of detail which Saffer (2013) refers to as “Microinteractions”. He illustrates the term with an example which would fall well within the scope of the products we’re focusing on... "Microinteractions can be part of a product  or even the entire product itself. Take a toaster, for example. A toaster does one thing: toasts. It only has one use case: a user puts item to toast into the toaster and presses start. Toaster toasts. Toast pups up when done. That's it....the whole device is powered by one microinteraction." (Saffer 2013)</region>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="20" page="9" column="1">Firmware Design Failures</h1>
        <region class="DoCO:TextChunk" id="21" confidence="possible" page="9" column="1">Canonical Case: The Cateye Bicycle Light Entrenched design problems within the industry are illustrated well by the design failings we have catalogued of firmware for Cateye’s SL110 Loop Orbit bikelights (Amazon 2013). Cateye is an established manufacturer with long experience in this sector, having shipped its first flashing bicycle light as far back as 1954 (Cateye 2013). Although we accept that online user reviews cannot be considered a reliable quantitative indicator (Hedegaard et al 2013), these customer verbatims provide valuable qualitative data, and tell a rich story of a poor product experience... “the rear light kept on cutting out after about 30 seconds” “they only last for about 1 minute before turning themselves off” “I probably got a duff pair...the rear light...switched itself off after 60 seconds of illumination” (Wiggle 2013) “The back light turns off after 1 minute! I can not obviously use the set when cycling at night as it is unsafe” (Amazon 2013) A bike light which you can’t use at night has surely failed spectacularly to meet its design brief. The interaction designer Saffer (2013) chooses the example of a light to illustrate a users “nontechnical model”, the mental “rules” which condition their engagement with a digital product.... “In a basic light setup there is a single rule: the light stays on and fully lit until the switch is turned off....the basic turn on switch/turn on light rule is very simple, and one that becomes apparent to anyone who uses a light, even a child.” Saffer[] These intuitions are resonant with what Bill DeRouchey (2013) calls the “mechanical era” where users can “follow their actions directly from the control to the output...pull a lever, watch the gears move and finally see the wheels turn.” principles which still apply to many household torches and lightswitches. So, what is wrong with the design of the Cateye bike light? Of course, we are no longer in the mechanical era. The light contains a microcontroller, and its firmware is actively turning off the light after one minute. Some curious users investigated further... “I found instructions on the manufacturer[‘s] website to disable this ‘feature’.” “Be sure to follow the instructions on deactivating the shop demonstration mode or they’ll keep turning off after a few seconds.” (Wiggle 2013)</region>
        <region class="DoCO:TextChunk" id="22" page="9" column="1">And as the ‘Kentsbike’ cycling blog clarifies in their review, this apparent defect is actually a behaviour intended to benefit retailers. Turning off after a minute keeps the batteries charged</region>
        <region class="DoCO:TextChunk" id="23" confidence="possible" page="10" column="1">when on display in a bricksandmortar shop. They offer this advice to online purchasers ... “Deactivate...“Try Me”...mode (by pressing and holding the light until it flashes quickly and shuts off) and then the light will behave normally (where a single press toggles the light between solid, flashing and off). (Kent Petersen 2013) Even the highest rated review on Amazon, which opens with ‘I like this product. It works well...’ develops into a rant... “why should a tiny device with one huge button require extra reading to learn how to use it? I turned it on, tore it out of the package and figured that was that...I thought I had to get another new light!” (Amazon 2013) The Socio-Politics of Firmware Design Failure A rear bike light failing invisibly at night undeniably puts a rider in danger, but who is responsible? There  is a significant sociopolitical dimension to the evaluation of design. The manufacturer and firmware engineer may claim they have delivered to specification, and however counterintuitive, the behaviour is fully specified in the small print of the manual. There are domains which are even less forgiving of firmware design issues.  In “Ignorance of Interaction Programming is Killing People” Thimbleby (2007) describes the fatal consequences from incorrect medication, arising from the counterintuitive behaviour of digital dosage devices, asking “[w]hy aren’t devices made consistent with best clinical practice, so that operator training becomes simpler, rather than the other way around?” concluding that “...manufacturers—and national regulatory processes—can’t be relied on, and hospitals therefore have to train nurses to cope with bad design.” He is blunt in his assessment of industrial firmware design, asserting that “products are designed and then fobbed off to users, with little opportunity for improvements”, and is concerned that serious incidents of design failure are sidelined by a perverse logic in which specification is considered prior to reality. "If a device “operates as designed,” it is often assumed to be designed correctly, even if (to more perceptive eyes) the incident is a symptom of bad design, a “systeminduced user error.” (Thimbleby 2013). These errors may remain unremarked, since “badly designed objects  constructed so as to lead to misunderstanding” make “people feel guilty when they have trouble using [them]” (Norman 2002) leading users to assign the blame to themselves rather than the designer. Nelson (1987) points out that it is easy to fall back on the “supple...human mind” by which “any system of controls can gradually come through use to have a psychological organization, even spuriously.” He warns us not to “lose sight of arbitrariness and even stupidity of design, and live with it when it could be so much better”.</region>
        <region class="DoCO:TextChunk" id="24" confidence="possible" page="11" column="1">The Cateye bikelight is consistent with Norman’s Ushaped curve of complexity within a given technology, in which “[n]ew...devices are complex and difficult to use,...an industry matures, devices become simpler more reliable and more powerful” and finally, product developers “figure out how to add increased power and capability, but always at the expense of added complexity and sometimes decreased reliability”. This is by no means inevitable, in Norman’s view, “the “major cause of complicated, confusing, frustrating systems is not complexity: It is poor design” (Norman 2011) Explaining FIrmware Design Failure Norman illustrates his critique of ‘programmers as designers’ with the example of an expensive Roland digital piano, where the manufacturer invested huge “care and concern...[in] designing the musical quality of the piano”, yet where in “violent contradiction...the design of the “piano controls were an afterthought, with no attention paid to the needs of the customer”, controls which he describes as “perplexing beyond belief”. To save settings, the user must... “1. Hold down the [Split] button, and press the [Chorus] button.  2. Press the [Metronom/Count In] button (buP should appear in the display)  3. Press the [Rec] button” (Norman 2011) ...steps which are “so arbitrary and unnatural that ...the first attempt always fails, even with the manual open in front of [him]”. Norman tries to imagine, within the design process, “what forces were involved to cause such a poor result”, concluding that the “reasons are unfathomable” (Norman 2011). Over a decade ago, Balic et al (2002) raised concerns that the design decisions inherent in a software specification were “rarely made explicit”, meaning the development task can proceed with “no description of how the....product...will create value”, that “design decisions are made without having the product’s qualityinuse” in focus” and that in the worst case “decisions  are made that steers the product's presentation, behaviour and content away from those attributes needed to create business value”. Markensten (2002) reports that both software purchasers and suppliers consider usability issues to be in the other’s remit, and usability is notably omitted from the terms of contract development within commercial procurement processes.</region>
        <region class="DoCO:TextChunk" id="25" page="11" column="1">While trying to understand how such obvious firmware design failures make it to market, Thimbleby draws our attention to a structural issue in the field of digital interaction; since software “designers are selfselected to be computer competent, ...better at using computers than everyone else”, this creates a bizarre asymmetry between the designer and user community. “Who is so good at, say, sitting that they might underestimate how hard everyone else finds using chairs?" (Thimbleby 1995)</region>
        <region class="DoCO:TextChunk" id="26" confidence="possible" page="12" column="1">In this respect, firmware engineers may be suffering from what Pugh (1991) refers to as “misdirected engineering rigour” which “will always give rise to bad total design”. To counteract the problem, he recommends“that design teams should always include nonengineers”. Easy though it sounds, it raises once again the core question, central to the PhD. How should nonsoftwareengineers be invited to engage in the design of firmware?</region>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="27" page="12" column="1">Co-Design Workshops</h1>
        <region class="DoCO:TextChunk" id="28" confidence="possible" page="12" column="1">To address shortcomings within existing industrial firmware development, and arrive at firmware behaviours which satisfy the “aims, requirements and mental models of users” (Steen et al 2011) we propose to pioneer the adoption and experimentation of new workshop practices for firmware codesign; practices which will enable users to make direct design contributions to the programming of device behaviours. In spite of the potential significance of user involvement in the programming interactive devices, tools and techniques serving the case of firmware codesign seem to be absent from the literature. However, preexisting approaches, theoretical constructs and representations will be incorporated into the toolset from neighbouring domains where their transference can be justified or efficacy proven in practice.</region>
        <region class="DoCO:TextChunk" id="31" page="12" column="1">Documenting the strategies, materials and activities that we have selected or conceived, and recording how domain users respond to each tool and tasks in the context of a collaborative firmware design activity, will be a primary contribution of the PhD to the state of the art <marker type="block"/> A codesign approach should be contrasted with the long history of formal and informal usercentred processes adopted within the software engineering community, where “designers develop an understanding of the application domain and infer specific design needs through consultation with stakeholders and other sources” [Jarke et al] capturing these in the form of Software Requirements documents before proceeding into an engineering and testing phase.</region>
        <region class="unknown" id="30" page="12" column="1">Contrast with ‘Software Requirements’ approaches</region>
        <region class="DoCO:TextChunk" id="32" confidence="possible" page="12" column="1">This is described by Fallman (2003) as an anachronistic “conservative account” of design which “assumes that there is a problem to be solved, and that descriptions can be comprehensively and accurately produced”. On this model it seems natural to divide work into “analyzing a problem”, “synthesizing a solution” then “evaluating the outcome” (Fallman 2003). In software engineering practices of this kind, the user is an object of study rather than an active participant in the design process, with designers’ judgement being relied on to ensure fitness for purpose; that the requirements are “of high quality”, “address...the users needs”, “are appropriate for the design effort” and have “no inconsistencies or defects” (Jarke et al 2011).</region>
        <region class="DoCO:TextChunk" id="33" confidence="possible" page="13" column="1">However, key design decisions are in practice deferred to later phases, on the view that “requirements are properly concerned with what is to be achieved by a design artifact, without regard to how it will be designed and implemented” (Jarke et al 2011). The practical upshot of maintaining a logical separation between specification and implementation for software is that “[b]ehaviors often ...remain illdefined until the application is actually implemented” (Myers et al 2008) Formal specifications containing “lexical...syntactic...[or]...discourse ambiguity” (where specifications are conflicting), or “vagueness” (where they are underspecified) (Schneider and Arndt 2013) inevitably impose pressure for the programmer to make design judgements . As Holmlid (2005) observes, “if design decisions have not been made before programming time, these decisions will be made during programming time”. Yet “[p]rogrammers should not be responsible for the computer's interaction with the user; that is not their expertise, nor should it be.” they “usually have no experience, and no expertise in designing for people” (Norman 2002). Even where designers attempt to take detailed interaction questions into consideration at the specification stage, they find that “sketches and storyboards” are “not sufficient for exploring interactive behaviours” and that “[s]pecifying behaviors textually is often inadequate, timeconsuming and sometimes leads to miscommunication and confusion”, meaning they “have to wait until developers have something working before [they] can actually test out how a new behavior ‘feels’“ (Myers et al 2008). Murphy and Hands (2012) describe how design “has changed considerably over the last two decades...with the role of nondesigners in the process becoming increasingly important”, characterising a modern practice where designers "...are...framing the problem and developing solutions with clients and users – and actively involving users throughout the entire process." However, Fallman (2003) asserts that the field of Human Computer Interaction (HCI) “does not recognize itself as a design discipline”, explaining why more progressive approaches from design research have had little influence. The Arquitetura Livre movement present a similar critique, hoping to transcend the “rational design and evalua[tion] program” of HCI  (Amstel et al 2011). Instead of orienting design around textual or visual formal specifications, we are advocating what Fallman (2003) characterises as “second generation” design methods, “such activities as workshops, brainstorm sessions, synectics, checklists, and the use of specific environments to nurture creativity”, supporting workshop participants “to collaborate and to be creative, rather than to systematize and formalize design work”. To satisfy the definition of codesign, we aim for users to actually participate “at the moment of idea generation...[and] throughout the design process at all key moments of decision” (Sanders and Stappers 2008). Here, we are drawing on their definition of “codesign” combining “the creativity of designers, and people not trained in design...together in the design development process”. We aim to fulfil the role of support ”professionals having hybrid design/research skills”</region>
        <region class="DoCO:TextChunk" id="34" confidence="possible" page="14" column="1">(Sanders and Stappers 2008), by specifying and hosting the workshops. To address the issues of ambiguity and underspecification described earlier, workshops must not only offer “a mutual learning process where designers step into the world of use and users learn about the opportunities offered by technology” (Dindler 2010), but also lead to outputs which are sufficiently expressive, exhaustive and constraining to eliminate the need for arbitrary behaviourdesign judgements by programmers during the implementation phase which follows.</region>
        <region class="DoCO:TextChunk" id="35" page="14" column="1">Simonyi et al (2006) underline the difficulties of fusing user and developer perspectives in the creation of software, asserting that  “two kinds of contributions need to be...woven together to form the program...even though they are not at all similar: those of the domain providing the problem statement and those of software engineering providing the implementation.” Using today’s software delivery conventions, this ‘weaving’ is led by “specs, use cases, stories, and sketches”, which “cannot be...transformed into code” (Simonyi et al 2006) .</region>
        <region class="DoCO:TextChunk" id="36" confidence="possible" page="14" column="1">Critical perspectives on software engineering processes described above confirm our intuition that new collaborative tools are needed to permit non programmers to fully explore and express the possibilities of device interactions in ways which allow their design decisions to directly influence code. We acknowledge that establishing appropriate tools and processes is a huge challenge, given the evidence presented that even professional designers and developers have difficulty exploring and communicating the possibilities of a given interaction design problem. To approach the problem of which materials, activities and tools to employ in a firmware codesign workshop we must first identify appropriate theory within the fields of interaction design, design research, organisational theory and psychology which can help us to understand the dynamics of the workshop process. We can then examine and critique existing candidates from parallel fields which may be employed in a workshop, select preferred representations where they are suitable, and conceive alternatives where none are satisfactory.</region>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="37" page="14" column="1">Key Theoretical Background</h1>
        <region class="DoCO:TextChunk" id="38" confidence="possible" page="14" column="1">Sketching and Bricolage To satisfy the commitment that users directly engage in design, we must examine what kinds of activities count as an authentic design activity, by reference to studies of design practice and its theoretical interpretation in the literature. Understanding the designer’s stance also helps us to anticipate the tools, representations and activities which may support nonprogramming users in embarking on design. For some of the domain users we hope to involve, design will be just as alien a practice as that of programming. Our philosophy of design builds on Craft and Cairns (2009) “evidence that...sketching is...central to...activities in...designoriented disciplines...primarily because it supports cognition in ways that</region>
        <region class="DoCO:TextChunk" id="39" confidence="possible" page="15" column="1">lead to creativity”. Fallman (2003) clarifies that design studies references to ‘sketching’ aren’t meant to refer exclusively to pencil and paper practice, but should be understood metaphorically “as...archetypal...of the design approach”, sketching being an example of activity which “helps us grasp design work...as a kind of dialogue”, not as “a useful tool, technique, or skill that is available to designers, but rather as the way in which designers think”.</region>
        <region class="DoCO:TextChunk" id="40" page="15" column="1">This dialogue is what can be described as a “conversation with materials” (Schon 1992). We accept Schon’s analysis of design activity, concluding that our choice of tools and techniques must lead users to activities embodying “reflectioninaction”, enabling participants to see the consequences of their design choices concerning product behaviours, and supporting “reinterpretive cycles of idea generation” (Craft and Cairns 2009).</region>
        <region class="DoCO:TextChunk" id="41" confidence="possible" page="15" column="1">Ozenc et al’s (2010) study found interaction designers literally used sketching, and would “rough out ideas”, then “critique what they have done (reflecting on action) in order to conceive of and refine a new idea.” But attempting to “transfer their design concepts to developers using, static, annotated screens” turned out to be problematic as “the designer has not had enough feedback to know if this is the design they want” (Ozenc et al 2010) Generalising the notion of sketching, therefore, to a broader set of workshop tools, materials and activities than twodimensional drawings, we approach the concept of bricolage. The French word bricolage corresponds to a kind of handyman experimentation and problem solving within the constraints of available materials. Although no suitable direct translation exists, it could be called tinkering in British English, or map to the makeshift designs of gambiarra within the Brazilian Design Livre movement, described by Amstel et al (2011) as an “improvisation of an expedient substitute when other means fail or are not available. In other words, 'making do’.” By making bricolage a central theme of the work, we are drawing upon a rich collection of interlocking concepts inherited from the French anthropologist Levi Strauss (1968) and further developed by design theorists (Louridas 1999)(Turkle and Papert 1991)(Turkle 2007)(Büscher et al 2004), and we accept Louridas’ detailed arguments that “design in all its guises is a form of bricolage”. Strauss used bricolage to describe a technical activity which manifests in direct counterpoint to the practice of the methodical engineer. For the engineer, sourcing and construction can be meticulously planned to a prior grand vision, and time, skill and effort can be invested in preparing the ground, gathering ideal materials and learning whatever new things are necessary to construct and execute a plan. By contrast, the bricoleur’s “universe of instruments is closed, and the rules of his game are always to make do with ‘whatever is at hand’” (Strauss 1968). He works with “elements which...are preconstrained”. This is strongly resonant with the limitations imposed by prepared workshop materials. In common with the general tools and representations we propose, the “instrumental sets” which</region>
        <region class="DoCO:TextChunk" id="42" confidence="possible" page="16" column="1">the bricoleur draws upon is not “defined in terms of a project” but rather represents a set of “actual and possible relations”, or ‘operators’ from which a solution is composed”. In a direct parallel with a design workshop participant, using assets provided by a facilitator, the bricoleur “interrogates all the objects...[in] his treasury...to discover what each of them could ‘signify’”...”engages in a sort of dialogue with [a set of tools and materials] before choosing between them, to index the possible answers which the whole set can offer to his problem.” Idiosyncracy, Ready-To-Hand and Flow The ‘materials’ which workshop participants can meaningfully manipulate in their design activities are not only physical. In a critical observation from Louridas (1999) he draws our attention to the fact that bricolage is also “at the mercy of ...internal [contingencies], in the form of the creator’s idiosyncrasy”, and that “the bricoleur stays within...the constraints, pertaining to a certain state of knowledge, presented to them”. That is to say, activities can only practically draw upon conceptual apparatus which participants brought with them to the workshop, augmented by select knowledge carefully introduced by the facilitator. Although crafted pedagogical activities will be considered, given the time constraints, any significant teaching is infeasible, and we cannot rely upon participants successfully learning new skills under pressure. If there is no way to teach participants to be programmers, we must consider the landscape of alternative representations and behaviours which which participants are already familiar. There are a number of resonant concepts here, drawn from phenomenology and psychology. Participants must see the facilities and materials of the workshop as readytohand (Heidegger 1962). Dreyfus (1991) commentary of Heidegger recasts this notion as “transparency of equipment” where the user of a tool is working with the problem, and the tool they are using is invisible to them, yet acting as a medium for their expression. Readinesstohand corresponds well with the ‘merging of action and awareness’ observed by Csiksentmihalyi (1990) in subjects experiencing ‘flow’, a psychological phenomenon which Chen (2007) summarises as a “feeling of complete and energized focus in an activity, with a high level of enjoyment and fulfillment”, associated with the following eight characteristics... ● A challenging activity requiring skill; ● A merging of action and awareness; ● Clear goals; ● Direct, immediate feedback; ● Concentration on the task at hand; ● A sense of control; ● A loss of selfconsciousness; and ● An altered sense of time.” (Chen 2007)</region>
        <region class="DoCO:TextChunk" id="43" page="17" column="1">Of course, only some of the entries in this diagnostic list can be actively designed for, such as clear goals, whilst others can be monitored for, as they are symptomatic of a user entering a flow state, like an altered sense of time.</region>
        <region class="DoCO:TextChunk" id="44" confidence="possible" page="17" column="1">Immateriality Norman draws attention to some serious issues with mental models of digital control since from a user’s point of view, a “computer works electronically, invisibly, with no sign of the actions it's performing” (Norman 2002). This immateriality presents a huge challenge when selecting appropriate activities and representations for users to adequately explore and specify microcontrollerdriven behaviours, by contrast to other established design domains. It also underpins some fundamental usability issues arising from screenless devices which indicate little or no state to an external observer, as we saw in the case of the Cateye bikelight. One dimension of a program’s immateriality is that behaviour unfolds as a temporal sequence, selecting different pathways based on different input, which therefore cannot be captured by any single momentary experience. Bratteteig (2010) describes “digital materials” occupying “a symbolic space spanned by the activities in which the process takes attention and time” and seeks to explore designs by analogy with other forms of designed “experiential process ....music, theatre, dance or other performances”. He draws our attention to notations which can read and interpreted as structure for processes; “[w]orking with processual material thus implies working with representations of process abstractions, recognizing that the concretization of the process will be formed by the situational circumstances...Composers and musicians hear the music when reading the scores; dancers and choreographers feel the dance when they read the choreography; actors and directors experience the story and the characters when reading the manuscript or storyboard; programmers see the computational process when reading program code” (Bratteteig 2010) Following this line of enquiry, our investigation must identify forms of processual representation which are accessible to nonprogrammers, yet enable them to “see the computational process”, and interpret it in the context of their own use of the device, the sequences that they might experience or trigger. In user interface design workshops Ozenc et al (2010) found that even professional “interaction designers are challenged by the “immaterial” materiality of the digital domain; they lack tools that effectively support a reflecting conversation with the material of software as they attempt to conceive, refine, and communicate their ideas”. They contrast this with longestablished design disciplines, pointing out that while “[b]lueprints have...become embedded in...the practice of architecture...such detailed, conventional artifacts do not yet exist for software development”.</region>
        <region class="DoCO:TextChunk" id="45" confidence="possible" page="18" column="1">Boundary Objects In Nystrom’s (2007) detailed history of the adoption of the blueprint in American mining industry, he lays out a number of distinctive features of the new ‘suncopying’ technology. Blueprints contained the same information as the painstakingly handcopied maps which were previously used, “rendering visible places that could otherwise not be seen”. However, key features of the blueprint also transformed the way the organisation could transfer knowledge and make decisions. Multiple copies could be easily produced and distributed, and they could “make the transition from the safe confines of the office into the hazardous spaces of the production plant” (Nystrom 2007).  Since mine workers could use them for reference, they were able to “precisely convey the engineers’ vision of work to be performed to those who would do the actual labor” (Nystrom 2007). When outside the company offices, blueprints also ”allowed the engineers themselves to bring their visual representations with them to help them with decisionmaking” (Nystrom 2007). Annotations or modifications to the blueprints made by workers could be dispatched back to the office, to be “inscribed on the original...master tracing” and become part of the “information flow of the operation” (Nystrom 2007). Nystrom’s history of the blueprint provides a strong reference case for its role as a ‘boundary object’ (Star and Griesemer 1989, Star 2010, Levina and Vaast 2004, Levina 2005, Barrett and Oburn 2010, Nicolini et al 2011, Broberg et al 2011). A ‘boundary object’ is some which allows “translation among social worlds”. By using boundary objects to broker knowledge between users and firmware engineers, we are using them to negotiate the “central tension” between actors’ “divergent viewpoints” (Star and Greisemer 1989). Effective boundary objects empower participants to not only invest their own perspectives in the object, but also engage with others’ perspectives, “satisfying the information requirements of each of them” (Star and Griesemer 1989). In common with Ozenc et al (2010), we hope to frame the output of workshops as boundary objects, enabling the “developer to become the voice of the software, allowing the conversation with material to also include the transfer of the concept from design to development; making the transfer a cocreative endeavor.” If we are successful, our chosen representations, individually or combined, will fulfil the role occupied by the blueprint in Nystrom’s history, to effectively inform stakeholders of the computational design, offer them the means to reflect and feed back their changes, and also to direct the downstream work.</region>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="46" page="18" column="1">Candidate Representations</h1>
        <region class="DoCO:TextChunk" id="47" confidence="possible" page="18" column="1">In our literature review, we have explored a number of disciplines, including established</region>
        <region class="DoCO:TextChunk" id="48" confidence="possible" page="19" column="1">techniques for software design adopted by professional software developers. Service Blueprinting One significant and active field analogous to firmware design is that of service design, and a ‘service blueprint’ approach has been conceived to address its parallel problems (Shostack 1984). Researchers working with service blueprints have attempted to draw out and clarify the design challenges confronted by the field. As with firmware, the design result is processual, creating fundamental problems for the activity of design; "Service(s) are fluid, dynamic, and frequently coproduced in real time by customers, employees, and technology, often with few static physical properties. Thus, many of the invention protocols and prototype design techniques used for physical goods, hard technologies, and software do not work well for human and interactive services, or at least they demand significant adaptation to address service innovation challenges... [S]ervices are dynamic, unfolding over a period of time through a sequence or constellation of events and steps” (Bitner et al 2008) In common with firmware design, the service industry had adopted development practices which were “usually characterized by trial and error”. Shostack, in her original paper promoting the service blueprint representation, offered a critique of the industry which mirrors our critique of firmware engineering, and offers a similar underlying explanation; “[d]evelopers translate a subjective description of a need into an operational concept that may bear only a remote resemblance to the original idea” and “[no] one systematically quantifies the process or devises tests to ensure that the service is complete, rational, and fulfills the original need objectively”. "There are several reasons for the lack of analytical service systems designs. Services are unusual in that they have impact, but no form. Like light, they can’t be physically stored or possessed and their consumption is often simultaneous with their production." (Shostack 1984) There is also a significant ‘iceberg effect’ in which the contact points between customer and service ‘onstage’ are the most visible aspects, yet a huge proportion of design work needs to go into the ‘backstage’ activities and support processes to handle failure. "Very little ....is visible to customers. In fact, customers have virtually no conception of the processes that underlie most services...Though invisible, these processes are important because changing them may alter the way consumers perceive the service." (Shostack 1984)</region>
        <region class="DoCO:TextChunk" id="49" page="20" column="1">Codesign workshops are also wellknown and wellused in the field, with Sangiorgi and Clark summarising the problem well, and Bitner et al arguing eloquently for the importance of a suitable boundary object to provide a solution for design practice;</region>
        <region class="DoCO:TextChunk" id="50" confidence="possible" page="20" column="1">"Some of the most elusive aspects of designing an intangible service that is coproduced by users and suppliers during a service encounter are to identify the object of design and finding a way to explain that to others." (Sangiorgi and Clark 2004) “What is needed is a means of presenting the activities, relationships, and interdependencies of a service process in an objective and precise manner such that it is methodologically structured, but flexible enough to allow creativity to flow.” (Bitner et al 2008) Bitner et al summarise the service blueprint strategy as follows, demonstrating how experiences for the users are depicted as coupled into hidden, internal processes which can thus be surfaced and discussed; "Customer actions are depicted chronologically across the top of the blueprint...The next critical component is the “onstage/visible contact employee actions,” separated from the customer by the line of interaction...The next significant component of the blueprint is the “backstage/invisible contact employee actions,” separated from the onstage actions by the very important line of visibility. Everything that appears above the line of visibility is seen by the customer, while everything below it is invisible...The fourth critical component of the blueprint is “support processes” separated from contact employees by the internal line of interaction" (Bitner et al 2008) Bitner et al see a direct correspondence between software representations and service representations but, like us, are seeking a more accessible representation than those used by the software community, observing that  “service blueprinting is not as complex or as formal as ...tools such as UML.”, and significantly, that its “graphical representations are easy for all stakeholders involved – customers, managers, frontline employees – to learn, use, and even modify to meet a particular innovation’s requirements” (Bitner et al 2008) Software Representations Formal models to describe software, and canonical visualisations of those models already exist to help manage large teams of programmers.  An example is Unified Modelling Language, or UML, the culmination and integration of many separately developed paradigms for modelling and diagramming software (UML 2013) which maintains a close correspondence with the programming constructs of a modern objectoriented language. As Constantine points out “modern modeling languages” are not intended for use by interaction</region>
        <region class="DoCO:TextChunk" id="51" confidence="possible" page="21" column="1">designers, as they “have been devised with a highly focused concern for representing procedures, information, and software structures....Instead of wellconceived notations and techniques, interaction designers have been given awkward adaptations of models conceived for completely different and largely incompatible purposes.” (Constantine 2009) As can be expected, such models and diagrams are adapted to being interpreted by software specialists, and there are concerns that the complexity prevents them from being used as a boundary object with the key stakeholders we are interested in; the users themselves. Even semiexperts like software purchasers face problems working with UML as a software requirements specification. Grossman et al surveyed adopters of UML, and asked them about its use with clients, eliciting responses like... “[the clients]...refused to sign it off, just too much detail, and they couldn’t make sense of it” ; “UML is ...not ‘readable’ for all stakeholders...the customer [is] asked to sign off something that he isn’t able to comprehend...” (Grossman et al 2005)</region>
        <region class="DoCO:TextChunk" id="52" page="21" column="1">Grossman et al cautiously reported their negative findings, whilst Meyer’s (1997) infamous critique of UML as a fashionable software practice is scathing, describing it as an ”admirable selffeeding machine, devoted from A to Z to the creation of a new market, free  of any of the difficulties associated with the unpleasant business of software development”.</region>
        <region class="DoCO:TextChunk" id="53" confidence="possible" page="21" column="1">Perhaps worse, a majority of those surveyed who work with UML describe it as “insufficiently specified” and that it “allows for misinterpretation” (Grossman et al 2005) suggesting that it may not be easy to employ it as an unambiguous specification of software at all. However, UML does include some compelling visualisations of a software model which show just a subset of the entire software system. These are intended as a means of investigating individual aspects, and may be suitable to sustain discussions with users. Of particular interest are UML state machine, case diagrams, object diagrams, timing or sequence diagrams, and activity diagrams, which collectively aim to capture actors interacting with a system, the state of a system and the system’s interactive behaviours, including internal communication between subsystems (UML 2013). By contrast, the class diagrams and deployment diagrams may contain unnecessary detail about objectoriented implementation and draw upon deep software knowledge. We hope to find appropriate renderings of these diagrams or similar information presentations, such as Flow diagrams or Service Blueprints as discussed below. Software Practices In addition to static models and representations of software designs, it’s worth examining the dynamic processes which are adopted by software design and delivery teams to understand which features can be transferred to firmware codesign workshops, what tasks and physical tokens of these approaches can guide users towards adopting best practice when thinking about software.</region>
        <region class="DoCO:TextChunk" id="54" confidence="possible" page="22" column="1">A collection of methods under the heading of Agile Programming and Extreme Programming are recognised within academia and industry to provide a means of continually evolving a prototype in the context of user needs (Paetsch et al 2003). Holmlid (2005) maintains that techniques with a “focus on construction quality” such as “verification driven development, integration driven development, and feature based development” means that they fail to incorporate any “design management aspects”. Nevertheless, the practice of Testdriven development (TDD) offers an intriguing possibility for our codesign process. In TDD, “the programmer writes...tests prior to the code under test” (Janzen and Saiedian 2005). In common with the techniques critiqued by Holmlid, It is an approach which provides a foundation for regression testing, (where errors introduced into code can be detected by automating checks of the code’s behaviour). However, Hendrickson (2008) emphasises that TDD is more about setting concrete, detailed expectations in advance, and allowing those expectations of code behavior to guide the implementation. It is rather a programming technique than a testing technique; “For every tiny bit of functionality in the production code, you first develop a test that specifies and validates what the code will do. You then produce exactly as much code as will enable that test to pass” (Janzen and Saiedian 2005) Our interest in the technique is based on the intuition that tests are easier to specify than the code needed to satisfy the test, that tests could correspond with a preferred user experience and that tests expressed in this way could be preserved through the production pipeline and used as an ongoing validation of user specifications. During the development process, any rejection of userauthored tests would be a visible and clear departure from user’s preferences which would demand justification, with the preferred option being to preserve the spirit of the test in a new test which is satisfied by the implementation. An interesting counterpoint to the TDD model is that of Programmable User Models (PUM) (Young et al 1989). These provide a designer with a means of detailing how a user is expected to progress through a task, for example the navigation of menus, becoming aware of alerts or similar cognitive activities when interacting with a computational system. A PUM provides an artefact for discussion of the cognitive constraints under which users operate. For example knowing that a user won’t remember that they placed a device in a special configuration mode days afterward suggests a device should be programmed to exit the configuration mode automatically within a reasonable timeframe. Making that cognitive constraint explicit in the model you maintain of the user  e.g. users forget device state after one hour, is a means of initiating a discussion about preferred behaviour as well as validating the final design decision, since if you contradict that expectation your design would lead to a failure of your ‘user program’.</region>
        <region class="DoCO:TextChunk" id="55" confidence="possible" page="23" column="1">Wizard of Oz Although it is enticing to consider whether TDD or PUM can be transferred into codesign workshopping to provide a formal foundation for thinking about device or user behaviours, it is worth examining more flexible, openended and informal techniques which don’t begin with the formalities of code or modelling. A promising technique for nonprogrammers to specify their intended behaviours in the context of a specific prototype and use context is the use of wizard of oz (WOZ) prototyping (Gould et al 1983)(Bernsen et al 1994)(Dow et al 2005), a practice inspired by the Wizard of Oz film, in which the character of the wizard turns out to be a man hiding behind a curtain, manipulating dramatic effects from a console. In the WOZ approach, a computational system is acted out by a human, rather than implemented in software. It has a number of positive aspects as a workshop activity, beginning with the fun of encouraging participants to climb inside a box and act robotically, and cemented by the dawning of significant and relevant dimensions of the interaction design problem which participants should hopefully perceive by pursuing the exercise. By avoiding upfront software engineering, WOZ prototyping “helps designers avoid getting locked into a particular design or from working under an incorrect set of assumptions about the users’ preferred mode of interaction, because it enables design exploration and evaluation” and allows “evaluating partially complete systems” (Dow et al 2005) Bernsen et al (1994) claim that a “series of WOZ iterations has the potential to deliver a more or less complete specification of the system's input/output behaviour which can then be safely implemented”. If they are right, and users are able to engage with WOZ prototyping, this responds directly with our problem statement. However, we have some concerns that their perspective is overoptimistic. WOZ bypasses the need to express behaviours as code, but this has both advantages and disadvantages. In the short term, it means there is little friction or delay between conceiving an idea and representing it to others in a workshop, but in the long term the potential lack of precision, and the potential for behaviours which are actually impossible for a computer to enact, could lead to issues during implementation unless these issues are caught early and eliminated. These concerns suggests a hybrid approach could be adopted, in which the participants freedom to explore behaviours is conditioned by a demand to formalise their description, explicitly specify and then follow their own rules while simulating their preferred behaviours. Insightful developers acting as users can potentially “game” the rules as they are disclosed by the wizard, revealing concerns and contradictions which they fear would arise in the real world, and challenging users and working with them to arrive at selfconsistent procedures which can</region>
        <region class="DoCO:TextChunk" id="56" confidence="possible" page="24" column="1">deliver a high quality interaction. However, Bersen et al caution that WOZ is most appropriate for “interactive system behaviour....which humans are good at performing”. Canonical examples in the literature include interpreting and acting on natural language commands (Gould et al 1983), which are a weak point for computers, but a strength for human beings.  However, by contrast, in our case we are asking our participants to embody the logic of a microcontroller, precisely executing scheduled and event driven rules, conditioned by accompanying stored state. Arguably, this represents a human’s weakest suit, although it is trivial for computers to perform. This suggests that explicit and accessible authoring and representation of rules, supported by visual aids, will be fundamental for participants to accurately envision the consequences of their design choices. Mock-ups Connected to the WOZ approach, are the use of mockups, such as lowfidelity prototypes, (Rettig 1994)(Horst 2011)(Saffer 2013). The use of physical references, like mockups, is by no means new to design thinking, with Zimmerman et al’s (2006) “research through design” advocating the use of “artifacts intended to be carefully crafted questions”. They describe a process of “ideating, iterating, and critiquing potential solutions” by generating “a series of artifacts  prototypes, products and documentation of the design process” which capture a “concrete problem framing and articulation of the preferred state”. Constantine (2009) reports similar practices by user interface designers, who use  “paper prototypes, mockups, or other more or less realistic sketches or drawings of actual user interfaces” and Rettig (1994) argues that where “a fully functional prototype can take weeks to create”, “paper prototypes...[are]...a wonderfully simple and effective tool” which “brings results early in development (when it is relatively cheap to make changes), and allows a team to try far more ideas”.</region>
        <region class="DoCO:TextChunk" id="57" page="24" column="1">We are deliberately deemphasising graphical user interfaces, but nevertheless, minimal presentations of the end product can be shared with users to help them visualise and act out behaviours. Visible, physical materials perform the role of both defining a clear activity for participants, as well as turning “expertise from tacit knowledge to the more explicit and easily transferable form” (von Hippel and Katz, 2002).</region>
        <region class="DoCO:TextChunk" id="58" confidence="possible" page="24" column="1">These materials combined with authentic tasks of behaviour design, may offer a foundation for constructivist learning to teach software concepts, (Nwana 1997) (Boyle, 2000) (Denis and Hubert 2001) (Cey, 2001) (Camarata et al 2003) (Lister and Leaney 2003), (Barak 2005), an approach which emphasises the learner’s exploratory, active synthesis of knowledge.</region>
        <region class="DoCO:TextChunk" id="59" confidence="possible" page="25" column="1">Narrative Techniques Madsen and Aiken remind us that both theory and evidence shows that “successful interface development efforts” require “development approaches permitting realistic conditions for prototype evaluation” (Madsen and Aiken 1993). For many devices, satisfying the requirement of realistic deployment conditions is likely to be difficult within a workshop setting. Because of the choice of workshop participants, we have the benefit of users representing themselves as ‘expert of their experiences’ (Visser et al 2005) and bringing intimate domain knowledge of the field. However, for users to fulfil this role effectively they must be offered “appropriate tools for expressing themselves” (Sanders and Stappers 2008). We have particular concerns from Williams and Alspaugh’s (2008) caution that "[m]issing requirements are particularly difficult to identify and address” since “people are better at identifying errors of commission (“that behavior of the system is wrong”) than errors of omission (“the system should do this but doesn’t”)." Following Dindler (2010), we must reflect on how to create a “fictional space” for “participants practicing games of makebelieve mediated by props”. Added to the physicality of mockups and the dynamics of wizard of oz performances, we must consider how to design the workshop to provide a context and a stimulus for stories. A great deal more effort is needed to ensure that this dimension of workshop design is adequately explored. In our initial workshops, narratives might be presented directly through "storyboard prototyping....to evoke comments and criticisms” (Madsen and Aiken 1993), presented in a comic book style (Williams and Alspaugh 2008), stimulated through issue cards (Sangiorgi and Clark 2004), or draw upon Gaver et al’s (2003) explorations of deliberate ambiguity, effectively using synectic techniques (Arvola and Artman 2007) to stimulate users to bring forth challenges for the device’s behaviour design.</region>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="60" page="25" column="1">Next Steps</h1>
        <region class="DoCO:TextChunk" id="61" confidence="possible" page="25" column="1">Following our exploration of the disciplinary foundations and theoretical underpinnings of our workshop practice, we need to move towards concrete implementations of candidate products, and active engagement with target user groups, as well as comprehensively exploring and resolving methodological concerns for the validity of this form of research. From a methodological point of view, we face the classic problem outlined by Markus and Robey (1998) to “produce research that is both academically rigorous and relevant to practice”. For guidance on the measures of rigor and forms of reporting which are appropriate for our</region>
        <region class="DoCO:TextChunk" id="62" confidence="possible" page="26" column="1">case, we aim to draw upon Constantinides et al (2012) Matthiassen et al (2012) and Fallman and Stolterman (Fallman 2008)(Fallman and Stolterman 2010), who attempt to provide criteria and norms for rigor within the fields of information systems, action research and interaction design, respectively. We find ourselves at the centre of Fallman’s triangle of interaction design research, which plots design research activities between three poles; “design practice,” “design studies,” and “design exploration.”, where “design practice...[is]...concerned with what is real....design studies with what is true [and] design exploration...seeks to show what is possible; to show an alternative future; and to transcend current paradigms”. Fallman offers the graphic image, that, once we are explicit about the trajectory we intend to take between these poles, the model can tell us “what goggles [we] should be wearing and when.” (Fallman 2008). Data gathering and encoding approaches will need to be selected, with that of Suwa et al (2006) and openended coding schemes such as Brown et al (2012) and the Grounded Theory approaches of Strauss and Corbin (1990) being particularly relevant cases. When metholological stance, protocols of information gathering, processing and presentation are sufficiently wellformed, we hope to draw upon the Scandinavian workshop design tradition from Ehn (1988) onwards, to take in the orbit of the work of Myers et al (2008), Sangiorgi and Clark (2004), Murphy and Hands (2012), Suchman (1998), Broberg et al (2011), Eriksen (2012), Brandt (2006), Sanders and Stappers (2008), Fischer and Giaccardi (2006), Dindler (2010), Moll et al (2007), Hansen and Dalsgaard (2012), Steen et al (2011). These general insights into codesign workshops are to be combined with insights from interaction design researchers, the characteristic problems of the field and preferred representations for exploring them, for example those proposed by Dix (1991), Thimbleby (2010) and Saffer (2013) to lead to concrete designs for workshop materials and processes.</region>
      </section>
      <section class="deo:Conclusion">
        <h1 class="DoCO:SectionTitle" id="63" page="26" column="1">Conclusion</h1>
        <region class="DoCO:TextChunk" id="64" confidence="possible" page="26" column="1">In the arena of firmware design, where users are engaged at all, they are “used merely as informants...[while] the creativity of the users, and their potential to challenge the assumptions and design ideas, stays untapped” (Moll et al 2007). We hope to address this shortcoming by helping users become bricoleurs of firmware, able to manipulate and experiment with the building blocks of processual definitions to shape their own interactive experience. Strauss (1968) suggests that “the engineer questions the universe, while the ‘bricoleur’ addresses himself to a collection of oddments....a subset.” This leads to a powerful formulation</region>
        <region class="DoCO:TextChunk" id="65" page="27" column="1">of the central research question of the PhD. What subset of elements should be shared and socialised with workshop participants, so they can improvise and think with those materials to both comprehensively understand and strictly determine product behaviours.</region>
        <region class="DoCO:TextChunk" id="66" confidence="possible" page="27" column="1">By finely crafting the workshop experience we hope that teams combining both users and developers can engage in “a creative process of ideation (sketching) and iteration (prototyping)...to find harmonious intersections between what is possible, acceptable, needed, and desired” (Ozenc et al 2010) and ensure that those insights and inspirations complete their journey from workshop to market.</region>
      </section>
      <section class="DoCO:Bibliography">
        <h1 class="DoCO:SectionTitle" id="67" page="28" column="1">References</h1>
        <ref-list class="DoCO:BiblioGraphicReferenceList">
          <ref class="deo:BibliographicReference" id="69" page="28" column="1"> Amazon, 2013. Cateye Commuter Bike Lights Set. Available at: <ext-link ext-link-type="uri" href="http://tinyurl.com/nh6y7hh." id="68">http://tinyurl.com/nh6y7hh.</ext-link> Amstel, F., Vassão, C. &amp; Ferraz, G., 2011. Design Livre: Cannibalistic Interaction Design. In 3rd International Forum</ref>
          <ref rid="R1" class="deo:BibliographicReference" id="71" page="28" column="1">on Design as a Process, Turin, Italy. pp. 442–456. Arvola, M. &amp; Artman, H., 2007. Enactments in interaction design: How designers make sketches behave. Artifact. Balic, M. et al., 2002. From Business to Buttons. , pp.1–9. Barak, M., 2005. From order to disorder: the role of computerbased electronics projects on fostering of higherorder cognitive skills. Computers &amp; Education, 45(2), pp.231–243. Barrett, M. &amp; Oborn, E., 2010. Boundary object use in crosscultural software development teams. Human Relations, 63(8), pp.1199–1221. Bernsen, N.O., Dybkjær, H. &amp; Dybkjær, L., 1994. Wizard of Oz Prototyping: When and How. , pp.1–13. Biskjaer, M.M., Dalsgaard, P. &amp; Halskov, K., Creativity methods in interaction design. , pp.1–11. Bitner, M.J., Ostrom, A.L. &amp; Morgan, F.N., 2008. Service Blueprinting: A Practical Technique for Service Innovation. California Management Review, 50(3), pp.66–94. Boyle, T., 2000. Constructivism: A suitable pedagogy for information and computing sciences. Proceedings of 1st Annual Conference of the LTSN Centre for Information and Computer Sciences, pp.2–5. Brandt, E., 2006. Designing exploratory design games: a framework for participation in Participatory Design? Participatory design: Expanding boundaries in design, pp.57–66. Broberg, O., Andersen, V. &amp; Seim, R., 2011. Participatory ergonomics in design processes: the role of boundary objects. Applied ergonomics, 42(3), pp.464–72. Brown, J.M., Lindgaard, G. &amp; Biddle, R., 2012. Joint implicit alignment work of interaction designers and software developers. Proceedings of the 7th Nordic Conference on HumanComputer Interaction Making Sense Through Design  NordiCHI  ’12, p.693. Büscher, M. et al., 2004. Ways of grounding imagination. Proceedings of the eighth conference on Participatory design Artful integration: interweaving media, materials and practices  PDC 04, 1, p.193. Camarata, K., Gross, M. &amp; Do, E., 2003. A physical computing studio: Exploring computational artifacts and environments. International Journal of Architectural Computing, 0(0), pp.169–190. Carlile, P.R., 2002. Transferring , Translating and Transforming : An Integrative Framework for Managing Knowledge across Boundaries Transferring , Translating and Transforming : An Integrative Framework for Managing Knowledge across Boundaries. Knowledge Creation Diffusion Utilization, 7782. Cateye, 2013. Company Website. Available at: <ext-link ext-link-type="uri" href="http://www.cateye.com" id="70">http://www.cateye.com</ext-link>. Checkland, P., 2000. Soft systems methodology: a thirty year retrospective. Systems Research and Behavioral</ref>
          <ref rid="R2" class="deo:BibliographicReference" id="72" confidence="possible" page="28" column="1">Science, 58, pp.11–58. Cey, T., 2001. Moving towards Constructivist Classrooms. Chen, J., 2007. Flow in games (and everything else). Communications of the ACM, 50(4), p.31. Constantine, L., 2009. Interaction design and modeldriven development. Model Driven Engineering Languages and Systems. Constantinides, P., Chiasson, M. &amp; Introna, L., 2012. The ends of Information Systems research: A pragmatic framework. MIS Quarterly, 35(X), pp.1–20. Cox, J. &amp; Hoile, C., Prototyping Screenless Media Experiences. In Proceedings of BCS HCI Conference (Internet of Things workshop). pp. 2–3. Cross, N., 2001. Designerly ways of knowing: design discipline versus design science. Design issues, 17(3), pp.49–55. Czikszentmihalyi, M., 1990. Flow: The psychology of optimal experience. Praha: Lidové Noviny. Denis, B. &amp; Hubert, S., 2001. Collaborative learning in an educational robotics environment. Computers in Human Behavior, 17(56), pp.465–480. Dindler, C., 2010. The construction of fictional space in participatory design practice. CoDesign, 6(3), pp.167–182. Dix, A., 1991. Formal methods for interactive systems, Academic Press.</ref>
          <ref class="deo:BibliographicReference" id="73" page="28" column="1">Dow, S., MacIntyre, B. &amp; Lee, J., 2005. Wizard of Oz support throughout an iterative design process. Pervasive ....</ref>
          <ref class="deo:BibliographicReference" id="74" page="29" column="1">Dreyfus, H., 1991. Beingintheworld: A commentary on Heidegger’s Being and Time., Cambridge, MA: MIT Press. Eriksen, M.A., Design materials designed for and by Codesigners. Malmö University. Fallman, D., 2003. Designoriented humancomputer interaction. In Proceedings of the SIGCHI conference on Human factors in computing systems. ACM, pp. 225–232. Fischer, G. &amp; Giaccardi, E., 2006. Metadesign: A framework for the future of enduser development. End user development, pp.1–26. Gould, J.D. et al., 1983. Composing Letters with a Simulated Listening Typewriter. , (April). Grossman, M., Aronson, J.E. &amp; McCarthy, R. V., 2005. Does UML make the grade? Insights from the software development community. Information and Software Technology, 47(6), pp.383–397. Hedegaard, S. &amp; Simonsen, J.G., 2013. Extracting usability and user experience information from online user reviews. Proceedings of the SIGCHI Conference on Human Factors in Computing Systems  CHI  ’13, p.2089. Heidegger, M., 1962. Being and time 7th ed. translated by J. MacQuarrie, ed., London: SCM Press. Hendrickson, E., 2008. Driving Development with Tests : ATDD and TDD An updated version of the materials submitted for my. , pp.1–9. Von Hippel, E. &amp; Katz, R., 2002. Shifting Innovation to Users via Toolkits. Management Science, 48(7), pp.821–833. Holmlid, S., 2005. Interaction design and design management : Challenges for industrial interaction design in software. , pp.1–9. Horst, W., 2011. Designing prototypes for collaborative product development. University of Southern Denmark. Janzen, D. &amp; Saiedian, H., 2005. Testdriven development concepts, taxonomy, and future direction. Computer, (September), pp.43–50. Jarke, M. et al., 2011. The brave new world of design requirements. Information Systems, 36(7), pp.992–1008. Landauer, T.K. &amp; Thimbleby, H., 1995. The Trouble with Computers : Usefulness , Usability , and Productivity Reviewed by. , pp.267–270. Levina, N., 2005. Collaborating on Multiparty Information Systems Development Projects: A Collective ReflectioninAction View. Information Systems Research, 16(2), pp.109–130. Levina, N. &amp; Vaast, E., 2004. The Emergence of Boundary Spanning Competence in Practice: Implications for Information Systems’ Implementation Use. NYU Working Paper No. 2451/14121. LéviStrauss, C., 1968. The savage mind. Lister, R. &amp; Leaney, J., 2003. Bad theory versus bad teachers: Toward a pragmatic synthesis of constructivism and objectivism. International Conference of the Higher Educational Research and Development Society of Australasia. Louridas, P., 1999. Design as bricolage: anthropology meets design thinking. Design Studies, 20(6), pp.517–535. Madsen, K.H. &amp; Aiken, P.H., 1993. Experiences Using Cooperative Interactive Storyboard Prototyping. Communications of the ACM, 36(4), pp.57–64. Markensten, E., 2002. Procuring Usable Systems  An Analysis of a Commercial Procurement Project. Mathiassen, L., Chiasson, M. &amp; Germonprez, M., 2012. Style Composition in Action Research Publication. MIS Quarterly, 36(2), pp.347–363. McDaniel, R. et al., 2009. Cardboard semiotics: reconfigurable symbols as a means for narrative prototyping in game design. Symposium on Video Games, 1(212), pp.87–93. Meyer, B., 1997. UML : The Positive Spin To : Professor Severa Stern. Moll, J., Müller, D. &amp; Pedersen, M., 2007. If Users Could Speak, Would We Understand Them? Design Games &amp; Genuine User Participation. Proceedings of SIDeR, pp.0–3. Murphy, E. &amp; Hands, D., 2012. Wisdom of the crowd: how participatory design has evolved design briefing. Swedish Design Research Journal. Myers, B. et al., 2008. How designers design and program interactive behaviors. 2008 IEEE Symposium on Visual Languages and HumanCentric Computing, pp.177–184. Nelson, T., 1987. Computer lib: Dream machines, Norman, D., 2011. Living with complexity, Norman, D., 2002. The Design of Everyday Things, Basic Books. Norman, D.A., 2006. Technology First , Needs Last : The ResearchProduct Gulf. , pp.38–42.</ref>
          <ref class="deo:BibliographicReference" id="80" page="29" column="1">Nwana, H.S., 1997. The computer science education crisis: fact or illusion? Interacting with Computers, 9(1), <marker type="page" number="30"/><marker type="block"/> pp.27–45. Nystrom, E.C., 2007. Learning to see: visual tools in American mining engineering, 18601920. Johns Hopkins University. Ozenc, F.K. et al., 2010. How to support designers in getting hold of the immaterial material of software. Proceedings of the 28th international conference on Human factors in computing systems  CHI  ’10, p.2513. Paetsch, F., Eberlein, a. &amp; Maurer, F., 2003. Requirements engineering and agile software development. WET ICE 2003. Proceedings. Twelfth IEEE International Workshops on Enabling Technologies: Infrastructure for Collaborative Enterprises, 2003., pp.308–313. Petersen, K., Cateye Loop &amp; Orbit Bike Lights. <ext-link ext-link-type="uri" href="http://kentsbike.blogspot.co.uk/2011/03/cateyelooporbitbikelights.html" id="76">http://kentsbike.blogspot.co.uk/2011/03/cateyelooporbitbikelights.html</ext-link> Rettig, M., 1994. Prototyping for tiny fingers. Communications of the ACM, pp.21–27. Robey, D. &amp; Markus, M., 1998. Beyond rigor and relevance: producing consumable research about information systems. Information Resources Management Journal. Rouchey, B. De, The History of the Button. Available at: <ext-link ext-link-type="uri" href="http://www.youtube.com/watch?v=difWSvsrMyA" id="77">http://www.youtube.com/watch?v=difWSvsrMyA</ext-link> Saffer, D., 2013. Microinteractions, O’Reilly Media. Sanders, E.B.N. &amp; Stappers, P.J., 2008. Cocreation and the new landscapes of design. CoDesign, 4(1), pp.5–18. Sangiorgi, D. &amp; Clark, B., 2004. Toward a participatory design approach to service design. PDC, pp.148–151. Schneider, L. &amp; Arndt, S., Reducing NaturalLanguage Ambiguities in Requirements Engineering. , pp.38–40. Schön, D., 1992. Designing as reflective conversation with the materials of a design situation. KnowledgeBased Systems. Shostack, G., 1984. Designing services that deliver. Harvard business review, (84115). Simonyi, C. &amp; Clifford, S., 2006. Intentional Software. , (Figure 1). Star, S.L. &amp; Griesemer, J.R., 1989. Institutional Ecology, “Translations” and Boundary Objects: Amateurs and Professionals in Berkeley’s Museum of Vertebrate Zoology, 190739. Social Studies of Science, 19(3), pp.387–420. Steen, M., Manschot, M. &amp; Koning, N. De, 2011. Benefits of Codesign in Service Design Projects. , 5(2), pp.53–60. Strauss, A. and Corbin, J (1990) Basics of Qualitative Research: Grounded Theory Procedures and Techniques Susman, G.I., Evered, R.D. &amp; Susman, G., 2012. An Assessment of the Scientific Merits of Action Research. , 23(4), pp.582–603. Suwa, M. et al., 2006. Macroscopic analysis of design processes based on a scheme for coding designers’ cognitive actions. , pp.8–10. Thimbleby, H., 2007. Ignorance of Interaction Programming Is Killing People. , pp.52–57. Thimbleby, H., 2010. Press on, MIT press Cambridge, MA. Turkle, S., 2007. Introduction: The things that matter. Evocative objects: things we think with. Turkle, S. &amp; Papert, S., 1991. Epistemological pluralism and the revaluation of the concrete. Constructionism. UML 2013. Unified Modelling Language, Object Management Group. Available at: <ext-link ext-link-type="uri" href="http://www.uml.org" id="78">http://www.uml.org</ext-link>. Wenger, E., 1998. Communities of practice and social learning systems : the career of a concept A social systems view on learning : communities of practice as social learning systems. , pp.1–16. Wiggle, Cateye SL110 Loop Front and Rear Light set (review page). <ext-link ext-link-type="uri" href="http://www.wiggle.co.uk/cateyesl110loopfrontandrearlightset/" id="79">http://www.wiggle.co.uk/cateyesl110loopfrontandrearlightset/</ext-link> Williams, A.M. &amp; Alspaugh, T. a., 2008. Articulating Software Requirements Comic Book Style. 2008 Third International Workshop on Multimedia and Enjoyable Requirements Engineering  Beyond Mere Descriptions and with More Fun and Games, pp.4–8. Young, R.M., Green, T.R.G. &amp; Simon, T., 1989. Programmable user models for predictive evaluation of interface designs. ACM SIGCHI Bulletin, 20(SI), pp.15–19. Zimmerman, J., Forlizzi, J. &amp; Evenson, S., 2006. Research through design as a method for interaction design</ref>
          <ref class="deo:BibliographicReference" id="81" confidence="possible" page="30" column="1">research in HCI. HumanComputer Interaction, pp.1–10.</ref>
        </ref-list>
      </section>
    </body>
  </article>
</pdfx>
