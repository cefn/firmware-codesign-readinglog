<?xml version='1.0' encoding='UTF-8'?>
<pdfx xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://pdfx.cs.man.ac.uk/static/article-schema.xsd">
  <meta>
    <job>2d96eccfc194b236012891584995ef9ca12afe84aa79784e3eacac4c7d331c4b</job>
    <base_name>62q4</base_name>
    <doi confidence="possible">http://dx.doi.org/10.1007/978-3-540-92698-6_31</doi>
    <warning>Original PDF was found to be an image-based/possible OCR document. Output quality may be degraded.</warning>
  </meta>
  <article>
    <front class="DoCO:FrontMatter">
      <outsider class="DoCO:TextBox" type="outsider" id="1">Book Reviews</outsider>
      <region class="DoCO:TextChunk" id="2" confidence="possible">The Trouble with Computers: Usefulness, Usability, and Productivity Thomas K. Landauer (University of Colorado) Cambridge, MA: The MIT Press, 1995, xiii+423 pp; hardbound, ISBN 0-262-12186-7, $27.50</region>
      <contrib-group class="DoCO:ListOfAuthors">
        <contrib contrib-type="author">
          <name id="3">Reviewed by Harold Thimbleby Middlesex University</name>
        </contrib>
      </contrib-group>
    </front>
    <body class="DoCO:BodyMatter">
      <region class="DoCO:TextChunk" id="14" page="1" column="1">The first computer was developed by Charles Babbage. It cost more than a locomotive and did not work properly. Even though everyone tells us that computers are now "more powerful," the basic story does not seem to have changed. Computer projects are still costly and ineffective. Over the last few decades, industry has invested heavily in computers, yet has shown flat, if not decreasing, productivity. Spreadsheets, inven- tory control, management information systems--weren't they designed specifically for industrial productivity? You use computers. Are your programs as effective as you wished? Has your research productivity gone up even when you take account of the time it takes to get the programs working, and when you take into account the lost data when you hit 'OK' by mistake? And would you like to know how to make your use of computers more effective? When a paper is published in Computational Linguistics that relies on a computer, do you believe it? If you think the authors have got a point, which you would like to test, extend, or develop, can you do so easily by working with the same programs as the original authors did? I have written to authors of papers (in other journals) and asked if they could allow me to use their programs; I've often had replies that are tantamount to admitting the programs do not exist in quite the way they were written up in the published papers. Further, if you can get hold of and use the original programs, do you have ways to check that they are valid? To what extent, then, do computers contribute to the actual progress of computational linguistics rather than to its imagined progress? If the so-called performance enhancements that computers have achieved in the last decade had been achieved in almost any other technology, such as land transport, then the world would certainly have been transformed beyond recognition. Yet computers have done no such thing. We may be bombarded with facts about how fast they are, but they do not seem to get any more work done for us. Every year they will get faster, as they have been doing since they were invented. Every year people will buy more of them. Yet somehow the world will not become a better place (except perhaps for the consultants and trainers). Landauer's discussion in the first part of his book, and his analysis of all sides of the arguments--for and against--is one of the most thorough and well written that I have seen. He has certainly given me more ammunition for the battle of getting computers to be used thoughtfully. Elsewhere there is remarkably little computer- critical thought around. Take the Scientific American, which, as Landauer says, goes all wild-eyed when dreaming about the future o f computers in a way that it would not with medicine or any other subject. Somehow the fantasies of the computerphiles, <marker type="page" number="2"/><marker type="block"/> of utopia-just-around-the-corner (when computers become just a bit faster, or just a bit smaller), infect even a usually rigorous, scientific journal. Computers are hard to use effectively, and the main reason is that they allow people to make gross errors that are hard to fix. A whole day's work can be zapped with a misplaced mouse click. There are few other aids to modern life that are so perverse! A more quantified way of showing the scope for low productivity is the following comparison: If you ask twenty expert typists to type a letter, the slowest takes about 30% longer than the fastest. Put a group of twenty word-processing typists onto word processors, and the slowest takes six times as long as the fastest. In programming, the comparisons are extreme: the slowest programmer (from a sample of twenty) takes fifty times longer than the fastest. In other areas of human effort, say athletics, ratios of performance across the same-sized groups of twenty subjects is about two. Apart from anything else, the data suggest that if you select computer users at random, productivity will be much worse than optimal. Similar cynical thoughts have been expressed elsewhere: Clifford Stoll's Silicon Snake Oil (1995), which is technological, and Stephen Talbott's The Future Does Not Compute (1995), which is oddball and nonscientific (and hence argues some unfamiliar points). Where Thomas Landauer shines through is, first, his discussion is more bal- anced and academically sound, backed by empirical data and evaluation; second, he tries to explain why; and, last, he promotes a recipe to solve the trouble. Landauer's explanation is disappointing---especially after the careful fairness of his arguments, after his recruitment of a wide-ranging literature--but close enough to the truth: he says we love computers, so we use them even if they are not strictly economically sound investments. I think there is more to it than that. Computers are fashion accessories, and there is more to be said about exploitation by subtle marketing: but if it boils down to love (and greed), which are hardly scientific or technical concepts, how are we to plan and progress? Landauer's recipe for improving system performance is the most important part of his book. He has persuaded us that computers are a mess, and he has done so carefully in a way that would persuade the most unrepentant technophiles. He has tried to explain why we put up with computers. Now the rest of the book turns to ways of avoiding low productivity and disasters. It is well known that designers often design for themselves unless they have been trained to realize that people are diverse, and that users are unlikely to be like them. In computing, the design problem is exacerbated because designers, who are self- selected to be computer competent, are typically many times better at using computers than everyone else. In contrast, in any other common area of design--say, designing chairs--the designers would be unlikely to have such special and distinctive skills that marked them out as so different from everyone else. Who is so good at, say, sitting that they might underestimate how hard everyone else finds using chairs? But what is ridiculous in chairs is commonplace in computing. It is likely that researchers in computational linguistics, to take just one speciality allied to computing, are not only better at these subjects than most other people but are very much better. So to the extent that we build programs for others to use even to advance our research--we are probably not getting the best out of them because the users are so different from<marker type="block"/> User-centered design is Landauer's way of improving productivity. As a general- purpose acronym, UCD, Landauer means user-centered design, user-centered devel- opment, and user-centered deployment. UCD is a way of solving human problems, rather than concentrating too exclusively on technical problems--which the first half<marker type="page" number="3"/><marker type="block"/> of the book has shown to be surprisingly counter-productive. UCD concentrates on getting empirical data on how systems help (or hinder) people working with computers. He shows that the cost-benefit of UCD is very impressive: it is cheap and it is effective. The Trouble with Computers finishes with a personal view of "fantasy business systems," future systems designed, developed, and deployed in this way. By his own admission, fantasizing is not enough, when you've just persuaded your readers to collect empirical data! I did not find the examples impressive. In fact, they made it more obvious that Landauer has forgotten theory. The reason w h y it is so important to collect empirical data about how people use computers and why recruiting these data to the design process has such dramatic effects is, I suggest, because computer system design is typically a-theoretical, and the people working with computers--despite Landauer's claims about their flair-- are relatively incompetent and unimaginative with respect to the complex computer design task they undertake. Consider this analogy: If buildings were built by decorators with no idea beyond wall paint, no ideas about structural engineering, and no idea that one might sub- contract, then empirical data about how buildings fail would help improve building utility enormously. One would also be tempted, as UCD suggests, to build prototypes, test them, and involve users in testing to help find the problems the so-called designers missed. It would surely be easy to show how cost-effective UCD would be in this imaginary world of bad design. In safety-critical areas, such as medical applications, adequate testing may be im- practical: the designs have to work well enough before they are delivered. Lengthy testing might not exercise enough of a design to provide any significant data. And that means systems have to be known to work well enough a priori--that is, by their design being based in theory. Users are not going to be able to explore much of a design or contribute much to the generality of the language-processing algorithms. UCD, if you still want to call it that, has to be done in theory or in simulation by the designers, not by using empirical data as a substitute for thinking. UCD will still be necessary when programmers are more competent (or when better theories are available to aid design); but in the meantime, programmers' com- petence probably has a greater influence on w h y systems fail than any other single factor. The Trouble with Computers is a challenge to everyone who works with computers: first, that we can do better---embarrassed into action by Landauer's expos6 of computer failure and under-achievement; secondly, that by developing theory we, as active scientists developing computer systems and theories, can do better than users can either express or expect. To summarize: The Trouble with Computers is a good book. It should be read by everyone who uses or buys computers. For people who design computer systems, or who work in computational theories it is, more so, a challenge to do even better, for I am sure we have a lot of catching up to do. If Thomas Landauer is right when he would have us believe that we use computers because we love them, it is time we made them worthy of our attention.</region>
      <outsider class="DoCO:TextBox" type="page_nr" id="5" page="1" column="1">267</outsider>
      <outsider class="DoCO:TextBox" type="header" id="6" page="2" column="1">Computational Linguistics</outsider>
      <outsider class="DoCO:TextBox" type="header" id="7" page="2" column="1">Volume 22, Number 2</outsider>
      <region class="unknown" id="9" page="2" column="1">US.</region>
      <outsider class="DoCO:TextBox" type="page_nr" id="11" page="2" column="1">268</outsider>
      <region class="DoCO:FigureBox" id="Fx12">
        <image class="DoCO:Figure" src="62q4.page_002.image_02.png" thmb="62q4.page_002.image_02-thumb.png"/>
      </region>
      <outsider class="DoCO:TextBox" type="header" id="13" page="3" column="1">Book Reviews</outsider>
      <section class="DoCO:Bibliography">
        <h1 class="DoCO:SectionTitle" id="15" confidence="possible" page="3" column="1">References</h1>
        <ref-list class="DoCO:BiblioGraphicReferenceList">
          <ref rid="R1" class="deo:BibliographicReference" id="16" confidence="possible" page="3" column="1">Stoll, Clifford. 1995. Silicon Snake Oil: Second Talbott, Stephen L. 1995. The Future Does Not Thoughts on the Information Highway. Compute: Transcending the Machines in Our Doubleday. Midst. O'Reilly &amp; Associates.</ref>
        </ref-list>
        <outsider class="DoCO:TextBox" type="page_nr" id="17" page="3" column="1">269</outsider>
        <region class="DoCO:FigureBox" id="Fx18">
          <image class="DoCO:Figure" src="62q4.page_003.image_03.png" thmb="62q4.page_003.image_03-thumb.png"/>
        </region>
        <outsider class="DoCO:TextBox" type="header" id="19" page="4" column="1">Computational Linguistics</outsider>
        <outsider class="DoCO:TextBox" type="header" id="20" page="4" column="1">Volume 22, Number 2</outsider>
        <region class="DoCO:TextChunk" id="23" confidence="possible" page="4" column="1">Harold Thimbleby is Professor of Computing Research and Faculty of Technology Director of Research at Middlesex University, London. He has over 200 publications, centering upon human- computer interaction. Thimbleby's address is: Computing Science, Middlesex University, Bounds Green Road, London, England Nll 2NQ; e-mail: <email id="21">harold@mdx.ac.uk</email>; URL: <ext-link ext-link-type="uri" href="http://www.cs.mdx.ac.uk/harold" id="22">http://www.cs.mdx.ac.uk/harold</ext-link></region>
        <outsider class="DoCO:TextBox" type="page_nr" id="24" page="4" column="1">270</outsider>
        <region class="DoCO:FigureBox" id="Fx25">
          <image class="DoCO:Figure" src="62q4.page_004.image_04.png" thmb="62q4.page_004.image_04-thumb.png"/>
        </region>
      </section>
    </body>
  </article>
</pdfx>
