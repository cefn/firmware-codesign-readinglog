<?xml version='1.0' encoding='UTF-8'?>
<pdfx xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://pdfx.cs.man.ac.uk/static/article-schema.xsd">
  <meta>
    <job>c007109eb162739397b289a648f2e0a56307961be58b6ed7cbaf1912ba82a699</job>
    <base_name>62lq</base_name>
    <doi confidence="possible" alt_doi="http://dx.doi.org/10.4018/978-1-4666-6485-2.ch005">http://dx.doi.org/10.1109/52.50770</doi>
    <warning>Original PDF was found to be an image-based/possible OCR document. Output quality may be degraded.</warning>
  </meta>
  <article>
    <front class="DoCO:FrontMatter">
      <title-group>
        <article-title class="DoCO:Title" id="1">Design measurement: some lessons learned</article-title>
      </title-group>
      <outsider class="DoCO:TextBox" type="outsider" id="2">Never before has the human factors professional had the opportunity to take a lead role in software development. Enabled by a vigorous focus on software usability and the avail- ability of a number of robust prototyping tools, corporate human</outsider>
      <outsider class="DoCO:TextBox" type="sidenote" id="3">a</outsider>
      <outsider class="DoCO:TextBox" type="sidenote" id="4">a</outsider>
      <region class="unknown" id="5">factors groups are making significant positive contributions to software development through software prototyping. However, a successful prototyping effort requires more than prototyping tool and a background in user interface design. It has been our experience that the success of protoryping effort is dependent on many factors, some obvious, some not so obvious, and others learned only through postgraduate training at the School of Hard Knocks. Put your feet up, grab a cup of coffee, and let us share with you some of the lessons we’ ve learned on the way to happier and healthier prototyping efforts. In no particular order:</region>
      <outsider class="DoCO:TextBox" type="sidenote" id="6">a</outsider>
      <region class="unknown" id="7">trying to convince the programmers that prototyping is a good idea. Don’ t waste your time convincing low-level programming managers that prototyping is a good thing. For that matter, don’ t even waste your time convincing your management that prototyping is a good thing. The people you have to convince are those that hold the purse strings for product development. Without their support, you will never be successful. The very best way to do this is to invite them into your lab, tell them about the benefits, relate success stories, and top the pitch off with demo of your prototypes. We have found this to be the most effective way for communicating the power of prototyping and (as a very positive by-product) generating interesting, challenging work.</region>
      <outsider class="DoCO:TextBox" type="footer" id="8">interactions</outsider>
      <outsider class="DoCO:TextBox" type="footer" id="9">. . . january</outsider>
      <outsider class="DoCO:TextBox" type="page_nr" id="10">1994</outsider>
      <region class="DoCO:FigureBox" id="Fx11">
        <image class="DoCO:Figure" src="62lq.page_001.image_01.png" thmb="62lq.page_001.image_01-thumb.png"/>
      </region>
      <outsider class="DoCO:TextBox" type="header" id="12">Throw away your prototype That’ s right. Tear it into little pieces and start again. Don’ t expect it to be right the first time. You don’ t know your audience well enough. You do not fully know the limits of the prototyping tool. You will not know the application inside and out, and you don’ t know whether the developers can implement what you have prototyped. Prototyping is an iterative process, and you are going to learn as you go along. Leave enough time in your schedule to make radical changes based on the feedback you receive.</outsider>
      <outsider class="DoCO:TextBox" type="header" id="13">Make prototypes with high fidelity We have found that high-fidelity prototypes are more successful at convincing management and development that a particular user interface approach will work. The higher the fidelity of the prototype the greater the perception that the design approach is feasible and the more likely it will be accepted. Don’ t be lazy. What’ s</outsider>
      <outsider class="DoCO:TextBox" type="header" id="14">Don’ t waste your time prototyping add-ons</outsider>
      <region class="DoCO:TextChunk" id="18">At some point in time, we all are assigned to point releases of products. By the time this occurs, the excitement of product development <marker type="block"/> ence. If given the opportunity, move on and take an influential and lead role in the develop ment of new products. By showing the prototype to as many people as possible, you build a case for the benefits of prototyping and the feasibility of your approach. It gets people excited. No You cannot start early enough. We have found matter how busy you get and no matter that an initial draft of the prototype should be how many deadlines are imminent, available before the product objectives are pub- when asked to demo the prototype to lished. Don’ t wait for the product requirements somebody, do it. Not only do you to come out. You should be defining the understand the prototype better than anyone requirements. If you have some background in else, but you will be better able to answer any the application area, take your best shot at user interface question that may come up. If the defining a set of requirements, prototype it, prototype is good, it will only be a matter of time before Marketing will %elieve” you of the burden of demonstrating the prototype. Take advantage of the exposure. Fame is fleeting.<marker type="block"/> thinking and talking about their requirements, They may tear it apart, but at least you know where they stand and what they want. We have found straw man prototype critiques to be a great mechanism for generating customer involvement and commitment in our development efforts.</region>
      <region class="unknown" id="16">intuitive to you may not be to the developer. If you have the time (and we recommend that if you don’ t have the time, make the time), add minutiae to your prototype. Add error messages and help panels. Make sure that every path leads someplace. Not only does it improve the perception of feasibility, but it lets people know that you have stud- ied the problem in depth and have considered each of the user interface issues.</region>
      <outsider class="DoCO:TextBox" type="footer" id="19">iq</outsider>
      <outsider class="DoCO:TextBox" type="footer" id="20">interactions</outsider>
      <outsider class="DoCO:TextBox" type="footer" id="21">. . . january</outsider>
      <outsider class="DoCO:TextBox" type="footer" id="22">1994</outsider>
      <region class="DoCO:FigureBox" id="Fx23">
        <image class="DoCO:Figure" src="62lq.page_002.image_02.png" thmb="62lq.page_002.image_02-thumb.png"/>
      </region>
      <outsider class="DoCO:TextBox" type="header" id="24">methods &amp; eoo%</outsider>
      <outsider class="DoCO:TextBox" type="header" id="25">Make the prototype the functional specification When the prototype accurately represents what the customers are looking for, it provides a specification for the developers to code to. The old style of functional specification typically contains hundreds of pages of obtuse technical detail. It is impossible to fully understand and review. A prototype provides a “living spec” which the reviewer can see, touch, and play with. Prototyping can greatly increase efficiency of the development process by eliminating reviews of obtuse specifications only a small percentage of reviewers read and understand anyhow. If you are not able to get rid of the written specification, at a minimum, the prototype supplements the written word. At IBM, we use the saying: “A picture may be worth a thousand words, but a prototype is worth a thousand pictures.”</outsider>
      <region class="unknown" id="26">‘ 4</region>
      <outsider class="DoCO:TextBox" type="header" id="27">Disseminate to all technical leaders and developers (including marketers, technical writers, planners, and others)</outsider>
      <region class="DoCO:TextChunk" id="28" confidence="possible">Everyone involved in development of the product has a different ‘ Ia perspective and can provide valuable input. The product should reflect all of these viewpoints. You need only miss the mark in one area for a product to fail. Asking for their advice can yield a sense of commitment to the product, which fosters teamwork.</region>
      <region class="unknown" id="29">Use the best tools</region>
      <region class="DoCO:TextChunk" id="30" confidence="possible">Be idealistic in the prototyping which occurs early in the product development cycle. Add as manyfeatures to the prototype as you can. Even though you know some may not be feasible for the release, it is important to get these ideas in front of marketers, developers, and customers for a number of reasons. First, customers should determine what is important to be included in the first release. Development priorities on our products have often been modified by customer requests. Oftentimes the customers didn’ t realize they needed a new function until they saw it in the prototype. Second, the new features get the developers to stretch the envelope. If we can prototype it, they have a harder time arguing it is impossible to code. Third, it’ s good PR for the company. It convinces customers that your company is serious about producing best-of-breed software. Fourth, it builds up the reputation of human factors. We become the venerated advanced user interface technology people instead of the overpaid, prima donna traffic cops we are sometimes perceived as.</region>
      <region class="DoCO:TextChunk" id="50">The ideal tool is quick to learn, fast to prototype with, high in function, executes lie light- ning, and produces code to be used in the real product. Unfortunately, this ideal tool doesn’ t exist yet. You must pick a prototyping tool which has the functions most appropriate for your prototyping effort. The tool you select will have a significant impact on the success of your prototyping effort. <marker type="page" number="4"/><marker type="block"/> In many US companies, we are accustomed to developing products for the US market. We expect them to be used outside the US with little change other than language translation, However, the marketplace is becoming increasingly global. The world market is a market you cant ignore. Differences between countries such as laws, educa- tion levels, and customers influence the design of software. Talk to customers and members of your line of business in other countries.<marker type="column" number="2"/><marker type="block"/> Along the way, others outside your department may volunteer to do some of the prototyping for you. Adroit technical people know a good thing when they see it. You might be behind in your work, or you might be interested in improving your working relationship with those that volunteered. Sounds like a good idea. Doesn’ t it? If you are even slightly concerned about your place in the design process, our rece ommendation is an emphatic DON’ T do it. By letting others from outside your department in on even a small portion of the prototyping work, you give up control of the user interface maybe not on this application but potentially on the next. Your contribution is no longer unique; constraints like cost, schedule, and coding complexity begin to subtly influence the design; you begin to slip into the old role of consultant rather than owner. In addition to this, you are doing the product a disservice since, most likely, the others working on the program such as developers or marketers will have limited user intcr- face training. It is imperative that you keep control of the prototype in your shop.<marker type="page" number="5"/><marker type="column" number="1"/><marker type="block"/> It is tempting to define the requirements for the prototype and then get an intern or a program- mer to implement it. We recommend against doing this if possible. This breaks the feedback loop that comes from getting an idea, imple- menting it, showing it to customers, and cycling through again. We quickly learned which ideas could and could not be imple- mented by our prototyping tool. We also got ideas by writing the prototype which we would not have otherwise. In addition to this, prototyping it ourselves forced us to become quite familiar with the nuances and intricacies of our corporate user interface design guidelines. Our experience with assigning prototyping work convinced us of the truth of the old programming adage that the most elegant designs are the product of a single mind.</region>
      <outsider class="DoCO:TextBox" type="footer" id="32">interactions</outsider>
      <outsider class="DoCO:TextBox" type="footer" id="33">. . . january</outsider>
      <outsider class="DoCO:TextBox" type="footer" id="34">1994</outsider>
      <region class="DoCO:FigureBox" id="Fx35">
        <image class="DoCO:Figure" src="62lq.page_003.image_03.png" thmb="62lq.page_003.image_03-thumb.png"/>
      </region>
      <outsider class="DoCO:TextBox" type="header" id="36">Grab a piece of the action Take on responsibility for part of the project, if necessary. For example, on one of our projects, we volunteered to write the installation program and sample set because the development group did not have the stafl-ing to meet our specifications. By taking on this responsibility we assured our company produced a better product; learned more about programming, our product, and the development process; got an appre- ciation of the problems developers face, and gained respect from the developers by showing we could work in their arena. It’ s difficult to be everything to everybody, and we are not advocating that position. However, sometimes volunteering for work that you normally do not do pays off in handsome ways.</outsider>
      <outsider class="DoCO:TextBox" type="header" id="37">The customer is king Cash may be king to Donald Trump, but for a prototyping effort to succeed, customer involve-</outsider>
      <region class="unknown" id="38">ment is essential. You can perform task analyses until you are blue in the face, but you will never know as much about the job as the customer who performs it day in and day out. We found repeatedly during development of our prototypes that customers made suggestions we never would have thought of. Customers are a powerful driving force in setting requirements. When they see a function they like in the prototype, they can demand it be included in the product.</region>
      <region class="DoCO:FigureBox" id="Fx40">
        <image class="DoCO:Figure" src="62lq.page_004.image_04.png" thmb="62lq.page_004.image_04-thumb.png"/>
      </region>
      <region class="unknown" id="41">Keep control of the prototype in your shop</region>
      <outsider class="DoCO:TextBox" type="footer" id="43">inreractions</outsider>
      <outsider class="DoCO:TextBox" type="footer" id="44">. . . january</outsider>
      <outsider class="DoCO:TextBox" type="footer" id="45">1994</outsider>
      <outsider class="DoCO:TextBox" type="header" id="46">methods &amp; tools</outsider>
      <outsider class="DoCO:TextBox" type="header" id="47">Don’ t delegate the prototyping</outsider>
      <outsider class="DoCO:TextBox" type="header" id="48">! a -</outsider>
      <outsider class="DoCO:TextBox" type="header" id="49">and pleasing color selections. This gave the customer an initial, favorable impression of the prototype, helped convince them to look at it seriously, and allowed us to move past the aesthetics to concentrate on the ease of use and function questions which are the bread and butter issues of our profession. If you have at your avail a graphics design department, use it even if it isn’ t staffed by computer-literate people. This resource will save you many hours and much heartache arguing over aesthetic issues.</outsider>
      <region class="unknown" id="51">Become multidisciplinary</region>
      <region class="DoCO:TextChunk" id="52" confidence="possible">We are doing human factors work on programming tools for the banking industry. We work very hard trying to keep up with recent developments in all three domains (software usability, programming, and banking) and believe it has contributed positive- ly to our prototyping efforts.</region>
      <region class="unknown" id="53">Spread the word</region>
      <region class="DoCO:TextChunk" id="54" confidence="possible">Human factors is changing. The profession is moving from hardware to software, from testing to prototyping, from support to ownership. As you learn new things, it is important to pass this knowledge along to others through journal articles, conference pre- sentations, technical interchange groups, and in-house publications.</region>
      <region class="DoCO:TextChunk" id="55" confidence="possible">It isn’ t sufficient just to read your design guides. They are incomplete, imprecise, and represent a single time slice picture of a moving target. At IBM, our corporate design guide is called “Common User Access (CUA).” To stay current with CUA, departments keep up with the electronic bulletin boards, send a representative to CUA meetings, and talk to the people responsible for CUA. Know what the rules are today and what they will be by the time your product hits the market. Be informed enough to challenge the rules when you don’ t think they’ re right.</region>
      <outsider class="DoCO:TextBox" type="footer" id="56">interactions</outsider>
      <outsider class="DoCO:TextBox" type="footer" id="57">. . . january</outsider>
      <outsider class="DoCO:TextBox" type="footer" id="58">1994</outsider>
      <region class="DoCO:FigureBox" id="Fx59">
        <image class="DoCO:Figure" src="62lq.page_005.image_05.png" thmb="62lq.page_005.image_05-thumb.png"/>
      </region>
      <outsider class="DoCO:TextBox" type="header" id="60">a</outsider>
      <outsider class="DoCO:TextBox" type="header" id="61">4</outsider>
      <outsider class="DoCO:TextBox" type="header" id="62">“1</outsider>
      <outsider class="DoCO:TextBox" type="header" id="63">r”,. Obtain upper-level development management support I 2. Throw away your prototype 3. Make prototypes with high fidelity 4. Take every opportunity to show the prototype 5. Don’ t waste time prototyping add-ons 6. Start early 7. Make the prototype the functional specification 8. Disseminate to all technical leaders and developers 9. Develop idealistic instead of realistic prototypes 10. Use the best tools 11. Grab a piece of the action t 12. The customer is king 13. Look outside the US 14. Keep control of the prototype in your shop 15. Pay attention to aesthetics c 16. Don’ t delegate the prototyping 17. Become multidisciplinary</outsider>
      <region class="unknown" id="64">7</region>
      <region class="unknown" id="65">18. Spread the word a 19. Understand your corporate design guidelines 20. Research the key interface issues 21. Know the competition 22. Don’ t become a traditional (schedule-driven) developer</region>
      <region class="DoCO:TextChunk" id="66" confidence="possible">Prototypes allow us to do our testing up front, before the program is written. Rather than just looking for problems, we can design and evaluate multiple as alternatives. We see early prototyping efforts as a vehicle for performing advanced-technology EUI studies. For many, this will be a very rewarding side-effect of early prototyping efforts. In Fact, these early prototyping efforts can often identify patent idea</region>
      <region class="unknown" id="67">Know the competition</region>
      <region class="unknown" id="68">James Rudd jolnod IBM a human factors scientist in 1980. Ro designs, prototypes, and develops application software for tho banking industry. email: jrudd@ cltvm3.iinusl.it9m.com.</region>
      <region class="DoCO:TextChunk" id="69" confidence="possible">You can’ t compete in the high-jump until you know the height of the bar. No matter how brilliant and creative you are, there are important lessons you can learn from the competition. Get to know the competition by purchasing and experimenting with their software, and visiting trade show exhibits.</region>
      <region class="unknown" id="70">Scott lsenseois an advisory human factors engineer at IBM in Austin, Texas. Ho is designing a dcslctopto be used through the UNIX world. email: isenesccQ austin.ibm,com.</region>
      <region class="unknown" id="71">Don’ t become a traditional (schedule-driven) developer 1M</region>
      <region class="unknown" id="72">l?wcmxva</region>
      <region class="DoCO:TextChunk" id="73" confidence="possible">You know, developers, those nasty little trolls who hide in _ / - I dark corners throwing out curses like ‘ Cost” and “‘schedule.” - As human factors prototypes become a key part of the devel- REPRINTELI WTm PERhllSSION FROM opment process, we come under some of the same pressures. Be careful not OF THE Hmuiv F~crcm S~~EN~S~AN~N Mmmc, to use cost and schedule as excuses for not producing the highest-quality 1991. CoFwcKr 1991 BYTHEprototype possible. Wear a clove of garlic around your neck and (if you are HUMAN F.u.mxs hi-mEnwh’oa!!cs familiar with the Motorola approach to quality) inscribe it with mysterious swm. I~;C AU. MGm wmm. Greek incantations like “six sigma.” H</region>
      <outsider class="DoCO:TextBox" type="footer" id="74">interactions</outsider>
      <outsider class="DoCO:TextBox" type="footer" id="75">. . . january</outsider>
      <outsider class="DoCO:TextBox" type="footer" id="76">1994</outsider>
      <region class="DoCO:FigureBox" id="Fx77">
        <image class="DoCO:Figure" src="62lq.page_006.image_06.png" thmb="62lq.page_006.image_06-thumb.png"/>
      </region>
    </front>
    <body class="DoCO:BodyMatter"/>
  </article>
</pdfx>
