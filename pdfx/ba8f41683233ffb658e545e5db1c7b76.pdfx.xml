<?xml version='1.0' encoding='UTF-8'?>
<pdfx xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://pdfx.cs.man.ac.uk/static/article-schema.xsd">
  <meta>
    <job>e4674912e5fe78374c08ae11776bd6a336ae77f306b023bb007b6b5aca2b04e0</job>
    <base_name>62fx</base_name>
    <doi confidence="possible">http://dx.doi.org/10.1145/2212877.2212896</doi>
    <warning>Original PDF was found to be an image-based/possible OCR document. Output quality may be degraded.</warning>
  </meta>
  <article>
    <front class="DoCO:FrontMatter">
      <outsider class="DoCO:TextBox" type="outsider" id="1">January 1983</outsider>
      <outsider class="DoCO:TextBox" type="outsider" id="2">SIGCHI BULLETIN</outsider>
      <outsider class="DoCO:TextBox" type="outsider" id="3">Volume 14,3</outsider>
      <region class="DoCO:TextChunk" id="4" confidence="possible">ENLISTING USER HELP</region>
      <contrib-group class="DoCO:ListOfAuthors">
        <contrib contrib-type="author">
          <name id="5">Larry Tesler Personal Office Systems Division Apple Computer</name>
        </contrib>
        <contrib contrib-type="author">
          <name id="6">Inc.</name>
        </contrib>
      </contrib-group>
      <region class="DoCO:TextChunk" id="7" confidence="possible">I. HISTORY</region>
    </front>
    <body class="DoCO:BodyMatter">
      <region class="DoCO:TextChunk" id="12" page="1" column="1">I first got into the area of user-friendly software around 1963, when I helped to develop a graphics language for art students. The job of the art students was to design card stunts for half-time shows at college football games. Our graphics language allowed them to encode their design in numeric terms. We fed their descriptions to a computer program which then prepared an instruction card for each seat in the rooting section. <marker type="block"/> During the project, I learned to appreciate that right-brain artists think differently from left-brain computer scientists. It was necessary to understand their thought processes in order to design a usable graphics language.<marker type="block"/> The next time that I got really involved in this area was at Xerox PARC from 1973 to 1975. We were trying to develop an office automation system based on personal workstations such as the Xerox Alto computer. We were very excited about the possibilities of large displays with a mouse as a pointing device. Our initial user interface ideas were adopted from the NLS system developed at SRI International. (NLS later evolved into the Augment system offered by Tymshare, Inc.)<marker type="block"/> Despite the enthusiasm of the developers, there was a lot of resistance among office workers who tried our system. To find out why, I developed a way to watch people at work, observe what difficulties they were having, and elicit explanations from them.<marker type="block"/> One observation made during those tests later proved to be a key idea. A lay person trying a system for the first time is probably feeling pretty stupid and thinks that any mistake is his or her own. His inclination is not to tell you what is difficult because he thinks it is his problem. It is important to keep emphasizing that if he is hav~ng a problem, it is not his but the computer's. If you get into a car, turn the wheel, and it steers about twice as far as you expect, it is not that you are an incompetent driver, it's because the car has oversteer.</region>
      <region class="DoCO:TextChunk" id="13" confidence="possible" page="1" column="2">IN SOFTWARE DESIGN</region>
      <region class="DoCO:TextChunk" id="14" confidence="possible" page="1" column="2">2. WHEN TO ENLIST USER HELP</region>
      <region class="DoCO:TextChunk" id="15" page="1" column="2">get me talk a little about my work at Xerox PARC from 1973-1980 and at Apple since 1980, where I have been designing interactive systems. I brought the user into the design process as a helper, and the results were extremely good.</region>
      <region class="DoCO:TextChunk" id="16" confidence="possible" page="1" column="2">There are two stages of the development process during which I think it is critical to get user help.</region>
      <region class="DoCO:TextChunk" id="18" page="1" column="2">One critical time is during the design phase, when the designer has an idea of what his goals are and probably has formulated some idea of what the user interface of his application is going to be. But before the design is completely frozen, it is a good idea to get a reality check. At that point, my design teams go out and talk to potential users; we call it "interviewing at the workplace." <marker type="block"/> The other critical time is after the software has been implemented to the prototype stage, before it is frozen, when there are still some opportunities to make changes. Since I am unable to produce armchair software designs that are really usable, I have found it is really important to build and verify prototypes, and make numerous changes. The technique is very similar to what Tom was telling you about, "formative evaluation. ''~</region>
      <region class="DoCO:TextChunk" id="19" confidence="possible" page="1" column="2">3. ENLISTING USER HELP DURING THE DESIGN</region>
      <region class="DoCO:TextChunk" id="20" page="1" column="2">During the formative stages of the development effort, the designers need to get user input. If they wait until the product is ready to ship, it is too late. In the projects I have worked on, we go to the workplaces of potential users during the early stages of the design to observe how people actually work.</region>
      <region class="DoCO:TextChunk" id="21" confidence="possible" page="1" column="2">3.1 Interviewing at the Workplace Up to three people from the design team observe and interview a prospective user. The goal of each interview is to elicit from the prospect his or her: - Procedures - Problems - Forms and Tools</region>
      <outsider class="DoCO:TextBox" type="footer" id="22" page="1" column="2">- Terminology</outsider>
      <outsider class="DoCO:TextBox" type="footer" id="23" page="1" column="2">* Editor's note: see page 13.</outsider>
      <outsider class="DoCO:TextBox" type="header" id="24" page="2" column="1">January 1983</outsider>
      <outsider class="DoCO:TextBox" type="header" id="25" page="2" column="1">SIGCHI BULLETIN</outsider>
      <outsider class="DoCO:TextBox" type="header" id="26" page="2" column="1">Volume 14,3</outsider>
      <region class="DoCO:TextChunk" id="27" page="2" column="1">Even if we are just designing a text editor, we want to know how the documents the prospect produces fit into the entire process of his job. Where does the paperwork he is typing come from, and where does it go to after it leaves his desk? How many revision cycles are there, who specifies the revisions, and what does marked-up copy look like?</region>
      <region class="DoCO:TextChunk" id="28" confidence="possible" page="2" column="1">If we are designing a data base application, we want to know how he keeps things in his office. Does he use index cards, files, or what?</region>
      <region class="DoCO:TextChunk" id="33" page="2" column="1">If the prospect handles nine-part purchase order forms, what happens to each of the nine parts, who fills them in, and where are they routed? <marker type="block"/> It turns out that by asking very open-ended questions we can find out things that we did not even anticipate--usually very surprising thingsÂ° We designers tend to be limited by our own experience and by the conventions of the data processing industry, which really do not reflect the way other people work.<marker type="block"/> It is also important to find out what terminology peoPle use. For example, in the Apple UCSD Pascal Text Editor, there is a command called "Save on File." Our secretaries seemed to have no difficulties using this command, so people theorized that it was perfectly fine to call a document you are preparing with a text editor a "file." But we also noticed that this was not really the way people in offices talked about things. They did not call a document a "file;" a file was a folder or a cabinet.<marker type="block"/> We were puzzled about why people did not h a v e any trouble with the term "file" in the editor, so we asked several secretaries with experience using the editor whet the word "file" meant on the computer. All of them said a file was a diskette. We then asked them the meaning of the term "file" in the command "Save on File Named X." Their interpretation of this phrase was "Save my memo on the the file [the diskette] and name it [my memo] X." The fact that the wording of the command contradicted their notion did not change their idea of what a file was; instead, they changed their parsing of the command so it would make sense.<marker type="block"/> One more point. During a user interview, we focus on current practice. We don't ask, "If you had a computer, what would you do with it?" Once in a while, this will elicit an interesting remark. But people are not very good at visualizing what it would be like to have a computer in front of them, so this is not a very productive approach.</region>
      <region class="DoCO:FigureBox" id="Fx34">
        <image class="DoCO:Figure" src="62fx.page_002.image_02.png" thmb="62fx.page_002.image_02-thumb.png"/>
      </region>
      <region class="DoCO:TextChunk" id="35" confidence="possible" page="2" column="2">4o ENLISTING USER HELP DURING IMFLEMENTATION</region>
      <region class="DoCO:TextChunk" id="36" confidence="possible" page="2" column="2">4.1 Prototype Testing</region>
      <region class="DoCO:TextChunk" id="37" confidence="possible" page="2" column="2">After developing prototype software, we return to the users again to get their help in verifying that the prototypes have good human factors~ I would say that in all cases I have ever tested, they do not! We discover what problems there are and allow time to correct them.</region>
      <region class="DoCO:TextChunk" id="39" page="2" column="2">In a one year development, if we have a fairly good first cut at a user interface, maybe two or three months need to be left at the end to fix most of the problems that may be found. We improve the human factors at the same time that we are fixing bugs, improving performance, and implementing extra features. <marker type="block"/> We really do not need to have a final prototype in order to do the test. If we have something that demonstrates the major functions and if a user can get through a session without likelihood of a crash, it is good enough for our purposes.</region>
      <region class="DoCO:TextChunk" id="40" confidence="possible" page="2" column="2">The goals of prototype testing are:</region>
      <region class="DoCO:TextChunk" id="41" confidence="possible" page="2" column="2">- To resolve specific design issues;</region>
      <region class="DoCO:TextChunk" id="42" confidence="possible" page="2" column="2">- To uncover unanticipated problems;</region>
      <region class="DoCO:TextChunk" id="43" confidence="possible" page="2" column="2">- To find out what is easy and what is hard to learn, and what is smooth and what is clumsy to use.</region>
      <region class="DoCO:TextChunk" id="44" confidence="possible" page="2" column="2">4.2 Resolving Specific Design Issues</region>
      <region class="DoCO:TextChunk" id="45" confidence="possible" page="2" column="2">Let me describe an example of a design issue that has recurred several times in my projects.</region>
      <region class="DoCO:TextChunk" id="46" confidence="possible" page="2" column="2">Some of you may have read my Byte magazine article (August 1981) about how to eliminate modes from systems. Findings from my early studies at Xerox PARC showed that modes were very difficult for people to deal with. People were always getting into the wrong mode and did not know how to get back out.</region>
      <region class="DoCO:TextChunk" id="47" page="2" column="2">My colleagues and I found an easy way to eliminate modes from most commands in a text editor. We structure the command language so that the user first selects the operand of an operation and then issues the command to operate on it. Unfortunately, if one wants to move or copy something from one place to another, it requires two operands, the source and the destination. The simple technique only works when there is one operand.</region>
      <region class="DoCO:TextChunk" id="48" confidence="possible" page="2" column="2">Inevitably, someone would propose that we allow two selections to exist at a time. The user would select both a source and a destination,</region>
      <outsider class="DoCO:TextBox" type="header" id="49" page="3" column="1">January ].983</outsider>
      <outsider class="DoCO:TextBox" type="header" id="50" page="3" column="1">SIGCHI BULLETIN</outsider>
      <outsider class="DoCO:TextBox" type="header" id="51" page="3" column="1">Volume 14,3</outsider>
      <region class="DoCO:TextChunk" id="52" page="3" column="1">using different buttons on the moused if there is a mouse~ There would be no mode at any point because he could continually respecify each selection independently~ When both selections were finally to his liking, he could issue the Move command or the Copy commando</region>
      <region class="DoCO:TextChunk" id="53" confidence="possible" page="3" column="1">This idea is a very appealing one. One colleague dubbed it the "Place and Thing Model~ '~ The Thing is what you want to move or copy and the Place is where you want it to go. An obvious corollary of the model is that typing is inserted at the Place while the Delete command deletes the Thing.</region>
      <region class="DoCO:TextChunk" id="54" confidence="possible" page="3" column="1">Fortunately~ we tested the Place and Thing Model before we shipped it to anybody. We implemented a prototype and ran user tests. Actually, I had to repeat the experiment several times over the years for the benefit of people who did not believe the results.</region>
      <region class="DoCO:TextChunk" id="55" confidence="possible" page="3" column="1">We were shocked (the first time) to find that people were confused by the Place and Thing interface. It became clear after talking with them and also by watching the errors they made that the confusion arose from having two loci of attention. They couldn't predict whether something they typed would go to the Place or to the Thing, nor whether the Underline command would underline the Thing or would underline new text typed at the Place. In other words, the Place and Thing Model made copying and moving easier, but it made simple operations like typing and underlining more difficult.</region>
      <region class="DoCO:TextChunk" id="56" page="3" column="1">To solve the move-and-copy problem, the Star design team at Xerox instituted a temporary mode while the user was waiting to specify a destination, and the Smalltalk design team instituted a two-step cut and paste scheme. Both proved less error-prone than the Place and Thing paradigm.</region>
      <region class="DoCO:TextChunk" id="57" confidence="possible" page="3" column="1">The Place and Thing experience demonstrates that even an idea that seems elegant and that satisfies some principle is not necessarily going to succeed. The only way to find out is to test it.</region>
      <region class="DoCO:TextChunk" id="58" confidence="possible" page="3" column="1">4.3 Uncovering Unanticipated Problems</region>
      <region class="DoCO:TextChunk" id="60" page="3" column="1">Besides resolving specific design issues, prototype testing always uncovers u~anticipated problems. For every design issue we knew about, we would find a dozen unanticipated problems with the system. People made too many errors, did not understand what they had done, and were confused by the terminology. <marker type="block"/> I think uncovering unanticipated problems is the greatest benefit of prototype tests. When we focused too much on known issues, the tests rarely were worth the time and trouble they took.</region>
      <region class="DoCO:FigureBox" id="Fx61">
        <image class="DoCO:Figure" src="62fx.page_003.image_03.png" thmb="62fx.page_003.image_03-thumb.png"/>
      </region>
      <region class="DoCO:TextChunk" id="62" confidence="possible" page="3" column="2">4~4 Qualifying Subjects</region>
      <region class="DoCO:TextChunk" id="64" page="3" column="2">The people we like to observe in our prototype tests are novice users who are prospective end-users of the system. For example, if we are testing out accounting software, we try to find accounting clerks that have very little experience. <marker type="block"/> It is becoming difficult these days to find people who have never used a computer~ In 1973, we simply brought in secretaries from temporary agencies~ At Apple, we ask new employees at orientation to fill out a form summarizing their background and noting any previous use of computers.</region>
      <region class="DoCO:TextChunk" id="65" confidence="possible" page="3" column="2">It is important to know the person's experience. Have they used video games? Have they used data-entry systems? Do they have a personal computer at home, or have they taken any computer classes? The results of the test will be interpreted differently depending on their experience. For example, if we find someone constantly hitting the return key when it is not necessary, he may have once used a system that required it.</region>
      <region class="DoCO:TextChunk" id="66" confidence="possible" page="3" column="2">4.5 Beginning a Prototype Test</region>
      <region class="DoCO:TextChunk" id="68" page="3" column="2">We schedule an hour for each test. At the beginning of the test, it is important to get the person relaxed and comfortable and to emphasize that it is not we who are testing him, it is he who is testing the machine. We say, "The machine is new and is just a prototype, so it has lots of bugs in it. It is not very easy to use yet, and we would like you to help us figure out how to make it easier." This assurance helps to alleviate the feeling that he is being tested, and that he is at fault when he makes mistakes. <marker type="block"/> Before beginning, we try to create a positive mind set before the user encounters difficulties. The general approach is to assure him that the system is not going to be hard, although he will have an occasional problem. However, there are aspects of most systems that are very difficult for all users. If we told a user that those aspects were going to be easy, and then he made the inevitable mistakes, he would feel it was his own shortcoming. In such cases, I take a different tactic. I tell the user that this aspect of the system is going to be very hard to learn, but by the end of the hour, he will probably master it. Then after fifteen or twenty minutes, when he begins to get a handle on it, he feels accomplished and positive about his ability to master the system.</region>
      <outsider class="DoCO:TextBox" type="header" id="69" page="4" column="1">January 1983</outsider>
      <outsider class="DoCO:TextBox" type="header" id="70" page="4" column="1">SIGCHI BULLETIN</outsider>
      <outsider class="DoCO:TextBox" type="header" id="71" page="4" column="1">Volume 14,3</outsider>
      <region class="DoCO:TextChunk" id="72" confidence="possible" page="4" column="1">4.6 Conducting a Prototype Test</region>
      <region class="DoCO:TextChunk" id="76" page="4" column="1">During the test, I sit down next to the user and tutor him step by step in how to use the software. I try never to touch the machine myself. Being present, I can vary the instruction as I go along in response to what he is doing. Even though I plan a certain scenario, something may occur during the test that suggests a more fruitful experiment. I will change the scenario and explore the problem more deeply. <marker type="block"/> During the test, I note every event, whether a success or a failure. If I only noted errors, the subject would soon view my notetaking as an intimidating act.<marker type="block"/> I try to talk as little as possible during the test. I give a brief introduction and get the user working immediately so he does not feel as though he is being lectured. Sometimes, I give more detailed instructions, but if I talked him through every step he would just mechanically execute my instructions and not recall much. Instead, I let him practice and play with what he has learned.<marker type="block"/> The user should not only execute tasks correctly, he should also understand why they are done the way they are so he can later perform them without assistance. Frequently, I stop giving instructions and let him guess and try things, rather than telling him every step. But during the first few minutes~ it is helpful to actually drive him through each step to help him overcome any initial hesitation.</region>
      <region class="DoCO:TextChunk" id="77" confidence="possible" page="4" column="1">4.7 Maximizing Test Benefits</region>
      <region class="DoCO:TextChunk" id="78" confidence="possible" page="4" column="1">To make the tests of maximum benefit to the designers, there are certain rules we try to follow:</region>
      <region class="DoCO:TextChunk" id="79" confidence="possible" page="4" column="1">- Don't offer help too soon;</region>
      <region class="DoCO:TextChunk" id="80" confidence="possible" page="4" column="1">- Welcome suggestions and reactions;</region>
      <region class="DoCO:TextChunk" id="81" confidence="possible" page="4" column="1">-Observe but don't pressure.</region>
      <region class="DoCO:TextChunk" id="83" page="4" column="1">If the person seems stumped for a moment, I let him think a little while to see if he can figure out for himself what to do. If he starts getting to the point where he is feeling uncomfortable, then I will finally intervene. <marker type="block"/> It is important to be open to the user's suggestions and reactions. If the person running the test gets defensive, argues, or tries to put off ,discussion until later, the user will clam up right away. Even if the subject makes an obvious statement, a trivial remark, or suggests something tha% is impossible to do on a computer, it is important to welcome his reactions and discuss them as an equal.</region>
      <region class="DoCO:FigureBox" id="Fx84">
        <image class="DoCO:Figure" src="62fx.page_004.image_04.png" thmb="62fx.page_004.image_04-thumb.png"/>
      </region>
      <region class="DoCO:TextChunk" id="85" confidence="possible" page="4" column="2">Otherwise~ he will stop telling you the things you need to hear.</region>
      <region class="DoCO:TextChunk" id="86" confidence="possible" page="4" column="2">4.8 Interviewer Qualifications</region>
      <region class="DoCO:TextChunk" id="87" confidence="possible" page="4" column="2">Running prototype tests is not easy~ I have been doing it for nine years and I still learn from my mistakes. When I conduct a series of tests on the same software~ I get better at teaching and observing subjects with each subsequent test.</region>
      <region class="DoCO:TextChunk" id="88" confidence="possible" page="4" column="2">During an interview, it is important to be objective, observant, sensitive, and patient. Someone who wants to run a prototype test must be willing to assume that attitude, as well as be a competent teacher.</region>
      <region class="DoCO:TextChunk" id="90" page="4" column="2">One of the less obvious requirements for running a prototype test is familiarity with the software. We often have psychologists run user tests. Ours have the right attitude, are good teachers, and have previous experience running subjects in experiments. But when they tried to test early prototypes, they found themselves insufficiently familiar with the software. If the user made an error, the observing psychologist did not understand the error or did not even detect that an error had been made. If the user wanted to explore something outside the scenario, the teacher was stuck. So for early prototype testing, it is important to have someone present who is familiar with the software. <marker type="block"/> When one individual does not have all of the required skills, we run tests with two or three people in the room: a teacher who knows the software, an observer who knows it even better, and perhaps a psychologist who can observe from a different perspective and intervene if the others become impatient or insensitive.</region>
      <region class="DoCO:TextChunk" id="91" confidence="possible" page="4" column="2">4.9 Concluding a Prototype Test</region>
      <region class="DoCO:TextChunk" id="93" page="4" column="2">At the end of each test, we take time to gather impressions from the subject. We start out asking open questions. "Well, what do you think?" or "What was hard; what was easy?" Later we pose more direct questions like "The time you made that certain error, what were you thinking?" or "What do you think is a better term for this concept?" Usually in the open-question stage we get some really good responses that are unexpected. The directed questions address more specific issues. <marker type="block"/> If there is time after the question period, I ask the subject to go back and do some more tasks. He or she has been using the machine only an hour, so the question period is needed to "cleanse" his short-term memory. After that, having him try to repeat certain tasks tests his recall of what he has been taught. This</region>
      <outsider class="DoCO:TextBox" type="header" id="94" page="5" column="1">annary 1983 SIGCHI BULLETIN Volume 14,3 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .</outsider>
      <region class="DoCO:TextChunk" id="95" confidence="possible" page="5" column="1">provides us with clues about what is easy and</region>
      <region class="unknown" id="96" page="5" column="1">what is hard to ~elnember.</region>
      <region class="DoCO:TextChunk" id="97" confidence="possible" page="5" column="1">4. I0 Homework Between Tests</region>
      <region class="DoCO:TextChunk" id="98" page="5" column="1">Between tests~ the teacher has homework to do. If there were other people observing the testy we compare notes and debate interpretations. I reevaluate the teaching approach and plan the issues and the scenarios for the next testÂ° If the first test takes an hour, usually I can cover the same material in a half hour the second time and thus have additional time to teach more. featuresÂ°</region>
      <region class="DoCO:TextChunk" id="99" confidence="possible" page="5" column="1">After I aave run through a whole series of tests on an application, I write a report about What was commonly experienced by the users. Generally, most users experience the same things. Occasionally, some user's unique quirk may be worth memtioning~ but what is of most concern is what most or all users experienced.</region>
      <region class="DoCO:TextChunk" id="100" confidence="possible" page="5" column="1">4~II Employing Test Results</region>
      <region class="DoCO:TextChunk" id="101" confidence="possible" page="5" column="1">After an application is fully tested, we disseminate the results. Within Apple's organization everyone gets into the user interface act: marketing, training, technical writing~ product design, product support,</region>
      <region class="DoCO:FigureBox" id="Fx102">
        <image class="DoCO:Figure" src="62fx.page_005.image_05.png" thmb="62fx.page_005.image_05-thumb.png"/>
      </region>
      <region class="DoCO:TextChunk" id="104" page="5" column="2">quality assurance~ software~ and management. Everyone meeds to know the test conclusions to understand why changes are or are not being r~de~ Then, of course, you must change the software as needed or else it was all for naught. <marker type="block"/> Our training group, staffed by psychologists and educators, runs a similar series of tests in order to evaluate training materials. Usually, we have already tested out the worst aspects, and by the time they get the software from engineering, they can debug their training materials using the same technique.</region>
      <region class="DoCO:TextChunk" id="105" confidence="possible" page="5" column="2">5. CONCLUSIONS</region>
      <region class="DoCO:TextChunk" id="107" page="5" column="2">In conclusion, observing users really does work. Not only does it work, but it is really necessary. In my experience, only occasionally have I found software that has been really easy to use. In just about every case in which I was able to question the designers of friendly software, they said that they, too, ran extensive user tests and made extensive revisions before the software was released. <marker type="block"/> Some people think they can design friendly software just by being clever or by reading papers on principles of user interface design. Principles are important to consider when you are first designing, but unless you take the car out for a road test, you won't know about the oversteer.</region>
    </body>
  </article>
</pdfx>
