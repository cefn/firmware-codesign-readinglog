<?xml version='1.0' encoding='UTF-8'?>
<pdfx xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://pdfx.cs.man.ac.uk/static/article-schema.xsd">
  <meta>
    <job>b092debb88ce7e9c51b906f713f46fb02d7866be1d84fa38da91485f0f009b61</job>
    <base_name>62cs</base_name>
    <doi confidence="possible" alt_doi="http://dx.doi.org/10.1109/ieeestd.2014.6991459">http://dx.doi.org/10.1109/ieeestd.2014.6826459</doi>
  </meta>
  <article>
    <front class="DoCO:FrontMatter">
      <region class="unknown" id="1">IEEE Std 830-1998 (Revision of IEEE Std 830-1993)</region>
      <title-group>
        <article-title class="DoCO:Title" id="2">IEEE Recommended Practice for Software Requirements SpeciÞcations</article-title>
      </title-group>
      <region class="unknown" id="3">Sponsor Software Engineering Standards Committee of the IEEE Computer Society Approved 25 June 1998 IEEE-SA Standards Board</region>
      <abstract class="DoCO:Abstract" id="4">Abstract: The content and qualities of a good software requirements specification (SRS) are described and several sample SRS outlines are presented. This recommended practice is aimed at specifying requirements of software to be developed but also can be applied to assist in the selection of in-house and commercial software products. Guidelines for compliance with IEEE/EIA 12207.1-1997 are also provided. Keywords: contract, customer, prototyping, software requirements specification, supplier, system requirements specifications</abstract>
      <region class="unknown" id="5">The Institute of Electrical and Electronics Engineers, Inc. 345 East 47th Street, New York, NY 10017-2394, USA Copyright © 1998 by the Institute of Electrical and Electronics Engineers, Inc. All rights reserved. Published 1998. Printed in the United States of America. ISBN 0-7381-0332-2 No part of this publication may be reproduced in any form, in an electronic retrieval system or otherwise, without the prior written permission of the publisher.</region>
      <region class="DoCO:TextChunk" id="6" confidence="possible">IEEE Standards documents are developed within the IEEE Societies and the Standards Coordinating Committees of the IEEE Standards Association (IEEE-SA) Standards Board. Members of the committees serve voluntarily and without compensation. They are not necessarily members of the Institute. The standards developed within IEEE represent a consensus of the broad expertise on the subject within the Institute as well as those activities outside of IEEE that have expressed an inter- est in participating in the development of the standard. Use of an IEEE Standard is wholly voluntary. The existence of an IEEE Standard does not imply that there are no other ways to produce, test, measure, purchase, market, or provide other goods and services related to the scope of the IEEE Standard. Furthermore, the viewpoint expressed at the time a standard is approved and issued is subject to change brought about through developments in the state of the art and comments received from users of the standard. Every IEEE Standard is sub- jected to review at least every Þve years for revision or reafÞrmation. When a document is more than Þve years old and has not been reafÞrmed, it is reasonable to conclude that its contents, although still of some value, do not wholly reßect the present state of the art. Users are cautioned to check to determine that they have the latest edition of any IEEE Standard. Comments for revision of IEEE Standards are welcome from any interested party, regardless of membership afÞliation with IEEE. Suggestions for changes in documents should be in the form of a proposed change of text, together with appropriate supporting comments. Interpretations: Occasionally questions may arise regarding the meaning of portions of standards as they relate to speciÞc applications. When the need for interpretations is brought to the attention of IEEE, the Institute will initiate action to prepare appropriate responses. Since IEEE Standards represent a consensus of all concerned interests, it is important to ensure that any interpretation has also received the concurrence of a balance of interests. For this reason, IEEE and the members of its societies and Standards Coordinating Committees are not able to provide an instant response to interpretation requests except in those cases where the matter has previously received formal consideration. Comments on standards and requests for interpretations should be addressed to: Secretary, IEEE-SA Standards Board 445 Hoes Lane P.O. Box 1331 Piscataway, NJ 08855-1331 USA Note: Attention is called to the possibility that implementation of this standard may require use of subject matter covered by patent rights. By publication of this standard, no position is taken with respect to the existence or validity of any patent rights in connection therewith. The IEEE shall not be responsible for identifying patents for which a license may be required by an IEEE standard or for conducting inquiries into the legal validity or scope of those patents that are brought to its attention. Authorization to photocopy portions of any individual standard for internal or personal use is granted by the Institute of Electrical and Electronics Engineers, Inc., provided that the appropriate fee is paid to Copyright Clearance Center. To arrange for payment of licensing fee, please contact Copyright Clearance Center, Customer Service, 222 Rosewood Drive, Danvers, MA 01923 USA; (978) 750-8400. Permission to photocopy portions of any individual standard for educational class- room use can also be obtained through the Copyright Clearance Center.</region>
    </front>
    <body class="DoCO:BodyMatter">
      <section class="deo:Introduction">
        <h1 class="DoCO:SectionTitle" id="7" page="3" column="1">Introduction</h1>
        <region class="DoCO:TextChunk" id="8" confidence="possible" page="3" column="1">(This introduction is not a part of IEEE Std 830-1998, IEEE Recommended Practice for Software Requirements SpeciÞcations.)</region>
        <region class="DoCO:TextChunk" id="9" page="3" column="1">This recommended practice describes recommended approaches for the speciÞcation of software requirements. It is based on a model in which the result of the software requirements speciÞcation process is an unambiguous and complete speciÞcation document. It should help</region>
        <region class="DoCO:TextChunk" id="10" confidence="possible" page="3" column="1">a) Software customers to accurately describe what they wish to obtain; b) Software suppliers to understand exactly what the customer wants; c) Individuals to accomplish the following goals: 1) Develop a standard software requirements speciÞcation (SRS) outline for their own organizations; 2) DeÞne the format and content of their speciÞc software requirements speciÞcations; 3) Develop additional local supporting items such as an SRS quality checklist, or an SRS writerÕs handbook.</region>
        <region class="DoCO:TextChunk" id="11" page="3" column="1">To the customers, suppliers, and other individuals, a good SRS should provide several speciÞc beneÞts, such as the following:</region>
        <region class="DoCO:TextChunk" id="12" confidence="possible" page="3" column="1">Ñ Establish the basis for agreement between the customers and the suppliers on what the software product is to do. The complete description of the functions to be performed by the software speciÞed in the SRS will assist the potential users to determine if the software speciÞed meets their needs or how the software must be modiÞed to meet their needs. Ñ Reduce the development effort. The preparation of the SRS forces the various concerned groups in the customerÕs organization to consider rigorously all of the requirements before design begins and reduces later redesign, recoding, and retesting. Careful review of the requirements in the SRS can reveal omissions, misunderstandings, and inconsistencies early in the development cycle when these problems are easier to correct. Ñ Provide a basis for estimating costs and schedules. The description of the product to be developed as given in the SRS is a realistic basis for estimating project costs and can be used to obtain approval for bids or price estimates. Ñ Provide a baseline for validation and veriÞcation. Organizations can develop their validation and veriÞcation plans much more productively from a good SRS. As a part of the development contract, the SRS provides a baseline against which compliance can be measured. Ñ Facilitate transfer. The SRS makes it easier to transfer the software product to new users or new machines. Customers thus Þnd it easier to transfer the software to other parts of their organization, and suppliers Þnd it easier to transfer it to new customers. Ñ Serve as a basis for enhancement. Because the SRS discusses the product but not the project that developed it, the SRS serves as a basis for later enhancement of the Þnished product. The SRS may need to be altered, but it does provide a foundation for continued production evaluation.</region>
        <region class="DoCO:TextChunk" id="16" page="3" column="1">The readers of this document are referred to Annex B for guidelines for using this recommended practice to meet the requirements of IEEE/EIA 12207.1-1997, IEEE/EIA GuideÑIndustry Implementation of ISO/IEC 12207: 1995, Standard for Information TechnologyÑSoftware life cycle processesÑLife cycle data. <marker type="page" number="4"/><marker type="block"/> Participants This recommended practice was prepared by the Life Cycle Data Harmonization Working Group of the Software Engineering Standards Committee of the IEEE Computer Society. At the time this recommended practice was approved, the working group consisted of the following members:</region>
        <outsider class="DoCO:TextBox" type="footer" id="14" page="3" column="1">Copyright © 1998 IEEE. All rights reserved.</outsider>
        <outsider class="DoCO:TextBox" type="footer" id="15" page="3" column="1">iii</outsider>
        <region class="DoCO:TextChunk" id="17" confidence="possible" page="4" column="1">Leonard L. Tripp, Chair Edward Byrne Dennis Lawrence Terry Rout Paul R. Croll David Maibor Richard Schmidt Perry DeWeese Ray Milovanovic Norman F. Schneidewind Robin Fralick James Moore David Schultz Marilyn Ginsberg-Finner Timothy Niesen Basil Sherlund John Harauz Dennis Rilling Peter Voldner Mark Henley Ronald Wade The following persons were on the balloting committee: Syed Ali David A. Gustafson Indradeb P. Pal Theodore K. Atchinson Jon D. Hagar Alex Polack Mikhail Auguston John Harauz Peter T. Poon Robert E. Barry Robert T. Harley Lawrence S. Przybylski Leo Beltracchi Herbert Hecht Kenneth R. Ptack H. Ronald Berlack William Heßey Annette D. Reilly Richard E. Biehl Manfred Hein Dennis Rilling Michael A. Blackledge Mark Heinrich Andrew P. Sage Sandro Bologna Mark Henley Helmut Sandmayr Juris Borzovs Debra Herrmann Stephen R. Schach Kathleen L. Briggs John W. Horch Hans Schaefer M. Scott Buck Jerry Huller Norman Schneidewind Michael Caldwell Peter L. Hung David J. Schultz James E. Cardow George Jackelen Lisa A. Selmon Enrico A. Carrara Frank V. Jorgensen Robert W. Shillato Lawrence Catchpole William S. Junk David M. Siefert Keith Chan George X. Kambic Carl A. Singer Antonio M. Cicu Richard Karcich James M. Sivak Theo Clarke Ron S. Kenett Richard S. Sky Sylvain Clermont Judith S. Kerner Nancy M. Smith Rosemary Coleman Robert J. Kierzyk Melford E. Smyre Virgil Lee Cooper Dwayne L. Knirk Harry M. Sneed W. W. Geoff Cozens Shaye Koenig Alfred R. Sorkowitz Paul R. Croll Thomas M. Kurihara Donald W. Sova Gregory T. Daich John B. Lane Luca Spotorno Geoffrey Darnton J. Dennis Lawrence Julia Stesney Taz Daughtrey Fang Ching Lim Fred J. Strauss Bostjan K. Derganc William M. Lively Christine Brown Strysik Perry R. DeWeese James J. Longbucco Toru Takeshita James Do Dieter Look Richard H. Thayer Evelyn S. Dow John Lord Booker Thomas Carl Einar Dragstedt Stan Magee Patricia Trellue Sherman Eagles David Maibor Theodore J. Urbanowicz Christof Ebert Harold Mains Glenn D. Venables Leo Egan Robert A. Martin Udo Voges Richard E. Fairley Tomoo Matsubara David D. Walden John W. Fendrich Mike McAndrew Dolores Wallace Jay Forster Patrick D. McCray William M. Walsh Kirby Fortenberry Christopher McMacken John W. Walz Eva Freund Jerome W. Mersky Camille SWhite-Partain Richard C. Fries Bret Michael Scott A. Whitmire Roger U. Fujii Alan Miller P. A. Wolfgang Adel N. Ghannam Celia H. Modell Paul R. Work Marilyn Ginsberg-Finner James W. Moore Natalie C. Yopconka John Garth Glynn Pavol Navrat Janusz Zalewski Julio Gonzalez-Sanz Myrna L. Olson Geraldine Zimmerman L. M. Gunther Peter F. Zoll</region>
        <outsider class="DoCO:TextBox" type="footer" id="18" page="4" column="1">iv</outsider>
        <outsider class="DoCO:TextBox" type="footer" id="19" page="4" column="1">Copyright © 1998 IEEE. All rights reserved.</outsider>
        <region class="DoCO:TextChunk" id="20" page="5" column="1">When the IEEE-SA Standards Board approved this recommended practice on 25 June 1998, it had the following membership:</region>
        <region class="unknown" id="21" page="5" column="1">Richard J. Holleman, Chair Donald N. Heirman, Vice Chair Judith Gorman, Secretary Satish K. Aggarwal James H. Gurney L. Bruce McClung Clyde R. Camp Jim D. Isaak Louis-Fran•ois Pau James T. Carlo Lowell G. Johnson Ronald C. Petersen Gary R. Engmann Robert Kennelly Gerald H. Peterson Harold E. Epstein E. G. ÒAlÓ Kiener John B. Posey Jay Forster* Joseph L. KoepÞnger* Gary S. Robinson Thomas F. Garrity Stephen R. Lambert Hans E. Weinrich Ruben D. Garzon Jim Logothetis Donald W. Zipse Donald C. Loughry *Member Emeritus Valerie E. Zelenty IEEE Standards Project Editor</region>
        <outsider class="DoCO:TextBox" type="footer" id="22" page="5" column="1">Copyright © 1998 IEEE. All rights reserved.</outsider>
        <outsider class="DoCO:TextBox" type="footer" id="23" page="5" column="1">v</outsider>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="24" page="6" column="1">Contents</h1>
        <region class="DoCO:TextChunk" id="25" confidence="possible" page="6" column="1">1. Overview.............................................................................................................................................. 1 1.1 Scope............................................................................................................................................ 1 2. References............................................................................................................................................ 2 3. Definitions............................................................................................................................................ 2 4. Considerations for producing a good SRS........................................................................................... 3 4.1 Nature of the SRS ........................................................................................................................ 3 4.2 Environment of the SRS .............................................................................................................. 3 4.3 Characteristics of a good SRS...................................................................................................... 4 4.4 Joint preparation of the SRS ........................................................................................................ 8 4.5 SRS evolution .............................................................................................................................. 8 4.6 Prototyping................................................................................................................................... 9 4.7 Embedding design in the SRS...................................................................................................... 9 4.8 Embedding project requirements in the SRS ............................................................................. 10 5. The parts of an SRS ........................................................................................................................... 10 5.1 Introduction (Section 1 of the SRS)........................................................................................... 11 5.2 Overall description (Section 2 of the SRS)................................................................................ 12 5.3 Specific requirements (Section 3 of the SRS)............................................................................ 15 5.4 Supporting information.............................................................................................................. 19 Annex A (informative) SRS templates........................................................................................................ 21 Annex B (informative) Guidelines for compliance with IEEE/EIA 12207.1-1997.................................... 27</region>
        <outsider class="DoCO:TextBox" type="footer" id="26" page="6" column="1">vi</outsider>
        <outsider class="DoCO:TextBox" type="footer" id="27" page="6" column="1">Copyright © 1998 IEEE. All rights reserved.</outsider>
        <region class="unknown" id="28" page="7" column="1">IEEE Recommended Practice for Software Requirements SpeciÞcations</region>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="29" confidence="possible" page="7" column="1">1. Overview</h1>
        <region class="DoCO:TextChunk" id="30" page="7" column="1">This recommended practice describes recommended approaches for the speciÞcation of software requirements. It is divided into Þve clauses. Clause 1 explains the scope of this recommended practice. Clause 2 lists the references made to other standards. Clause 3 provides deÞnitions of speciÞc terms used. Clause 4 provides background information for writing a good SRS. Clause 5 discusses each of the essential parts of an SRS. This recommended practice also has two annexes, one which provides alternate format templates, and one which provides guidelines for compliance with IEEE/EIA 12207.1-1997.</region>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="31" page="7" column="1">1.1 Scope</h2>
          <region class="DoCO:TextChunk" id="36" page="7" column="1">This is a recommended practice for writing software requirements speciÞcations. It describes the content and qualities of a good software requirements speciÞcation (SRS) and presents several sample SRS outlines. <marker type="block"/> This recommended practice is aimed at specifying requirements of software to be developed but also can be applied to assist in the selection of in-house and commercial software products. However, application to already-developed software could be counterproductive.<marker type="block"/> When software is embedded in some larger system, such as medical equipment, then issues beyond those identiÞed in this recommended practice may have to be addressed.<marker type="block"/> This recommended practice describes the process of creating a product and the content of the product. The product is an SRS. This recommended practice can be used to create such an SRS directly or can be used as a model for a more speciÞc standard.<marker type="block"/> This recommended practice does not identify any speciÞc method, nomenclature, or tool for preparing an SRS.</region>
          <outsider class="DoCO:TextBox" type="footer" id="37" page="7" column="1">Copyright © 1998 IEEE. All rights reserved.</outsider>
          <outsider class="DoCO:TextBox" type="page_nr" id="38" page="7" column="1">1</outsider>
          <outsider class="DoCO:TextBox" type="header" id="39" page="8" column="1">IEEE Std 830-1998</outsider>
          <outsider class="DoCO:TextBox" type="header" id="40" page="8" column="1">IEEE RECOMMENDED PRACTICE FOR</outsider>
        </section>
      </section>
      <section class="DoCO:Bibliography">
        <h1 class="DoCO:SectionTitle" id="41" confidence="possible" page="8" column="1">2. References</h1>
        <region class="DoCO:TextChunk" id="42" confidence="possible" page="8" column="1">This recommended practice shall be used in conjunction with the following publications. ASTM E1340-96, Standard Guide for Rapid Prototyping of Computerized Systems. 1 IEEE Std 610.12-1990, IEEE Standard Glossary of Software Engineering Terminology. 2 IEEE Std 730-1998, IEEE Standard for Software Quality Assurance Plans. IEEE Std 730.1-1995, IEEE Guide for Software Quality Assurance Planning. IEEE Std 828-1998, IEEE Standard for Software ConÞguration Management Plans. 3 IEEE Std 982.1-1988, IEEE Standard Dictionary of Measures to Produce Reliable Software.</region>
        <region class="DoCO:TextChunk" id="43" page="8" column="1">IEEE Std 982.2-1988, IEEE Guide for the Use of IEEE Standard Dictionary of Measures to Produce Reliable Software.</region>
        <region class="DoCO:TextChunk" id="44" confidence="possible" page="8" column="1">IEEE Std 1002-1987 (Reaff 1992), IEEE Standard Taxonomy for Software Engineering Standards. IEEE Std 1012-1998, IEEE Standard for Software VeriÞcation and Validation.</region>
        <region class="DoCO:TextChunk" id="45" page="8" column="1">IEEE Std 1012a-1998, IEEE Standard for Software VeriÞcation and Validation: Content Map to IEEE/EIA 12207.1-1997. 4</region>
        <region class="DoCO:TextChunk" id="47" confidence="possible" page="8" column="1">IEEE Std 1016-1998, IEEE Recommended Practice for Software Design Descriptions. 5 IEEE Std 1028-1997, IEEE Standard for Software Reviews. IEEE Std 1042-1987 (Reaff 1993), IEEE Guide to Software ConÞguration Management. IEEE P1058/D2.1, Draft Standard for <xref ref-type="bibr" rid="R2" id="46" class="deo:Reference">Software Project Management Plans, dated 5 August 1998</xref>. 6</region>
        <region class="DoCO:TextChunk" id="48" page="8" column="1">IEEE Std 1058a-1998, IEEE Standard for Software Project Management Plans: Content Map to IEEE/EIA 12207.1-1997. 7</region>
        <region class="DoCO:TextChunk" id="52" confidence="possible" page="8" column="1">IEEE Std 1074-1997, IEEE Standard for Developing Software Life Cycle Processes. <xref ref-type="bibr" rid="R2" id="49" class="deo:Reference">IEEE Std 1233, 1998</xref> Edition, IEEE Guide for Developing System Requirements SpeciÞcations. 8 1 ASTM publications are available from the American Society for Testing and Materials, 100 Barr Harbor Drive, West Conshohocken, PA 19428-2959, USA. 2 IEEE publications are available from the Institute of Electrical and Electronics Engineers, 445 Hoes Lane, P.O. Box 1331, Piscataway, NJ 08855-1331, USA. 3 As this standard goes to press, IEEE Std 828-1998; IEEE Std 1012a-1998; IEEE Std 1016-1998; and <xref ref-type="bibr" rid="R2" id="50" class="deo:Reference">IEEE Std 1233, 1998</xref> Edition are approved but not yet published. The draft standards are, however, available from the IEEE. Anticipated publication date is Fall 1998. Contact the IEEE Standards Department at 1 (732) 562-3800 for status information. 4 See Footnote 3. 5 See Footnote 3. 6 Upon approval of IEEE P1058 by the IEEE-SA Standards Board, this standard will be integrated with IEEE Std 1058a-1998 and published as <xref ref-type="bibr" rid="R2" id="51" class="deo:Reference">IEEE Std 1058, 1998</xref> Edition. Approval is expected 8 December 1998. 7 As this standard goes to press, IEEE Std 1058a-1998 is approved but not yet published. The draft standard is, however, available from the IEEE. Anticipated publication date is December 1998. Contact the IEEE Standards Department at 1 (732) 562-3800 for status information. See Footnote 6. 8 See Footnote 3.</region>
        <outsider class="DoCO:TextBox" type="page_nr" id="53" page="8" column="1">2</outsider>
        <outsider class="DoCO:TextBox" type="footer" id="54" page="8" column="1">Copyright © 1998 IEEE. All rights reserved.</outsider>
        <outsider class="DoCO:TextBox" type="header" id="55" page="9" column="1">SOFTWARE REQUIREMENTS SPECIFICATIONS</outsider>
        <outsider class="DoCO:TextBox" type="header" id="56" page="9" column="1">IEEE Std 830-1998</outsider>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="57" confidence="possible" page="9" column="1">3. DeÞnitions</h1>
        <region class="DoCO:TextChunk" id="62" page="9" column="1">In general the deÞnitions of terms used in this recommended practice conform to the deÞnitions provided in IEEE Std 610.12-1990. The deÞnitions below are key terms as they are used in this recommended practice. <marker type="block"/> 3.1 contract: A legally binding document agreed upon by the customer and supplier. This includes the technical and organizational requirements, cost, and schedule for a product. A contract may also contain infor- mal but useful information such as the commitments or expectations of the parties involved.<marker type="block"/> 3.2 customer: The person, or persons, who pay for the product and usually (but not necessarily) decide the requirements. In the context of this recommended practice the customer and the supplier may be members of the same organization.<marker type="block"/> 3.3 supplier: The person, or persons, who produce a product for a customer. In the context of this recommended practice, the customer and the supplier may be members of the same organization.<marker type="block"/> 3.4 user: The person, or persons, who operate or interact directly with the product. The user(s) and the customer(s) are often not the same person(s).</region>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="63" confidence="possible" page="9" column="1">4. Considerations for producing a good SRS</h1>
        <region class="DoCO:TextChunk" id="64" page="9" column="1">This clause provides background information that should be considered when writing an SRS. This includes the following:</region>
        <region class="DoCO:TextChunk" id="65" confidence="possible" page="9" column="1">a) Nature of the SRS; b) Environment of the SRS; c) Characteristics of a good SRS; d) Joint preparation of the SRS; e) SRS evolution; f) Prototyping; g) Embedding design in the SRS; h) Embedding project requirements in the SRS.</region>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="66" page="9" column="1">4.1 Nature of the SRS</h2>
          <region class="DoCO:TextChunk" id="67" page="9" column="1">The SRS is a speciÞcation for a particular software product, program, or set of programs that performs certain functions in a speciÞc environment. The SRS may be written by one or more representatives of the supplier, one or more representatives of the customer, or by both. Subclause 4.4 recommends both.</region>
          <region class="DoCO:TextChunk" id="68" confidence="possible" page="9" column="1">The basic issues that the SRS writer(s) shall address are the following: a) Functionality. What is the software supposed to do? b) External interfaces. How does the software interact with people, the systemÕs hardware, other hardware, and other software? c) Performance. What is the speed, availability, response time, recovery time of various software functions, etc.? d) Attributes. What are the portability, correctness, maintainability, security, etc. considerations? e) Design constraints imposed on an implementation. Are there any required standards in effect, implementation language, policies for database integrity, resource limits, operating environment(s) etc.? The SRS writer(s) should avoid placing either design or project requirements in the SRS. For recommended contents of an SRS see Clause 5.</region>
          <outsider class="DoCO:TextBox" type="footer" id="69" page="9" column="1">Copyright © 1998 IEEE. All rights reserved.</outsider>
          <outsider class="DoCO:TextBox" type="page_nr" id="70" page="9" column="1">3</outsider>
          <outsider class="DoCO:TextBox" type="header" id="71" page="10" column="1">IEEE Std 830-1998</outsider>
          <outsider class="DoCO:TextBox" type="header" id="72" page="10" column="1">IEEE RECOMMENDED PRACTICE FOR</outsider>
        </section>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="73" page="10" column="1">4.2 Environment of the SRS</h2>
          <region class="DoCO:TextChunk" id="76" page="10" column="1">It is important to consider the part that the SRS plays in the total project plan, which is deÞned in IEEE Std 610.12-1990. The software may contain essentially all the functionality of the project or it may be part of a larger system. In the latter case typically there will be an SRS that will state the interfaces between the system and its software portion, and will place external performance and functionality requirements upon the software portion. Of course the SRS should then agree with and expand upon these system requirements. <marker type="block"/> IEEE Std 1074-1997 describes the steps in the software life cycle and the applicable inputs for each step. Other standards, such as those listed in Clause 2, relate to other parts of the software life cycle and so may complement software requirements.<marker type="block"/> Since the SRS has a speciÞc role to play in the software development process, the SRS writer(s) should be careful not to go beyond the bounds of that role. This means the SRS</region>
          <region class="DoCO:TextChunk" id="77" confidence="possible" page="10" column="1">a) Should correctly deÞne all of the software requirements. A software requirement may exist because of the nature of the task to be solved or because of a special characteristic of the project. b) Should not describe any design or implementation details. These should be described in the design stage of the project. c) Should not impose additional constraints on the software. These are properly speciÞed in other documents such as a software quality assurance plan.</region>
          <region class="DoCO:TextChunk" id="78" page="10" column="1">Therefore, a properly written SRS limits the range of valid designs, but does not specify any particular design.</region>
        </section>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="79" page="10" column="1">4.3 Characteristics of a good SRS</h2>
          <region class="DoCO:TextChunk" id="80" confidence="possible" page="10" column="1">An SRS should be a) Correct; b) Unambiguous; c) Complete; d) Consistent; e) Ranked for importance and/or stability; f) VeriÞable; g) ModiÞable; h) Traceable. 4.3.1 Correct An SRS is correct if, and only if, every requirement stated therein is one that the software shall meet.</region>
          <region class="DoCO:TextChunk" id="81" page="10" column="1">There is no tool or procedure that ensures correctness. The SRS should be compared with any applicable superior speciÞcation, such as a system requirements speciÞcation, with other project documentation, and with other applicable standards, to ensure that it agrees. Alternatively the customer or user can determine if the SRS correctly reßects the actual needs. Traceability makes this procedure easier and less prone to error (see 4.3.8).</region>
          <section class="DoCO:Section">
            <h3 class="DoCO:SectionTitle" id="82" page="10" column="1">4.3.2 Unambiguous</h3>
            <region class="DoCO:TextChunk" id="89" page="10" column="1">An SRS is unambiguous if, and only if, every requirement stated therein has only one interpretation. As a minimum, this requires that each characteristic of the Þnal product be described using a single unique term. <marker type="page" number="11"/><marker type="block"/> In cases where a term used in a particular context could have multiple meanings, the term should be included in a glossary where its meaning is made more speciÞc.<marker type="block"/> An SRS is an important part of the requirements process of the software life cycle and is used in design, implementation, project monitoring, veriÞcation and validation, and in training as described in IEEE Std 1074-1997. The SRS should be unambiguous both to those who create it and to those who use it. However, these groups often do not have the same background and therefore do not tend to describe software requirements the same way. Representations that improve the requirements speciÞcation for the developer may be counterproductive in that they diminish understanding to the user and vice versa.</region>
            <outsider class="DoCO:TextBox" type="page_nr" id="84" page="10" column="1">4</outsider>
            <outsider class="DoCO:TextBox" type="footer" id="85" page="10" column="1">Copyright © 1998 IEEE. All rights reserved.</outsider>
            <outsider class="DoCO:TextBox" type="header" id="86" page="11" column="1">SOFTWARE REQUIREMENTS SPECIFICATIONS</outsider>
            <outsider class="DoCO:TextBox" type="header" id="87" page="11" column="1">IEEE Std 830-1998</outsider>
            <region class="DoCO:TextChunk" id="90" confidence="possible" page="11" column="1">Subclauses 4.3.2.1 through 4.3.2.3 recommend how to avoid ambiguity. 4.3.2.1 Natural language pitfalls</region>
            <region class="DoCO:TextChunk" id="98" page="11" column="1">Requirements are often written in natural language (e.g., English). Natural language is inherently ambiguous. A natural language SRS should be reviewed by an independent party to identify ambiguous use of language so that it can be corrected. <marker type="block"/> One way to avoid the ambiguity inherent in natural language is to write the SRS in a particular requirements speciÞcation language. Its language processors automatically detect many lexical, syntactic, and semantic errors.<marker type="block"/> One disadvantage in the use of such languages is the length of time required to learn them. Also, many non- technical users Þnd them unintelligible. Moreover, these languages tend to be better at expressing certain types of requirements and addressing certain types of systems. Thus, they may inßuence the requirements in subtle ways.<marker type="block"/> In general, requirements methods and languages and the tools that support them fall into three general cate- goriesÑobject, process, and behavioral. Object-oriented approaches organize the requirements in terms of real-world objects, their attributes, and the services performed by those objects. Process-based approaches organize the requirements into hierarchies of functions that communicate via data ßows. Behavioral approaches describe external behavior of the system in terms of some abstract notion (such as predicate calculus), mathematical functions, or state machines.<marker type="block"/> The degree to which such tools and methods may be useful in preparing an SRS depends upon the size and complexity of the program. No attempt is made here to describe or endorse any particular tool.<marker type="block"/> When using any of these approaches it is best to retain the natural language descriptions. That way, customers unfamiliar with the notations can still understand the SRS.</region>
            <h4 class="unknown" id="92" page="11" column="1">4.3.2.2 Requirements speciÞcation languages</h4>
            <h4 class="unknown" id="95" page="11" column="1">4.3.2.3 Representation tools</h4>
          </section>
          <section class="DoCO:Section">
            <h3 class="DoCO:SectionTitle" id="99" page="11" column="1">4.3.3 Complete</h3>
            <region class="DoCO:TextChunk" id="100" confidence="possible" page="11" column="1">An SRS is complete if, and only if, it includes the following elements: a) All signiÞcant requirements, whether relating to functionality, performance, design constraints, attributes, or external interfaces. In particular any external requirements imposed by a system speciÞcation should be acknowledged and treated.</region>
            <outsider class="DoCO:TextBox" type="footer" id="101" page="11" column="1">Copyright © 1998 IEEE. All rights reserved.</outsider>
            <outsider class="DoCO:TextBox" type="page_nr" id="102" page="11" column="1">5</outsider>
            <outsider class="DoCO:TextBox" type="header" id="103" page="12" column="1">IEEE Std 830-1998</outsider>
            <outsider class="DoCO:TextBox" type="header" id="104" page="12" column="1">IEEE RECOMMENDED PRACTICE FOR</outsider>
            <region class="DoCO:TextChunk" id="105" confidence="possible" page="12" column="1">b) DeÞnition of the responses of the software to all realizable classes of input data in all realizable classes of situations. Note that it is important to specify the responses to both valid and invalid input values. c) Full labels and references to all Þgures, tables, and diagrams in the SRS and deÞnition of all terms and units of measure. 4.3.3.1 Use of TBDs</region>
            <region class="DoCO:TextChunk" id="106" page="12" column="1">Any SRS that uses the phrase Òto be determinedÓ (TBD) is not a complete SRS. The TBD is, however, occasionally necessary and should be accompanied by</region>
            <region class="DoCO:TextChunk" id="107" confidence="possible" page="12" column="1">a) A description of the conditions causing the TBD (e.g., why an answer is not known) so that the situation can be resolved; b) A description of what must be done to eliminate the TBD, who is responsible for its elimination, and by when it must be eliminated. 4.3.4 Consistent</region>
            <region class="DoCO:TextChunk" id="110" page="12" column="1">Consistency refers to internal consistency. If an SRS does not agree with some higher-level document, such as a system requirements speciÞcation, then it is not correct (see 4.3.1). <marker type="block"/> An SRS is internally consistent if, and only if, no subset of individual requirements described in it conßict. The three types of likely conßicts in an SRS are as follows:</region>
            <h4 class="unknown" id="109" page="12" column="1">4.3.4.1 Internal consistency</h4>
            <region class="DoCO:TextChunk" id="111" confidence="possible" page="12" column="1">a) The speciÞed characteristics of real-world objects may conßict. For example, 1) The format of an output report may be described in one requirement as tabular but in another as textual. 2) One requirement may state that all lights shall be green while another may state that all lights shall be blue. b) There may be logical or temporal conßict between two speciÞed actions. For example, 1) One requirement may specify that the program will add two inputs and another may specify that the program will multiply them. 2) One requirement may state that ÒAÓ must always follow ÒB,Ó while another may require that ÒA and BÓ occur simultaneously. c) Two or more requirements may describe the same real-world object but use different terms for that object. For example, a programÕs request for a user input may be called a ÒpromptÓ in one requirement and a ÒcueÓ in another. The use of standard terminology and deÞnitions promotes consistency. 4.3.5 Ranked for importance and/or stability</region>
            <region class="DoCO:TextChunk" id="118" page="12" column="1">An SRS is ranked for importance and/or stability if each requirement in it has an identiÞer to indicate either the importance or stability of that particular requirement. <marker type="block"/> Typically, all of the requirements that relate to a software product are not equally important. Some requirements may be essential, especially for life-critical applications, while others may be desirable.<marker type="page" number="13"/><marker type="block"/> Each requirement in the SRS should be identiÞed to make these differences clear and explicit. Identifying the requirements in the following manner helps:</region>
            <outsider class="DoCO:TextBox" type="page_nr" id="114" page="12" column="1">6</outsider>
            <outsider class="DoCO:TextBox" type="footer" id="115" page="12" column="1">Copyright © 1998 IEEE. All rights reserved.</outsider>
            <outsider class="DoCO:TextBox" type="header" id="116" page="13" column="1">SOFTWARE REQUIREMENTS SPECIFICATIONS</outsider>
            <outsider class="DoCO:TextBox" type="header" id="117" page="13" column="1">IEEE Std 830-1998</outsider>
            <region class="DoCO:TextChunk" id="119" confidence="possible" page="13" column="1">a) Have customers give more careful consideration to each requirement, which often clariÞes any hidden assumptions they may have. b) Have developers make correct design decisions and devote appropriate levels of effort to the different parts of the software product. 4.3.5.1 Degree of stability</region>
            <region class="DoCO:TextChunk" id="122" page="13" column="1">One method of identifying requirements uses the dimension of stability. Stability can be expressed in terms of the number of expected changes to any requirement based on experience or knowledge of forthcoming events that affect the organization, functions, and people supported by the software system. <marker type="block"/> Another way to rank requirements is to distinguish classes of requirements as essential, conditional, and optional.</region>
            <h4 class="unknown" id="121" page="13" column="1">4.3.5.2 Degree of necessity</h4>
            <region class="DoCO:TextChunk" id="123" confidence="possible" page="13" column="1">a) Essential. Implies that the software will not be acceptable unless these requirements are provided in an agreed manner. b) Conditional. Implies that these are requirements that would enhance the software product, but would not make it unacceptable if they are absent. c) Optional. Implies a class of functions that may or may not be worthwhile. This gives the supplier the opportunity to propose something that exceeds the SRS. 4.3.6 VeriÞable</region>
            <region class="DoCO:TextChunk" id="125" page="13" column="1">An SRS is veriÞable if, and only if, every requirement stated therein is veriÞable. A requirement is veriÞable if, and only if, there exists some Þnite cost-effective process with which a person or machine can check that the software product meets the requirement. In general any ambiguous requirement is not veriÞable. <marker type="block"/> NonveriÞable requirements include statements such as Òworks well,Ó Ògood human interface,Ó and Òshall usually happen.Ó These requirements cannot be veriÞed because it is impossible to deÞne the terms Ògood,Ó Òwell,Ó or Òusually.Ó The statement that Òthe program shall never enter an inÞnite loopÓ is nonveriÞable because the testing of this quality is theoretically impossible.</region>
            <region class="DoCO:TextChunk" id="126" confidence="possible" page="13" column="1">An example of a veriÞable statement is Output of the program shall be produced within 20 s of event  ́ 60% of the time; and shall be produced within 30 s of event  ́ 100% of the time. This statement can be veriÞed because it uses concrete terms and measurable quantities.</region>
            <region class="DoCO:TextChunk" id="127" page="13" column="1">If a method cannot be devised to determine whether the software meets a particular requirement, then that requirement should be removed or revised.</region>
            <outsider class="DoCO:TextBox" type="footer" id="128" page="13" column="1">Copyright © 1998 IEEE. All rights reserved.</outsider>
            <outsider class="DoCO:TextBox" type="page_nr" id="129" page="13" column="1">7</outsider>
            <outsider class="DoCO:TextBox" type="header" id="130" page="14" column="1">IEEE Std 830-1998</outsider>
            <outsider class="DoCO:TextBox" type="header" id="131" page="14" column="1">IEEE RECOMMENDED PRACTICE FOR</outsider>
          </section>
          <section class="DoCO:Section">
            <h3 class="DoCO:SectionTitle" id="132" page="14" column="1">4.3.7 ModiÞable</h3>
            <region class="DoCO:TextChunk" id="133" page="14" column="1">An SRS is modiÞable if, and only if, its structure and style are such that any changes to the requirements can be made easily, completely, and consistently while retaining the structure and style. ModiÞability generally requires an SRS to</region>
            <region class="DoCO:TextChunk" id="134" confidence="possible" page="14" column="1">a) Have a coherent and easy-to-use organization with a table of contents, an index, and explicit cross- referencing; b) Not be redundant (i.e., the same requirement should not appear in more than one place in the SRS); c) Express each requirement separately, rather than intermixed with other requirements.</region>
            <region class="DoCO:TextChunk" id="135" page="14" column="1">Redundancy itself is not an error, but it can easily lead to errors. Redundancy can occasionally help to make an SRS more readable, but a problem can arise when the redundant document is updated. For instance, a requirement may be altered in only one of the places where it appears. The SRS then becomes inconsistent. Whenever redundancy is necessary, the SRS should include explicit cross-references to make it modiÞable.</region>
          </section>
          <section class="DoCO:Section">
            <h3 class="DoCO:SectionTitle" id="136" page="14" column="1">4.3.8 Traceable</h3>
            <region class="DoCO:TextChunk" id="137" page="14" column="1">An SRS is traceable if the origin of each of its requirements is clear and if it facilitates the referencing of each requirement in future development or enhancement documentation. The following two types of traceability are recommended:</region>
            <region class="DoCO:TextChunk" id="138" confidence="possible" page="14" column="1">a) Backward traceability (i.e., to previous stages of development). This depends upon each requirement explicitly referencing its source in earlier documents. b) Forward traceability (i.e., to all documents spawned by the SRS). This depends upon each requirement in the SRS having a unique name or reference number.</region>
            <region class="DoCO:TextChunk" id="139" page="14" column="1">The forward traceability of the SRS is especially important when the software product enters the operation and maintenance phase. As code and design documents are modiÞed, it is essential to be able to ascertain the complete set of requirements that may be affected by those modiÞcations.</region>
          </section>
        </section>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="140" page="14" column="1">4.4 Joint preparation of the SRS</h2>
          <region class="DoCO:TextChunk" id="141" page="14" column="1">The software development process should begin with supplier and customer agreement on what the completed software must do. This agreement, in the form of an SRS, should be jointly prepared. This is important because usually neither the customer nor the supplier is qualiÞed to write a good SRS alone.</region>
          <region class="DoCO:TextChunk" id="142" confidence="possible" page="14" column="1">a) Customers usually do not understand the software design and development process well enough to write a usable SRS. b) Suppliers usually do not understand the customerÕs problem and Þeld of endeavor well enough to specify requirements for a satisfactory system.</region>
          <region class="DoCO:TextChunk" id="149" page="14" column="1">Therefore, the customer and the supplier should work together to produce a well-written and completely understood SRS. <marker type="block"/> A special situation exists when a system and its software are both being deÞned concurrently. Then the functionality, interfaces, performance, and other attributes and constraints of the software are not predeÞned, but rather are jointly deÞned and subject to negotiation and change. This makes it more difÞcult, but no less important, to meet the characteristics stated in 4.3. In particular, an SRS that does not comply with the requirements of its parent system speciÞcation is incorrect.<marker type="page" number="15"/><marker type="block"/> This recommended practice does not speciÞcally discuss style, language usage, or techniques of good writing. It is quite important, however, that an SRS be well written. General technical writing books can be used for guidance.</region>
          <outsider class="DoCO:TextBox" type="page_nr" id="145" page="14" column="1">8</outsider>
          <outsider class="DoCO:TextBox" type="footer" id="146" page="14" column="1">Copyright © 1998 IEEE. All rights reserved.</outsider>
          <outsider class="DoCO:TextBox" type="header" id="147" page="15" column="1">SOFTWARE REQUIREMENTS SPECIFICATIONS</outsider>
          <outsider class="DoCO:TextBox" type="header" id="148" page="15" column="1">IEEE Std 830-1998</outsider>
        </section>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="150" page="15" column="1">4.5 SRS evolution</h2>
          <region class="DoCO:TextChunk" id="151" page="15" column="1">The SRS may need to evolve as the development of the software product progresses. It may be impossible to specify some details at the time the project is initiated (e.g., it may be impossible to deÞne all of the screen formats for an interactive program during the requirements phase). Additional changes may ensue as deÞ- ciencies, shortcomings, and inaccuracies are discovered in the SRS.</region>
          <region class="DoCO:TextChunk" id="152" confidence="possible" page="15" column="1">Two major considerations in this process are the following: a) Requirements should be speciÞed as completely and thoroughly as is known at the time, even if evolutionary revisions can be foreseen as inevitable. The fact that they are incomplete should be noted. b) A formal change process should be initiated to identify, control, track, and report projected changes. Approved changes in requirements should be incorporated in the SRS in such a way as to 1) Provide an accurate and complete audit trail of changes; 2) Permit the review of current and superseded portions of the SRS.</region>
        </section>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="153" page="15" column="1">4.6 Prototyping</h2>
          <region class="DoCO:TextChunk" id="154" page="15" column="1">Prototyping is used frequently during the requirements portion of a project. Many tools exist that allow a prototype, exhibiting some characteristics of a system, to be created very quickly and easily. See also ASTM E1340-96.</region>
          <region class="DoCO:TextChunk" id="155" confidence="possible" page="15" column="1">Prototypes are useful for the following reasons: a) The customer may be more likely to view the prototype and react to it than to read the SRS and react to it. Thus, the prototype provides quick feedback. b) The prototype displays unanticipated aspects of the systems behavior. Thus, it produces not only answers but also new questions. This helps reach closure on the SRS. c) An SRS based on a prototype tends to undergo less change during development, thus shortening development time.</region>
          <region class="DoCO:TextChunk" id="156" page="15" column="1">A prototype should be used as a way to elicit software requirements. Some characteristics such as screen or report formats can be extracted directly from the prototype. Other requirements can be inferred by running experiments with the prototype.</region>
        </section>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="157" page="15" column="1">4.7 Embedding design in the SRS</h2>
          <region class="DoCO:TextChunk" id="163" page="15" column="1">A requirement speciÞes an externally visible function or attribute of a system. A design describes a particular subcomponent of a system and/or its interfaces with other subcomponents. The SRS writer(s) should clearly distinguish between identifying required design constraints and projecting a speciÞc design. Note that every requirement in the SRS limits design alternatives. This does not mean, though, that every requirement is design. <marker type="page" number="16"/><marker type="block"/> The SRS should specify what functions are to be performed on what data to produce what results at what location for whom. The SRS should focus on the services to be performed. The SRS should not normally specify design items such as the following:</region>
          <outsider class="DoCO:TextBox" type="footer" id="159" page="15" column="1">Copyright © 1998 IEEE. All rights reserved.</outsider>
          <outsider class="DoCO:TextBox" type="page_nr" id="160" page="15" column="1">9</outsider>
          <outsider class="DoCO:TextBox" type="header" id="161" page="16" column="1">IEEE Std 830-1998</outsider>
          <outsider class="DoCO:TextBox" type="header" id="162" page="16" column="1">IEEE RECOMMENDED PRACTICE FOR</outsider>
          <region class="DoCO:TextChunk" id="164" confidence="possible" page="16" column="1">a) Partitioning the software into modules; b) Allocating functions to the modules; c) Describing the ßow of information or control between modules; d) Choosing data structures. 4.7.1 Necessary design requirements</region>
          <region class="DoCO:TextChunk" id="165" page="16" column="1">In special cases some requirements may severely restrict the design. For example, security or safety requirements may reßect directly into design such as the need to</region>
          <region class="DoCO:TextChunk" id="166" confidence="possible" page="16" column="1">a) Keep certain functions in separate modules; b) Permit only limited communication between some areas of the program; c) Check data integrity for critical variables.</region>
          <region class="DoCO:TextChunk" id="168" page="16" column="1">Examples of valid design constraints are physical requirements, performance requirements, software development standards, and software quality assurance standards. <marker type="block"/> Therefore, the requirements should be stated from a purely external viewpoint. When using models to illus- trate the requirements, remember that the model only indicates the external behavior, and does not specify a design.</region>
        </section>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="169" page="16" column="1">4.8 Embedding project requirements in the SRS</h2>
          <region class="DoCO:TextChunk" id="170" confidence="possible" page="16" column="1">The SRS should address the software product, not the process of producing the software product.</region>
          <region class="DoCO:TextChunk" id="171" page="16" column="1">Project requirements represent an understanding between the customer and the supplier about contractual matters pertaining to production of software and thus should not be included in the SRS. These normally include items such as</region>
          <region class="DoCO:TextChunk" id="172" confidence="possible" page="16" column="1">a) Cost; b) Delivery schedules; c) Reporting procedures; d) Software development methods; e) Quality assurance; f) Validation and veriÞcation criteria; g) Acceptance procedures.</region>
          <region class="DoCO:TextChunk" id="173" page="16" column="1">Project requirements are speciÞed in other documents, typically in a software development plan, a software quality assurance plan, or a statement of work.</region>
        </section>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="174" confidence="possible" page="16" column="1">5. The parts of an SRS</h1>
        <region class="DoCO:TextChunk" id="176" page="16" column="1">This clause discusses each of the essential parts of the SRS. These parts are arranged in Figure 1 in an outline that can serve as an example for writing an SRS. <marker type="block"/> While an SRS does not have to follow this outline or use the names given here for its parts, a good SRS should include all the information discussed here.</region>
        <outsider class="DoCO:TextBox" type="page_nr" id="177" page="16" column="1">10</outsider>
        <outsider class="DoCO:TextBox" type="footer" id="178" page="16" column="1">Copyright © 1998 IEEE. All rights reserved.</outsider>
        <outsider class="DoCO:TextBox" type="header" id="179" page="17" column="1">SOFTWARE REQUIREMENTS SPECIFICATIONS</outsider>
        <outsider class="DoCO:TextBox" type="header" id="180" page="17" column="1">IEEE Std 830-1998</outsider>
        <region class="unknown" id="181" page="17" column="1">Table of Contents 1. Introduction 1.1 Purpose 1.2 Scope 1.3 Definitions, acronyms, and abbreviations 1.4 References 1.5 Overview 2. Overall description 2.1 Product perspective 2.2 Product functions 2.3 User characteristics 2.4 Constraints 2.5 Assumptions and dependencies 3. Specific requirements (See 5.3.1 through 5.3.8 for explanations of possible specific requirements. See also Annex A for several different ways of organizing this section of the SRS.) Appendixes Index Figure 1ÑPrototype SRS outline</region>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="182" page="17" column="1">5.1 Introduction (Section 1 of the SRS)</h2>
          <region class="DoCO:TextChunk" id="183" page="17" column="1">The introduction of the SRS should provide an overview of the entire SRS. It should contain the following subsections:</region>
          <region class="DoCO:TextChunk" id="184" confidence="possible" page="17" column="1">a) Purpose; b) Scope; c) DeÞnitions, acronyms, and abbreviations; d) References; e) Overview. 5.1.1 Purpose (1.1 of the SRS) This subsection should a) Delineate the purpose of the SRS; b) Specify the intended audience for the SRS. 5.1.2 Scope (1.2 of the SRS) This subsection should a) Identify the software product(s) to be produced by name (e.g., Host DBMS, Report Generator, etc.); b) Explain what the software product(s) will, and, if necessary, will not do; c) Describe the application of the software being speciÞed, including relevant beneÞts, objectives, and goals; d) Be consistent with similar statements in higher-level speciÞcations (e.g., the system requirements speciÞcation), if they exist.</region>
          <outsider class="DoCO:TextBox" type="footer" id="185" page="17" column="1">Copyright © 1998 IEEE. All rights reserved.</outsider>
          <outsider class="DoCO:TextBox" type="page_nr" id="186" page="17" column="1">11</outsider>
          <outsider class="DoCO:TextBox" type="header" id="187" page="18" column="1">IEEE Std 830-1998</outsider>
          <outsider class="DoCO:TextBox" type="header" id="188" page="18" column="1">IEEE RECOMMENDED PRACTICE FOR</outsider>
          <section class="DoCO:Section">
            <h3 class="DoCO:SectionTitle" id="189" page="18" column="1">5.1.3 DeÞnitions, acronyms, and abbreviations (1.3 of the SRS)</h3>
            <region class="DoCO:TextChunk" id="190" page="18" column="1">This subsection should provide the deÞnitions of all terms, acronyms, and abbreviations required to properly interpret the SRS. This information may be provided by reference to one or more appendixes in the SRS or by reference to other documents.</region>
          </section>
          <section class="DoCO:Section">
            <h3 class="DoCO:SectionTitle" id="191" page="18" column="1">5.1.4 References (1.4 of the SRS)</h3>
            <region class="DoCO:TextChunk" id="192" confidence="possible" page="18" column="1">This subsection should a) Provide a complete list of all documents referenced elsewhere in the SRS; b) Identify each document by title, report number (if applicable), date, and publishing organization; c) Specify the sources from which the references can be obtained. This information may be provided by reference to an appendix or to another document. 5.1.5 Overview (1.5 of the SRS) This subsection should a) Describe what the rest of the SRS contains; b) Explain how the SRS is organized.</region>
          </section>
        </section>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="193" page="18" column="1">5.2 Overall description (Section 2 of the SRS)</h2>
          <region class="DoCO:TextChunk" id="194" page="18" column="1">This section of the SRS should describe the general factors that affect the product and its requirements. This section does not state speciÞc requirements. Instead, it provides a background for those requirements, which are deÞned in detail in Section 3 of the SRS, and makes them easier to understand.</region>
          <region class="DoCO:TextChunk" id="195" confidence="possible" page="18" column="1">This section usually consists of six subsections, as follows: a) Product perspective; b) Product functions; c) User characteristics; d) Constraints; e) Assumptions and dependencies; f) Apportioning of requirements. 5.2.1 Product perspective (2.1 of the SRS)</region>
          <region class="DoCO:TextChunk" id="202" page="18" column="1">This subsection of the SRS should put the product into perspective with other related products. If the product is independent and totally self-contained, it should be so stated here. If the SRS deÞnes a product that is a component of a larger system, as frequently occurs, then this subsection should relate the requirements of that larger system to functionality of the software and should identify interfaces between that system and the software. <marker type="block"/> A block diagram showing the major components of the larger system, interconnections, and external interfaces can be helpful.<marker type="page" number="19"/><marker type="block"/> This subsection should also describe how the software operates inside various constraints. For example, these constraints could include</region>
          <outsider class="DoCO:TextBox" type="page_nr" id="198" page="18" column="1">12</outsider>
          <outsider class="DoCO:TextBox" type="footer" id="199" page="18" column="1">Copyright © 1998 IEEE. All rights reserved.</outsider>
          <outsider class="DoCO:TextBox" type="header" id="200" page="19" column="1">SOFTWARE REQUIREMENTS SPECIFICATIONS</outsider>
          <outsider class="DoCO:TextBox" type="header" id="201" page="19" column="1">IEEE Std 830-1998</outsider>
          <region class="DoCO:TextChunk" id="203" confidence="possible" page="19" column="1">a) System interfaces; b) User interfaces; c) Hardware interfaces; d) Software interfaces; e) Communications interfaces; f) Memory; g) Operations; h) Site adaptation requirements. 5.2.1.1 System interfaces</region>
          <region class="DoCO:TextChunk" id="204" page="19" column="1">This should list each system interface and identify the functionality of the software to accomplish the system requirement and the interface description to match the system.</region>
          <h4 class="unknown" id="205" page="19" column="1">5.2.1.2 User interfaces</h4>
          <region class="DoCO:TextChunk" id="206" confidence="possible" page="19" column="1">This should specify the following: a) The logical characteristics of each interface between the software product and its users. This includes those conÞguration characteristics (e.g., required screen formats, page or window layouts, content of any reports or menus, or availability of programmable function keys) necessary to accomplish the software requirements. b) All the aspects of optimizing the interface with the person who must use the system. This may simply comprise a list of doÕs and donÕts on how the system will appear to the user. One example may be a requirement for the option of long or short error messages. Like all others, these requirements should be veriÞable, e.g., Òa clerk typist grade 4 can do function X in Z min after 1 h of trainingÓ rather than Òa typist can do function X. Ó (This may also be speciÞed in the Software System Attributes under a section titled Ease of Use.) 5.2.1.3 Hardware interfaces</region>
          <region class="DoCO:TextChunk" id="209" page="19" column="1">This should specify the logical characteristics of each interface between the software product and the hardware components of the system. This includes conÞguration characteristics (number of ports, instruction sets, etc.). It also covers such matters as what devices are to be supported, how they are to be supported, and protocols. For example, terminal support may specify full-screen support as opposed to line-by-line support. <marker type="block"/> This should specify the use of other required software products (e.g., a data management system, an operating system, or a mathematical package), and interfaces with other application systems (e.g., the linkage between an accounts receivable system and a general ledger system). For each required software product, the following should be provided:</region>
          <h4 class="unknown" id="208" page="19" column="1">5.2.1.4 Software interfaces</h4>
          <region class="DoCO:TextChunk" id="210" confidence="possible" page="19" column="1">Ñ Name; Ñ Mnemonic; Ñ SpeciÞcation number; Ñ Version number; Ñ Source.</region>
          <outsider class="DoCO:TextBox" type="footer" id="211" page="19" column="1">Copyright © 1998 IEEE. All rights reserved.</outsider>
          <outsider class="DoCO:TextBox" type="page_nr" id="212" page="19" column="1">13</outsider>
          <outsider class="DoCO:TextBox" type="header" id="213" page="20" column="1">IEEE Std 830-1998</outsider>
          <outsider class="DoCO:TextBox" type="header" id="214" page="20" column="1">IEEE RECOMMENDED PRACTICE FOR</outsider>
          <region class="DoCO:TextChunk" id="215" confidence="possible" page="20" column="1">For each interface, the following should be provided: Ñ Discussion of the purpose of the interfacing software as related to this software product. Ñ DeÞnition of the interface in terms of message content and format. It is not necessary to detail any well-documented interface, but a reference to the document deÞning the interface is required. 5.2.1.5 Communications interfaces This should specify the various interfaces to communications such as local network protocols, etc. 5.2.1.6 Memory constraints This should specify any applicable characteristics and limits on primary and secondary memory. 5.2.1.7 Operations This should specify the normal and special operations required by the user such as a) The various modes of operations in the user organization (e.g., user-initiated operations); b) Periods of interactive operations and periods of unattended operations; c) Data processing support functions; d) Backup and recovery operations. NOTEÑThis is sometimes speciÞed as part of the User Interfaces section.</region>
          <h4 class="unknown" id="216" page="20" column="1">5.2.1.8 Site adaptation requirements</h4>
          <region class="DoCO:TextChunk" id="217" confidence="possible" page="20" column="1">This should a) DeÞne the requirements for any data or initialization sequences that are speciÞc to a given site, mission, or operational mode (e.g., grid values, safety limits, etc.); b) Specify the site or mission-related features that should be modiÞed to adapt the software to a particular installation. 5.2.2 Product functions (2.2 of the SRS)</region>
          <region class="DoCO:TextChunk" id="219" page="20" column="1">This subsection of the SRS should provide a summary of the major functions that the software will perform. For example, an SRS for an accounting program may use this part to address customer account maintenance, customer statement, and invoice preparation without mentioning the vast amount of detail that each of those functions requires. <marker type="block"/> Sometimes the function summary that is necessary for this part can be taken directly from the section of the higher-level speciÞcation (if one exists) that allocates particular functions to the software product. Note that for the sake of clarity</region>
          <region class="DoCO:TextChunk" id="220" confidence="possible" page="20" column="1">a) The functions should be organized in a way that makes the list of functions understandable to the customer or to anyone else reading the document for the Þrst time. b) Textual or graphical methods can be used to show the different functions and their relationships. Such a diagram is not intended to show a design of a product, but simply shows the logical relationships among variables.</region>
          <outsider class="DoCO:TextBox" type="page_nr" id="221" page="20" column="1">14</outsider>
          <outsider class="DoCO:TextBox" type="footer" id="222" page="20" column="1">Copyright © 1998 IEEE. All rights reserved.</outsider>
          <outsider class="DoCO:TextBox" type="header" id="223" page="21" column="1">SOFTWARE REQUIREMENTS SPECIFICATIONS</outsider>
          <outsider class="DoCO:TextBox" type="header" id="224" page="21" column="1">IEEE Std 830-1998</outsider>
          <section class="DoCO:Section">
            <h3 class="DoCO:SectionTitle" id="225" page="21" column="1">5.2.3 User characteristics (2.3 of the SRS)</h3>
            <region class="DoCO:TextChunk" id="226" page="21" column="1">This subsection of the SRS should describe those general characteristics of the intended users of the product including educational level, experience, and technical expertise. It should not be used to state speciÞc requirements, but rather should provide the reasons why certain speciÞc requirements are later speciÞed in Section 3 of the SRS.</region>
          </section>
          <section class="DoCO:Section">
            <h3 class="DoCO:SectionTitle" id="227" page="21" column="1">5.2.4 Constraints (2.4 of the SRS)</h3>
            <region class="DoCO:TextChunk" id="228" page="21" column="1">This subsection of the SRS should provide a general description of any other items that will limit the devel- operÕs options. These include</region>
            <region class="DoCO:TextChunk" id="229" confidence="possible" page="21" column="1">a) Regulatory policies; b) Hardware limitations (e.g., signal timing requirements); c) Interfaces to other applications; d) Parallel operation; e) Audit functions; f) Control functions; g) Higher-order language requirements; h) Signal handshake protocols (e.g., XON-XOFF, ACK-NACK); i) Reliability requirements; j) Criticality of the application; k) Safety and security considerations. 5.2.5 Assumptions and dependencies (2.5 of the SRS)</region>
            <region class="DoCO:TextChunk" id="230" page="21" column="1">This subsection of the SRS should list each of the factors that affect the requirements stated in the SRS. These factors are not design constraints on the software but are, rather, any changes to them that can affect the requirements in the SRS. For example, an assumption may be that a speciÞc operating system will be available on the hardware designated for the software product. If, in fact, the operating system is not available, the SRS would then have to change accordingly.</region>
          </section>
          <section class="DoCO:Section">
            <h3 class="DoCO:SectionTitle" id="231" page="21" column="1">5.2.6 Apportioning of requirements (2.6 of the SRS)</h3>
            <region class="DoCO:TextChunk" id="232" page="21" column="1">This subsection of the SRS should identify requirements that may be delayed until future versions of the system.</region>
          </section>
        </section>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="233" page="21" column="1">5.3 SpeciÞc requirements (Section 3 of the SRS)</h2>
          <region class="DoCO:TextChunk" id="234" page="21" column="1">This section of the SRS should contain all of the software requirements to a level of detail sufÞcient to enable designers to design a system to satisfy those requirements, and testers to test that the system satisÞes those requirements. Throughout this section, every stated requirement should be externally perceivable by users, operators, or other external systems. These requirements should include at a minimum a description of every input (stimulus) into the system, every output (response) from the system, and all functions performed by the system in response to an input or in support of an output. As this is often the largest and most important part of the SRS, the following principles apply:</region>
          <region class="DoCO:TextChunk" id="235" confidence="possible" page="21" column="1">a) SpeciÞc requirements should be stated in conformance with all the characteristics described in 4.3. b) SpeciÞc requirements should be cross-referenced to earlier documents that relate. c) All requirements should be uniquely identiÞable. d) Careful attention should be given to organizing the requirements to maximize readability.</region>
          <outsider class="DoCO:TextBox" type="footer" id="236" page="21" column="1">Copyright © 1998 IEEE. All rights reserved.</outsider>
          <outsider class="DoCO:TextBox" type="page_nr" id="237" page="21" column="1">15</outsider>
          <outsider class="DoCO:TextBox" type="header" id="238" page="22" column="1">IEEE Std 830-1998</outsider>
          <outsider class="DoCO:TextBox" type="header" id="239" page="22" column="1">IEEE RECOMMENDED PRACTICE FOR</outsider>
          <region class="DoCO:TextChunk" id="240" page="22" column="1">Before examining speciÞc ways of organizing the requirements it is helpful to understand the various items that comprise requirements as described in 5.3.1 through 5.3.7.</region>
          <section class="DoCO:Section">
            <h3 class="DoCO:SectionTitle" id="241" page="22" column="1">5.3.1 External interfaces</h3>
            <region class="DoCO:TextChunk" id="242" page="22" column="1">This should be a detailed description of all inputs into and outputs from the software system. It should complement the interface descriptions in 5.2 and should not repeat information there.</region>
            <region class="DoCO:TextChunk" id="243" confidence="possible" page="22" column="1">It should include both content and format as follows: a) Name of item; b) Description of purpose; c) Source of input or destination of output; d) Valid range, accuracy, and/or tolerance; e) Units of measure; f) Timing; g) Relationships to other inputs/outputs; h) Screen formats/organization; i) Window formats/organization; j) Data formats; k) Command formats; l) End messages. 5.3.2 Functions</region>
            <region class="DoCO:TextChunk" id="244" page="22" column="1">Functional requirements should deÞne the fundamental actions that must take place in the software in accepting and processing the inputs and in processing and generating the outputs. These are generally listed as ÒshallÓ statements starting with ÒThe system shallÉÓ</region>
            <region class="DoCO:TextChunk" id="245" confidence="possible" page="22" column="1">These include a) Validity checks on the inputs b) Exact sequence of operations c) Responses to abnormal situations, including 1) Overßow 2) Communication facilities 3) Error handling and recovery d) Effect of parameters e) Relationship of outputs to inputs, including 1) Input/output sequences 2) Formulas for input to output conversion</region>
            <region class="DoCO:TextChunk" id="246" page="22" column="1">It may be appropriate to partition the functional requirements into subfunctions or subprocesses. This does not imply that the software design will also be partitioned that way.</region>
          </section>
          <section class="DoCO:Section">
            <h3 class="DoCO:SectionTitle" id="247" page="22" column="1">5.3.3 Performance requirements</h3>
            <region class="DoCO:TextChunk" id="248" page="22" column="1">This subsection should specify both the static and the dynamic numerical requirements placed on the software or on human interaction with the software as a whole. Static numerical requirements may include the following:</region>
            <region class="DoCO:TextChunk" id="249" confidence="possible" page="22" column="1">a) The number of terminals to be supported; b) The number of simultaneous users to be supported; c) Amount and type of information to be handled.</region>
            <outsider class="DoCO:TextBox" type="page_nr" id="250" page="22" column="1">16</outsider>
            <outsider class="DoCO:TextBox" type="footer" id="251" page="22" column="1">Copyright © 1998 IEEE. All rights reserved.</outsider>
            <outsider class="DoCO:TextBox" type="header" id="252" page="23" column="1">SOFTWARE REQUIREMENTS SPECIFICATIONS</outsider>
            <outsider class="DoCO:TextBox" type="header" id="253" page="23" column="1">IEEE Std 830-1998</outsider>
            <region class="DoCO:TextChunk" id="254" confidence="possible" page="23" column="1">Static numerical requirements are sometimes identiÞed under a separate section entitled Capacity.</region>
            <region class="DoCO:TextChunk" id="255" page="23" column="1">Dynamic numerical requirements may include, for example, the numbers of transactions and tasks and the amount of data to be processed within certain time periods for both normal and peak workload conditions.</region>
            <region class="DoCO:TextChunk" id="256" confidence="possible" page="23" column="1">All of these requirements should be stated in measurable terms. For example, 95% of the transactions shall be processed in less than 1 s. rather than, An operator shall not have to wait for the transaction to complete. NOTEÑNumerical limits applied to one speciÞc function are normally speciÞed as part of the processing subparagraph description of that function.</region>
          </section>
          <section class="DoCO:Section">
            <h3 class="DoCO:SectionTitle" id="257" page="23" column="1">5.3.4 Logical database requirements</h3>
            <region class="DoCO:TextChunk" id="258" page="23" column="1">This should specify the logical requirements for any information that is to be placed into a database. This may include the following:</region>
            <region class="DoCO:TextChunk" id="259" confidence="possible" page="23" column="1">a) Types of information used by various functions; b) Frequency of use; c) Accessing capabilities; d) Data entities and their relationships; e) Integrity constraints; f) Data retention requirements. 5.3.5 Design constraints This should specify design constraints that can be imposed by other standards, hardware limitations, etc. 5.3.5.1 Standards compliance</region>
            <region class="DoCO:TextChunk" id="260" page="23" column="1">This subsection should specify the requirements derived from existing standards or regulations. They may include the following:</region>
            <region class="DoCO:TextChunk" id="261" confidence="possible" page="23" column="1">a) Report format; b) Data naming; c) Accounting procedures; d) Audit tracing.</region>
            <region class="DoCO:TextChunk" id="262" page="23" column="1">For example, this could specify the requirement for software to trace processing activity. Such traces are needed for some applications to meet minimum regulatory or Þnancial standards. An audit trace requirement may, for example, state that all changes to a payroll database must be recorded in a trace Þle with before and after values.</region>
          </section>
          <section class="DoCO:Section">
            <h3 class="DoCO:SectionTitle" id="263" page="23" column="1">5.3.6 Software system attributes</h3>
            <region class="DoCO:TextChunk" id="274" page="23" column="1">There are a number of attributes of software that can serve as requirements. It is important that required attributes be speciÞed so that their achievement can be objectively veriÞed. Subclauses 5.3.6.1 through 5.3.6.5 provide a partial list of examples. <marker type="page" number="24"/><marker type="block"/> This should specify the factors required to establish the required reliability of the software system at time of delivery.<marker type="block"/> This should specify the factors required to guarantee a deÞned availability level for the entire system such as checkpoint, recovery, and restart.<marker type="block"/> This should specify the factors that protect the software from accidental or malicious access, use, modiÞca- tion, destruction, or disclosure. SpeciÞc requirements in this area could include the need to</region>
            <outsider class="DoCO:TextBox" type="footer" id="265" page="23" column="1">Copyright © 1998 IEEE. All rights reserved.</outsider>
            <outsider class="DoCO:TextBox" type="page_nr" id="266" page="23" column="1">17</outsider>
            <outsider class="DoCO:TextBox" type="header" id="267" page="24" column="1">IEEE Std 830-1998</outsider>
            <outsider class="DoCO:TextBox" type="header" id="268" page="24" column="1">IEEE RECOMMENDED PRACTICE FOR</outsider>
            <h4 class="unknown" id="269" page="24" column="1">5.3.6.1 Reliability</h4>
            <h4 class="unknown" id="271" page="24" column="1">5.3.6.2 Availability</h4>
            <h4 class="unknown" id="273" page="24" column="1">5.3.6.3 Security</h4>
            <region class="DoCO:TextChunk" id="275" confidence="possible" page="24" column="1">a) Utilize certain cryptographical techniques; b) Keep speciÞc log or history data sets; c) Assign certain functions to different modules; d) Restrict communications between some areas of the program; e) Check data integrity for critical variables. 5.3.6.4 Maintainability</region>
            <region class="DoCO:TextChunk" id="278" page="24" column="1">This should specify attributes of software that relate to the ease of maintenance of the software itself. There may be some requirement for certain modularity, interfaces, complexity, etc. Requirements should not be placed here just because they are thought to be good design practices. <marker type="block"/> This should specify attributes of software that relate to the ease of porting the software to other host machines and/or operating systems. This may include the following:</region>
            <h4 class="unknown" id="277" page="24" column="1">5.3.6.5 Portability</h4>
            <region class="DoCO:TextChunk" id="279" confidence="possible" page="24" column="1">a) Percentage of components with host-dependent code; b) Percentage of code that is host dependent; c) Use of a proven portable language; d) Use of a particular compiler or language subset; e) Use of a particular operating system. 5.3.7 Organizing the speciÞc requirements</region>
            <region class="DoCO:TextChunk" id="298" page="24" column="1">For anything but trivial systems the detailed requirements tend to be extensive. For this reason, it is recommended that careful consideration be given to organizing these in a manner optimal for understanding. There is no one optimal organization for all systems. Different classes of systems lend themselves to different organizations of requirements in Section 3 of the SRS. Some of these organizations are described in 5.3.7.1 through 5.3.7.7. <marker type="block"/> Some systems behave quite differently depending on the mode of operation. For example, a control system may have different sets of functions depending on its mode: training, normal, or emergency. When organizing this section by mode, the outline in A.1 or A.2 should be used. The choice depends on whether interfaces and performance are dependent on mode.<marker type="page" number="25"/><marker type="block"/> Some systems provide different sets of functions to different classes of users. For example, an elevator control system presents different capabilities to passengers, maintenance workers, and Þre Þghters. When organizing this section by user class, the outline in A.3 should be used.<marker type="block"/> Objects are real-world entities that have a counterpart within the system. For example, in a patient monitoring system, objects include patients, sensors, nurses, rooms, physicians, medicines, etc. Associated with each object is a set of attributes (of that object) and functions (performed by that object). These functions are also called services, methods, or processes. When organizing this section by object, the outline in A.4 should be used. Note that sets of objects may share attributes and services. These are grouped together as classes.<marker type="block"/> A feature is an externally desired service by the system that may require a sequence of inputs to effect the desired result. For example, in a telephone system, features include local call, call forwarding, and confer- ence call. Each feature is generally described in a sequence of stimulus-response pairs. When organizing this section by feature, the outline in A.5 should be used.<marker type="block"/> Some systems can be best organized by describing their functions in terms of stimuli. For example, the functions of an automatic aircraft landing system may be organized into sections for loss of power, wind shear, sudden change in roll, vertical velocity excessive, etc. When organizing this section by stimulus, the outline in A.6 should be used.<marker type="block"/> Some systems can be best organized by describing all the functions in support of the generation of a response. For example, the functions of a personnel system may be organized into sections corresponding to all functions associated with generating paychecks, all functions associated with generating a current list of employees, etc. The outline in A.6 (with all occurrences of stimulus replaced with response) should be used.<marker type="block"/> When none of the above organizational schemes prove helpful, the overall functionality can be organized into a hierarchy of functions organized by either common inputs, common outputs, or common internal data access. Data ßow diagrams and data dictionaries can be used to show the relationships between and among the functions and data. When organizing this section by functional hierarchy, the outline in A.7 should be used.</region>
            <h4 class="unknown" id="281" page="24" column="1">5.3.7.1 System mode</h4>
            <outsider class="DoCO:TextBox" type="page_nr" id="283" page="24" column="1">18</outsider>
            <outsider class="DoCO:TextBox" type="footer" id="284" page="24" column="1">Copyright © 1998 IEEE. All rights reserved.</outsider>
            <outsider class="DoCO:TextBox" type="header" id="285" page="25" column="1">SOFTWARE REQUIREMENTS SPECIFICATIONS</outsider>
            <outsider class="DoCO:TextBox" type="header" id="286" page="25" column="1">IEEE Std 830-1998</outsider>
            <h4 class="unknown" id="287" page="25" column="1">5.3.7.2 User class</h4>
            <h4 class="unknown" id="289" page="25" column="1">5.3.7.3 Objects</h4>
            <h4 class="unknown" id="291" page="25" column="1">5.3.7.4 Feature</h4>
            <h4 class="unknown" id="293" page="25" column="1">5.3.7.5 Stimulus</h4>
            <h4 class="unknown" id="295" page="25" column="1">5.3.7.6 Response</h4>
            <h4 class="unknown" id="297" page="25" column="1">5.3.7.7 Functional hierarchy</h4>
          </section>
          <section class="DoCO:Section">
            <h3 class="DoCO:SectionTitle" id="299" page="25" column="1">5.3.8 Additional comments</h3>
            <region class="DoCO:TextChunk" id="307" page="25" column="1">Whenever a new SRS is contemplated, more than one of the organizational techniques given in 5.3.7.7 may be appropriate. In such cases, organize the speciÞc requirements for multiple hierarchies tailored to the speciÞc needs of the system under speciÞcation. For example, see A.8 for an organization combining user class and feature. Any additional requirements may be put in a separate section at the end of the SRS. <marker type="block"/> There are many notations, methods, and automated support tools available to aid in the documentation of requirements. For the most part, their usefulness is a function of organization. For example, when organizing by mode, Þnite state machines or state charts may prove helpful; when organizing by object, object-oriented<marker type="page" number="26"/><marker type="block"/> analysis may prove helpful; when organizing by feature, stimulus-response sequences may prove helpful; and when organizing by functional hierarchy, data ßow diagrams and data dictionaries may prove helpful.<marker type="block"/> In any of the outlines given in A.1 through A.8, those sections called ÒFunctional Requirement iÓ may be described in native language (e.g., English), in pseudocode, in a system deÞnition language, or in four subsections titled: Introduction, Inputs, Processing, and Outputs.</region>
            <outsider class="DoCO:TextBox" type="footer" id="302" page="25" column="1">Copyright © 1998 IEEE. All rights reserved.</outsider>
            <outsider class="DoCO:TextBox" type="page_nr" id="303" page="25" column="1">19</outsider>
            <outsider class="DoCO:TextBox" type="header" id="304" page="26" column="1">IEEE Std 830-1998</outsider>
            <outsider class="DoCO:TextBox" type="header" id="305" page="26" column="1">IEEE RECOMMENDED PRACTICE FOR</outsider>
          </section>
        </section>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="308" page="26" column="1">5.4 Supporting information</h2>
          <region class="DoCO:TextChunk" id="309" confidence="possible" page="26" column="1">The supporting information makes the SRS easier to use. It includes the following: a) Table of contents; b) Index; c) Appendixes. 5.4.1 Table of contents and index The table of contents and index are quite important and should follow general compositional practices. 5.4.2 Appendixes</region>
          <region class="DoCO:TextChunk" id="310" page="26" column="1">The appendixes are not always considered part of the actual SRS and are not always necessary. They may include</region>
          <region class="DoCO:TextChunk" id="311" confidence="possible" page="26" column="1">a) Sample input/output formats, descriptions of cost analysis studies, or results of user surveys; b) Supporting or background information that can help the readers of the SRS; c) A description of the problems to be solved by the software; d) Special packaging instructions for the code and the media to meet security, export, initial loading, or other requirements.</region>
          <region class="DoCO:TextChunk" id="312" page="26" column="1">When appendixes are included, the SRS should explicitly state whether or not the appendixes are to be considered part of the requirements.</region>
          <outsider class="DoCO:TextBox" type="page_nr" id="313" page="26" column="1">20</outsider>
          <outsider class="DoCO:TextBox" type="footer" id="314" page="26" column="1">Copyright © 1998 IEEE. All rights reserved.</outsider>
          <outsider class="DoCO:TextBox" type="header" id="315" page="27" column="1">SOFTWARE REQUIREMENTS SPECIFICATIONS</outsider>
          <outsider class="DoCO:TextBox" type="header" id="316" page="27" column="1">IEEE Std 830-1998</outsider>
        </section>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="317" page="27" column="1">Annex A</h1>
        <region class="unknown" id="318" page="27" column="1">(informative)</region>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="319" page="27" column="1">SRS templates</h1>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="320" confidence="possible" page="27" column="1">A.1 Template of SRS Section 3 organized by mode: Version 1</h1>
        <region class="DoCO:TextChunk" id="321" confidence="possible" page="27" column="1">3. SpeciÞc requirements 3.1 External interface requirements 3.1.1 User interfaces 3.1.2 Hardware interfaces 3.1.3 Software interfaces 3.1.4 Communications interfaces 3.2 Functional requirements 3.2.1 Mode 1 3.2.1.1 Functional requirement 1.1 . . . 3.2.1.n Functional requirement 1.n 3.2.2 Mode 2 . . . 3.2.m Mode m 3.2.m.1 Functional requirement m.1 . . . 3.2.m.n Functional requirement m.n 3.3 Performance requirements 3.4 Design constraints 3.5 Software system attributes 3.6 Other requirements</region>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="322" confidence="possible" page="27" column="1">A.2 Template of SRS Section 3 organized by mode: Version 2</h1>
        <region class="DoCO:TextChunk" id="323" confidence="possible" page="27" column="1">3. SpeciÞc requirements 3.1. Functional requirements 3.1.1 Mode 1 3.1.1.1 External interfaces 3.1.1.1.1 User interfaces 3.1.1.1.2 Hardware interfaces 3.1.1.1.3 Software interfaces 3.1.1.1.4 Communications interfaces 3.1.1.2 Functional requirements 3.1.1.2.1 Functional requirement 1 . . .</region>
        <outsider class="DoCO:TextBox" type="footer" id="324" page="27" column="1">Copyright © 1998 IEEE. All rights reserved.</outsider>
        <outsider class="DoCO:TextBox" type="page_nr" id="325" page="27" column="1">21</outsider>
        <outsider class="DoCO:TextBox" type="header" id="326" page="28" column="1">IEEE Std 830-1998</outsider>
        <outsider class="DoCO:TextBox" type="header" id="327" page="28" column="1">IEEE RECOMMENDED PRACTICE FOR</outsider>
        <region class="DoCO:TextChunk" id="328" confidence="possible" page="28" column="1">3.1.1.2.n Functional requirement n 3.1.1.3 Performance 3.1.2 Mode 2 . . . 3.1.m Mode m 3.2 Design constraints 3.3 Software system attributes 3.4 Other requirements</region>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="329" confidence="possible" page="28" column="1">A.3 Template of SRS Section 3 organized by user class</h1>
        <region class="DoCO:TextChunk" id="330" confidence="possible" page="28" column="1">3. SpeciÞc requirements 3.1 External interface requirements 3.1.1 User interfaces 3.1.2 Hardware interfaces 3.1.3 Software interfaces 3.1.4 Communications interfaces 3.2 Functional requirements 3.2.1 User class 1 3.2.1.1 Functional requirement 1.1 . . . 3.2.1.n Functional requirement 1.n 3.2.2 User class 2 . . . 3.2.m User class m 3.2.m.1 Functional requirement m.1 . . . 3.2.m.n Functional requirement m.n 3.3 Performance requirements 3.4 Design constraints 3.5 Software system attributes 3.6 Other requirements</region>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="331" confidence="possible" page="28" column="1">A.4 Template of SRS Section 3 organized by object</h1>
        <region class="DoCO:TextChunk" id="332" confidence="possible" page="28" column="1">3. SpeciÞc requirements 3.1 External interface requirements 3.1.1 User interfaces 3.1.2 Hardware interfaces 3.1.3 Software interfaces 3.1.4 Communications interfaces 3.2 Classes/Objects 3.2.1 Class/Object 1</region>
        <outsider class="DoCO:TextBox" type="page_nr" id="333" page="28" column="1">22</outsider>
        <outsider class="DoCO:TextBox" type="footer" id="334" page="28" column="1">Copyright © 1998 IEEE. All rights reserved.</outsider>
        <outsider class="DoCO:TextBox" type="header" id="335" page="29" column="1">SOFTWARE REQUIREMENTS SPECIFICATIONS</outsider>
        <outsider class="DoCO:TextBox" type="header" id="336" page="29" column="1">IEEE Std 830-1998</outsider>
        <region class="DoCO:TextChunk" id="337" confidence="possible" page="29" column="1">3.2.1.1 Attributes (direct or inherited) 3.2.1.1.1 Attribute 1 . . . 3.2.1.1.n Attribute n 3.2.1.2 Functions (services, methods, direct or inherited) 3.2.1.2.1 Functional requirement 1.1 . . . 3.2.1.2.m Functional requirement 1.m 3.2.1.3 Messages (communications received or sent) 3.2.2 Class/Object 2 . . . 3.2.p Class/Object p 3.3 Performance requirements 3.4 Design constraints 3.5 Software system attributes 3.6 Other requirements</region>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="338" confidence="possible" page="29" column="1">A.5 Template of SRS Section 3 organized by feature</h1>
        <region class="DoCO:TextChunk" id="339" confidence="possible" page="29" column="1">3. SpeciÞc requirements 3.1 External interface requirements 3.1.1 User interfaces 3.1.2 Hardware interfaces 3.1.3 Software interfaces 3.1.4 Communications interfaces 3.2 System features 3.2.1 System Feature 1 3.2.1.1 Introduction/Purpose of feature 3.2.1.2 Stimulus/Response sequence 3.2.1.3 Associated functional requirements 3.2.1.3.1 Functional requirement 1 . . . 3.2.1.3.n Functional requirement n 3.2.2 System feature 2 . . . 3.2.m System feature m . . . 3.3 Performance requirements 3.4 Design constraints 3.5 Software system attributes 3.6 Other requirements</region>
        <outsider class="DoCO:TextBox" type="footer" id="340" page="29" column="1">Copyright © 1998 IEEE. All rights reserved.</outsider>
        <outsider class="DoCO:TextBox" type="page_nr" id="341" page="29" column="1">23</outsider>
        <outsider class="DoCO:TextBox" type="header" id="342" page="30" column="1">IEEE Std 830-1998</outsider>
        <outsider class="DoCO:TextBox" type="header" id="343" page="30" column="1">IEEE RECOMMENDED PRACTICE FOR</outsider>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="344" confidence="possible" page="30" column="1">A.6 Template of SRS Section 3 organized by stimulus</h1>
        <region class="DoCO:TextChunk" id="345" confidence="possible" page="30" column="1">3. SpeciÞc requirements 3.1 External interface requirements 3.1.1 User interfaces 3.1.2 Hardware interfaces 3.1.3 Software interfaces 3.1.4 Communications interfaces 3.2 Functional requirements 3.2.1 Stimulus 1 3.2.1.1 Functional requirement 1.1 . . . 3.2.1.n Functional requirement 1.n 3.2.2 Stimulus 2 . . . 3.2.m Stimulus m 3.2.m.1 Functional requirement m.1 . . . 3.2.m.n Functional requirement m.n 3.3 Performance requirements 3.4 Design constraints 3.5 Software system attributes 3.6 Other requirements</region>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="346" confidence="possible" page="30" column="1">A.7 Template of SRS Section 3 organized by functional hierarchy</h1>
        <region class="DoCO:TextChunk" id="347" confidence="possible" page="30" column="1">3. SpeciÞc requirements 3.1 External interface requirements 3.1.1 User interfaces 3.1.2 Hardware interfaces 3.1.3 Software interfaces 3.1.4 Communications interfaces 3.2 Functional requirements 3.2.1 Information ßows 3.2.1.1 Data ßow diagram 1 3.2.1.1.1 Data entities 3.2.1.1.2 Pertinent processes 3.2.1.1.3 Topology 3.2.1.2 Data ßow diagram 2 3.2.1.2.1 Data entities 3.2.1.2.2 Pertinent processes 3.2.1.2.3 Topology . . . 3.2.1.n Data ßow diagram n</region>
        <outsider class="DoCO:TextBox" type="page_nr" id="348" page="30" column="1">24</outsider>
        <outsider class="DoCO:TextBox" type="footer" id="349" page="30" column="1">Copyright © 1998 IEEE. All rights reserved.</outsider>
        <outsider class="DoCO:TextBox" type="header" id="350" page="31" column="1">SOFTWARE REQUIREMENTS SPECIFICATIONS</outsider>
        <outsider class="DoCO:TextBox" type="header" id="351" page="31" column="1">IEEE Std 830-1998</outsider>
        <region class="DoCO:TextChunk" id="352" confidence="possible" page="31" column="1">3.2.1.n.1 Data entities 3.2.1.n.2 Pertinent processes 3.2.1.n.3 Topology 3.2.2 Process descriptions 3.2.2.1 Process 1 3.2.2.1.1 Input data entities 3.2.2.1.2 Algorithm or formula of process 3.2.2.1.3 Affected data entities 3.2.2.2 Process 2 3.2.2.2.1 Input data entities 3.2.2.2.2 Algorithm or formula of process 3.2.2.2.3 Affected data entities . . . 3.2.2.m Process m 3.2.2.m.1 Input data entities 3.2.2.m.2 Algorithm or formula of process 3.2.2.m.3 Affected data entities 3.2.3 Data construct speciÞcations 3.2.3.1 Construct 1 3.2.3.1.1 Record type 3.2.3.1.2 Constituent Þelds 3.2.3.2 Construct 2 3.2.3.2.1 Record type 3.2.3.2.2 Constituent Þelds . . . 3.2.3.p Construct p 3.2.3.p.1 Record type 3.2.3.p.2 Constituent Þelds 3.2.4 Data dictionary 3.2.4.1 Data element 1 3.2.4.1.1 Name 3.2.4.1.2 Representation 3.2.4.1.3 Units/Format 3.2.4.1.4 Precision/Accuracy 3.2.4.1.5 Range 3.2.4.2 Data element 2 3.2.4.2.1 Name 3.2.4.2.2 Representation 3.2.4.2.3 Units/Format 3.2.4.2.4 Precision/Accuracy 3.2.4.2.5 Range . . . 3.2.4.q Data element q 3.2.4.q.1 Name 3.2.4.q.2 Representation 3.2.4.q.3 Units/Format 3.2.4.q.4 Precision/Accuracy 3.2.4.q.5 Range</region>
        <outsider class="DoCO:TextBox" type="footer" id="353" page="31" column="1">Copyright © 1998 IEEE. All rights reserved.</outsider>
        <outsider class="DoCO:TextBox" type="page_nr" id="354" page="31" column="1">25</outsider>
        <outsider class="DoCO:TextBox" type="header" id="355" page="32" column="1">IEEE Std 830-1998</outsider>
        <outsider class="DoCO:TextBox" type="header" id="356" page="32" column="1">IEEE RECOMMENDED PRACTICE FOR</outsider>
        <region class="DoCO:TextChunk" id="357" confidence="possible" page="32" column="1">3.3 Performance requirements 3.4 Design constraints 3.5 Software system attributes 3.6 Other requirements</region>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="358" confidence="possible" page="32" column="1">A.8 Template of SRS Section 3 showing multiple organizations</h1>
        <region class="DoCO:TextChunk" id="359" confidence="possible" page="32" column="1">3. SpeciÞc requirements 3.1 External interface requirements 3.1.1 User interfaces 3.1.2 Hardware interfaces 3.1.3 Software interfaces 3.1.4 Communications interfaces 3.2 Functional requirements 3.2.1 User class 1 3.2.1.1 Feature 1.1 3.2.1.1.1 Introduction/Purpose of feature 3.2.1.1.2 Stimulus/Response sequence 3.2.1.1.3 Associated functional requirements 3.2.1.2 Feature 1.2 3.2.1.2.1 Introduction/Purpose of feature 3.2.1.2.2 Stimulus/Response sequence 3.2.1.2.3 Associated functional requirements . . . 3.2.1.m Feature 1.m 3.2.1.m.1 Introduction/Purpose of feature 3.2.1.m.2 Stimulus/Response sequence 3.2.1.m.3 Associated functional requirements 3.2.2 User class 2 . . . 3.2.n User class n . . . 3.3 Performance requirements 3.4 Design constraints 3.5 Software system attributes 3.6 Other requirements</region>
        <outsider class="DoCO:TextBox" type="page_nr" id="360" page="32" column="1">26</outsider>
        <outsider class="DoCO:TextBox" type="footer" id="361" page="32" column="1">Copyright © 1998 IEEE. All rights reserved.</outsider>
        <outsider class="DoCO:TextBox" type="header" id="362" page="33" column="1">SOFTWARE REQUIREMENTS SPECIFICATIONS</outsider>
        <outsider class="DoCO:TextBox" type="header" id="363" page="33" column="1">IEEE Std 830-1998</outsider>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="364" page="33" column="1">Annex B</h1>
        <region class="unknown" id="365" page="33" column="1">(informative)</region>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="366" page="33" column="1">Guidelines for compliance with IEEE/EIA 12207.1-1997</h1>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="367" confidence="possible" page="33" column="1">B.1 Overview</h1>
        <region class="DoCO:TextChunk" id="369" page="33" column="1">The Software Engineering Standards Committee (SESC) of the IEEE Computer Society has endorsed the policy of adopting international standards. In 1995, the international standard, ISO/IEC 12207, Information technologyÑSoftware life cycle processes, was completed. The standard establishes a common framework for software life cycle processes, with well-deÞned terminology, that can be referenced by the software industry. <marker type="block"/> In 1995 the SESC evaluated ISO/IEC 12207 and decided that the standard should be adopted and serve as the basis for life cycle processes within the IEEE Software Engineering Collection. The IEEE adaptation of ISO/IEC 12207 is IEEE/EIA 12207.0-1996. It contains ISO/IEC 12207 and the following additions: improved compliance approach, life cycle process objectives, life cycle data objectives, and errata.</region>
        <region class="DoCO:TextChunk" id="370" confidence="possible" page="33" column="1">The implementation of ISO/IEC 12207 within the IEEE also includes the following: Ñ IEEE/EIA 12207.1-1997, IEEE/EIA Guide for Information TechnologyÑSoftware life cycle processesÑLife cycle data; Ñ IEEE/EIA 12207.2-1997, IEEE/EIA Guide for Information TechnologyÑSoftware life cycle pro- cessesÑImplementation considerations; and Ñ Additions to 11 SESC standards (i.e., IEEE Stds 730, 828, 829, 830, 1012, 1016, 1058, 1062, 1219, 1233, 1362) to deÞne the correlation between the data produced by existing SESC standards and the data produced by the application of IEEE/EIA 12207.1-1997. NOTEÑAlthough IEEE/EIA 12207.1-1997 is a guide, it also contains provisions for application as a standard with speciÞc compliance requirements. This annex treats 12207.1-1997 as a standard. B.1.1 Scope and purpose</region>
        <region class="DoCO:TextChunk" id="371" page="33" column="1">Both IEEE Std 830-1998 and IEEE/EIA 12207.1-1997 place requirements on a Software Requirements Description Document. The purpose of this annex is to explain the relationship between the two sets of requirements so that users producing documents intended to comply with both standards may do so.</region>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="372" confidence="possible" page="33" column="1">B.2 Correlation</h1>
        <region class="DoCO:TextChunk" id="384" page="33" column="1">This clause explains the relationship between IEEE Std 830-1998 and IEEE/EIA 12207.0-1996 and IEEE/ EIA 12207.1-1997 in the following areas: terminology, process, and life cycle data. <marker type="block"/> Both this recommended practice and IEEE/EIA 12207.0-1996 have similar semantics for the key terms of software, requirements, speciÞcation, supplier, developer, and maintainer. This recommended practice uses<marker type="page" number="34"/><marker type="block"/> the term ÒcustomerÓ where IEEE/EIA 12207.0-1996 uses Òacquirer,Ó and this recommended practice uses ÒuserÓ where IEEE/EIA 12207.0-1996 uses Òoperator.Ó<marker type="block"/> IEEE/EIA 12207.0-1996 uses a process-oriented approach for describing the deÞnition of a set of requirements for software. This recommended practice uses a product-oriented approach, where the product is a Software Requirements Description (SRD). There are natural process steps, namely the steps to create each portion of the SRD. These may be correlated with the process requirements of IEEE/EIA 12207.0-1996. The difference is that this recommended practice is focused on the development of software requirements whereas IEEE/EIA 12207.0-1996 provides an overall life cycle view and mentions Software Requirements Analysis as part of its Development Process. This recommended practice provides a greater level of detail on what is involved in the preparation of an SRD.<marker type="block"/> IEEE/EIA 12207.0-1996 takes the viewpoint that the software requirements are derived from the system requirements. Therefore, it uses the term, ÒdescriptionÓ rather that ÒspeciÞcationÓ to describe the software requirements. In a system in which software is a component, each requiring its own speciÞcation, there would be a System Requirements SpeciÞcation (SRS) and one or more SRDs. If the term Software Requirements SpeciÞcation had been used, there would be a confusion between an SRS referring to the system or software requirements. In the case where there is a stand-alone software system, IEEE/EIA 12207.1-1997 states ÒIf the software is a stand-alone system, then this document should be a speciÞcation.Ó</region>
        <region class="unknown" id="374" page="33" column="1">B.2.1 Terminology correlation</region>
        <outsider class="DoCO:TextBox" type="footer" id="376" page="33" column="1">Copyright © 1998 IEEE. All rights reserved.</outsider>
        <outsider class="DoCO:TextBox" type="page_nr" id="377" page="33" column="1">27</outsider>
        <outsider class="DoCO:TextBox" type="header" id="378" page="34" column="1">IEEE Std 830-1998</outsider>
        <outsider class="DoCO:TextBox" type="header" id="379" page="34" column="1">IEEE RECOMMENDED PRACTICE FOR</outsider>
        <region class="unknown" id="381" page="34" column="1">B.2.2 Process correlation</region>
        <region class="unknown" id="383" page="34" column="1">B.2.3 Life cycle data correlation</region>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="385" confidence="possible" page="34" column="1">B.3 Content mapping</h1>
        <region class="DoCO:TextChunk" id="386" page="34" column="1">This clause provides details bearing on a claim that an SRS complying with this recommended practice would also achieve Òdocument complianceÓ with the SRD described in IEEE/EIA 12207.1-1997. The requirements for document compliance are summarized in a single row of Table 1 of IEEE/EIA 12207.1- 1997. That row is reproduced in Table B.1 of this recommended practice.</region>
        <region class="unknown" id="387" page="34" column="1">Table B.1ÑSummary of requirements for an SRD excerpted from Table 1 of IEEE/EIA 12207.1-1997</region>
        <region class="unknown" id="388" page="34" column="1">Kind</region>
      </section>
      <section class="DoCO:Bibliography">
        <h1 class="DoCO:SectionTitle" id="389" confidence="possible" page="34" column="1">References</h1>
        <ref-list class="DoCO:BiblioGraphicReferenceList">
          <ref rid="R1" class="deo:BibliographicReference" id="390" confidence="possible" page="34" column="1">IEEE/EIA IEEE/EIA Information 12207.0-1996 12207.1-1997 item Clause Clause</ref>
          <ref rid="R2" class="deo:BibliographicReference" id="391" confidence="possible" page="34" column="1">Software 5.1.1.4, 5.3.4.1, Description 6.22 IEEE Std 830-1998; EIA/IEEE Requirements 5.3.4.2 (See note for 6.22.1 J-STD-016, F.2.3, F.2.4; MIL-</ref>
          <ref rid="R3" class="deo:BibliographicReference" id="392" confidence="possible" page="34" column="1">Description of IEEE/EIA STD 961D. Also see ISO/IEC 12207.1-1997.) 5806, 5807, 6593, 8631, 8790, and 11411 for guidance on use of notations.</ref>
          <ref rid="R4" class="deo:BibliographicReference" id="401" confidence="possible" page="35" column="1">Table B.2ÑCoverage of generic description requirements by IEEE Std 830-1998</ref>
          <ref rid="R5" class="deo:BibliographicReference" id="402" confidence="possible" page="35" column="1">IEEE/EIA 12207.1-1997 Corresponding clauses of Additions to requirements of generic content IEEE Std 830-1998 IEEE Std 830-1998</ref>
          <ref class="deo:BibliographicReference" id="403" confidence="possible" page="35" column="1">a) Date of issue and status Ñ Date of issue and status shall be provided. b) Scope 5.1.1 Scope Ñ c) Issuing organization Ñ Issuing organization shall be identiÞed. d) References 5.1.4 References Ñ e) Context 5.1.2 Scope Ñ f) Notation for description 4.3 Characteristics of a good SRS Ñ g) Body 5. The parts of an SRS Ñ h) Summary 5.1.1. Overview Ñ i) Glossary 5.1.3 DeÞnitions Ñ j) Change history Ñ Change history for the SRD shall be provided or referenced.</ref>
          <ref rid="R6" class="deo:BibliographicReference" id="409" confidence="possible" page="36" column="1">Table B.3ÑCoverage of speciÞc SRD requirements by IEEE Std 830-1998 IEEE/EIA 12207.1-1997 Corresponding clauses of Additions to requirements of speciÞc content IEEE Std 830-1998 IEEE Std 830-1998</ref>
          <ref class="deo:BibliographicReference" id="410" confidence="possible" page="36" column="1">a) Generic description information See Table B.2 Ñ b) System identiÞcation and 5.1.1 Scope Ñ overview c) Functionality of the software item 5.3.2 Functions Physical characteristics and environ- including: 5.3.3 Performance requirements mental conditions should be Ð Performance requirements provided. Ð Physical characteristics Ð Environmental conditions d) Requirements for interfaces 5.3.1 External interfaces Ñ external to software item e) QualiÞcation requirements Ñ The requirements to be used for qualiÞcation testing should be provided (or referenced). f) Safety speciÞcations 5.2.4 Constraints Ñ g) Security and privacy 5.3.6.3 Security Ñ speciÞcations h) Human-factors engineering 5.2.3 User characteristics Ñ requirements 5.2.1.2 User interfaces i) Data deÞnition and database 5.3.4 Logical data base requirements Ñ requirements j) Installation and acceptance 5.2.1.8 Site adaptation requirements Installation and acceptance require- requirements at operation site ments at operation site k) Installation and acceptance Ñ Installation and acceptance require- requirements at maintenance site ments at maintenance site l) User documentation requirements Ñ User documentation requirements m) User operation and execution 5.2.1.7 Operations User execution requirements requirements</ref>
          <ref rid="R7" class="deo:BibliographicReference" id="415" confidence="possible" page="37" column="1">Table B.3ÑCoverage of speciÞc SRD requirements by IEEE Std 830-1998 (continued) IEEE/EIA 12207.1-1997 Corresponding clauses of Additions to requirements of speciÞc content IEEE Std 830-1998 IEEE Std 830-1998</ref>
          <ref rid="R8" class="deo:BibliographicReference" id="416" confidence="possible" page="37" column="1">n) User maintenance requirements 5.3.6.4 Maintainability Ñ o) Software quality characteristics 5.3.6 Software system attributes Ñ p) Design and implementation 5.2.4 Constraints Ñ constraints q) Computer resource requirements 5.3.3 Performance requirements Computer resource requirements r) Packaging requirements Ñ Packaging requirements s) Precedence and criticality of 5.2.6 Apportioning of requirements Ñ requirements t) Requirements traceability 4.3.8 Traceable Ñ u) Rationale 5.2.5 Assumptions and Ñ dependencies Items a) through f) below are from Ñ 6.22.4 Support the life cycle data objectives a) Support the life cycle data objec- of Annex H of IEEE/EIA 12207.0-</ref>
          <ref rid="R9" class="deo:BibliographicReference" id="417" confidence="possible" page="37" column="1">tives of Annex H of IEEE/EIA 1996 12207.0-1996</ref>
          <ref class="deo:BibliographicReference" id="418" confidence="possible" page="37" column="1">b) Describe any function using well- 4.3 Characteristics of a good SRS Ñ deÞned notation c) DeÞne no requirements that are in 4.3 Characteristics of a good SRS Ñ conßict d) User standard terminology and 5.1.3 DeÞnition Ñ deÞnitions e) DeÞne each unique requirement 4.3 Characteristics of a good SRS Ñ one to prevent inconsistency f) Uniquely identify each require- 4.3 Characteristics of a good SRS Ñ ment</ref>
        </ref-list>
        <region class="DoCO:TextChunk" id="393" confidence="possible" page="34" column="1">The requirements for document compliance are discussed in the following subclauses: Ñ B.3.1 discusses compliance with the information requirements noted in column 2 of Table B.1 as prescribed by 5.1.1.4, 5.3.4.1, and 5.3.4.2 of IEEE/EIA 12207.0-1996.</region>
        <outsider class="DoCO:TextBox" type="page_nr" id="394" page="34" column="1">28</outsider>
        <outsider class="DoCO:TextBox" type="footer" id="395" page="34" column="1">Copyright © 1998 IEEE. All rights reserved.</outsider>
        <outsider class="DoCO:TextBox" type="header" id="396" page="35" column="1">SOFTWARE REQUIREMENTS SPECIFICATIONS</outsider>
        <outsider class="DoCO:TextBox" type="header" id="397" page="35" column="1">IEEE Std 830-1998</outsider>
        <region class="DoCO:TextChunk" id="400" confidence="possible" page="35" column="1">Ñ B.3.2 discusses compliance with the generic content guideline (the ÒkindÓ of document) noted in column 3 of Table B.1 as a ÒdescriptionÓ. The generic content guidelines for a ÒdescriptionÓ appear in 5.1 of IEEE/EIA 12207.1-1997. Ñ B.3.3 discusses compliance with the speciÞc requirements for a Software Requirements Description noted in column 4 of Table B.1 as prescribed by 6.22 of IEEE/EIA 12207.1-1997. Ñ B.3.4 discusses compliance with the life cycle data objectives of Annex H of IEEE/<xref ref-type="bibr" rid="R1" id="398" class="deo:Reference">EIA 1220</xref>, <xref ref-type="bibr" rid="R1" id="399" class="deo:Reference">EIA 1220</xref>7.0- 1996 as described in 4.2 of IEEE/EIA 12207.1-1997. B.3.1 Compliance with information requirements of IEEE/EIA 12207.0-1996 The information requirements for an SRD are those prescribed by 5.1.1.4, 5.3.4.1, and 5.3.4.2 of IEEE/EIA 12207.0-1996. The requirements are substantively identical to those considered in B.3.3 of this recommended practice. B.3.2 Compliance with generic content guidelines of IEEE/EIA 12207.1-1997 According to IEEE/EIA 12207.1-1997, the generic content guideline for an SRD is generally a description, as prescribed by 5.1 of IEEE/EIA 12207.1-1997. A complying description shall achieve the purpose stated in 5.1.1 and include the information listed in 5.1.2 of IEEE/EIA 12207.1-1997. The purpose of a description is: IEEE/EIA 12207.1-1997, subclause 5.1.1: Purpose: Describe a planned or actual function, design, performance, or process. An SRD complying with this recommended practice would achieve the stated purpose. Any description or speciÞcation complying with IEEE/EIA 12207.1-1997 shall satisfy the generic content requirements provided in 5.1.2 of that standard. Table B.2 of this recommended practice lists the generic content items and, where appropriate, references the clause of this recommended practice that requires the same information.</region>
        <outsider class="DoCO:TextBox" type="footer" id="404" page="35" column="1">Copyright © 1998 IEEE. All rights reserved.</outsider>
        <outsider class="DoCO:TextBox" type="page_nr" id="405" page="35" column="1">29</outsider>
        <outsider class="DoCO:TextBox" type="header" id="406" page="36" column="1">IEEE Std 830-1998</outsider>
        <outsider class="DoCO:TextBox" type="header" id="407" page="36" column="1">IEEE RECOMMENDED PRACTICE FOR</outsider>
        <region class="DoCO:TextChunk" id="408" confidence="possible" page="36" column="1">B.3.3 Compliance with speciÞc content requirements of IEEE/EIA 12207.1-1997 The speciÞc content requirements for an SRD in IEEE/EIA 12207.1-1997 are prescribed by 6.22 of IEEE/ EIA 12207.1-1997. A compliant SRD shall achieve the purpose stated in 6.22.1 of IEEE/EIA 12207.1-1997. The purpose of the SRD is: IEEE/EIA 12207.1-1997, subclause 6.22.1: Purpose: Specify the requirements for a software item and the methods to be used to ensure that each requirement has been met. Used as the basis for design and qualiÞcation testing of a software item. An SRS complying with this recommended practice and meeting the additional requirements of Table B.3 of this recommended practice would achieve the stated purpose. An SRD compliant with IEEE/EIA 12207.1-1997 shall satisfy the speciÞc content requirements provided in 6.22.3 and 6.22.4 of that standard. Table B.3 of this recommended practice lists the speciÞc content items and, where appropriate, references the clause of this recommended practice that requires the same information. An SRD speciÞed according the requirements stated or referenced in Table B.3 of this recommended practice shall be evaluated considering the criteria provided in 5.3.4.2 of IEEE/EIA 12207.0-1996.</region>
        <outsider class="DoCO:TextBox" type="page_nr" id="411" page="36" column="1">30</outsider>
        <outsider class="DoCO:TextBox" type="footer" id="412" page="36" column="1">Copyright © 1998 IEEE. All rights reserved.</outsider>
        <outsider class="DoCO:TextBox" type="header" id="413" page="37" column="1">SOFTWARE REQUIREMENTS SPECIFICATIONS</outsider>
        <outsider class="DoCO:TextBox" type="header" id="414" page="37" column="1">IEEE Std 830-1998</outsider>
        <region class="DoCO:TextChunk" id="419" confidence="possible" page="37" column="1">B.3.4 Compliance with life cycle data objectives In addition to the content requirements, life cycle data shall be managed in accordance with the objectives provided in Annex H of IEEE/EIA 12207.0-1996.</region>
      </section>
      <section class="deo:Conclusion">
        <h1 class="DoCO:SectionTitle" id="420" confidence="possible" page="37" column="1">B.4 Conclusion</h1>
        <region class="DoCO:TextChunk" id="421" page="37" column="1">The analysis suggests that any SRS complying with this recommended practice and the additions shown in Table B.2 and Table B.3 also complies with the requirements of an SRD in IEEE/EIA 12207.1-1997. In addition, to comply with IEEE/EIA 12207.1-1997, an SRS shall support the life cycle data objectives of Annex H of IEEE/EIA 12207.0-1996.</region>
        <outsider class="DoCO:TextBox" type="footer" id="422" page="37" column="1">Copyright © 1998 IEEE. All rights reserved.</outsider>
        <outsider class="DoCO:TextBox" type="page_nr" id="423" page="37" column="1">31</outsider>
      </section>
    </body>
  </article>
</pdfx>
