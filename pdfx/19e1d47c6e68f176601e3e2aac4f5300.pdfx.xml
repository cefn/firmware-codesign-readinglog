<?xml version='1.0' encoding='UTF-8'?>
<pdfx xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://pdfx.cs.man.ac.uk/static/article-schema.xsd">
  <meta>
    <job>411dd6ef4eafbfc8fb06c4f5eeba326785a1893c57ef2ce52f6edd64c7bf30ad</job>
    <base_name>62kv</base_name>
    <doi>http://dx.doi.org/10.1145/2399016.2399121</doi>
  </meta>
  <article>
    <front class="DoCO:FrontMatter">
      <title-group>
        <article-title class="DoCO:Title" id="1">Joint implicit alignment work of interaction designers and software developers</article-title>
      </title-group>
      <contrib-group class="DoCO:ListOfAuthors"><contrib contrib-type="author"><name id="2">Judith M. Brown</name></contrib><contrib contrib-type="author"><name id="4">Gitte Lindgaard</name></contrib></contrib-group>
      <region class="unknown" id="7">Institute of Cognitive Science Dept. of Psychology Carleton University, Canada Carleton University, Canada <email id="5">mmjbrown@connect.carleton.ca</email> gitte <email id="6">lindgaard@carleton.ca</email></region>
      <abstract class="DoCO:Abstract" id="8">Collaboration is an important aspect of software creation work. In field studies of 8 teams in the early stages of novel project work at 8 organizations we focused on understanding collaborative work from the perspective of both the interaction designer and the developer. We found designer-developer collaborations, often occurring in the context of team collaborations, were extensive. While some collaborations were directed towards explicit alignment work, such as prioritizing tasks, we have studied implicit alignment work, which con- stitutes a larger part of the overall alignment work. The form of this work varied in some respects, but in general designer- developer interactions directed towards implicit alignment were remarkably similar. Our model shows how implicit alignment work is jointly achieved; we derived it from an extensive analysis of videos of 13 collaborative events, and ver- ified it with our observation notes and interviews. The model is applicable to a wide variety of software creation settings, including agile and non-agile teams. Our analysis shows the implications of our observations of implicit alignment work, and we conclude organizations should take practical steps to support it, as is frequently done for explicit alignment work.</abstract>
      <section class="DoCO:Section">
        <h2 class="DoCO:SectionTitle" id="9" confidence="possible" page="1" column="1">Author Keywords</h2>
      </section>
      <region class="DoCO:TextChunk" id="10" confidence="possible">software development, field study, interaction designers, developers, modelling, qualitative analysis</region>
      <contrib-group class="DoCO:ListOfAuthors">
        <contrib contrib-type="author">
          <name id="26">Robert Biddle</name>
        </contrib>
      </contrib-group>
    </front>
    <body class="DoCO:BodyMatter">
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="11" page="1" column="1">ACM</h1>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="12" confidence="possible" page="1" column="1">Classification Keywords</h2>
        </section>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="14" confidence="possible" page="1" column="1">General Terms</h2>
        </section>
      </section>
      <region class="DoCO:TextChunk" id="13" page="1" column="1">H.5.m. Information Interfaces and Presentation (e.g. HCI): Miscellaneous</region>
      <region class="DoCO:TextChunk" id="15" confidence="possible" page="1" column="1">Human Factors; Design.</region>
      <section class="deo:Introduction">
        <h1 class="DoCO:SectionTitle" id="16" page="1" column="1">INTRODUCTION</h1>
      </section>
      <region class="DoCO:TextChunk" id="24" page="1" column="1">Collaborative work is an essential element of software creation work [<xref ref-type="bibr" rid="R11" id="17" class="deo:Reference">11</xref>, <xref ref-type="bibr" rid="R8" id="18" class="deo:Reference">8</xref>, <xref ref-type="bibr" rid="R36" id="19" class="deo:Reference">36</xref>, <xref ref-type="bibr" rid="R19" id="20" class="deo:Reference">19</xref>], which is especially evident in research addressing the problems of collaboration and communication within distributed teams [<xref ref-type="bibr" rid="R20" id="21" class="deo:Reference">20</xref>, <xref ref-type="bibr" rid="R14" id="22" class="deo:Reference">14</xref>, <xref ref-type="bibr" rid="R16" id="23" class="deo:Reference">16</xref>]. The value of collaboration to software project success in general is an</region>
      <region class="unknown" id="25" page="1" column="1">Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and/or a fee. NordiCHI ’12, October 14-17, 2012 Copenhagen, Denmark</region>
      <region class="unknown" id="28" page="1" column="2">School of Computer Science Carleton University, Canada robert <email id="27">biddle@carleton.ca</email></region>
      <region class="DoCO:TextChunk" id="41" page="1" column="2">active research area [<xref ref-type="bibr" rid="R11" id="29" class="deo:Reference">11</xref>, <xref ref-type="bibr" rid="R23" id="30" class="deo:Reference">23</xref>, <xref ref-type="bibr" rid="R31" id="31" class="deo:Reference">31</xref>], with much of the research studying the positive impacts of collaboration. For example, Teasley, Krishnan and Olson dramatically demonstrated the value of collocation in teamrooms for enabling collaboration and communication [<xref ref-type="bibr" rid="R30" id="32" class="deo:Reference">30</xref>], and Adolph et al. emphasized the importance of communication on co-located agile teams for reduced costs and increased productivity [<xref ref-type="bibr" rid="R2" id="33" class="deo:Reference">2</xref>]. To find out what is happening that is so essential and valuable when software teams collaborate, we studied non-distributed software teams whom we consider to be working in more ideal circumstances than distributed teams. We list these teams in <xref ref-type="fig" rid="F1" id="34" class="deo:Reference">Figure 1</xref>. We were particularly interested in an increasingly common and important aspect of software creation work that impacts strongly on the end-user’s experience of the software, i.e. the interaction design and development work that leads to the creation of the user interface. The creation of software interfaces involves multidisciplinary teams with individuals assuming a variety of relatively unstructured roles. We focused on two key players, the interaction designer (called simply the designer henceforth) and the developer, because the actions of designers and developers directly enable software to come into existence, whether through advanced graphical UI toolkits or programming. Moreover, this work is not easily integrated [<xref ref-type="bibr" rid="R24" id="35" class="deo:Reference">24</xref>]. We studied collaborative events that occurred in the early, messy, but very influential stage of work on novel software. Our detailed analysis of this work resulted in us labelling these events alignment work. We used activity theory [<xref ref-type="bibr" rid="R34" id="36" class="deo:Reference">34</xref>, <xref ref-type="bibr" rid="R13" id="37" class="deo:Reference">13</xref>, <xref ref-type="bibr" rid="R10" id="38" class="deo:Reference">10</xref>], which includes a model of action, as an initial frame to study collaboration. We aimed to develop a useful and insightful model of collaborative work applicable to the early stages of interaction design and development work, that would be informed by this perspective. Also, because our previous work and the work of others have found that collaborative work in the software domain is particularly artefact-centric [<xref ref-type="bibr" rid="R5" id="39" class="deo:Reference">5</xref>, <xref ref-type="bibr" rid="R31" id="40" class="deo:Reference">31</xref>], we aimed to include artefacts in our model. In short, we wanted our model to capture the essential aspects of the collaborative actions of interaction designers and developers and their mediating artefacts.</region>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="42" page="1" column="2">STUDY DESIGN AND DATA COLLECTION</h1>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="43" confidence="possible" page="1" column="2">Theoretical Framework</h2>
        </section>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="63" confidence="possible" page="2" column="2">Design of the Study</h2>
          <region class="DoCO:TextChunk" id="64" page="2" column="2">We aimed to study real software practices used on real projects to ensure validity of our results. Eight teams at eight organizations in various industries participated in our study. Sampling of software creation work was opportunistic. We reached out to teams through friends and professional organizations. We were very selective, rejecting many teams as unsuitable. Each team we studied had to be working on a novel product and had to include an interaction designer. A</region>
          <outsider class="DoCO:TextBox" type="page_nr" id="65" page="2" column="2">694</outsider>
          <region class="DoCO:TextChunk" id="66" confidence="possible" page="3" column="1">Edge-works Jaba Kadel Onu Observation period 0 19 0 0 Time in workplace 0 6 0 0 Observation notes 0 55 0 0 Videos 0 4 0 0 Interviews 2 3 2 3 Photos 48 50 ∼20 ∼20</region>
          <region class="DoCO:FigureBox" id="F3">
            <caption class="deo:Caption" id="67" page="3" column="1">Figure 3. Data collected from eight participating organizations</caption>
          </region>
          <region class="DoCO:TextChunk" id="69" page="3" column="1">well-designed user interface had to be perceived to be criti- cal to business value. Many details about these organizations and teams are shown in <xref ref-type="fig" rid="F1" id="68" class="deo:Reference">Figure 1</xref> including organization size, the market for the product, the team size, a sense of their co- located nature, their process, and finally the team’s specific product (all described in general terms due to ethics requirements). Organizations belonged to many industries including telecommunications, business, financial, services, gaming, and social media. All products were eventually com- pleted successfully, and all but one were deployed and are still in use by their intended users. Teams were typically comprised of designers, developers, business representatives, and testers. The teams varied greatly in terms of size, spatial arrangements to support their work and processes they used. We considered these teams to be very typical user interface design and development teams. They certainly experienced many stresses and surprises typical of software work. Four of the eight teams studied were developing software from scratch (Jaba, Quadrow, Onu, Kadel), three were completely redesigning and developing user interfaces of significant products to move to a radically new interface style (Talia, Telespace, Zambee), and the last team was developing a new feature in a large established product (Edgeworks). All projects, except possibly Edgework’s, had many significant design and development challenges. In many cases new tools were being used and new processes were being trialed, which appeared to be the norm for software teams of this type.</region>
        </section>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="70" confidence="possible" page="3" column="1">Foundational Work</h2>
          <region class="DoCO:TextChunk" id="75" page="3" column="1">An earlier paper of ours reported on a detailed analysis of a single video-recorded meeting [<xref ref-type="bibr" rid="R5" id="71" class="deo:Reference">5</xref>]. The paper showed how that meeting was structured into several different types of phases supported by distinct artefact sets. More recently we reported on the form of collaborative events found in the four agile teams listed in <xref ref-type="fig" rid="F1" id="72" class="deo:Reference">Figure 1</xref> [<xref ref-type="bibr" rid="R6" id="73" class="deo:Reference">6</xref>]. The forms of collaborative events we observed were 1) scheduled events, which have a prearranged meeting place and list of attendees, and a declared purpose (e.g. review a prototype); 2) impromptu events, which were opportunistic gatherings of designers and developers lasting half an hour or more in a pur- posefully designed space; and 3) work-related chats, which were informal, worked-focused, brief discussions that typically lasted about 15 minutes. We also described the artefact types common to four agile organizations, which are summarized in <xref ref-type="fig" rid="F2" id="74" class="deo:Reference">Figure 2</xref>. These artefacts appear in our model and are associated with tension identification, balancing and resolution. For example, De-</region>
          <region class="DoCO:TextChunk" id="76" confidence="possible" page="3" column="2">Quadrow Talia Telespace Zambee Total 6 60 8 0 93 (days) 4 8 5 0 23 (days) 81 61 89 0 286 (pages) 2 3 4 0 13 (#) 3 3 3 2 21 (#) 120 150 125 ∼20 ∼573 (#)</region>
          <region class="DoCO:TextChunk" id="78" page="3" column="2">sign ideas, expressed through talk or sketches, were a good way of addressing tensions; e.g., the Telespace designer sug- gested ideas for ‘effective’ ways that end users could generate reports. Telling Stories of end-user interaction (or sometimes software component interactions) was common, especially on the Jaba team who were developing a dynamic interactive learning game. Stories captured user descriptions, context of use, interaction sequences (corporal and tempo- ral), exceptional cases, and so on, and were used extensively to explore product aims. For example, at one Jaba meeting of designers and developers, they wondered if a fictitious gamer would ‘learn’ while playing the game if a particular direction was taken to ensure the game was ‘fun’. At Quadrow, a developer wondered if their proposed calculator would be ‘useful’ for a particular circumstance. Interface Proxies and Computational Proxies stood in for the non-existing software (front- end and back-end) to answer this question. At all sites, new interface proxies generated a great deal of interest because they could be used to evaluate whether or not previously proposed ideas successfully resolved tensions (e.g. was a product both ‘usable’ and ‘useful’?), and which product aims may have not yet been achieved (e.g., ‘competitiveness’) or may have been compromised (e.g., ‘aesthetics’). Computational proxies were used to simulate computations in the back-end software. For example, at Quadrow they answered the question, “What result would be returned to the user interface?”, or whether it would be possible to generate any result (i.e., was it ‘computable’?). Lists were a common artefact that was used to record a Plan and helped designers and developers to organize their future work towards tension resolution. Most recently we showed that software team members give a second meaning to artefacts through their enactment of unique project-specific interactional identities that they un- consciously create and adopt to make work meaningful and structured, and to ensure overall team objectives are met [<xref ref-type="bibr" rid="R7" id="77" class="deo:Reference">7</xref>]. This present study, conducted near the end of our research, led to a model of the nature of common designer-developer collaborations.</region>
        </section>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="79" confidence="possible" page="3" column="2">Data</h2>
          <region class="DoCO:TextChunk" id="80" page="3" column="2">For each project, we focused our attention on one designer, one developer and, wherever possible, their coach or team leader, who was also a designer or developer. At four organizations one of us collected demographic data, observed, video-recorded, photographed, and interviewed. When col- lecting data she shadowed the designer for several days, then the developer, taking notes about motives, goals, supporting structures, actions taken, and artefact used. The videos captured collaborative events. At the other organizations she col-</region>
          <outsider class="DoCO:TextBox" type="page_nr" id="81" page="3" column="2">695</outsider>
          <region class="DoCO:TextChunk" id="82" confidence="possible" page="4" column="1">Event Type Min. # Contradiction to Resolve Jaba-A S 120 3 Evolve game prototype Jaba-B S 60 5 Evolve game prototype Jaba-C S 30 2 Evolve game prototype Jaba-D I 5 4 Consider future work Quadrow-A I 90 3 Test a client mock-up Quadrow-B C 15 2 Address database issue Talia-A S 45 11 Assess previous system Talia-B S 60 11 Present new windows Talia-C S 60 11 Redesigned windows Telespace-A C 20 3 How to provide help Telespace-B C 5 2 Prompts for user input Telespace-C C 10 2 Prompts &amp; report types Telespace-D C 5 2 Popup assessed</region>
          <region class="DoCO:FigureBox" id="F4">
            <caption class="deo:Caption" id="83" page="4" column="1">Figure 4. Collaborative events. Type: S Scheduled; I Impromptu; C Work-Focused Chat. Min: Event duration in minutes. #: Number of people at the event.</caption>
          </region>
          <region class="DoCO:TextChunk" id="87" page="4" column="1">lected similar information through on-site, artefact-mediated interviews, but she was not able to observe and video record. The data were collected using standard data collection techniques of qualitative researchers [<xref ref-type="bibr" rid="R1" id="84" class="deo:Reference">1</xref>, <xref ref-type="bibr" rid="R26" id="85" class="deo:Reference">26</xref>] and summarized in <xref ref-type="fig" rid="F3" id="86" class="deo:Reference">Figure 3</xref>. In all, twelve interaction designers and nine developers were interviewed. Nine of the twenty-one people were also team leaders. The least experienced designer had 2 years of experience and the most experienced had more than 40. The designers self-identified as a content designer, learning designer, user interaction designer, interaction designer, user experience designer, and graphical user interface designer. The developers ranged in experience from 3 years to 22 years. The developers self-identified as a game developer, software developer, software designer (i.e. software architect), learning technology consultant, founding developer, software architect, and Java developer.</region>
        </section>
      </section>
      <region class="DoCO:TextChunk" id="48" page="1" column="2">Our study was framed by the socio-cultural perspective of cultural-historical activity theory [<xref ref-type="bibr" rid="R34" id="44" class="deo:Reference">34</xref>, <xref ref-type="bibr" rid="R13" id="45" class="deo:Reference">13</xref>, <xref ref-type="bibr" rid="R10" id="46" class="deo:Reference">10</xref>]. In this framework, purposeful, artefact-mediated interactions are under- stood as the cognitive acts of purposeful agents [<xref ref-type="bibr" rid="R35" id="47" class="deo:Reference">35</xref>] that occur to sustain a motivated group activity, which is viewed as</region>
      <outsider class="DoCO:TextBox" type="footer" id="49" page="1" column="2">Copyright c 2012 ACM 978-1-4503-1482-4/12/10. . . $ 15.00</outsider>
      <outsider class="DoCO:TextBox" type="page_nr" id="50" page="1" column="2">693</outsider>
      <region class="DoCO:TextChunk" id="51" confidence="possible" page="2" column="1">Organization Number of Market Team Pseudonym Employees Size Edgeworks 1000 Global ∼3 Dispersed in a building; First time Agile (Scrum) Jaba 40 Canadian 7 Co-located in one area; Highly iterative, Agile-like Kadel 3 Canadian 3 Dispersed in a city; Highly iterative process Onu 100 Global ∼8 Dispersed in a building; Customized-process Quadrow 1000 Canadian 4 Dispersed on a floor; A mature Agile team (XP) Talia 15000 Global 11 Dispersed in a building; First time Agile (Scrum) Telespace 50 Canadian 37 Co-located on a floor; Waterfall Zambee 1000 Canadian ∼6 Dispersed in a building; Customized process</region>
      <region class="DoCO:FigureBox" id="F1">
        <caption class="deo:Caption" id="52" page="2" column="1">Figure 1. Details of eight industry partners (all names are fictitious), teams, and their software product.</caption>
      </region>
      <region class="DoCO:TextChunk" id="53" confidence="possible" page="2" column="1">Artefact Category Description Design Idea Suggestions for evolving the interface or application. Design Question A potentially challenging inquiry about the interface or application. Interface Proxy Stands in for some aspect of the interactive product, e.g., look, feel, navigation, or flow. Story A narrative construct that binds together a character, action, and sometimes a setting. Computational Proxy A stand-in for the computational back end of an application. Context Proxy A stand-in for the context of the interface or application. Exemplar Another artefact that is like the application being designed in some way. Framework A software structure or digital artefact that supports the development of other software. Model A mental model of knowledge, a thing, or a process or a representation of such. Plan A statement about intended future work. Software Under Development An intermediate version of the product; may be limited in form or contain placeholders. Stipulations A comprehensive description of something, e.g., business needs or design ideas.</region>
      <region class="DoCO:FigureBox" id="F2">
        <caption class="deo:Caption" id="54" page="2" column="1">Figure 2. Artefacts that enabled joint implicit alignment work. The first four artefacts were ubiquitous across all projects. The others were less ubiquitous, but still present, within all projects. Plans (usually to-do lists) were less formal than plans used in explicit alignment events (e.g. backlogs).</caption>
      </region>
      <region class="DoCO:TextChunk" id="57" page="2" column="1">a holistic and integrated system. Activity proceeds in phases or, as Leontiev said, “moments” [<xref ref-type="bibr" rid="R21" id="55" class="deo:Reference">21</xref>]. In activity theory there is a strong emphasis on understanding processes, such as collaborative events, as they unfold over various timeframes. Processes are heavily influenced by tensions (positive or negative forces acting on the work) and the resolutions of tensions, which result in the selection of a new direction. Tensions are described as contradictions and are evidenced by breakdowns or problems in the work [<xref ref-type="bibr" rid="R32" id="56" class="deo:Reference">32</xref>]. Although these words appear negative, breakdowns or problems in the software domain frequently manifest themselves as suggestions for important software goals to be taken into consideration. For example, a developer may suggest a particular design might need to be tweaked to be more ‘im- plementable’. Alternatively a designer may remind the team that an important client goal is ‘compatibility with a stan- dard’. (Throughout this paper we use single quotes to high- light product and project objectives.) Such breakdowns or problems are considered to be a normal part of all work, and in the collaborative aspects of creative software practice are evidence of the forward movement of the work. The collaborative events we focus on addressed many such tensions. We saw this work of tension seeking, tension exposure, and tension resolution as alignment work because ideas to achieve aims, be they UI-centric or software-centric, had to be aligned with one another and aligned with the current vision of the software product for a resolution to a tension. We charac- terized most of collaborative software creation work as cooperative collaboration, using the terminology of Engeström</region>
      <region class="DoCO:TextChunk" id="58" confidence="possible" page="2" column="2">Spatial Arrangements and Process General Description of the Team’s Product Business analyst’s tool Learning games Video-sharing application Tool for financial analysts Specialized calculator Network configuration Point of sale terminal Online course</region>
      <region class="DoCO:TextChunk" id="62" page="2" column="2"> [<xref ref-type="bibr" rid="R12" id="59" class="deo:Reference">12</xref>], because collaborators shared a common objective (the creation of an interactive interface) and a common problem (how to incorporate good ideas and balance the competing and emerging product and project aims and restrictions), and they followed “scripted roles”. However, the scripted role software specialsts employ are not nearly as obvious as those in medical [<xref ref-type="bibr" rid="R28" id="60" class="deo:Reference">28</xref>] or legal domains [<xref ref-type="bibr" rid="R12" id="61" class="deo:Reference">12</xref>]. Later we address this issue when we show, as an important result, that designers and developers share an implicit understanding of how collaborative work should be carried out. For now we merely point out that although it is not an established well-articulated process, our results show that collaborative work is accomplished in a remarkably similar way from one software organization to the next regardless of the process a team uses. The use of artefacts, the creative role of tensions, the concept of phase, and the ill-defined nature of software creation informed our model-generating work. We aimed to reveal similarities across seemingly diverse processes, projects, organizations, teams, and active agents, and to expose some implicit, yet common, aspects of software creation culture.</region>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="88" page="4" column="1">ANALYSIS</h1>
        <region class="DoCO:TextChunk" id="100" page="4" column="1">In preparation for analyzing our transcripts in detail, we in- serted photos and video stills into our transcripts of videos, interview transcripts, and meeting notes, which would allow us to examine artefact-mediated collaborative events with as much richness of the actual event as possible. We used these files as input to Atlas.ti, a qualitative data analysis tool that enables coding. Coding qualitative data was a lengthy process that involved the identification and naming of collections across all collaborative events, such as all similar instances of artefacts, or all similar instances of joint actions, or phases in the work that had a common purpose. The act of coding supported detailed reflection and questioning of the data and ensured the analyst was not biased in their interpretations. The coding process was guided by two different analytical techniques. Contradiction Analysis provided a process for identifying tensions in collaborative work [ <xref ref-type="bibr" rid="R32" id="89" class="deo:Reference">32</xref>]. This analysis was based on our reflections that were formed when we read and reread our photo-augmented transcripts where the work was being pulled forward in a new direction. Grounded Theory [<xref ref-type="bibr" rid="R29" id="90" class="deo:Reference">29</xref>], a method increasingly used to research software creation work [<xref ref-type="bibr" rid="R18" id="91" class="deo:Reference">18</xref>, <xref ref-type="bibr" rid="R2" id="92" class="deo:Reference">2</xref>], gave us a more detailed understanding of collaborative work. Although typically used<marker type="column" number="2"/><marker type="block"/> to analyze interview transcripts [<xref ref-type="bibr" rid="R18" id="96" class="deo:Reference">18</xref>] [<xref ref-type="bibr" rid="R2" id="97" class="deo:Reference">2</xref>], we used it to analyze processes captured in our video transcripts and meeting notes, and to produce insights, theory or visual models of processes [<xref ref-type="bibr" rid="R29" id="98" class="deo:Reference">29</xref>]. At the heart of this technique is the method of constant comparison. By comparing instances, analysts create carefully defined codes (names for collections of instances of interest in the data) and then higher-level categories (abstrac- tions) that they constantly refine, combine, or break up, as they test whether or not emerging themes, theory or models fit the data. The method keeps the analyst close to the data, and therefore the categories or models that emerge are a true reflection of the data that was collected. We followed the guide- lines of Strauss and Corbin [<xref ref-type="bibr" rid="R29" id="99" class="deo:Reference">29</xref>], but substituted Strauss’s theory of action, which provides the underlying perspective for Strauss and Corbin’s approach, with an activity-theoretic perspective on action. This allowed us to use grounded theory from an activity-theoretical perspective, and to make our ba- sic preconceptions overt (i.e., that we would draw on concepts from activity theory like action, artefacts and tensions).</region>
        <region class="DoCO:FigureBox" id="F5">
          <image class="DoCO:Figure" src="62kv.page_004.image_01.png" thmb="62kv.page_004.image_01-thumb.png"/>
          <caption class="deo:Caption" id="95" page="4" column="2">Figure 5. Details of 13 collaborative events that were video-recorded, transcribed and analyzed. Phases in the events are listed across the top of the diagram. The sequencing of phases across time is shown by following the lines for each event.</caption>
        </region>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="101" page="4" column="2">PERVASIVENESS OF IMPLICIT ALIGNMENT WORK</h1>
        <region class="DoCO:TextChunk" id="105" page="4" column="2">Designers and developers worked alone and collaboratively. We began our analysis by counting collaborative events. We observed 26 scheduled meetings, 21 impromptu meetings and 71 work-related chats over 23 days. Of these, at least one designer and one developer attended 69% of the scheduled meetings, 25% of the impromptu meetings and 44% of the <marker type="page" number="5"/><marker type="column" number="1"/><marker type="block"/> chats. Overall designers and developers collaborated 5 times per day, and 2.3 of those times were with each other. We observed designers and developers collaborating 18 times in scheduled meetings, 5 times in impromptu meetings and 31 times in work-related chats. Twenty-eight percent of all scheduled meetings involved explicit alignment work; they were planning meetings where tasks were created or aligned to meet ‘deadlines’, and backlogs or requirements were reviewed. We did not analyze these explicit alignment events. Seventy-two percent of the scheduled meetings, 100% of impromptu events, and 100% of work-related chats involved what we came to call implicit alignment work. This work ensured that the work of individuals on different objectives aligned so that the project as a whole could move forward. <xref ref-type="fig" rid="F4" id="104" class="deo:Reference">Figure 4</xref> provides information about the 13 events we video- recorded.</region>
        <outsider class="DoCO:TextBox" type="page_nr" id="103" page="4" column="2">696</outsider>
      </section>
      <section class="deo:Results">
        <h1 class="DoCO:SectionTitle" id="106" page="5" column="1">RESULTS OF CONTRADICTION ANALYSIS</h1>
        <region class="DoCO:TextChunk" id="110" page="5" column="1">We concluded that the main force for the forward movement of the work was a joint concern for achieving product and project aims. For example, at Jaba, in one 2-hr. meeting designers and developers addressed 11 project and product aims (e.g. ‘learnability’, ‘learning’, ‘usability’ and so on). The majority of these product aims had yet to be achieved in their product prototypes and some had to be balanced against each other [ <xref ref-type="bibr" rid="R5" id="107" class="deo:Reference">5</xref>]. Project aims had a large influence on how well product aims could be achieved (e.g. ‘timeliness’ significantly limited the ‘artistic’ goals for their product). One way software creation work moves forward is through the exposure and resolution of tensions, which frequently occurred in collaborative events where decisions were made. These occurred at a variety of levels. One interesting project- level tension evident was the alignment of the work of the interface designer (whose background was extremely varied) and the developer (who was typically a computer scientist). We observed this being negotiated (i.e. resolved) on a per project basis. On each team, designers and developers de- termined where to draw the line between their overlapping responsibilities. One member of the design team at Telespace who generated interface code from a graphical system was constrained by the developers. He was given a list of programming files he should not modify. In contrast, the designer at Talia was delighted when he was enabled by the developers on his team to use the same graphical system to produce the code for the visual interface. A very creative designer/artist at Kadel had learned over time what types of designs were feasible for a web environment and produced suitable digital drawings to pass to the developer who repro- duced them in software. An enthusiastic developer at Edgeworks was always on the alert for globalization problems in the English version of their designer’s interface proxies, because these regularly surfaced later as bugs when the testers did their job. In all cases work boundaries were negotiated. Other types of tensions in collaborative events arose when software aims had not yet been addressed in the project. This is a pervasive and necessary aspect of novel software creation work, and it enabled the forward movement of the project. At Jaba, for instance, collaborative events regularly included<marker type="column" number="2"/><marker type="block"/> only the game designer, learning designer and developer, and the learning game they were designing evolved rapidly during these times. During these meetings, the designers would simulate interactions using the current interface proxy and make suggestions for improvements that were immediately sketched and then evaluated for ‘implementability’ by the developer, or for ‘compatibility with project goals’ by the game designer (who was also the de facto project leader). Be- cause ‘creativity’ was encouraged in this organization, interface proxies evolved significantly in the course of Jaba meetings. In most other organizations interface proxies evolved more when designers were working on their own, and addressing tensions was more about posing important questions such as the feasibility of the developer’s platform to imple- ment a certain design. Problems or breakdowns also occurred when competing software aims or objectives had to be resolved. For example, Quadrow designers, pushed by their clients, wanted their calculator software to be able to ‘address a wide variety of prob- lems’ but, from the developers’ perspective, ‘implementability’ was an ongoing issue. The designers and developers con- tinually worked with the client to manage expectations by vet- ting stories or scenarios of the calculator’s use that were being proposed by clients. This particular tension was never satis- factorily resolved, and in the end, although the product was ‘completed’, it was not ‘deployed’. Processes at this organization did not include mechanisms for cancelling projects. This meant there was little likelihood of the project being cancelled once launched. Organizational issues such as this could have a large impact on alignment work. In this case, no amount of alignment work could result in a deployable product because of real world circumstances. In contrast to this case, most instances of competing aims were viably resolved. Another common tension in software work is between project issues and product work. For example, Talia’s progress was hampered by a lack of knowledge about the end user’s context and client needs. This led to the designers and developers making false assumptions, which became apparent during collaborative events where scenarios were being reviewed. At one event business people on the team raised red flags about important aims held by clients that had not even been considered. In this way, the designers and developers realigned their work so that more client-suitable and business-suitable software was produced, but the process was slow and frustrating. The process of aligning work by simulating the software- to-be and consequently drawing attention to the project and product aims that were yet to be addressed (or inadequately addressed) was not always enjoyable. However, designers and developers engaged in it regularly on every project. Atti- tudes towards this implicit alignment work shifted over time. Designers or developers with more than ten years of experience in our study commented in their interviews that tensions were natural and normal and an element of the creative aspect of the work. They actively sought opportunities to bring tensions to the fore so that they could be resolved [<xref ref-type="bibr" rid="R7" id="109" class="deo:Reference">7</xref>]. Less experienced designers saw tensions as problems to be solved.</region>
        <outsider class="DoCO:TextBox" type="page_nr" id="111" page="5" column="2">697</outsider>
      </section>
      <section class="deo:Results">
        <h1 class="DoCO:SectionTitle" id="112" page="6" column="1">RESULTS OF GROUNDED THEORY ANALYSIS</h1>
        <region class="DoCO:TextChunk" id="120" page="6" column="1">The constant comparative method at the heart of grounded theory analysis was used to identify and name the joint, goal- oriented actions of designers and developers. This work really showed how tightly designers and developers cooper- ated (e.g. an evaluation action was achieved by their joint engagement—one individual making an evaluative statement, and the other responding to it). This tight coordination occurred throughout collaborative events. We also noticed how important artefacts were to accomplishing joint actions. Therefore, in parallel to coding joint actions, we also coded each instance where an artefact was used in a video tran- script of a collaborative event. This produced lists of artefacts that were used to support collaborative work (one per collaborative event) that included artefacts that were shown, pointed at, referred to, or created in the meeting or collaborative event. Multiple instances of the same artefact occurred if it was reused in a meeting. A surprising number of artefacts enabled collaborative work. For example, in an analysis of one 2-hour meeting we counted 200 uses of artefacts [ <xref ref-type="bibr" rid="R5" id="113" class="deo:Reference">5</xref>]. We divided our lists of artefacts into segments of related artefacts. Each segment identified a collection of related artefacts and corresponded to a phase in the larger activity. This revealed the sheer ubiquity of the use of artefacts for focus- ing and abetting the work’s progress, which made us think it would be important to include artefacts and the phases that they enabled in our model. We concluded that collaborative events progressed in a series of artefact-mediated phases. Sequences of jointly achieved actions, such as a series of evaluative joint actions, were used to name phases. <xref ref-type="fig" rid="F5" id="114" class="deo:Reference">Figure 5</xref>, an intermediary analysis result, presents the phases of each collaborative event visually; each collaborative event varied in duration from 15 minutes to 2 hours, began with an opening phase and concluded with a closing phase. For each event, the diagram shows the order, i.e., how designers and developers progressed through a meeting by moving from one phase to another. In general phases were brief (about 10 minutes each) and the number of zigzags depicting an event is roughly cor- related with its overall duration. Variations across teams are evident. The Talia team, who were adopting Scrum, typically met for an hour in a scheduled conference room for a weekly meeting and powerpoint presentations were a cultural norm. Telespace team members, who followed a waterfall process, had short collaborative desk-side chats where they would simulate their software product and re-enact the interface in a simulated context of use. Frequency of events can be quickly assessed by following the vertical lines. S IMULATING was a frequent phase across all teams. Short A SSESSING THE P ROJECT phases were a frequent occurrence within events for agile teams indicating a high level of customer-consciousness at Jaba, Quadrow and Talia, not apparent in the waterfall team (Telespace). The phases that the interaction designer and developer (and often other team members as well) jointly achieved are: • O PENING : Setting up, settling in, making jokes, setting the initial direction of the meeting. The purpose of meetings was always to address a product or project tension.<marker type="column" number="2"/><marker type="block"/> • S IMULATING : Simulating use with a mock-up or prototype. By far the most common phase, this work is accomplished through the use of interface proxies, computational proxies, stories, ideas and questions. Simulating enables team members to explore and reveal product tensions. It frequently results in new ideas for achieving product aims. • P RESENTING : One team member describes their ideas for a period of time, with minimal interruptions from the rest of the team. Accomplished through the use of interface proxies. Presenting was usually used to show how previous tensions had been resolved. • E XPLORING : The team considers multiple options for a design. Requires using multiple interface proxies. The emphasis is on which proxy best resolves product tensions. • R E -E NACTING : The team works at developing a dynamic understanding of the context in which their software will be used by re-enacting tasks in a real or simulated context. Work is accomplished through the use of context proxies. Can reveal product-environment tensions. • C ONSIDERING I MPLEMENTABILITY : Exploring the feasibility of a design with regard to the ease with which it can be implemented. This work can be accomplished through the use of computational proxies. • A SSESSING THE P ROJECT : Considering the work from a client- or business- perspective. A major concern of team members was whether they were building the right product and whether they had resources, the time or people to do it. No particular artefact existed to support this phase. • C LOSING : Wrapping up and planning future actions. To- do lists, a simple planning artefact, were frequently created. Resolutions to the initial tension and others that arose during the meeting typically were reviewed. Other phases we observed infrequently included P LANNING (ordering the work to be done), R EVIEWING (reviewing the meeting to explain how the current point was reached), and M ODELLING (carefully considering several models that might guide the design of an application and then choosing one). Throughout all product-centric phases (S IMULATING , P RE SENTING , E XPLORING , R E -E NACTING , and C ONSIDERING I MPLEMENTABILITY ), we observed designers and developers engaging in E VALUATING THE P RODUCT subphases. These subphases helped to align competing product objectives. This was so common we concluded it was an om- nipresent aspect of designer-developer interactions, and a major reason for doing it. For example, in the two-hour Jaba meeting, ideas for evolving the game prototype were constantly being evaluated (especially in S IMULATING phases) with the assistance of a current interface proxy, against product objectives such as ‘usability’, ‘playability’, ‘authenticity’, ‘complexity’, ‘ability to enable learning’, ‘implementability’ ’compatibility with the end user’ and ‘the fun factor’ of the game. Addressing these aims and making decisions about the product occurred progressively. For example, Jaba designers and developers did not focus on the ‘playability’ of the game they were creating until the designers felt confident it would<marker type="page" number="7"/><marker type="column" number="1"/><marker type="block"/> support learning and the developers were confident they had created a solid gaming framework based on a game model (i.e. it embodied ‘gameiness’). In contrast, in A SSESSING THE P ROJECT phases, these same designers and developers addressed larger project-level issues such as client requirements, the ability of the team to integrate content, code, art and graphics, and finally workload and profitability. Considering both the <xref ref-type="table" rid="Tin" id="118" class="deo:Reference">table in</xref> <xref ref-type="fig" rid="F4" id="119" class="deo:Reference">Figure 4</xref>, the diagram in Figure 5, and our research notes, differences in styles and emphases are evident across teams. The Jaba team, who had the best workplace in terms of available meeting rooms and spaces, was highly collaborative and loved their whiteboards. The Quadrow team paid most attention to what their product would be like in the context of use (in this case embed- ded in a web page) in R E -E NACTING phases, and they also engaged in many phases where they C ONSIDERED THE I M PLEMENTABILITY of their computational engine because this impacted the design of the user interface. The Talia team had to book meeting room space and collaborated for one hour per week, always using PowerPoint. The Telespace team, unlike the previously mentioned three teams who were agile, used a waterfall approach. They accomplished S IMULATION phases during quick deskside chats and carried paper artefacts ev- erywhere. They made good use of a lab space to R E -E NACT the use of their application and to compare it for ‘complete- ness’ to the previous version of the product implemented in a completely different style. Contrary to agile teams they did not assess their client’s needs and project resources in A S SESSING THE P ROJECT phases. However, despite these large differences in style and emphases amongst the four teams, the phases of collaborative work remained the same.</region>
        <outsider class="DoCO:TextBox" type="page_nr" id="117" page="6" column="2">698</outsider>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="121" page="7" column="1">A MODEL OF IMPLICIT JOINT ALIGNMENT WORK</h1>
        <region class="DoCO:TextChunk" id="125" page="7" column="1">Our model (shown in <xref ref-type="fig" rid="F6" id="122" class="deo:Reference">Figure 6</xref>) combines insight from both analyses and describes how in general designers and developers accomplish implicit alignment work. The model applies equally to many scheduled meetings, impromptu events or chats, although there are obviously differences in the number of phases in these different types of events. As described above, eight common meeting phases were identified, although not every phase is present in every meeting. Meet- ing participants engaged in A SSESSING THE P ROJECT , P RE SENTING , S IMULATING , E XPLORING , and R E -E NACTING phases as appropriate to their purposes at any point in the meeting. Not a single meeting we attended had an agenda, and no more than vague plans to engage in any of these phases. Phases began as the need arose to resolve a contra- diction (See <xref ref-type="fig" rid="F4" id="123" class="deo:Reference">Figure 4</xref>). Collaborative events opened in various ways (lots of good-natured teasing and humour), all of which helped attendees settle in. Phases within the circle occurred in any order and the number of phases varied. Collaborative events C LOSED (i.e. wound up) and then sometimes resumed. The line dividing the circle identifies two groups of phases. One set is about assessing the project and the other is about creating and assessing the product. The model in <xref ref-type="fig" rid="F6" id="124" class="deo:Reference">Figure 6</xref> associates phases with artefact types. This model shows that some tension within the project (such as the simple fact the product is not complete) or the absence</region>
        <region class="DoCO:FigureBox" id="F6">
          <image class="DoCO:Figure" src="62kv.page_007.image_02.png" thmb="62kv.page_007.image_02-thumb.png"/>
          <caption class="deo:Caption" id="127" page="7" column="2">Figure 6. A model of implicit joint alignment work involving designers and developers depicting the concrete nature of commonly occuring collaborative events. Two phases that frame alignment work O PENING and C LOSING the collaborative event are outside the circle. Within the circle,</caption>
        </region>
        <region class="DoCO:TextChunk" id="128" confidence="possible" page="7" column="2">left most phases align project aims and right most phases align product aims. Enabling artifacts are named in boxes. Alignment work proceeds from top to bottom; phases within the circle are arbitrary.</region>
        <region class="DoCO:TextChunk" id="129" page="7" column="2">of a desired product aim, such as ‘usability’, triggers a collaborative event. Phases rely on certain artefact types as indi- cated in the diagram. These serve to organize a phase through their structure, support the interactions of the phase, or are the primary outcomes of a phase. When a collaborative event closes, plans are made to ensure further project development. The main outcome of most collaborative events is a greater understanding of the software product accomplished through the exposure and alignment of product and project aims.</region>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="130" page="7" column="2">POST ANALYSIS AND INTERPRETATION</h1>
        <region class="DoCO:TextChunk" id="151" page="7" column="2">In a post-analysis literature review, as recommended by Glaser [ <xref ref-type="bibr" rid="R17" id="131" class="deo:Reference">17</xref>], we found that our results corresponded closely with the concept of interactional alignment work a term in- troduced by Blumer [<xref ref-type="bibr" rid="R3" id="132" class="deo:Reference">3</xref>], but elaborated by Strauss and Corbin [<xref ref-type="bibr" rid="R28" id="133" class="deo:Reference">28</xref>, <xref ref-type="bibr" rid="R9" id="134" class="deo:Reference">9</xref>] in their work on health care in hospital settings. Strauss and Corbin’s insights on alignment work apply even more strongly to the software domain where roles are less scripted, the work in general is less routine, and alignment work is therefore more important. According to them interactional alignment work is an important “base upon which [project] work flows” [<xref ref-type="bibr" rid="R28" id="135" class="deo:Reference">28</xref>], p. 168. It is “the overall process of putting all the work elements together and keeping them together in the context of a project” [<xref ref-type="bibr" rid="R28" id="136" class="deo:Reference">28</xref>]. “Without such interactional processes . . . the work processes would not proceed—at least not for long” [<xref ref-type="bibr" rid="R28" id="137" class="deo:Reference">28</xref>], p. 167. Interactional alignment work is one aspect of a more complex process called the articulation process. Other work processes included in the articulation process include insuring the flow of resources, making arrangements about the divi- sion of labour, matching workers motivations to tasks, and<marker type="page" number="8"/><marker type="column" number="1"/><marker type="block"/> supervising work. Compared to these aspects of the articulation process, interactional alignment work is more ongoing throughout the project, more pervasive, and more of a distributed team responsibility. “Everyone has formal and informal responsibility for fitting together some aspect of the work” [<xref ref-type="bibr" rid="R28" id="140" class="deo:Reference">28</xref>], p. 169. This fitting together is explicit or implicit. Explicit alignment work, which we did not analyze, is sometimes proceduralized (such as Sprint planning meetings where tasks are prioritized and assigned so that ‘the right soft- ware’ is produced and ‘deadlines are met’). We make visible the implicit ongoing joint alignment work of designers and developers, which happens in a team context. Strauss and Corbin’s work in hospital settings also led us to consider other factors that impact the ability to accomplish joint alignment work [<xref ref-type="bibr" rid="R28" id="141" class="deo:Reference">28</xref>]. Structural conditions, such as the availability of appropriate collaborative spaces and the recog- nition of the importance of this work were key. The Jaba team was best placed in this regard with an open workplace incor- porating varied and pleasant collaborative spaces. The Talia designers could not even fit a second person in their cubi- cle. The organization of the project was also a significant impact on alignment work. At Quadrow, where the product was not deployed, a faulty system for identifying feasible projects, and the absence of a system for cancelling such projects, meant that the designer and developers struggled to create software with ever-changing real-world requirements (despite being agile). Ideology of the organization also had an impact on the ability of designers and developers to accomplish implicit alignment work. Organizational cultures that explicitly encouraged creativity and risk-taking (such as Jaba’s) appeared to collaborate more and accomplish more in these events. In contrast, the organization that employed a waterfall methodology did not value collaborative work and therefore implicit alignment work went “underground” in the form of desk-side chats, where it was accomplished ineffi- ciently. Finally, the relationship of the project to the wider organization was also key. At Onu, the organization was not a design culture (it was a business and software development culture); through an interview we learned that during the course of one project, developers refused to engage with designers on front end issues because of their greater concern for backend issues and other higher priority projects. Frus- trated designers solved their problem by hiring a user interface developer who addressed solely their issues. Other work on collaboration has addressed certain aspects of our research. Boehm stressed the need for understanding collaborative work in the software domain and how to support it [<xref ref-type="bibr" rid="R4" id="142" class="deo:Reference">4</xref>]. Stolterman emphasized the designerly aspects of software creation work, and called for more understanding of design practices [<xref ref-type="bibr" rid="R27" id="143" class="deo:Reference">27</xref>]. Ship et al. emphasized the role of artefacts in collabortive software creation work [<xref ref-type="bibr" rid="R25" id="144" class="deo:Reference">25</xref>]. Ozenc et al. repositioned the designer’s artefacts as a bound- ary object that enables interdisciplinary communication [<xref ref-type="bibr" rid="R22" id="145" class="deo:Reference">22</xref>]. Some work has produced models. Van der Bergh’s et al.’s framework emphasized the importance of prototyping tools in supporting team collaborations, especially those between the designer-developer. [<xref ref-type="bibr" rid="R33" id="146" class="deo:Reference">33</xref>]. Other work has produced valuable descriptions and understandings. Teasly et al. [<xref ref-type="bibr" rid="R30" id="147" class="deo:Reference">30</xref>] de-<marker type="column" number="2"/><marker type="block"/> scribed 9 kinds of work in a co-located teamroom, 8 of which were collaborative, showing that in ideal circumstances software teams collaborate a lot. Ferreira et al. described routine work within one Scrum team that included a designer, and showed how organizational culture can impact negatively on designer-developer collaborations, and the developer’s role in negotiating order [<xref ref-type="bibr" rid="R15" id="149" class="deo:Reference">15</xref>]. Adolph et al. studied 3 software development teams, although none included designers, and ar- gued that social factors impact cost and productivity. They stressed the ecosystem of the team itself and the role of team negotiations within and outside the team [<xref ref-type="bibr" rid="R2" id="150" class="deo:Reference">2</xref>]. Our work most closely relates to Ferreira et al.’s and Adolph et al.’s studies in its emphasis on negotiations, maintaining order and progressing the work in software teams. Our work expands on these two studies. Unlike Ferreira et al.’s work, we have studied multiple teams, innovative software design work, and have emphasized implicit alignment work, which we found is the major emphasis of designer-developer interactions, rather than articulation work in general. Unlike Adolph et al.’s work, our work includes software teams with interaction designers and makes connections with Strauss’ theory of articulation and interactional alignment processes.</region>
        <outsider class="DoCO:TextBox" type="page_nr" id="139" page="7" column="2">699</outsider>
      </section>
      <section class="deo:Conclusion">
        <h1 class="DoCO:SectionTitle" id="152" page="8" column="2">CONCLUSIONS AND RECOMMENDATIONS</h1>
        <region class="DoCO:TextChunk" id="158" page="8" column="2">Software creation is a process involving multidisciplinary collaborations. Our analyses focused on developing a greater understanding of non-planning collaborative events that involve at least one designer or one developer. We showed that this type of collaborative event happens frequently in the work lives of designers and developers, and that about half of these involve designers and developers collaborating with each other. We could see that collaboration was a necessary aspect of software creation work, but wondered what it was designers and developers accomplished when they collaborate, what was the real purpose of collaborative encounters, and how this purposeful work was accomplished. To this end, we analyzed 13 collaborative events (11 hours of video data), which we backed up with analysis of data from our observation notes and interviews. We saw collaborative events as joint achievements of designers and developers (and the other team members who also participated). Close work was required to make these events successful; these events were largely cooperative in nature because there was a shared objective, a common problem, and individuals had implicit and explicit roles to play. In a con- tradiction analysis we have shown how many tensions are addressed and resolved in this joint work and that the resolution of tension provides the impetus for the forward movement of the work. Grounded theory highlighted the importance of artefacts, and that the work was patterned around the use of artefacts. It also produced a detailed understanding of the nature of implicit joint alignment work and the typical phases in it. <xref ref-type="fig" rid="F6" id="153" class="deo:Reference">Figure 6</xref> is a visual depiction of this common type of work, which includes some enabling artefacts. Our model identified OPENING and CLOSING phases occurring in all interactive events. A SSESSING THE P ROJECT phases were common events, especially in agile teams; in this phase the designer-developer pair assured themselves<marker type="page" number="9"/><marker type="column" number="1"/><marker type="block"/> they were satisfying project requirements and restrictions. However, regardless of the team’s methodology, the bulk of the product alignment work happens in five product- centric phases: S IMULATING , P RESENTING , E XPLORING , R E -E NACTING , and C ONSIDERING I MPLEMENTABILITY . These phases were accomplished by extensive use of artefacts. The most important aspect of these phases was the frequent occurrence of product alignment subphases we called A SSESSING THE P RODUCT . We came to see these subphases, where product aims were proposed and aligned, and the A SSESSING THE P ROJECT phase as the real purpose of the meeting. That is it say, the pervasive emphasis on as- sessment throughout all but opening and closing phases, was the accomplishment of the collaborative events. We therefore named the overall process joint alignment work because its main achievement was revealing and aligning project and product objectives. Like Strauss we found that the team’s ability to appropriately raise and effectively deal with project and product aims had a significant impact on the direction of the work. Other factors such as structural conditions, the organization of the project, organizational ideologies, and the organization of the project to the wider organization had an impact on alignment work. Our study, though diverse, was limited in part by the types of software projects that were being undertaken. Many types of products were not included, such as the development of control systems, real-time applications, very large systems, or specialized applications (e.g., mobile apps). Further studies may challenge or extend the model of implicit alignment work developed here; but the model is a significant contri- bution, because it was developed from empirical data, and because it is a good reflection of the nature of typical collaborative work that designers and developers undertake. This study has shed light on the tensions, influences, and challenges that designers and developers, as part of multidisciplinary software creation teams, face and overcome together. A number of practical suggestions ensue from this work that could be applied in organizations. The bulk of collaborative meetings between interaction designers and developers are about alignment work. Organizations need to support this work by providing space for it and the opportunity to do it. Spaces for formal, unscheduled, and ad hoc work-related chats are all required. Although one might think this would be a given, it was not the case for all the teams in our study. Only two teams were co-located in a single area or floor of a building. Also, Talia designers and developers could only meet in scheduled pre-booked meeting rooms because their cubicles were only large enough to fit one person, and their meetings lasted exactly one hour as a result. Telespace designers and developers had frequent deskside chats because their organization did not have a culture of unscheduled, unplanned meetings. Software teams need to understand the strategic reasons for the software project existing, and mechanisms should be put in place so teams can align their work with the business objectives of the organization, a reality that was not a given on several teams. In addition, team members (and not just de-<marker type="column" number="2"/><marker type="block"/> signers) need to be well-informed about clients, end users and deployment environments. Much speculation takes place in the absence of such information. Ideally, the teams should have contact with customers and end users to support frequent A SSESSING THE P ROJECT phases and R E -E NACTING phases. At the very least, they require very good information about their clients, the product environment, end users, and also the business reasons for the existence of the project. Sur- prisingly, both Telespace and Talia designers and developers, who worked in very large reputable organizations, seemed unaware of the multiplicity of reasons for their project’s existence, since this was not deemed to be necessary information for the software team. Designers and developers do need this information to formulate software aims that are aligned with their organization’s desired direction for the project. Finally, the research community, or organizations that create tools for software teams, could use their expertise to develop tools that would support alignment work specifically. One clear result of this study was that S IMULATING software was a pervasive activity across organizations. This needs to be done, not just from an end-user perspective, but as a multi- perspective walk-through, where each person on the team can evaluate the consequences of design choices from their particular perspective. We saw teams cobbling together a variety of artefacts to do this work, such as prototypes of their software, computational proxies, design documents, database schemas and so on, but no tool really exists to support this important aspect of software creation work. Software creation work has always been considered hard or “wicked”, and it is regularly beyond the ability of one person working from a single perspective. Now interaction design work has also been described as a particularly complex activity [<xref ref-type="bibr" rid="R27" id="157" class="deo:Reference">27</xref>]. Multidisciplinary software creation work is now commonplace as the work has developed from solely the domain of software developers to one where a variety of specialists have emerged to address particular aspects of the task. It seems obvious that the work of these specialists must be regularly aligned, and this study has emphasized this fact for two prominent members of the team. Organizations can do much to support this work by creating space for it and recognizing its importance. Future research could be directed towards developing tools specifically for enabling alignment work. These tools should make the addressing and balancing of product and project aims more visible, and make the aims and objectives more measurable.</region>
        <outsider class="DoCO:TextBox" type="page_nr" id="155" page="8" column="2">700</outsider>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="159" confidence="possible" page="9" column="2">Acknowledgments</h2>
          <region class="DoCO:TextChunk" id="160" page="9" column="2">We gratefully acknowledge our participating organizations, their employees, the Natural Sciences and Engineering Research Council of Canada (NSERC) for SurfNet funding, Cognos Industry Research Chair grants, and GRAND NCE.</region>
        </section>
      </section>
      <section class="DoCO:Bibliography">
        <h1 class="DoCO:SectionTitle" id="161" page="9" column="2">REFERENCES</h1>
        <ref-list class="DoCO:BiblioGraphicReferenceList">
          <ref rid="R1" class="deo:BibliographicReference" id="162" page="9" column="2">1. Adler, P. A., and Adler, P. Observational techniques. In Handbook of qualitative research. Sage, 1994, 377–392.</ref>
          <ref rid="R2" class="deo:BibliographicReference" id="163" page="9" column="2">2. Adolph, S., Kruchten, P., and Hall, W. Reconciling perspectives: A grounded theory of how people manage the process of software development. Journal of Systems and Software 85, 6 (2012), 1269 – 1286.</ref>
          <ref rid="R3" class="deo:BibliographicReference" id="165" page="10" column="1">3. Blumer, H. Symbolic Interactionism: Perspective and method. Prentice-Hall, 1969.</ref>
          <ref rid="R4" class="deo:BibliographicReference" id="166" page="10" column="1">4. Boehm, B. A view of 20th and 21st century software engineering. ICSE ’06, ACM (2006), 12–29.</ref>
          <ref rid="R5" class="deo:BibliographicReference" id="167" page="10" column="1">5. Brown, J., Biddle, R., and Lindgaard, G. Stories, sketches, and lists: Developers and interaction designers interacting through artefacts. In Agile (2008), 39–50.</ref>
          <ref rid="R6" class="deo:BibliographicReference" id="168" page="10" column="1">6. Brown, J., Lindgaard, G., and Biddle, R. Collaborative events and shared artefacts: Agile interaction designers and developers working toward common aims. In Proc. of Agile, IEEE (2011), 87–96.</ref>
          <ref rid="R7" class="deo:BibliographicReference" id="169" page="10" column="1">7. Brown, J., Lindgaard, G., and Biddle, R. Interactional identity: Designers and developers making joint work meaningful and effective. In Proc. of Computer Supported Cooperative Work, ACM (2012), 1381–1390.</ref>
          <ref rid="R8" class="deo:BibliographicReference" id="170" page="10" column="1">8. Cockburn, A., and Highsmith, J. Agile software development, the people factor. Computer 34, 11 (2001), 131–133.</ref>
          <ref rid="R9" class="deo:BibliographicReference" id="171" page="10" column="1">9. Corbin, J. M., and Strauss, A. The articulation of work through interactions. The Sociological Quarterly 34, 1 (1993), 71–83.</ref>
          <ref rid="R10" class="deo:BibliographicReference" id="172" page="10" column="1">10. Daniels, H. Vygotsky and Research. Routledge, 2008.</ref>
          <ref rid="R11" class="deo:BibliographicReference" id="173" page="10" column="1">11. Dyb a, T., and Dingsøyr, T. Empirical studies of agile software development: A systematic review. Inf. Softw. Technol. 50 (2008), 833–859.</ref>
          <ref rid="R12" class="deo:BibliographicReference" id="174" page="10" column="1">12. Engeström, Y. Interactive expertise: Studies in distributed working intelligence. In University of Helsinki research report, no. 83 (1992).</ref>
          <ref rid="R13" class="deo:BibliographicReference" id="175" page="10" column="1">13. Engeström, Y. Activity theory as a framework for analyzing and redesigning work. Ergonomics 43, 7 (2000), 960–974.</ref>
          <ref rid="R14" class="deo:BibliographicReference" id="176" page="10" column="1">14. Feller, J., Fitzgerald, B., Hissam, S., and Lakhani, K. Collaboration, conflict and control: report on the 4th workshop on open source software engineering. SIGSOFT Softw. Eng. Notes 30 (May 2005), 1–2.</ref>
          <ref rid="R15" class="deo:BibliographicReference" id="177" page="10" column="1">15. Ferreira, J., Sharp, H., and Robinson, H. User experience design and agile development: Managing cooperationg through articulation work. Software: Practice and Experience 41, 9 (2011), 963–974.</ref>
          <ref rid="R16" class="deo:BibliographicReference" id="178" page="10" column="1">16. Fokaefs, M., Tansey, B., Ganev, V., Bauer, K., and Stroulia, E. Wikidev 2.0: Facilitating software development teams. In CSMR (2010), 276 –277.</ref>
          <ref rid="R17" class="deo:BibliographicReference" id="179" page="10" column="1">17. Glaser, B. Theoretical Sensitivity. Sociology Press, 1978.</ref>
          <ref rid="R18" class="deo:BibliographicReference" id="180" page="10" column="1">18. Hoda, R., Noble, J., and Marshall, S. Using grounded theory to study the human aspects of software engineering. In Human Aspects of Software Engineering, HAoSE ’10, ACM (2010), 5:1–5:2.</ref>
          <ref rid="R19" class="deo:BibliographicReference" id="181" page="10" column="1">19. Kuutti, K. Activity theory, transformation of work and information systems design. Perspectives on activity theory. Cambridge University Press, 1999, 360–376.</ref>
          <ref rid="R20" class="deo:BibliographicReference" id="182" page="10" column="2">20. Layzell, P., Brereton, O., and French, A. Supporting collaboration in distributed software engineering teams. In Software Engineering Conference, 2000. APSEC 2000. Proceedings. Seventh Asia-Pacific (2000), 38–45.</ref>
          <ref rid="R21" class="deo:BibliographicReference" id="183" page="10" column="2">21. Leontiev, A. N. Activity, consciousness and personality, vol. 1978. Prentice Hall, Inc, 1978.</ref>
          <ref rid="R22" class="deo:BibliographicReference" id="184" page="10" column="2">22. Ozenc, F. K., Kim, M., Zimmerman, J., Oney, S., and Myers, B. How to support designers in getting hold of the immaterial material of software. In Proc. of Human Factors in Comp. Systems, ACM (2010), 2513–2522.</ref>
          <ref rid="R23" class="deo:BibliographicReference" id="185" page="10" column="2">23. Paasivaara, M., and Lassenius, C. Collaboration practices in global inter-organizational software development projects. Software Process: Improvement and Practice 8, 4 (2003), 183–199.</ref>
          <ref rid="R24" class="deo:BibliographicReference" id="186" page="10" column="2">24. Patton, J. Hitting the target: adding interaction design to agile software development. In OOPSLA 2002 Practitioners Reports, OOPSLA ’02, ACM (2002), 1–ff.</ref>
          <ref rid="R25" class="deo:BibliographicReference" id="187" page="10" column="2">25. Shipp, V. E., and Johnson, P. Supporting collaboration in the development of complex engineering software. In Proc. of Cooperative and Human Aspects of Software Engineering, CHASE ’11, ACM (2011), 84–87.</ref>
          <ref rid="R26" class="deo:BibliographicReference" id="188" page="10" column="2">26. Smith, J. A. Semi-structured interviewing and qualitative analysis. In Rethinking methods in psychology. Sage, 1995, 9–26.</ref>
          <ref rid="R27" class="deo:BibliographicReference" id="189" page="10" column="2">27. Stolterman, E. The nature of design practice and implications for interaction design research. Int’l Journal of Design Computing 2, 1 (2008), 55–65.</ref>
          <ref rid="R28" class="deo:BibliographicReference" id="190" page="10" column="2">28. Strauss, A. The articulation of project work: An organizational process. The Sociological Quarterly 29, 2 (1988), 163–178.</ref>
          <ref rid="R29" class="deo:BibliographicReference" id="191" page="10" column="2">29. Strauss, A. L., and Corbin, J. M. Basics of qualitative research: Techniques and procedures for developing grounded theory. Sage, 1998.</ref>
          <ref rid="R30" class="deo:BibliographicReference" id="192" page="10" column="2">30. Teasley, S., Covi, L., Krishnan, M., and Olson, J. Rapid software development through team collocation. IEEE Trans. on Software Engineering 28, 7 (2002), 671 – 683.</ref>
          <ref rid="R31" class="deo:BibliographicReference" id="193" page="10" column="2">31. Treude, C., Storey, M.-A., and Weber, J. Empirical studies on collaboration in software development: A systematic literature review. Tech. Rep. DCS-331-IR, University of Victoria, December 2009.</ref>
          <ref rid="R32" class="deo:BibliographicReference" id="194" page="10" column="2">32. Turner, P., and Turner, S. A web of contradictions. Interacting with Computers 14, 1 (2001), 1–14.</ref>
          <ref rid="R33" class="deo:BibliographicReference" id="195" page="10" column="2">33. Van den Bergh, J., Sahni, D., Haesen, M., Luyten, K., and Coninx, K. Get better results from interactive prototypes. In Proc. of Engineering Interactive Computing Systems, ACM (2011), 143–148.</ref>
          <ref rid="R34" class="deo:BibliographicReference" id="196" page="10" column="2">34. Vygotsky, L. S. Mind in society. Harvard, 1978.</ref>
          <ref rid="R35" class="deo:BibliographicReference" id="197" page="10" column="2">35. Wertsch, J. V. Mind as action. Oxford, 1998.</ref>
          <ref rid="R36" class="deo:BibliographicReference" id="198" page="10" column="2">36. Williams, L., and Cockburn, A. Agile software development: it’s about feedback and change. Computer 36, 6 (2003), 39–43.</ref>
        </ref-list>
        <outsider class="DoCO:TextBox" type="page_nr" id="164" page="9" column="2">701</outsider>
        <outsider class="DoCO:TextBox" type="page_nr" id="199" page="10" column="2">702</outsider>
      </section>
    </body>
  </article>
</pdfx>
