<?xml version='1.0' encoding='UTF-8'?>
<pdfx xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://pdfx.cs.man.ac.uk/static/article-schema.xsd">
  <meta>
    <job>1b049059ed75ed808da3f2384c8633d2268e9b4655c4330e5db5a9540f4aa08d</job>
    <base_name>62rv</base_name>
    <doi confidence="possible">10.1145/1015864.1015884</doi>
  </meta>
  <article>
    <front class="DoCO:FrontMatter">
      <title-group>
        <article-title class="DoCO:Title" id="1">Meta-design</article-title>
      </title-group>
      <region class="unknown" id="2">The future success of EUD depends on creating tools that end users are motivated to learn and use in daily work practices.</region>
      <contrib-group class="DoCO:ListOfAuthors">
        <contrib contrib-type="author">
          <name id="3">META-DESIGN: By E. Giaccardi</name>
          <aff id="4">:</aff>
        </contrib>
        <contrib contrib-type="author">
          <name id="5">G. Fischer</name>
        </contrib>
        <contrib contrib-type="author">
          <name id="6">Y. Ye</name>
        </contrib>
        <contrib contrib-type="author">
          <name id="7">A.G. Sutcliffe</name>
        </contrib>
        <contrib contrib-type="author">
          <name id="8">A MANIFESTO FOR</name>
        </contrib>
        <contrib contrib-type="author">
          <name id="9">N. Mehandjiev END-USER DEVELOPMENT</name>
        </contrib>
      </contrib-group>
      <abstract class="DoCO:Abstract" id="10" confidence="possible">End-user development (EUD) activities range from customization to component configuration and programming. Office software, such as the ubiquitous spreadsheet, provides customization facilities, while the growth of the Web has added impetus to end-user scripting for interactive func- tions in Web sites. In scientific and engineering domains, end users frequently develop complex systems with standard programming languages such as C++ and Java. However, only a minority of users adapt commercial off-the-shelf (COTS) software products. Indeed, composing systems from reusable components, such as enterprise resource planing (ERP) systems, defeats most end users who resort to expensive and scarce expert developers for imple- mentation.</abstract>
      <region class="DoCO:TextChunk" id="11" confidence="possible">Therefore, EUD is only a partial success story. Here, we argue the spread of EUD depends on a fine balance between user motivation, effective tools, and management support. We explore that balance and investigate a future approach to EUD—meta- design—that proposes a vision in which design, learning, and development become part of everyday working practice. Designing language for user- computer communication poses a conflict between complexity and power. More complex languages can address a wider range of problems but impose an</region>
      <outsider class="DoCO:TextBox" type="footer" id="12">COMMUNICATIONS OF THE ACM September 2004/Vol. 47, No. 9</outsider>
      <outsider class="DoCO:TextBox" type="page_nr" id="13">33</outsider>
      <region class="DoCO:TextChunk" id="16">grams as instructions from user manipulations of agent worlds. The graphical agent worlds must still be designed, but once present, programming by example [<xref ref-type="bibr" rid="R5" id="14" class="deo:Reference">5</xref>] can infer instructions from the users’ actions; for example, in a robot game the user demonstrates an agent bumping into a wall followed by reversing two steps and changing direction. The system infers the condition-action rule of detect-a- collision followed by the appropriate reverse-and- change-direction response. This approach reduces learning by semiautomatic rule acquisition, but the downside is the learning system can make mistakes. The learning styles range from more complete inference to direct instruction, where the system learns only when given a command. learning Direct instruction requires Low the user to anticipate all the possible rules and learning EUD ideal situations, while the complete inference approach is Current EUD envs Agentsheets limited by the system’s Alice domain knowledge. Devel- Excel macros oping the model is the diffi- cult part and therein lies the Office Applications Report writers real challenge for end-user Query builders screen design—abstract conceptual Domain-specific thinking. Complex domains languages require sophisticated analysis Customization Adaptation and modeling skills; programming is only part of an end-user developer’s needs. The goal for EUD tools is to reduce the learning burden while providing powerful facilities to address a wide range of problems. Given that some learning burden will always be present, tools must motivate their users. We propose a meta-design approach [<xref ref-type="bibr" rid="R4" id="15" class="deo:Reference">4</xref>], where users are motivated to learn by examples and demonstrations of working systems to show them what is achievable.</region>
    </front>
    <body class="DoCO:BodyMatter">
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="17" page="2" column="2">Managerial and Social Perspective</h1>
        <region class="DoCO:TextChunk" id="30" page="2" column="2">EUD is a long-standing concern within organiza- tions. Managerial issues, illustrated in <xref ref-type="fig" rid="F2" id="18" class="deo:Reference">Figure 2</xref>, are based on previous surveys of end-user computing [<xref ref-type="bibr" rid="R2" id="19" class="deo:Reference">2</xref>, <xref ref-type="bibr" rid="R9" id="20" class="deo:Reference">9</xref>] and our more recent investigation into the task-organizational fit of EUD technology [<xref ref-type="bibr" rid="R6" id="21" class="deo:Reference">6</xref>]. Do- it-yourself development is a balance of benefits and cost. User motivators are empowerment from being able to complete a job more effectively, speed of development, flexibility and local control so programming can be on demand. Another benefit is eliminating potential miscommunications of requirements to specialist software engineers, thus avoiding the frustration with perceived poor ser-<marker type="page" number="3"/><marker type="block"/> hands, often using standard programming languages. However, in most business domains, training, technical, and management support are vital for helping EUD flourish. A culture of cooperation shares the responsibility for developing accurate and effective solutions. Local experts among the end-user community spread expertise and advice, although power users can be prone to migrating to the wrong side of the “us” and “them” (IT department) fence [<xref ref-type="bibr" rid="R7" id="27" class="deo:Reference">7</xref>, <xref ref-type="bibr" rid="R8" id="28" class="deo:Reference">8</xref>]. Technology should provide easy integration with other information systems and optimized support for EUD tasks. Progress in the technology area is still necessary to unlock the true potential for EUD. The set of EUD critical success factors suggests the need for a socio-technical approach to increase Culture Support Training user motivation and Local experts decrease cognitive and reduce organizational costs. learning Such an approach sug- User programming Critical success costs debugging factors gests a future technolog- ical framework with reduce tools for discovery-led complexity Technology: ease of use design to balance learn- criticality changeability task integration support ing costs with results- driven motivation. We propose meta-design, which is an evolution of domain-oriented design environments (DODEs) [<xref ref-type="bibr" rid="R3" id="29" class="deo:Reference">3</xref>] as a vision in which design, learning, and development become everyday working practice.</region>
        <outsider class="DoCO:TextBox" type="page_nr" id="23" page="2" column="2">34</outsider>
        <outsider class="DoCO:TextBox" type="footer" id="24" page="2" column="2">September 2004/Vol. 47, No. 9 COMMUNICATIONS OF THE ACM</outsider>
        <region class="DoCO:FigureBox" id="F2">
          <caption class="deo:Caption" id="25" page="3" column="1">Figure 2. Relationships</caption>
        </region>
        <region class="unknown" id="26" page="3" column="1">vice from the IS department. Success stories can create motivational capital to help users over the hump of learning until actual benefits arrive in the form of working applications. User motivation should be encouraged during the early stages of adoption by management support, training, and task forces to spread best practice and expertise. This counteracts user costs such as selecting appropriate technology, installing and learning it, programming, and debugging. A number of context and management issues influence the balance between costs and benefits. For example, EUD can be dangerous in safety-critical domains where software must be reliable and accurate. User costs can be sig- nificantly influenced by the scale and complexity power, responsibility control Management accuracy reliability standards issues security of the domain, so safer, cost effectiveness risk less complex domains potential can conflict increase should be selected for empowerment flexibility User EUD. Changeability of speed of delivery motivations trade-off local control the domain can be a poor IS Dept. service motivator for EUD adop- influence tion, since end users can Context issues respond to rapidly evolving requirements more quickly than traditional development; however, between social and managerial rapid change can lead to issues in EUD. throw-away software and lost development effort. Management issues include risks associated with EUD, perceived by IT management to create unreliable and unmanageable software. Other risks are inaccurate information and security with increased exposure to hacking attacks. The conflict between IT management and end users over power, authority, and control of IT systems may be a productive force for change or it may lead to disruption, mistrust, and failure. It can be argued that enforcing standards and controlling end users leads to more cost-efficient development and less waste from unreliable software. However, rigid top- down control may only cause resentment among end users. The control-power conflict between users and IT management will not evaporate; but constructive support and training fosters success, encourages responsibility, and enables management to control by leadership. Critical success factors for EUD depend on the domain. In a culture of high end-user motivation and low managerial influence—a common situation in scientific and engineering domains, educational applications, and interactive art—success is simply a matter of users taking development into their own</region>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="31" page="3" column="2">Meta-design</h1>
        <region class="DoCO:TextChunk" id="32" page="3" column="2">Meta-design characterizes objectives, techniques, and processes for creating new media and environments allowing “owners of problems” (that is, end users) to act as designers. A fundamental objective of meta-design is to create socio-technical environments that empower users to engage actively in the continuous development of systems rather than being restricted to the use of existing systems. In all design processes, two basic stages can be dif- ferentiated: design time and use time. At design time, system developers (with or without user involve- ment) create environments and tools. In conven- tional design they create complete systems. Because the needs, objectives, and situational contexts of users can only be anticipated at design time, users often find the system unfit for their tasks at use time, thus requiring modification of existing systems. To accommodate unexpected issues at use time, systems must be “underdesigned” at design time. Underde- sign represents a fundamental shift in the approach to the creation of systems, but it does not mean less</region>
        <outsider class="DoCO:TextBox" type="footer" id="33" page="3" column="2">COMMUNICATIONS OF THE ACM September 2004/Vol. 47, No. 9</outsider>
        <outsider class="DoCO:TextBox" type="page_nr" id="34" page="3" column="2">35</outsider>
        <region class="DoCO:FigureBox" id="F3">
          <caption class="deo:Caption" id="35" page="4" column="1">Figure 3. The seeding,</caption>
        </region>
        <region class="unknown" id="36" page="4" column="1">work or fewer demands on the design team. Instead of designers aiming at designing complete solutions for users at design time, underdesign aims to provide social and technical instruments for the owners of problems to create the solutions themselves at use time. Within the overall approach of meta-design, underdesign is a defining activity to create design spaces for others. Meta-design extends the traditional notion of system development to include users in an ongoing process as co-designers, not only at design time but throughout the entire existence of the system. A necessary, although not sufficient, condition for meta- design is that software systems include advanced features permitting users to create complex customizations and extensions. Rather than presenting users with closed systems, meta-design provides them with opportunities, tools, and social structures to extend the system to fit their needs. Meta-design shares some important objectives with user-cen- tered and participatory Information Seeded design, but it transcends Space these objectives by changing the processes by Users which systems and con- Seeding tent are designed. Meta- Evolutionary Growth design shifts control from designers to users and Developers Users empowers users to create and contribute their own evolutionary growth, and visions and objectives. reseeding process model. Meta-design promotes “designing the design process” to a first-class activity, so that creating the technical and social conditions for broad participation in design activities becomes as important as creating the artifact itself. It creates the enabling conditions for collaborative design in which all participants, not just skilled computer pro- fessionals, incrementally acquire ownership of problems and contribute actively to their solutions. To support meta-design, we have developed the</region>
        <disp-formula class="DoCO:FormulaBox" id="FSER">
          <label class="DoCO:Label" id="37">SER</label>
          <content class="DoCO:Formula" id="38" page="4" column="1">seeding, evolutionary growth, and reseeding</content>
        </disp-formula>
        <region class="unknown" id="39" page="4" column="1">process model. As illustrated in Figure 3, SER is a descriptive and prescriptive model for large evolving systems and information repositories, postulating that systems that evolve over a sustained time span must continually alternate between periods of activity, unplanned evolution, and periods of deliberate (re)structuring and enhancement. The SER model encourages designers to conceptualize their activity as meta-design, thereby supporting users as designers rather than restricting them to passive consumers. To demonstrate the broad applicability and power</region>
        <region class="DoCO:TextChunk" id="46" page="4" column="2">of meta-design, we have applied the framework in a number of different application areas, including three briefly mentioned here: Social creativity. Complex design problems require more knowledge than any single person can possess, and the knowledge relevant to a problem is often distributed among stakeholders from different perspectives and backgrounds. The solution of complex design problems requires social creativity in which all stakeholders reach a shared understanding by contributing their different points of view and knowledge. We have applied the meta-design approach in the creation of augmented reality environments in urban planning [ <xref ref-type="bibr" rid="R1" id="40" class="deo:Reference">1</xref>]. The tools themselves are not solutions to any particular problem, but provide the socio-technical environment for stakeholders to become informed participants. The immediate and visual feedback facilitates the creation of a shared understanding leading to new insights, new ideas, and new artifacts as a result Information Evolved Information Reseeded of collaboration. Space Space Open source. Open source development is an activity in which a community of software devel- Reseeding opers collaboratively constructs systems to Developers Users help solve problems of shared interest and for mutual benefit. The original designers of an open source system do not provide a complete solution that addresses all problems of potential users; they provide a seed that can be evolved by users at use time. The ability to change source code, the techno- logical means of sharing changes over the Internet, and the spontaneous social support among community members are the enabling conditions for collaborative construction of software. Software is changed from a fixed entity produced and controlled by a closed group of designers to an open effort that allows a community to design collaboratively following the framework provided by the SER process model. The success of open source systems exempli- fies meta-design by openly embracing users as co- designers by releasing incomplete code; actively soliciting and incorporating user contributions; strategically sharing the control over original designers and users by granting users direct access to source code; aggressively promoting mutual learning among community members through mailing lists; and deliberately fostering a reward and recognition struc- ture that motivates active participation by explicitly acknowledging and promoting contributors [<xref ref-type="bibr" rid="R10" id="41" class="deo:Reference">10</xref>].<marker type="page" number="5"/><marker type="column" number="1"/><marker type="block"/> Open source projects based on meta-design have a lower cost for each user because the development cost is distributed among a large number of participants and individual contributions are shared. Interactive art. Conceptualized as meta-design, interactive art [<xref ref-type="bibr" rid="R4" id="45" class="deo:Reference">4</xref>] focuses on participation and collaboration as forms of co-creation, in which users become co-developers of artwork. The original seed design establishes a context in which users can actively produce new content and meaning through a process of mutual interaction and evolutionary growth. By putting the tools rather than the object of design in the hands of users, interactive art seeds collaboration between the participants (both technical and human) and sees this interaction as the real object of creative production. Hence meta-design creates interactive systems that define the conditions for interaction. Meta-design environments not only allow users to create content, but also modify the behavior and components of the system at use time through interaction (see A-Volve; www.iamas.ac.jp/~christa/). The initial seed is often developed by a community of artists, and can be adjusted and improved according to the talk-back deriving from the continuing experience of using the creative environment as in SITO, (www.sito.org), a virtual community of artists-participants. Interaction and evolution occur both at the level of the development of materials and at the level of the creation, elaboration and completion of collective artworks. Interactive art emphasizes different objectives com- pared to traditional design approaches, including cultural shifts from following guidelines and rules to learning from exceptions and negotiations, content to context of design, changing focus from design objects to process, and from working with represen- tation to the act of construction.</region>
        <outsider class="DoCO:TextBox" type="page_nr" id="43" page="4" column="2">36</outsider>
        <outsider class="DoCO:TextBox" type="footer" id="44" page="4" column="2">September 2004/Vol. 47, No. 9 COMMUNICATIONS OF THE ACM</outsider>
      </section>
      <section class="deo:Conclusion">
        <h1 class="DoCO:SectionTitle" id="47" page="5" column="1">Conclusion</h1>
        <region class="DoCO:TextChunk" id="49" page="5" column="1">To evolve, EUD development needs technologies that foster collaboration between communities of end-user designers and users and managers, while increasing motivation and reducing cognitive and organizational costs. Meta-design provides a path- way to transform development as coding—a dis- crete computing activity—into design of artifacts as part of the users’ work (or leisure) practice. Meta-design puts owners of problems in charge of creating open, evolvable systems that address the lim- itations associated with closed systems. Open systems allow significant modifications when the need arises and the evolution takes place through modifications by the owners of problems as a major design activity. Meta-design is more than a technical problem; it <marker type="column" number="2"/><marker type="block"/> must address the challenges of creating new mind- sets, new sources of creativity, cultural changes, and innovative societies. It has the potential to create a culture in which all participants in collaborative design processes can express themselves and engage in personally meaningful activities. c</region>
      </section>
      <section class="DoCO:Bibliography">
        <h1 class="DoCO:SectionTitle" id="50" confidence="possible" page="5" column="2">References</h1>
        <ref-list class="DoCO:BiblioGraphicReferenceList">
          <ref rid="R1" class="deo:BibliographicReference" id="51" page="5" column="2">1. Arias, E.G., Eden, H., Fischer, G., Gorman, A., and Scharff, E. Tran- scending the individual human mind: Creating shared understanding through collaborative design. ACM Trans. on Computer-Human Interaction 7, 1 (2000). ACM, NY, 84–113.</ref>
          <ref rid="R2" class="deo:BibliographicReference" id="52" page="5" column="2">2. Brancheau, J.C., and Brown, C.V. The management of end user computing: Status and directions. ACM Computing Surveys 25, 4. ACM, NY, (1993), 437–482.</ref>
          <ref rid="R3" class="deo:BibliographicReference" id="53" page="5" column="2">3. Fischer, G. Domain-oriented design environments. Automated Software Engineering, 1, 2 (1994), 177–203.</ref>
          <ref rid="R4" class="deo:BibliographicReference" id="54" page="5" column="2">4. Fischer, G., and Giaccardi, E. Meta-design: A framework for the future of end user development. End User Development: Empowering People to Flexibly Employ Advanced Information and Communication Technology. H. Lieberman, F. Paternò, and V. Wulf, Eds. Kluwer Academic Publishers, Dordrecht, The Netherlands, 2004, in press.</ref>
          <ref rid="R5" class="deo:BibliographicReference" id="55" page="5" column="2">5. Lieberman, H., Ed. Your Wish Is My Command: Programming By Example. Morgan Kaufmann, San Francisco, 2001.</ref>
          <ref rid="R6" class="deo:BibliographicReference" id="56" page="5" column="2">6. Mehandjiev, N., Sutcliffe, A.G., and Lee, D. Organisational views of end user development. End User Development: Empowering People to Flexibly Employ Advanced Information and Communication Technology. H. Lieberman, F. Paternò, and V. Wulf, Eds. Kluwer Academic Publishers, Dordrecht, The Netherlands, 2004, in press.</ref>
          <ref rid="R7" class="deo:BibliographicReference" id="57" page="5" column="2">7. Mumford, E., and Henshall, D. A Participative Approach to Computer System Design. Associated Business Press, London, 1979.</ref>
          <ref rid="R8" class="deo:BibliographicReference" id="58" page="5" column="2">8. National Research Council. Beyond Productivity: Information Technology, Innovation and Creativity. National Academy Press, Washington, D.C., 2003.</ref>
          <ref rid="R9" class="deo:BibliographicReference" id="59" page="5" column="2">9. Powell, A., and Moore, J.E. The focus of research in end user computing: Where have we come since the 1980s? Journal of End User Computing 14, 1 (2002), 3–22.</ref>
          <ref rid="R10" class="deo:BibliographicReference" id="60" page="5" column="2">10. Ye, Y., and Kishida, K. Toward an understanding of the motivation of open source software developers. In Proceedings of the 25th Interna- tional Conference on Software Engineering (Portland OR, 2003) ACM, NY, 419–429.</ref>
          <ref class="deo:BibliographicReference" id="66" confidence="possible" page="5" column="2">G. Fischer (<email id="61">gerhard@cs.colorado.edu</email>) is a professor in the Department of Computer Science and director of the Center for Lifelong Learning and Design at the University of Colorado at Boulder. E. Giaccardi (<email id="62">giaccard@cs.colorado.edu</email>) is a research associate in the Center for Lifelong Learning and Design in the Department of Computer Science at the University of Colorado at Boulder. Y. Ye (<email id="63">yuwen@cs.colorado.edu</email>) is a research associate in the Center for Lifelong Learning and Design in the Department of Computer Science at the University of Colorado at Boulder. A.G. Sutcliffe (<email id="64">a.sutcliffe@co.umist.ac.uk</email>) is a professor of systems engineering and director of the Centre for Human Computer Interface Design in the School of Informatics at the University of Manchester, U.K. N. Mehandjiev (<email id="65">mehandjiev@acm.org</email>) is a senior lecturer in the School of Informatics at the University of Manchester, U.K.</ref>
        </ref-list>
        <region class="DoCO:TextChunk" id="67" confidence="possible" page="5" column="2">Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full cita- tion on the first page. To copy otherwise, to republish, to post on servers or to redis- tribute to lists, requires prior specific permission and/or a fee. © 2004 ACM 0001-0782/04/0900 $5.00</region>
        <outsider class="DoCO:TextBox" type="footer" id="68" page="5" column="2">COMMUNICATIONS OF THE ACM September 2004/Vol. 47, No. 9</outsider>
        <outsider class="DoCO:TextBox" type="page_nr" id="69" page="5" column="2">37</outsider>
      </section>
    </body>
  </article>
</pdfx>
