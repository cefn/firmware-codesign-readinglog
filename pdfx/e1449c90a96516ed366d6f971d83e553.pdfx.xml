<?xml version='1.0' encoding='UTF-8'?>
<pdfx xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://pdfx.cs.man.ac.uk/static/article-schema.xsd">
  <meta>
    <job>3437f715a83aa1a02611267f124a70a7a9e65785b77f6c0f718c50d55c602399</job>
    <base_name>62qj</base_name>
    <doi>http://dx.doi.org/10.1109/ms.2007.24</doi>
  </meta>
  <article>
    <front class="DoCO:FrontMatter">
      <region class="unknown" id="1">feature tools</region>
      <title-group>
        <article-title class="DoCO:Title" id="2">Practitioner Tools and Workstyles for User-Interface Design</article-title>
      </title-group>
      <contrib-group class="DoCO:ListOfAuthors">
        <contrib contrib-type="author">
          <name id="3">Pedro Campos</name>
        </contrib>
        <contrib contrib-type="author">
          <name id="4">Nuno Jardim Nunes</name>
        </contrib>
      </contrib-group>
      <region class="unknown" id="5">University of Madeira</region>
      <abstract class="DoCO:Abstract" id="6" confidence="possible">oth software engineers and designers often complain that their B tools tency, that technology are 2,3 the unsupportive relationship reasonably and between improves unusable. practitioners 1 product Although quality and there’s their and tools evidence consis- has always been love-hate. The ACM Queue’s What’s on Your Hard Drive? col- umn, for example, testifies to the fact that tools influence practitioners’ work to the point where they really do hate or love particular tools. 4 Some</abstract>
      <region class="unknown" id="7">A survey asked 370 practitioners about how they worked and used tools. The findings offer insight into how developers can build human- centered tools for practitioners interested in user- interface design.</region>
    </front>
    <body class="DoCO:BodyMatter">
      <region class="DoCO:TextChunk" id="10" page="1" column="1">practitioners even love and hate the same tool. And, as IEEE Software’s Tools of the Trade col- umn recently reported, practitioners have problems finding the most appropriate tools for a given task. 5 In our research, we observed that we could ease the user interface (UI) aspects of software development by giving both designers and developers tools that transparently adapt to particular styles of work (or workstyles). We’ve found—through empirical observation in small software development settings, 6 informal 7 and formal usability studies, and a survey—that both designers and software engineers often use several different workstyles and move between them frequently. 8 We call this movement workstyle transition. Many studies have analyzed general software development practices, but qualitative studies of UI-related work practices in software develop- <marker type="column" number="2"/><marker type="block"/> ment are relatively rare (see the sidebar, “Rela- ted Work in Usability Research”). Here, we add to this small but growing body of knowledge by arguing for the importance of supporting workstyle transitions in UI practices. To this end, we surveyed 370 practitioners, who answered questions about their current tool usage and workstyle transitions. On the basis of the survey results and previous work, we’ve built two design tools to support key transitions.<marker type="block"/> A survey of UI design tools and workstyles We focused our survey on interaction designers, but other types of software development professionals are also involved in UI activities. We therefore gathered responses from programmers, system analysts, and project managers as well. We planned, designed, and</region>
      <outsider class="DoCO:TextBox" type="footer" id="11" page="1" column="2">0740-7459/07/$20.00 © 2007 IEEE</outsider>
      <outsider class="DoCO:TextBox" type="footer" id="12" page="1" column="2">January/February 2007 IEEE SOFTWARE</outsider>
      <outsider class="DoCO:TextBox" type="page_nr" id="13" page="1" column="2">73</outsider>
      <section class="DoCO:Bibliography">
        <h1 class="DoCO:SectionTitle" id="14" confidence="possible" page="2" column="1">References</h1>
        <region class="unknown" id="15" page="2" column="1">Related Work in Usability Research Don Dillman (www.sesrc.wsu.edu/dillman) is one of survey- capturing UI-specific activities. In previous research, we de- based research’s best-known researchers. In 1978, he devel- scribed a structured model specifically aimed at capturing UI- oped the Total Design Method, a general implementation related workstyles and workstyle transitions. 7 We described method that’s known to achieve high response rates. Dillman how designers engage and transition in terms of has since expanded the design and renamed it The Tailored Design Method. 1 The method is highly useful, and we attempted ■ perspective (from code to design or from requirements to follow its explicit recommendations, including designing a to final solution), respondent-friendly questionnaire, shortening the questionnaire ■ detail (from highly detailed descriptions to few details (fewer questions reduces respondent burden), and creating in- and back), teresting questions. However, because surveys are one-sided, 2 ■ formality (meaningless sketches or semantically sound we also ran formal and informal usability studies on work- models), style transitions (which are beyond the main article’s scope) ■ modifiability (some designers prefer tools for frequent and conducted follow-up surveys with some respondents to tasks such as repositioning and renaming), gather ideas and corroborate some conclusions. ■ traceability, ■ functionality, Related studies ■ asynchrony, and Although many studies have analyzed and tried to better ■ distribution. support general software development practices, 3–6 literature that qualitatively studies UI-related work practices in software This was the starting point for our investigation of interaction development is relatively rare. Ahmed Seffah and Rex Kline design aspects of software development tools and workstyle showed a gap between how tools represent and manipulate transitions. Our survey of the tools and workstyles of practi- programs and the software developers’ actual experiences. 6 tioners performing UI-related activities is informed by both Their work quantitatively measured the developers’ experi- our previous research findings 7,8 and Dillman’s book. 1 ences using heuristic and psychometric evaluation. However, they didn’t specifically study UI-related issues, which is our work’s main concern. Our work also relates to the problem of integrating usability and software engineering. 1. D.A. Dillman, Mail and Internet Surveys: The Tailored Design Method, John Wiley &amp; Sons, 1999. James Wu and Nicholas Graham described a novel model 2. X. Ferré et al., “Usability Basics for Software Developers,” IEEE Soft- for recording people’s working style while using an interactive ware, vol. 18, no. 1, 2001, pp. 22–29. system. 5 They also described a study aimed specifically at col- 3. S. Jarzabek and R. Huang, “The Case for User-Centered CASE laborative software development (which actually inspired their Tools,” Comm. ACM, vol. 41, no. 8, 2004, pp. 93–99. 4. J. IIvari, “Why Are CASE Tools Not Used?” Comm. ACM, vol. 39, model’s development). Workstyle modeling complements task no. 10, 1996, pp. 94–103. modeling by providing information on how people communi- 5. J. Wu and T.C.N. Graham, “The Software Design Board: A Tool Sup- cate and coordinate their activities and by showing the arti- porting Work-Style Transitions in Collaborative Software Design,” fact style they produce. Wu and Graham developed their Proc. Int’l Conf. Eng. Human-Computer Interaction/Int’l Workshop Design, Specification and Verification of Interactive Systems (EHCI/ workstyle model as part of the Software Design Board project, DSV-IS 04), LNCS 3425, Springer, 2004, pp. 363–382. which aims to provide better software design tools. They vali- 6. A. Seffah, J. Gulliksen, and M. Desmarais, eds., Human-Centered dated the model by evaluating existing design tools and were Software Engineering, Springer, 2005. also motivated to design a new software design tool. 7. P. Campos and N.J. Nunes, Galactic Dimensions: A Unifying Workstyle Model for User-Centered Design, LNCS 3585, Springer, 2005, pp. 158–169. Workstyle analysis 8. P. Campos and N.J. Nunes, “CanonSketch: A User-Centered Tool The workstyle model for collaborative software design is for Canonical Abstract Prototyping,” Proc. Int’l Conf. Eng. Human- Computer Interaction/Int’l Workshop Design, Specification and Veri- simple to apply and clearly shows where a tool can fail to fication of Interactive Systems (EHCI/DSV-IS 04), LNCS 3425, match the intended work context. However, it’s insufficient for Springer, 2004, pp. 146–163.</region>
        <region class="DoCO:TextChunk" id="42" page="2" column="1">executed our survey on the basis of Don Dillman’s book Mail and Internet Surveys. 9 We also conducted follow-up interviews to corroborate some conclusions. We disseminated our questionnaire to two major interaction-design mailing lists: CHI-WEB <marker type="column" number="2"/><marker type="block"/> and the IxDA (Interaction Design Association). We also sent it to many industry contacts. In less than two weeks, we collected more than 225 valid responses. We then surveyed two software development mailing lists: IS-World and Flex- Coders. In this second phase, we gathered<marker type="page" number="3"/><marker type="column" number="1"/><marker type="block"/> another 145 responses (more than 90 percent from system analysts and programmers), achieving a total of 370 responses. Results were similar for interaction designers and system analysts and programmers, which wasn’t surprising because they all were evaluating UI-related activities. In the questionnaire’s initial part, we asked participants about their organizational role, professional experience, organization size, and development process. <xref ref-type="table" rid="T1" id="22" class="deo:Reference">Table 1</xref> shows the percentage and total number of responses to “What is your primary role in your organization?” Respondents included 126 in-<marker type="column" number="2"/><marker type="block"/> teraction designers and usability specialists, and 170 programmers and systems analyst and designers. Regarding professional experience, 40.8 percent of the respondents declared three to six years of experience in their current roles. Most respondents (42.2 percent) worked at large organizations with more than 100 information systems employees. Evolutionary prototyping was the most common development process. This result isn’t surprising; it clearly reinforces the idea that both interaction design and modern software development are inher- ently iterative and incremental processes.<marker type="page" number="4"/><marker type="column" number="1"/><marker type="block"/> Tools and tool use patterns To assess tool use, we offered a list of tools and asked interaction designers and software developers, “Which tool(s) do you currently use to perform user interface design? (Check all that apply to any user-interface-related activity.)” Figure 1 summarizes our results. Perhaps not surprisingly, paper and pencil was the most referenced tool, followed by whiteboards, analysis and modeling tools, HTML editors, asynchronous collaborative tools, Post-it Notes, and visual-interface builders. Although formal model-based tools are popular in general software development, our practitioners didn’t regard them as critical to UI-related activities. In terms of synchronous workstyles, designers typically work at the same time and place (using whiteboards) rather than at the same time but different locations (using messengers or video- conferencing, for example). For asynchronous work, almost one-half of the respondents reported using tools such as CVS (Concurrent Ver-<marker type="column" number="2"/><marker type="block"/> sions System) and email to perform UI-related activities. Visual interface builders were the seventh most popular tool class (out of 12). This is surprising, because our survey specifically asked participants what tools they used for UI design. This suggests that—despite current interface builders’ success—there’s a trend toward using widespread (and informal) tools for interaction design. We believe this reflects the nature of interaction design, which is highly creative, inher- ently interdisciplinary, and communication intensive. So, to succeed, designers should mesh formal, digital tools with informal, flexible, col- laboration tools to support their work. We also studied the relationship between the development process and the tools used. <xref ref-type="table" rid="T2" id="32" class="deo:Reference">Table 2</xref> and <xref ref-type="fig" rid="F2" id="33" class="deo:Reference">figure 2</xref> show a subset of the results for various tools. Whiteboards and paper and pencil are the two most commonly used tools for all process styles, except formal methods. In those cases, developers used asyn-<marker type="page" number="5"/><marker type="column" number="1"/><marker type="block"/> chronous tools more often than whiteboards. The “just do it” approach is clearly the least tool intensive. We believe this reflects coding activities that rely mainly on tools the survey didn’t include, such as editors, compilers, and debuggers. As these results show, more research is needed to understand how software and interaction designers perform tasks. For a deeper analysis of the survey results, see this article’s companion Web site (<ext-link ext-link-type="uri" href="http://dme.uma.pt/pcampos/" id="39">http://dme.uma.pt/pcampos/</ext-link> workstyle).<marker type="block"/> Interaction and software designers’ UI-related activities clearly suffer numerous interruptions that can cause cognitive breakdowns. Among the constant interruptions designers face are col- leagues, emails, switching from individual to collaborative workstyles many times a day, and shifting from low-tech card sorting to high-tech modeling with digital tools—something that also happens in general software development. 10 We wanted to know what professionals thought about this, so we gave respondents several concrete scenarios of workstyle transitions. One scenario, for example, was “moving from high-level descriptions of the user interface (site maps, navigation maps, and so on) to detailed screens (with concrete widgets, but- tons, and so on).” For each such transition, we asked them to rate</region>
        <outsider class="DoCO:TextBox" type="page_nr" id="18" page="2" column="2">74</outsider>
        <outsider class="DoCO:TextBox" type="footer" id="19" page="2" column="2">IEEE SOFTWARE w w w . c o m p u t e r. o r g / s o f t w a r e</outsider>
        <region class="unknown" id="21" page="3" column="1"> <xref ref-type="table" rid="T1" id="20" class="deo:Reference">Table 1</xref> Respondent demographics Percentage What is your primary role in your organization? of responses Usability expert, interaction designer 34.0 Systems analyst and designer 24.3 Programmer 21.6 CIO, project manager 10.5 Other 9.5 Total 100.0 How many years of professional experience do you have in that role? &lt; 2 years 20.3 3–6 years 40.8 7–10 years 22.7 &gt; 10 years 16.2 Total 100.0 How many information systems employees does your organization have? Fewer than 5 15.2 5–14 16.3 15–49 15.1 50–100 11.0 More than 100 42.2 Total 100.0 How would you classify your organization’s software development process? Just do it 14.0 Waterfall 16.7 Spiral 6.3 Evolutionary development (prototyping) 25.3 Exploratory development 3.6 Formal methods specifications 14.5 Composition through reusable components 6.3 Other 13.1 Total 100.0</region>
        <region class="unknown" id="24" page="3" column="2">Number of responses 126 90 80 39 35 370 75 151 84 60 370 55 59 55 40 154 363 61 54 38 84 17 43 18 48 363</region>
        <outsider class="DoCO:TextBox" type="footer" id="26" page="3" column="2">January/February 2007 IEEE SOFTWARE</outsider>
        <outsider class="DoCO:TextBox" type="page_nr" id="27" page="3" column="2">75</outsider>
        <region class="unknown" id="28" page="4" column="1">Other Paper and pencil Synchronous collaborative tools Formal model-based tools HTML-editing tools Multimedia-authoring tools Whiteboards Analysis and modeling tools Asynchronous collaborative tools Electronic sketching tools Visual interface builders Post-it Notes 0 10 20 30 40 Percent of response</region>
        <region class="DoCO:FigureBox" id="F1">
          <caption class="deo:Caption" id="29" page="4" column="1">Figure 1. The tools practitioners use. Although model-based tools are popular in general software development, study participants didn’t regard them as critical to user-interface-related activities.</caption>
        </region>
        <region class="unknown" id="31" page="4" column="2">50 60 70 80 90</region>
        <outsider class="DoCO:TextBox" type="page_nr" id="35" page="4" column="2">76</outsider>
        <outsider class="DoCO:TextBox" type="footer" id="36" page="4" column="2">IEEE SOFTWARE w w w . c o m p u t e r. o r g / s o f t w a r e</outsider>
        <region class="unknown" id="38" page="5" column="1"> <xref ref-type="table" rid="T2" id="37" class="deo:Reference">Table 2</xref> Practitioner tool choices for popular development processes Type of tool Development Interface Asynchronous Synchronous process builders tools Whiteboards tools Just do it 39 36 54 16 Spiral 34 29 61 11 Prototyping 37 45 55 23 Formal methods 30 56 47 26 Waterfall 46 39 69 28</region>
        <region class="unknown" id="41" page="5" column="1">Workstyle transitions: Frequency and cost When your work speaks for itself, don’t interrupt. —Henry J. Kaiser (1882–1967), American industrialist</region>
        <region class="DoCO:TextChunk" id="43" confidence="possible" page="5" column="1">■ the frequency; that is, “how many times [the respondent] engages and transitions in those workstyles,” and</region>
        <region class="unknown" id="44" page="5" column="2">Paper and pencil 59 82 80 81 80 Just do it 80% 60% 40% Formal methods 20% Waterfall 0% Prototyping Spiral Visual interface builders Synchronous collaborative tools Asynchronous collaborative tools Paper and pencil Whiteboards</region>
        <region class="DoCO:FigureBox" id="F2">
          <caption class="deo:Caption" id="45" page="5" column="2">Figure 2. Tool use in the most popular development processes.</caption>
        </region>
        <region class="DoCO:TextChunk" id="46" confidence="possible" page="5" column="2">■ the cost; that is, “how difficult [the respondent] finds it to perform that transition.”</region>
        <region class="DoCO:TextChunk" id="56" page="5" column="2">Participants gave a qualitative rating by se- lecting a value from a seven-point Likert scale. <xref ref-type="fig" rid="F3" id="47" class="deo:Reference">Figure 3</xref> plots the average over the total number of responses. As the figure shows, the second most frequent transition is moving from high- level descriptions to detailed screens. Interest- ingly enough, this is also one of the least costly transitions (exceeding only “moving from a<marker type="page" number="6"/><marker type="column" number="1"/><marker type="block"/> whiteboard to a CASE tool”). The second most costly transition was “moving from nonfunctional to fully functional prototypes.” The transition that ranked highest for both frequency and cost was “moving from busi- ness rules, use cases, and problem space concepts into final solution design, and back.” Another costly but less frequent transition was, “moving from nonfunctional prototypes into fully functional prototypes.” This suggests that designers add functionality to prototypes in clearly defined stages of evolution— after they’ve already committed to some design decisions. In one follow-up interview, a designer stated that his answers would have been different if he were being questioned about issues such as de- bugging or code maintenance. This response was similar to those of other interviewees, who noted, for example, “the importance of building better tools for UI-related activities” and “how transitions were more difficult in UI-related is- sues.” Such responses help reinforce our claim about the importance of supporting workstyle transitions in UI activities.<marker type="block"/> Example tools for workstyle transitions This study’s results have clear implications for developers of UI-related software design tools. As we mentioned before, the most difficult and frequent transition was moving from problem space concepts into final solution design and back. As an example of how to exploit such information, we developed the TaskSketch<marker type="column" number="2"/><marker type="block"/> development environment. TaskSketch supports changes in perspective (that is, in the problem or solution space) and embodies concepts that Larry Constantine has long sup- ported; 11 he has given us many ideas that we’re trying to realize in testable tools. 7 Another example is the CanonSketch tool, which supports changes in perspective, formality (adding informal sketches, adding formal semantics to models), functionality (the user can create functional, partially functional or nonfunctional prototypes), and detail.<marker type="block"/> TaskSketch To better help designers move from problem space concepts to a final solution design and back, TaskSketch not only offers a set of con- structs and views for use-case modeling but also provides drag-and-drop mechanisms for extracting an initial conceptual architecture for an interactive system. Designers can smoothly switch from a use-case perspective—described as a UML activity diagram—to a system architecture perspective. When designers use drag- and-drop between views, TaskSketch converts each model element in one view to the corre- sponding semantic equivalent in the other. TaskSketch thereby helps the designer (or system analyst) concentrate on what’s really important: architecting the system. In our experience with small software development companies, traceability support is important in reducing the cognitive load of both designers and engineers. It’s also important in tasks such as prioritizing and negotiat- ing development tasks. To support traceability, TaskSketch color-codes elements in relation to their use cases. Designers can thus immediately identify the most-colored elements as those that support the most use cases. Whether these elements are a user description or a concrete UI widget, they will probably be more difficult to implement. TaskSketch also supports workstyle transitions by letting users edit task flows at three different—but synchronized—views:</region>
        <outsider class="DoCO:TextBox" type="footer" id="49" page="5" column="2">January/February 2007 IEEE SOFTWARE</outsider>
        <outsider class="DoCO:TextBox" type="page_nr" id="50" page="5" column="2">77</outsider>
        <region class="unknown" id="51" page="6" column="1">Problem space to solution space Nonfunctional to fully functional Informal to formal High detail to low detail Cost Whiteboard to CASE tool Frequency 2 3 4 5 Qualitative ranking</region>
        <region class="DoCO:FigureBox" id="F3">
          <caption class="deo:Caption" id="52" page="6" column="1">Figure 3. Workstyle transitions and their frequencies and cost.</caption>
        </region>
        <region class="DoCO:TextChunk" id="57" confidence="possible" page="6" column="2">■ the participatory view, which typically results from a participatory session in which end users manipulate sticky notes; ■ usage-centered design’s use-case narra- tives, which can be printed on index cards for different stakeholders to stack and or- der; and</region>
        <outsider class="DoCO:TextBox" type="page_nr" id="58" page="6" column="2">78</outsider>
        <outsider class="DoCO:TextBox" type="footer" id="59" page="6" column="2">IEEE SOFTWARE w w w . c o m p u t e r. o r g / s o f t w a r e</outsider>
        <region class="unknown" id="60" page="7" column="1">(a)</region>
        <region class="unknown" id="61" page="7" column="1">(b)</region>
        <region class="unknown" id="62" page="7" column="1">(c)</region>
        <region class="DoCO:FigureBox" id="F4">
          <caption class="deo:Caption" id="63" page="7" column="1">Figure 4. The CanonSketch tool supports workstyle transitions through four views: (a) the Unified Modeling Language class view for domain modeling, (b) the concrete UI view for testing the fully functional system, (c) a layer over the concrete view that lets users add informal comments and annotations, (d) the abstract prototype view for laying out the user interface and specifying UI elements and connecting them to UML classes, and (e) the code editor view for adding extra functionality.</caption>
        </region>
        <region class="DoCO:TextChunk" id="64" confidence="possible" page="7" column="1">■ activity diagrams, which might include additional, relevant details that other views don’t depict.</region>
        <region class="DoCO:TextChunk" id="85" page="7" column="1">CanonSketch This tool is an example of how workstyle transition support inspired new tool design ideas. CanonSketch offers four views and main- tains the models synchronized between views, smoothing the designers’ workstyle transitions. As a simple example, the user might start by creating a domain model class ( Client ) using <marker type="column" number="2"/><marker type="block"/> CanonSketch’s UML class view. Using the ab- stract-prototype view, the user then creates a rough, abstract UI sketch using a smartboard or a tablet, for example. Next, the user applies the sketch recognition function to automatically transition into a more formal, semantically sound abstract UI model (based on the UML’s semantic model). Finally, the user selects concrete elements for each abstract element and switches to the code editor view to freely add functionality to the final UI. <xref ref-type="fig" rid="F4" id="68" class="deo:Reference">Figure 4</xref> illustrates the CanonSketch tool; <xref ref-type="fig" rid="F4c" id="69" class="deo:Reference">figure 4c</xref> shows how<marker type="page" number="8"/><marker type="column" number="1"/><marker type="block"/> users can add a “layer” to freely sketch informal annotations over any of the views.<marker type="block"/> Tool availability A beta version of TaskSketch is available at <ext-link ext-link-type="uri" href="http://dme.uma.pt/tasksketch." id="80">http://dme.uma.pt/tasksketch.</ext-link> Although the tool runs only on Mac OS X, in just eight months it registered more than 3,000 downloads (more than a third were from the US and less than 10 percent from Portugal). CanonSketch, which is freely available at <ext-link ext-link-type="uri" href="http://dme.uma.pt/canonsketch," id="81">http://dme.uma.pt/canonsketch,</ext-link> registered more than 2,000 downloads over a one-year period. Video demonstrations of both tools are available at <ext-link ext-link-type="uri" href="http://dme.uma.pt/pcampos/" id="82">http://dme.uma.pt/pcampos/</ext-link> workstyle.<marker type="block"/> W ith technology as well the as probable new such developments dissemination as smartboards, in pa- of perlike display technologies, we believe that tools such as CanonSketch will become more usable and will eventually replace paper and pencil and whiteboards as the tools of choice for UI development. Also, going from problem space to solution space is clearly a designer’s hardest workstyle transition. To support this, researchers must develop additional integrated modeling tools like TaskSketch. Empirical research that asks professionals to qualitatively classify the cost and frequency of various development scenarios is highly useful for understanding their daily work practices. Such an understanding offers a solid<marker type="column" number="2"/><marker type="block"/> foundation for building a better world of tools—and ultimately for removing the “hate” from the love-hate relationship between practitioners and their tools.</region>
        <region class="unknown" id="66" page="7" column="2">(d)</region>
        <region class="unknown" id="67" page="7" column="2">(e)</region>
        <outsider class="DoCO:TextBox" type="footer" id="71" page="7" column="2">January/February 2007 IEEE SOFTWARE</outsider>
        <outsider class="DoCO:TextBox" type="page_nr" id="72" page="7" column="2">79</outsider>
        <region class="DoCO:FigureBox" id="Fx73">
          <image class="DoCO:Figure" src="62qj.page_008.image_02.png" thmb="62qj.page_008.image_02-thumb.png"/>
        </region>
        <region class="unknown" id="75" page="8" column="1">About the Authors Pedro Campos is a teaching assistant and researcher in the University of Madeira’s Mathematics and Engineering Department, where he’s a member of the Laboratory for Usage- Centered Software Engineering. His research interests are in the intersection of software engineering tools and usability engineering, as well as in user-centered development, software engineering processes, and UI design. Campos received his MSc in software engineering from the Technical University of Lisbon and is a member of the ACM and the IFIP Working Group on Hu- man-Work Interaction Design. Contact him at LabUSE, Univ. of Madeira, Campus da Penteada, 9000-390 Funchal, Portugal; <email id="74">pcampos@uma.pt</email>; dme.uma.pt/pcampos.</region>
        <region class="DoCO:FigureBox" id="Fx76">
          <image class="DoCO:Figure" src="62qj.page_008.image_03.png" thmb="62qj.page_008.image_03-thumb.png"/>
        </region>
        <region class="unknown" id="78" page="8" column="1">Nuno Jardim Nunes is an associate professor of computer science in the University of Madeira’s Mathematics and Engineering Department. He’s a founding member of the Laboratory for Usage-Centered Software Engineering, an R&amp;D initiative dedicated to making technology more useful, usable, and accessible. His research interests are in bridging the gap between software engineering and human-computer interaction, in particular developing new techniques, methods, languages, and tools for software engineering approaches centered on human needs. He received his PhD in computer science from the University of Madeira and is a member of the IEEE Computer Society, the ACM, Eurographics, and the IFIP Working Group on User Interface Engineering. Contact him at LabUSE, Univ. of Madeira, Campus da Penteada, 9000-390 Funchal, Portugal; <email id="77">njn@uma.pt</email>; dme.uma.pt/njn.</region>
      </section>
      <section class="deo:Acknowledgements">
        <h1 class="DoCO:SectionTitle" id="86" confidence="possible" page="8" column="2">Acknowledgments</h1>
        <region class="DoCO:TextChunk" id="87" confidence="possible" page="8" column="2">We thank all the professionals who answered our survey as well as the mailing-list moderators for facili- tating the survey’s dissemination. A special thanks goes to Larry Constantine for feedback on CanonSketch and TaskSketch, and to Grady Booch, whose blogs about our work also helped disseminate the study. Thanks also to the anonymous reviewers for their clear, constructive comments and suggestions.</region>
      </section>
      <section class="DoCO:Bibliography">
        <h1 class="DoCO:SectionTitle" id="88" confidence="possible" page="8" column="2">References</h1>
        <ref-list class="DoCO:BiblioGraphicReferenceList">
          <ref rid="R1" class="deo:BibliographicReference" id="89" page="8" column="2">1. B. Myers, S. Hudson, and R. Pausch, “Past, Present and Future of User Interface Software Tools,” ACM Trans. Computer-Human Interaction, vol. 7, no. 1, 2000, pp. 3–28.</ref>
          <ref rid="R2" class="deo:BibliographicReference" id="90" page="8" column="2">2. S. Jarzabek and R. Huang, “The Case for User-Centered CASE Tools,” Comm. ACM, vol. 41, no. 8, 2004, pp. 93–99.</ref>
          <ref rid="R3" class="deo:BibliographicReference" id="91" page="8" column="2">3. J. IIvari, “Why Are CASE Tools Not Used?” Comm. ACM, vol. 39, no. 10, 1996, pp. 94–103.</ref>
          <ref rid="R4" class="deo:BibliographicReference" id="92" page="8" column="2">4. C. O’Hanlon, “What’s on Your Hard Drive?” ACM Queue, vol. 4, no. 8, 2006, p. 9.</ref>
          <ref rid="R5" class="deo:BibliographicReference" id="93" page="8" column="2">5. D. Spinellis, “The Tools at Hand,” IEEE Software, vol. 22, no. 1, 2005, pp. 10–12.</ref>
          <ref rid="R6" class="deo:BibliographicReference" id="94" page="8" column="2">6. N.J. Nunes and J.F. Cunha, “Wisdom: A Software Engineering Method for Small Software Development Com- panies,” IEEE Software, vol. 17, no. 5, 2000, pp. 113– 119.</ref>
          <ref rid="R7" class="deo:BibliographicReference" id="95" page="8" column="2">7. P. Campos and N.J. Nunes, “CanonSketch: A User-Centered Tool for Canonical Abstract Prototyping,” Proc. Int’l Conf. Eng. Human-Computer Interaction/Int’l Workshop Design, Specification and Verification of Interactive Systems (EHCI/DSV-IS 04), LNCS 3425, Springer, 2004, pp. 146–163.</ref>
          <ref rid="R8" class="deo:BibliographicReference" id="96" page="8" column="2">8. P. Campos and N.J. Nunes, Galactic Dimensions: A Unifying Workstyle Model for User-Centered Design, LNCS 3585, Springer, 2005, pp. 158–169.</ref>
          <ref rid="R9" class="deo:BibliographicReference" id="97" page="8" column="2">9. D.A. Dillman, Mail and Internet Surveys: The Tailored Design Method, John Wiley &amp; Sons, 1999.</ref>
          <ref rid="R10" class="deo:BibliographicReference" id="98" page="8" column="2">10. J. Wu and T.C.N. Graham, “The Software Design Board: A Tool Supporting Work-Style Transitions in Collaborative Software Design,” Proc. Int’l Conf. Eng. Human-Computer Interaction/Int’l Workshop Design, Specification and Verification of Interactive Systems (EHCI/DSV-IS 04), LNCS 3425, Springer, 2004, pp. 363–382.</ref>
          <ref rid="R11" class="deo:BibliographicReference" id="99" page="8" column="2">11. L. Constantine and L. Lockwood, Software for Use: A Practical Guide to the Models and Methods of Usage- Centered Design, Addison-Wesley, 1999, pp. 194–195.</ref>
        </ref-list>
        <region class="unknown" id="100" page="8" column="2">For more information on this or any other computing topic, please visit our Digital Library at www.computer.org/publications/dlib.</region>
        <outsider class="DoCO:TextBox" type="page_nr" id="101" page="8" column="2">80</outsider>
        <outsider class="DoCO:TextBox" type="footer" id="102" page="8" column="2">IEEE SOFTWARE w w w . c o m p u t e r. o r g / s o f t w a r e</outsider>
        <outsider class="DoCO:TextBox" type="header" id="103" page="9" column="1">Reproduced with permission of the copyright owner. Further reproduction prohibited without permission.</outsider>
      </section>
    </body>
  </article>
</pdfx>
