<?xml version='1.0' encoding='UTF-8'?>
<pdfx xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://pdfx.cs.man.ac.uk/static/article-schema.xsd">
  <meta>
    <job>f8d66d037140c6d084358732aa05ef0dcd46c4411ca88e3ea9534b259d20573d</job>
    <base_name>62ph</base_name>
    <doi>http://dx.doi.org/10.1109/isre.1993.324837</doi>
    <warning>Original PDF was found to be an image-based/possible OCR document. Output quality may be degraded.</warning>
  </meta>
  <article>
    <front class="DoCO:FrontMatter">
      <title-group>
        <article-title class="DoCO:Title" id="1">On Defining Requirements for Interaction</article-title>
      </title-group>
      <contrib-group class="DoCO:ListOfAuthors">
        <contrib contrib-type="author">
          <name id="2">Michael Harrison</name>
        </contrib>
      </contrib-group>
      <region class="unknown" id="3">Human Computer Interaction Group, Department of Computer Science, Heslington, York YO1 5DD, U.K.</region>
      <abstract class="DoCO:Abstract" id="4">Requirements that involve the usability of systems can be properties of interactions rather than systems alone. W e demonstrate this proposition by means of four examples and then suggest how a notation like CSP m a y be used to provide a framework f o r considering different modelling approaches. Interaction requirements that relate t o multi-windowed systems, walk u p and use systems and dynamic systems such as power stations are considered. The paper shows how models provide different representations into which ad- vice from the different disciplines of human computer interaction may be applied. 1</abstract>
      <contrib-group class="DoCO:ListOfAuthors">
        <contrib contrib-type="author">
          <name id="9">Phil Barnard</name>
        </contrib>
      </contrib-group>
    </front>
    <body class="DoCO:BodyMatter">
      <section class="deo:Introduction">
        <h1 class="DoCO:SectionTitle" id="5" page="1" column="1">Introduction</h1>
      </section>
      <region class="DoCO:TextChunk" id="8" page="1" column="1">An important class of requirements relating to the specification and implementation of computer systems is concerned with usability. Within the general cate- gory of usability is contained more specific concerns such as ease of use, ease of learning, error visibility, error tolerance and error resistance. In order to inter- pret usability requirements some level of understanding of human cognitive processing is implied as well as a particular understanding of the task environment in which the system is to be used. Recent techniques developed to apply or validate usability requirements include: 0 informal techniques that extend traditional soft- ware walkthroughs by subjecting the system design to checklists that draw from understanding of where difficulties in cognition are likely to arise [<xref ref-type="bibr" rid="Rlo" id="6" class="deo:Reference">lo</xref>]. e techniques that treat the finished implementation as a microtheory about how the system will be used in which claims about use can be tested em- pirically in a context similar to actual use of the system [<xref ref-type="bibr" rid="R3" id="7" class="deo:Reference">3</xref>]; 0 using abstract models of interaction as a first step in the development of a formal specification of the system and applying interaction principles and structures that the user is likely to understand as properties or artefacts of the interaction model [4,51. All these approaches assume that usability can be expressed in terms of a representation of the system</region>
      <region class="DoCO:TextChunk" id="10" confidence="possible" page="1" column="2">MRC Applied Psychology Unit, 15 Chaucer Road, University of York, Cambridge CB2 2EF, U.K.</region>
      <region class="DoCO:TextChunk" id="17" page="1" column="2">under development. For example, the user’s cognitive perspective is discussed informally as a means of crit- icising the system representation. In this paper we argue that it is not sufficient to express requirements as properties of the computer system alone. Rather, an interdisciplinary framework is required in which properties of the interacti0n;taking account of all the agents to the interaction, should be used as a starting point for addressing cognitive and systems aspects of usability in design as well as other wider issues such as domain and environment. In order to make this case a number of examples of interaction requirements shall be considered. The examples are not intended to be exhaustive and do not relate exclusively to computer systems. The key point that we wish to make is that neither functional nor non functional requirements can be seen as only system constraints; there are also important classes of constraints that apply to the interaction of the system. Consider, for example: 1. a computerised game of tennis: for the game to be satisfactory there is a requirement that any class of user (novice, intermediate and expert) be able to sustain a mean rally length of between three and ten strokes. Above this level the game will be boring whilst below it will be frustrating. This interaction requirement will demand that the game designer performs an analysis in terms of the relevant disciplines: Fitt’s law (psychological science) may provide constraints concerning the detailed design of bat size, whilst the nature of the ball’s flight (associated with some description of the al- gorithm required to support it) may provide system constraints. In this particular example, the interaction requirement is most heavily influenced by the domain of application - that is games. 2. a windowing system: to prevent users inputting to an unselected window, a requirement of interaction would be that interactional disengagement should not occur, for example a user who is expecting to interact through one window when the system is expecting to receive input through another. The system must be designed to avoid the possibility that the user will assume that an unselected window is currently in the foreground by compensating for a possible lack of attention [ <xref ref-type="bibr" rid="R7" id="11" class="deo:Reference">7</xref>]. 3. a walk up and use system: interactions should be<marker type="page" number="2"/><marker type="column" number="1"/><marker type="block"/> designed so that enough information is provided by the system to support any level of expertise. It is clear that a novice user will require a great deal of explanation whereas this information could be a serious hindrance to the expert. 4. a dynamic system: we may require that interaction with the system is determinable by the user irrespective of other activites that are going on within the system. For example, consider a power station where a requirement of the system or some subsystem is that irrespective of what the gener- ator is doing, the operator’s sequence of actions will fulfil her intentions. In each of these examples implications of the re- of quirements power generators, relate to understandin properties o 7 human of characteristics attention and cognition, knowledge of learning and procedural motor skills. The requirements cannot be expressed only in terms of a specification of the system.</region>
      <outsider class="DoCO:TextBox" type="footer" id="13" page="1" column="2">0-8186-3120-1/92 53.00 0</outsider>
      <outsider class="DoCO:TextBox" type="page_nr" id="14" page="1" column="2">1992</outsider>
      <outsider class="DoCO:TextBox" type="footer" id="15" page="1" column="2">IEEE</outsider>
      <outsider class="DoCO:TextBox" type="footer" id="16" page="1" column="2">50</outsider>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="18" page="2" column="1">2 Adopting a means of representation</h1>
        <region class="DoCO:TextChunk" id="22" page="2" column="1">The main point of the paper is to exemplify the demands of interactional requirements. We wish to make a subsidiary point that a notation is required which will serve the purpose of expressing these requirements in such a way that the notation gives a framework in which the various necessary modelling perspectives may be slotted. With this in mind we provide initial specifications of the requirements in terms of CSP traces [SI. This is not intended as a definitive notation, rather we use the notation to in- dicate what might be required of such an interaction framework. We use CSP because our eventual goal would be to: e be precise about the events that make up an interaction; e use the representation and its underlying seman- tic model in order to apply analytic techniques. e represent a system to guide implementation. Interaction may be thought of in terms of partially ordered sets of events, where we may view an event as a perceivable action produced by one of the agents in the interaction. Events that are incomparable in terms of perceived the partial as indepen orderin 8 ent may of be one considered another. to Events have been that are ordered with respect to each other may be considered to have a mutually causal relationship. These orderings of events may be expressed in terms of CSP. In addition to an understanding of event relationships it will also be necessary to connect the events to system, cognitive or other models. The event formulation itself is merely a vehicle that can be used to structure and integrate the analysis that must be provided from the other modelling approaches. As interaction requirements are formulated, after analysis in terms of the component modelling a p proaches, they can be used as constraints on the desi of the computer system. It may be required that t e <marker type="column" number="2"/><marker type="block"/> trace properties are satisfied by the computer system design adopted. A formal approach provides the PO- tential for proving this satisfaction.</region>
        <region class="unknown" id="20" page="2" column="1">?</region>
        <region class="DoCO:FigureBox" id="Fx21">
          <image class="DoCO:Figure" src="62ph.page_002.image_02.png" thmb="62ph.page_002.image_02-thumb.png"/>
        </region>
        <region class="unknown" id="23" page="2" column="2">3</region>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="24" page="2" column="2">Complexity Interaction</h1>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="25" confidence="possible" page="2" column="2">of</h2>
          <region class="DoCO:TextChunk" id="26" page="2" column="2">CSP can represent the tennis p m e in terms of a system of three processes representing two players and a ball. It may be assumed that the ball recognises two events: strikes that originate from each player ( s t r i k e l , s t r i k e z ) . In describing the processes thus we have conveniently ignored components of the interaction that are not required in the formulation of this interaction requirement, for example strokes that miss are assumed here to be terminating conditions. The appropriate choice of events and processes is a key component of the initial elicitation phase of the design process. The rules of the game require that any all t rally and all (we t’s shall prefixes call it It t 1 strike1 satisfies - the t 4 property: strike21 5 for 1 where t 1 strike is the count of events that appear in the rally t. In other words a rally is an alternation of strikes from the two players (it is no good for one player to hit the ball twice in a row). The interaction requirement can be expressed as a constraint on traces that satisfy the rally property: that for any rally t , it is the case that 3 5 t 1 strike1 5 10 or 3 5 t 1 strike2 5 10. Although derived from some understanding of the game and the capabilities of players and their frustration tolerance, this requirement tells us nothin about the capabilities of the individual agents. The &amp;ascription allows the possibility of mapping to the interdisciplinarymodelling techniques. For example: e The above trace specifications can be used a s a framework into which the various modelling approaches can be plugged. A cognitive modellin analysis or assessment of perm tual motor ski1 ci requirements will be required &amp;hough it should be said that in order to do this we need a device model to define the mapping between device inputs (in terms of manipulation and movement of the bat) and the events of the trace. This map- pin and the trace specification can be used to an$se what skill or cognitive overheads are in- volved. In t e r m of a perceptual motor skill, the rally requires an alternation where user behaviour tracking and prediction, followed a movement time to an estimated position Law). In cases more determine or bound the forms of cognitive uncertainty that must be resolved within the mental representation that the user must build to govern task execution. Item and ordering uncertainty for relevant entities in the task specification are among factors we believe to be central (e.g., see</region>
          <region class="unknown" id="27" page="2" column="2">C 1 1 . e</region>
          <region class="DoCO:TextChunk" id="28" confidence="possible" page="2" column="2">The events can be used as a basis for understanding or implicitly defining the state transitions that the ball must undergo. These events in themselves tell us nothing about the state of the device; it is assumed for example that when the ball is out</region>
          <outsider class="DoCO:TextBox" type="footer" id="29" page="2" column="2">51</outsider>
          <region class="DoCO:TextChunk" id="30" page="3" column="1">of play no more events can be engaged in with- out specifying what out of play might mean. The definition of traces, constrained by interaction requirements, therefore triggers an understanding of the behaviour of the device erhaps by m a p ping events to state transitions f91. Rallys may be constrained by further interaction requirements. So for example, two experts may have consistently high rally lengths and as a result the player who achieves the final strike of a rally will alter- nate. Were one player consistently to outperform the other, then that player would consistently achieve the last strike. The basic event based notation provides a conduit between the modelling techniques for assess- ing the capabilities of the agents to the interaction and the modelling and specification techniques that are required to understand and implement the s y s tem. It should be noted however that CSP will only give a limited ability to describe the sorts of interaction requirement that are likely to be encountered, for example: if we take an aircraft flight deck it is clear that many parallel tasks are being performed. We can associate tasks with restricted subsequences of the traces of the system, however it will not be possible to describe the multiple causalities in terms of a simple ordering. We shall therefore define interactions as partially ordered sets based on a causal relationship.</region>
          <region class="unknown" id="31" page="3" column="1">4</region>
        </section>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="32" page="3" column="1">Reciprocal Focus</h1>
        <region class="DoCO:TextChunk" id="39" page="3" column="1">Our second example, the unselected window problem, relates to the mutual focus of requirements for both system and user. Consider the following variant of the unselected window problem. A user is editing a document with an electronic mail window also open but inactive. The user goes off to lunch and on return attempts to reply to some electronic mail that has come in over lunch. Their initial typed input reply goes into the document they were editing - a classic unselected window error. An interaction requirement is required over traces that will support the designer’s attempt to find a design solution to this problem of reciprocal focus. A property of event traces is required that presumes more details of events than has so far been discussed. We may say that a task is implemented in a system when a sequence of events carries out the goal of the task. Following Norman we see the system a s a control loop [ <xref ref-type="bibr" rid="R8" id="33" class="deo:Reference">8</xref>]. An interaction is an interleaving of formulations and evaluations. The user is considered to be the agent who carries out the operations of formulation and evaluation. On the other hand, the computer system has receptive and expressive functions. The receptive function accepts the formulation and acts upon it. Alternatively, it may be said that a sequence of expressive and receptive events implement a task. Here the terms expressive and receptive merely indi- cate the direction of the interaction when the events synchronise with other events. Reciprocal focus will be lost when there is interactional disengagement which is rather like deadlock and can be considered i n Nor- man’s terms to be the situation that exists when a system expression is incorrectly used to produce the<marker type="column" number="2"/><marker type="block"/> next formulation. It is important to realise that by introducing notions of direction and control loop we are not making any assumptions about cognitive or computer behaviour. Describing event sequences in this way again provides a synthesising description that may be further explained in terms of the individual modelling techniques. In this sense the notion of task is intended to be neutral in that it does not relate to a particular component of the system. In the case of “unselected windows” it is tempt- ing to presume that what is required is that events are associated with agents, and that interactions occur when processes are ready to engage in the same agent’s events. In a window manager, however, it is usually the case that events are anonymous in the sense that ii, is impossible to detect whether an event is associated with one window rather than another. What is required is that both the receptive party and the expressive party make appropriate transitions to new windows in a synchronised way. Hence if T is defined t i l be the set of transition events U a E A g e n t { t e a , t r , where Agent is the set of agents corresponding to windows in order to prevent interactional disengagement it is necessary to ensure that for any trace of such a sirstem t , t 1 T the trace restricted only to the transition events should consist of pairs of transition events ( I’,lfal . . .tan?,, . . .) where t and ? i are related so that iI t is expressive then 7 is receptive and vice versa. How does this specification over traces map to system and cognitive modelling? A system modeller would be faced with the problem of user indetermi- nacy. A user modeller would highlight the attentional problems of signalling window activity. This formulation of the interaction requirement provides a means of bringing these together by defining the additional events associated with agent transitions. The cognitive modeller may note that there is a high probability of‘interactional disengagement when either: 0 on resumption after a pause the user’s focus changes so that she is no longer ready to engage in the interaction that the system is expecting; 0 discontinuity of input, as occurs for example when the mouse is dislodged, means that the user’s focus is clear but now the wrong agent is presented as the foreground activity by the system. Two solutions suggest themselves. the first possibility is to block the functionality in a situation where there is potential of interactional disengagement. In this design the user must explicitly select the task stream that is required before any further interaction is possible. the second possibility is to reinforce the expres sion of the task stream selected if there is potential for interactional disengagment. This might be achieved by flashing the appropriate window for example. In both cases the design stress is on choosing ways of pushing the user into re-evaluating the expression<marker type="page" number="4"/><marker type="column" number="1"/><marker type="block"/> before choosing the next formulation, hence forcing a transitional event if necessary.</region>
        <region class="DoCO:FigureBox" id="Fx35">
          <image class="DoCO:Figure" src="62ph.page_003.image_03.png" thmb="62ph.page_003.image_03-thumb.png"/>
        </region>
        <region class="unknown" id="36" page="3" column="2">}</region>
        <outsider class="DoCO:TextBox" type="footer" id="38" page="3" column="2">52</outsider>
        <region class="unknown" id="40" page="4" column="1">5</region>
        <section class="DoCO:Section">
          <h2 class="DoCO:SectionTitle" id="41" confidence="possible" page="4" column="1">Matching Interface Expertise</h2>
          <region class="unknown" id="42" page="4" column="1">to</region>
          <region class="unknown" id="43" page="4" column="1">na-</region>
          <region class="DoCO:TextChunk" id="46" page="4" column="1">Our third example, walk up and use systems are designed to be used by a wide spectrum of people with different educational backgrounds and varieties of ex- perience of such equipment. A suitable system should provide enough information so that a complete novice can use the system but at the same time provide an interface that will not obstruct an expert user by re- quiring more interaction than is strictly necessary. Ex- amples of systems that fall on one side or other of the expertise spectrum are some menu based systems that require hierarchies of interaction that are supportive to novices but obstruct experts, and command based systems that provide considerable command optional- ity for experts but are inscrutable to novices. In order to solve the expert novice conflict a conjoint requirement is required that relates different aspects of the design of the total system. Again we begin with a system and traces of events that provide a record of interaction with the system. We note that the expressive event triggers perceivable changes to the system and that these system attributes are interpreted by the user. In addition to this model of receptive and expressive events, it is assumed that the system is designed to implement a set of intentions i E I. A trace t of the system can be said to fulfd an intention i I- t if the state of the system that was trig- gered by t satisfies the predicate specified by i . When describing the properties of a walk up and use system we are concerned with whether the system provides enough the sense information that further so actions that an are incomplete necessary trace in or 6 er in to fulfil the intention) can be completed. Here t’ &lt; t to specify that t‘ U = t for some trace U where concatenates two traces. A system is walk up and use relative to intention iEIif the current interaction is e such that t’ - e 5 t such that i I- t where e is an expressive event; trace the system ending expression in e can be that interprete is tri P by ered a suitable by the range of users. then a receptive event r is generated that continues to be an appropriate implementation for i. In other words the interpretation of e produces an r such that t n e n r 5 t l where i t- t l . This formulation represents a requirement on the system that it is sufficient to enable a typical user to generate a sufficient response, that is the next formulation should either continue to implement the task or should recover from some error situation. We might wish to be more specific that this and discuss the ture of the instructional part of the expression. S u p port for this requirement might be produced by exper- iment. It should be noted that this is not a specific p r o p erty of the user or of the system. The property is an <marker type="column" number="2"/><marker type="block"/> invariant that relates the expression to the formulation. The attributes of the expressive and receptive functions of the system should be designed so that for a large enough class of user agents this property should hold. Further analysis in terms of models of typical users or a model of the computer system would be required, driven by this invariant. The interaction requirement again provides an integrating mechanism for linking the modelling of system and users.</region>
          <region class="DoCO:FigureBox" id="Fx45">
            <image class="DoCO:Figure" src="62ph.page_004.image_04.png" thmb="62ph.page_004.image_04-thumb.png"/>
          </region>
          <region class="unknown" id="47" page="4" column="2">6</region>
        </section>
      </section>
      <section class="DoCO:Section">
        <h1 class="DoCO:SectionTitle" id="48" page="4" column="2">Dynamic Systems</h1>
        <region class="DoCO:TextChunk" id="52" page="4" column="2">Interactional requirements may be extended further to include multiple agents in a cleaner way. The term agent may be used to describe different potentially autonomous perspectives, for example: a different workstations each involving a user; a different windows within a single workstation each supporting a thread of activity, a different model from the one already expressed; 0 a collection of processes, some of which are users, while others are systems. An example of such a system would be a power plant. These different autonomous perspectives shall be referred to generically by a set of agents (Y E Agent. The term agent is used because it captures the idea of an independent component of the interaction that is not controlled centrally. The model referred to earlier may be extended to incorporate the notion that an agent is associated with an event: t = ((e1,(Y+ * * * 3 (erA,an)&gt;. It wi 1 often be necessary to consider a trace that is restricted to a particular agent: a t 1 a restricts the events to those only that relate to the agent cy. a t 1 A restricts the events to those that relate only to agents c t E A where A E Agent. Whether the effect of interaction by an individual user is deterministic depends on what else is going on at the same time within the system. An agent’s activity, in relation to an intention, will be deterministic if the activity can be carried out irrespective of what else is going on in the system as a whole. In the context of some intention we may require that the user’s implementation of the intention is unaffected by what else is going on. This might include the fact for in- stance that other users are trying to perform another implementation of the same intention. Before pursuing this notion of intention dependence in more detail it is possible to define properties that are agent centred in the sense that they refer to the possibility that the user can carry out activities with- out concem about what is going on in the rest of the system. An interaction i s agent deterministic, given some initial interaction U and an agent a E Agent, if for all traces t of the system after it has engaged in U <marker type="page" number="5"/><marker type="column" number="1"/><marker type="block"/> This definition of agent determinism captures the idea that an agent’s use of the system is not affected by the describe activities an opaque of other system users as of one the system. which is We agent mi 8 ht e- terministic for all agents in the system. This property is almost achieved by the interactions of multi- access systems such as UNIX (if no files are shared and electronic mail is not used). Our concern here is to find properties of systems involving multiple tasks. In practice interactive systems in which there is some co-operation are of more interest. The issue here is what can be said when some mutual interference is possible and indeed essential. In considering whether a trace effectively imple ments a task it is necessary to consider the potential implementation in the context of all the other traces that may have occurred within the system. Hence it is necessary to define a notion of embeddedness where an implementing trace is contained within a larger trace. Given any trace t , and a trace t , engaged by agent cy we say that t &gt;&gt; t , if t cr = t , . The importance of this property of embeddedness is that it is possible to talk about the effects of an agent’s use of the system in the context of all the other users of the system. This property requires that a user can perform a task irrespective of whatever other activity is going on in the system.</region>
        <region class="unknown" id="50" page="4" column="2">i t - U - t e i l - U - ( t a).</region>
        <outsider class="DoCO:TextBox" type="footer" id="51" page="4" column="2">53</outsider>
      </section>
      <section class="deo:Conclusion">
        <h1 class="DoCO:SectionTitle" id="53" page="5" column="1">7 Conclusions</h1>
        <region class="DoCO:TextChunk" id="54" page="5" column="1">This paper generates some ground work. It demonstrates that requirements such as the walk up and use requirement require more than a view of system behaviour. The simple trace model demonstrates how we might describe these interaction requirements as “invariants” over system and user models. The examples demonstrate that we may need to examine more closely user and system in order to understand more clearly requirements. The trace model provides a framework upon which we can hang these more detailed analyses of the components to the interaction. Finally, we have shown how requirements of interaction involving only two parties is unduly limiting and we extend the perspective to multi-agent systems.</region>
      </section>
      <section class="DoCO:Bibliography">
        <h1 class="DoCO:SectionTitle" id="55" page="5" column="1">References</h1>
        <ref-list class="DoCO:BiblioGraphicReferenceList">
          <ref rid="R1" class="deo:BibliographicReference" id="56" page="5" column="1">[I] Barnard, P. J. Cognitive Resources and the Learn- in of Human-Computer Dialogues. In J. M. Car- rob (Ed.) Interfacing Thought: Cognitive Aspects of Human-Computer Interaction. Cambridge University Press: Cambridge UK, pp. 112-158. 1987.</ref>
          <ref rid="R2" class="deo:BibliographicReference" id="57" page="5" column="1">[2] Barnard, P. J., Wilson, M. and MacLean, A. Ap- proximate modelling of cognitive activity with an expert system: A theory based strategy for devel- oping an interactive design tool. The Computer Journal. vol 31, pp. 445-456. 1988.</ref>
          <ref rid="R3" class="deo:BibliographicReference" id="58" page="5" column="1">[3] Carroll, J. M., Kellog, W. A. and Rosson, M. B. The task-artifact cycle. In J . M. Carroll (Ed) Designing Interaction: Psychology at the Human- Computer Interface, pp. 74102. Cambridge University Press, 1991.</ref>
          <ref rid="R4" class="deo:BibliographicReference" id="60" page="5" column="2">[4] A. J . Dix. Formal Methods for Interactive Systems. Academic Press, 1991.</ref>
          <ref rid="R5" class="deo:BibliographicReference" id="61" page="5" column="2">[5] M. D. Harrison Modelling properties of the interactive behaviour of graphics systems In D. A. Duce and M. D. Harrison, editors, Formal Methods in Computer Graphics, in press.</ref>
          <ref rid="R6" class="deo:BibliographicReference" id="62" page="5" column="2">[6] Hoare, C. A. R. Communicating Sequential Pro- cesses. Prentice Hall International. 1985.</ref>
          <ref rid="R7" class="deo:BibliographicReference" id="63" page="5" column="2">[7] Lee, Wai On The effects of skills development and feedback on action slips. In Monk, Diaper and Harrison, People and Computers VI. Cambridge University Press, in press.</ref>
          <ref rid="R8" class="deo:BibliographicReference" id="64" page="5" column="2">[8] D.A. Norman. Some observations on mental models. In D. Gentner and A. Stevens, editors, Mental Models, pages 7-14. Erlbaum, 1983.</ref>
          <ref rid="R9" class="deo:BibliographicReference" id="65" page="5" column="2">[9] Sufrin, B. and He., J. Specification, refinement and analysis of interactive processes. In M. D. Harrison and H. W. Thimbleby, editors, Formal methods in Human Computer Interaction, pages 153-200. Cambridge University Press, 1990.</ref>
          <ref rid="R10" class="deo:BibliographicReference" id="66" page="5" column="2">[lo] Wharton, C., Bradford, J., Jeffries, R. and Franzke, M. Applying cognitive walkthroughs to more complex user interfaces: experiences, issues and recommendations. In Bauersfield, Bennett and Lynch, editors, CHI’92 Conference Proceed- ings, pages 381-388. Addison Wesley. 1992.</ref>
        </ref-list>
        <region class="DoCO:FigureBox" id="Fx59">
          <image class="DoCO:Figure" src="62ph.page_005.image_05.png" thmb="62ph.page_005.image_05-thumb.png"/>
        </region>
        <outsider class="DoCO:TextBox" type="footer" id="67" page="5" column="2">54</outsider>
      </section>
    </body>
  </article>
</pdfx>
